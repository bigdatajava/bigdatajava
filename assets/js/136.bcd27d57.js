(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{479:function(s,t,e){"use strict";e.r(t);var a=e(1),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("看了大学一位同学博客,写了内容大致就是对于一个类中出现了该类的集合,通过Lombok的@Data注解生成class文件,当创建两个这个类的对象并且互相之间引用的时候,就出现了StackOverflowError异常,即栈溢出,或者叫超出栈深度."),t("br"),s._v("\n在Java虚拟机内存区域分为两种一种是线程共享区域,另一种是线程私有区域,而虚拟机栈就处在线程私有区域中,虚拟机栈描述的是Java方法执行的内存模型:每个方法被执行的时候都会同时创建一个栈帧，栈帧用于存储局部变量表，操作数栈，动态链接，方法返回地址等等。"),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190909090206295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),s._v(" "),t("p",[s._v("Java 虚拟机规范中，对这个区域规定了两种异常情况：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。\n如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("下面给出个内存区域内存溢出的简单测试方法，\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190909090258432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" 回到文章讨论的问题，@Data注解在什么情况下可能导致StackOverflowError情况呢？先看下同学给出的示例代码，\n")])])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("@Data\npublic class Project {\n    private Long id;\n    private String projectName;\n    private List<Project> projects;\n\n    public static void main(String[] args) {\n        Project project1 = new Project();\n        Project project2 = new Project();\n        project1.setProjects(Arrays.asList(project2));\n        project2.setProjects(Arrays.asList(project1));\n        System.out.println(project1.hashCode());\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("从代码可以看出project1引用了project2，project2引用了project1，同学给出的解释如下：“ @Data 注解不仅帮我们实现了生成了getter/setter同时还重写了equals(Object other) 和 hashCode()方法， Lombok 会将 Project 类中的 List projects 当做是 hashCode 计算的一部分（同理，equals,toString 也会存在同样的问题），而如果我的项目中出现循环引用，这就会导致死循环，最终就会抛出 StackOverFlowError。”，\n难道相互引用就一定出现死循环吗？好吧，来看看反编译下@Data到底干啥了，代码反编译后确实发现hashCode（）方法被Lombok自己生成了，代码如下，")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public int hashCode() {\n    int PRIME = true;\n    int result = 1;\n    Object $id = this.getId();\n    int result = result * 59 + ($id == null ? 43 : $id.hashCode());\n    Object $projectName = this.getProjectName();\n    result = result * 59 + ($projectName == null ? 43 : $projectName.hashCode());\n    Object $projects = this.getProjects();\n    result = result * 59 + ($projects == null ? 43 : $projects.hashCode());\n    return result;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("那怎么就死循环了呢，其实问题在于projects是一个ArrayList集合,而ArrayList对hashCode() 的计算会把每一个元素拿出来调用元素的hashCode()求和,但是projects里面的元素是 project,project里面又有projects,因此出现无限递归调用,又是单线程中调用方法,所以就抛出StackOverflowError，在大多数场景中我们使用Lombok的@Data注解目的是为了生成getter/setter，不需要生成hashCode（）和equals（）方法，即使业务需要判断两个对象是否相等，逻辑基本也不会是lombok生成的那种，所以建议使用 @Getter 和 @Setter 替换 @Data注解")]),s._v(" "),t("p",[s._v("ArrayList的hashCode()代码如下:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public static int hashCode(Object a[]) {\n    if (a == null)\n        return 0;\n    int result = 1;\n    for (Object element : a)\n        result = 31 * result + (element == null ? 0 : element.hashCode());\n    return result;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("————————————————")]),s._v(" "),t("p",[s._v("原文链接：https://blog.csdn.net/u013202238/article/details/80370868")])])}),[],!1,null,null,null);t.default=r.exports}}]);