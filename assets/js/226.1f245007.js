(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{569:function(n,s,a){"use strict";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("U2FsdGVkX193qLUs1fpb9m6NiHKZYUPlJY7oOo6SArn745xyZ+EF8YmU3ahCpjNb\ni46negdFlb/IVS/l29hr+XtdahrE1UTYA58cUW19ieRM/Q+fKwcL9YOAmfEpkgq4\nTA==\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),s("p",[n._v("Spring整合MyBatis的原理也是一道非常高频的面试题， 下面我们一起来记录一下其中的原理，  主要是Spring是怎么管理MyBatis中的Mapper动态代理的。")]),n._v(" "),s("h2",{attrs:{id:"mybatis集成spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis集成spring"}},[n._v("#")]),n._v(" Mybatis集成Spring:")]),n._v(" "),s("h3",{attrs:{id:"_1-mybatis集成spring的适配器源码下载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mybatis集成spring的适配器源码下载"}},[n._v("#")]),n._v(" 1.Mybatis集成Spring的适配器源码下载：")]),n._v(" "),s("p",[n._v("1.https://github.com/mybatis/spring")]),n._v(" "),s("p",[n._v("下载时注意版本：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220618102247031.png",alt:"image-20220618102247031"}})]),n._v(" "),s("p",[n._v("2.为了在Spring源码中能够看到MyBatis的源码，需要将Mybatis的源码和MyBatis-Spring的源码 设置标识名称和添加安装源码到本地仓库的插件：")]),n._v(" "),s("p",[n._v("​")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220618102259124.png",alt:"image-20220618102259124"}})]),n._v(" "),s("p",[n._v("​")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220618102307996.png",alt:"image-20220618102307996"}})]),n._v(" "),s("p",[n._v("安装源码到本地仓库的插件：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("<plugin>\n  <artifactId>maven-source-plugin</artifactId>\n  <version>3.0.1</version>\n  <configuration>\n    <attach>true</attach>\n  </configuration>\n  <executions>\n    <execution>\n      <phase>compile</phase>\n      <goals>\n        <goal>jar</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("h3",{attrs:{id:"_2-spring集成mybatis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring集成mybatis"}},[n._v("#")]),n._v(" 2.Spring集成MyBatis")]),n._v(" "),s("p",[n._v("1.在Spring源码中添加Mybatis集成测试模块：")]),n._v(" "),s("p",[n._v("​")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220618102345478.png",alt:"image-20220618102345478"}})]),n._v(" "),s("p",[n._v("2.添加gradle依赖：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('repositories {\n    mavenLocal()  //优先从本地仓库中获取\n    mavenCentral()\n}\n\n\ndependencies {\n    testCompile group: \'junit\', name: \'junit\', version: \'4.12\'\n    compile("mysql:mysql-connector-java:5.1.46")\n    compile("com.alibaba:druid:1.1.8")\n    compile("org.mybatis:mybatis-spring:2.0.3-xsls")\n    compile("org.mybatis:mybatis:3.5.3-xsls")\n    compile("org.projectlombok:lombok:1.18.4")\n    compile("com.github.pagehelper:pagehelper:4.1.6")\n    optional(project(":spring-context"))\n    compile(project(":spring-jdbc"))\n    compile("ch.qos.logback:logback-core:1.1.2")\n    compile("ch.qos.logback:logback-classic:1.1.2")\n    compile("org.slf4j:slf4j-api:1.7.7")\n    optional(project(":spring-aop"))\n    compile(project(":spring-jdbc")) \n    compile("org.mybatis.caches:mybatis-ehcache:1.1.0")\n    compile("net.sf.ehcache:ehcache-core:2.6.11")\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220618102420547.png",alt:"image-20220618102420547"}})]),n._v(" "),s("p",[s("strong",[n._v("保证的已经将本地仓库配置在上图任意settings中， gradle才会去maven本地仓库去找")])]),n._v(" "),s("p",[n._v("3.添加mybatis的测试代码：")]),n._v(" "),s("p",[n._v("请参考提供的项目， 这里就不一一放代码了...  放上配置类：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@EnableTransactionManagement\n@Configuration\n@MapperScan(basePackages = {"com.tuling.mapper"})\n@ComponentScan(basePackages = {"com.tuling"})\n@Repository\npublic class MyBatisConfig {    // =====>   spring.xml\n\n\n   /**\n    * <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">  </bean>\n    *\n    * <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">\n    *     datasource\n    *     mapper文件的路径\n    *     别名\n    *\n    *   </bean>\n    *\n    *   <mapper-scan basePackage=""/>\n    * @return\n    * @throws IOException\n    */\n   @Bean    // =====  >    <bean  class="org.mybatis.spring.SqlSessionFactoryBean">\n   public SqlSessionFactoryBean sqlSessionFactory( ) throws IOException {\n      SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n      factoryBean.setDataSource(dataSource());\n      // 设置 MyBatis 配置文件路径\n      factoryBean.setConfigLocation(new ClassPathResource("mybatis/mybatis-config.xml"));\n      // 设置 SQL 映射文件路径\n      factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:mybatis/mapper/*.xml"));\n      factoryBean.setTypeAliases(User.class);\n\n      return factoryBean;\n\n\n   }\n\n    public DataSource dataSource() {\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setUsername("root");\n        dataSource.setPassword("123456");\n        dataSource.setDriverClassName("com.mysql.jdbc.Driver");\n        dataSource.setUrl("jdbc:mysql://localhost:3306/mybatis_example");\n        return dataSource;\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("h2",{attrs:{id:"_1-sqlsessionfactorybean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-sqlsessionfactorybean"}},[n._v("#")]),n._v(" 1.SqlSessionFactoryBean")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class SqlSessionFactoryBean implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("实现FactoryBean接口的getObject方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n   * \n   * 将SqlSessionFactory对象注入spring容器\n   * {@inheritDoc}\n   */\n  @Override\n  public SqlSessionFactory getObject() throws Exception {\n    if (this.sqlSessionFactory == null) {\n      afterPropertiesSet();\n    }\n\n    return this.sqlSessionFactory;\n  }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("SqlSessionFactoryBean实现InitializingBean接口，需要实现其afterPropertiesSet()：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * {@inheritDoc}\n */\n/**\n * 方法实现说明:我们自己配置文件中配置了SqlSessionFactoryBean,我们发现配置了 该类实现了FactoryBean接口, 也实现了bean的生命周期回调接口InitializingBean\n * 首先我们会调用生命周期的回调afterPropertiesSet() 就是我们的SqlSessionFactorybean已经调用了构造方法，已经调用了 我们的\n *\n * @author:xsls\n * @return:\n * @exception:\n * @date:2019/8/23 19:33\n */\n@Override\npublic void afterPropertiesSet() throws Exception {\n  notNull(dataSource, \"Property 'dataSource' is required\");\n  notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n  state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null),\n      \"Property 'configuration' and 'configLocation' can not specified with together\");\n\n  /**\n   * 通过sqlSessionFactoryBuilder来构建我们的sqlSessionFactory\n   */\n  this.sqlSessionFactory = buildSqlSessionFactory();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("核心是buildSqlSessionFactory：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * 方法实现说明:构建我们的sqlSessionFactory的实例\n *\n * @author:xsls\n * @return:\n * @exception:\n * @date:2019/8/23 20:06\n */\nprotected SqlSessionFactory buildSqlSessionFactory() throws Exception {\n\n  // 声明一个Configuration对象用于保存mybatis的所有的配置信息\n  final Configuration targetConfiguration;\n\n  XMLConfigBuilder xmlConfigBuilder = null;\n  // 初始化 configuration 对象，和设置其 `configuration.variables` 属性\n  /**\n   * 判断当前的SqlSessionFactoryBean是否在配置@Bean的时候 factoryBean.setConfiguration();\n   *\n   */\n  if (this.configuration != null) {\n    /**\n     * 把配置的SqlSessionFactoryBean配置的configuration 赋值给targetConfiguration\n     */\n    targetConfiguration = this.configuration;\n    if (targetConfiguration.getVariables() == null) {\n      targetConfiguration.setVariables(this.configurationProperties);\n    } else if (this.configurationProperties != null) {\n      targetConfiguration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n  /**\n   * 对configLocation进行非空判断，由于我们配置了SqlSessionFactoryBean的configLocation属性设置\n   *\n   * @Bean public SqlSessionFactoryBean sqlSessionFactory( ) throws IOException { SqlSessionFactoryBean factoryBean\n   *       =new SqlSessionFactoryBean(); factoryBean.setDataSource(dataSource()); factoryBean.setConfigLocation(new\n   *       ClassPathResource("mybatis/mybatis-config.xml")); factoryBean.setMapperLocations(new\n   *       PathMatchingResourcePatternResolver().getResources("classpath:mybatis/mapper/*.xml")); return factoryBean;\n   *       }\n   */\n\n  else if (this.configLocation != null) {\n    /**\n     * 创建我们xml配置构建器对象,对mybatis/mybatis-config.xml配置文件进行解析 在这里以及把我们的mybaits-config.xml解析出要给document对象\n     */\n    xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);\n    /**\n     * 因为我们在创建XMLConfigBuilder的时候已经把我们的Configuration对象创建出来了\n     */\n    targetConfiguration = xmlConfigBuilder.getConfiguration();\n  } else {\n    LOGGER.debug(\n        () -> "Property \'configuration\' or \'configLocation\' not specified, using default MyBatis Configuration");\n    targetConfiguration = new Configuration();\n    /**\n     * 判断configurationProperties不为空,那么就调用targetConfiguration.set方法 把configurationProperties注入到Configuration对象中\n     */\n    Optional.ofNullable(this.configurationProperties).ifPresent(targetConfiguration::setVariables);\n  }\n\n  /**\n   * objectFactory不为空,那么就调用targetConfiguration.set方法 把objectFactory注入到Configuration对象中\n   */\n  Optional.ofNullable(this.objectFactory).ifPresent(targetConfiguration::setObjectFactory);\n  /**\n   * objectWrapperFactory不为空,那么就调用targetConfiguration.set方法把 ObjectWrapperFactory注入到Configuration对象中\n   */\n  Optional.ofNullable(this.objectWrapperFactory).ifPresent(targetConfiguration::setObjectWrapperFactory);\n\n  /**\n   * vfs不为空,那么就调用targetConfiguration.set方法把 vfs注入到Configuration对象中\n   */\n  Optional.ofNullable(this.vfs).ifPresent(targetConfiguration::setVfsImpl);\n\n  /**\n   * typeAliasesPackage配置情况分为二种 1) 在mybaits-config.xml中配置了(mybatis的方式) <typeAliases>\n   * <package name="com.tuling.entity"></package> </typeAliases>\n   * 2)在配置我们的SqlSessionFactoryBean的时候配置了(Spring整合mybatis的方式)\n   *\n   * @Bean public SqlSessionFactoryBean sqlSessionFactory( ) throws IOException { SqlSessionFactoryBean factoryBean =\n   *       new SqlSessionFactoryBean(); factoryBean.setDataSource(dataSource()); // 设置 MyBatis 配置文件路径\n   *       factoryBean.setConfigLocation(new ClassPathResource("mybatis/mybatis-config.xml")); // 设置 SQL 映射文件路径\n   *       factoryBean.setMapperLocations(new\n   *       PathMatchingResourcePatternResolver().getResources("classpath:mybatis/mapper/*.xml"));\n   *\n   *       factoryBean.setTypeAliasesPackage("com.tuling.entity"); return factoryBean; }\n   *\n   *\n   *       那么在Dept 就不需要写成com.tuling.entity了 <select id="findOne" parameterType="Integer" resultType="Dept"> select *\n   *       from dept where id = #{id} </select>\n   *\n   *       若我们在配置SqlSessionFactoryBean接口的时候配置了typeAliasesPackage 那么\n   *       这里才不会为空,同理,我们可以通过SqlSessionFactoryBean的typeAliasesSuperType 来控制哪些类的别名不支持\n   */\n  if (hasLength(this.typeAliasesPackage)) {\n\n    /**\n     * 第一步:扫描我们typeAliasesPackage 包路径下的所有的实体类的class类型 第二步:进行过滤,然后注册到Configuration的别名映射器中\n     */\n    scanClasses(this.typeAliasesPackage, this.typeAliasesSuperType).stream()\n        .filter(clazz -> !clazz.isAnonymousClass()).filter(clazz -> !clazz.isInterface())\n        .filter(clazz -> !clazz.isMemberClass()).forEach(targetConfiguration.getTypeAliasRegistry()::registerAlias);\n  }\n\n  /**\n   * 判断我们SqlSessionFactory是否配置了typeAliases(class类型) 一般typeAliasesPackage配置好了 就没有必要配置typeAliases\n   * 注册到Configuration的别名映射器中\n   */\n  if (!isEmpty(this.typeAliases)) {\n    Stream.of(this.typeAliases).forEach(typeAlias -> {\n      targetConfiguration.getTypeAliasRegistry().registerAlias(typeAlias);\n      LOGGER.debug(() -> "Registered type alias: \'" + typeAlias + "\'");\n    });\n  }\n\n  /**\n   * 把我们自定义的插件注册到我们的mybatis的配置类上 系统默认的插件 Executor (update, query, flushStatements, commit, rollback, getTransaction,\n   * close, isClosed) ParameterHandler (getParameterObject, setParameters) ResultSetHandler (handleResultSets,\n   * handleOutputParameters) StatementHandler (prepare, parameterize, batch, update, query)\n   */\n  if (!isEmpty(this.plugins)) {\n    Stream.of(this.plugins).forEach(plugin -> {\n      targetConfiguration.addInterceptor(plugin);\n      LOGGER.debug(() -> "Registered plugin: \'" + plugin + "\'");\n    });\n  }\n\n  /**\n   * 扫描我们自定义的类型处理器(用来处理我们的java类型和数据库类型的转化) 并且注册到我们的 targetConfiguration(批量注册)\n   */\n  if (hasLength(this.typeHandlersPackage)) {\n    scanClasses(this.typeHandlersPackage, TypeHandler.class).stream().filter(clazz -> !clazz.isAnonymousClass())\n        .filter(clazz -> !clazz.isInterface()).filter(clazz -> !Modifier.isAbstract(clazz.getModifiers()))\n        .forEach(targetConfiguration.getTypeHandlerRegistry()::register);\n  }\n\n  /**\n   * 通过配置<TypeHandlers></TypeHandlers>的形式来注册我们的类型处理器对象\n   */\n  if (!isEmpty(this.typeHandlers)) {\n    Stream.of(this.typeHandlers).forEach(typeHandler -> {\n      targetConfiguration.getTypeHandlerRegistry().register(typeHandler);\n      LOGGER.debug(() -> "Registered type handler: \'" + typeHandler + "\'");\n    });\n  }\n\n  /**\n   * MyBatis 从 3.2 开始支持可插拔的脚本语言， 因此你可以在插入一种语言的驱动（language driver）之后来写基于这种语言的动态 SQL 查询\n   * 具体用法:博客地址:https://www.jianshu.com/p/5c368c621b89\n   */\n  if (!isEmpty(this.scriptingLanguageDrivers)) {\n    Stream.of(this.scriptingLanguageDrivers).forEach(languageDriver -> {\n      targetConfiguration.getLanguageRegistry().register(languageDriver);\n      LOGGER.debug(() -> "Registered scripting language driver: \'" + languageDriver + "\'");\n    });\n  }\n  Optional.ofNullable(this.defaultScriptingLanguageDriver)\n      .ifPresent(targetConfiguration::setDefaultScriptingLanguage);\n\n  /**\n   * 设置数据库厂商\n   */\n  if (this.databaseIdProvider != null) {// fix #64 set databaseId before parse mapper xmls\n    try {\n      targetConfiguration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    } catch (SQLException e) {\n      throw new NestedIOException("Failed getting a databaseId", e);\n    }\n  }\n\n  /**\n   * 若二级缓存不为空,注册二级缓存\n   */\n  Optional.ofNullable(this.cache).ifPresent(targetConfiguration::addCache);\n\n  if (xmlConfigBuilder != null) {\n    try {\n      /**\n       * 真正的解析我们的配置(mybatis-config.xml)的document对象\n       */\n      xmlConfigBuilder.parse();\n      LOGGER.debug(() -> "Parsed configuration file: \'" + this.configLocation + "\'");\n    } catch (Exception ex) {\n      throw new NestedIOException("Failed to parse config resource: " + this.configLocation, ex);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  /**\n   * 为我们的configuration设置一个环境变量\n   */\n  targetConfiguration.setEnvironment(new Environment(this.environment,\n      this.transactionFactory == null ? new SpringManagedTransactionFactory() : this.transactionFactory,\n      this.dataSource));\n\n  /**\n   * 循环我们的mapper.xml文件\n   */\n  if (this.mapperLocations != null) {\n    if (this.mapperLocations.length == 0) {\n      LOGGER.warn(() -> "Property \'mapperLocations\' was specified but matching resources are not found.");\n    } else {\n      for (Resource mapperLocation : this.mapperLocations) {\n        if (mapperLocation == null) {\n          continue;\n        }\n        try {\n          /**\n           * 真正的循环我们的mapper.xml文件\n           */\n          XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n              targetConfiguration, mapperLocation.toString(), targetConfiguration.getSqlFragments());\n          xmlMapperBuilder.parse();\n        } catch (Exception e) {\n          throw new NestedIOException("Failed to parse mapping resource: \'" + mapperLocation + "\'", e);\n        } finally {\n          ErrorContext.instance().reset();\n        }\n        LOGGER.debug(() -> "Parsed mapper file: \'" + mapperLocation + "\'");\n      }\n    }\n  } else {\n    LOGGER.debug(() -> "Property \'mapperLocations\' was not specified.");\n  }\n\n  /**\n   * 通过建造者模式构建我们的SqlSessionFactory对象 默认是DefaultSqlSessionFactory\n   */\n  return this.sqlSessionFactoryBuilder.build(targetConfiguration);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("可知SqlSessionFactoryBean主要通过对applicationContext.xml解析完成时Configuration的实例化以及对完成对映射配置文件mapper*.xml的解析。")]),n._v(" "),s("p",[n._v("关键点：")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("*XMLConfigBuilder：在mybatis中主要负责解释mybatis-config.xml")])]),n._v(" "),s("li",[s("ol",[s("li",[n._v("解析完后，如果我们自己设置了则使用我们的设置的进行覆盖，不做一一介绍了")])])]),n._v(" "),s("li",[s("p",[n._v("XMLMapperBuilder：负责解析映射配置文件")])]),n._v(" "),s("li",[s("p",[n._v("targetConfiguration.setEnvironment   这里注意一下   ，  事务工厂会使用一个新的new SpringManagedTransactionFactory()")])])]),n._v(" "),s("p",[n._v("而不是MyBatis之前的ManagedTransactionFactory.   这个SpringManagedTransactionFactory会使用Spring事务中的dataSource ， 从而达到跟事务集成")]),n._v(" "),s("h2",{attrs:{id:"_2-spring是怎么管理mapper接口的动态代理的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring是怎么管理mapper接口的动态代理的"}},[n._v("#")]),n._v(" 2.Spring是怎么管理Mapper接口的动态代理的")]),n._v(" "),s("p",[n._v("https://www.processon.com/view/link/5f153429e401fd2e0deefd01")]),n._v(" "),s("p",[n._v("Spring和Mybatis时，我们重点要关注的就是这个代理对象。因为整合的目的就是："),s("strong",[n._v("把某个Mapper的代理对象作为一个bean放入Spring容器中，使得能够像使用一个普通bean一样去使用这个代理对象，比如能被@Autowire自动注入。")])]),n._v(" "),s("p",[n._v("比如当Spring和Mybatis整合之后，我们就可以使用如下的代码来使用Mybatis中的代理对象了：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@Component\npublic class UserService {\n    @Autowired\n    private UserMapper userMapper;\n\n    public User getUserById(Integer id) {\n        return userMapper.selectById(id);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("UserService中的userMapper属性就会被自动注入为Mybatis中的代理对象。如果你基于一个已经完成整合的项目去调试即可发现，userMapper的类型为：org.apache.ibatis.binding.MapperProxy@41a0aa7d。证明确实是Mybatis中的代理对象。")]),n._v(" "),s("p",[n._v("好，那么现在我们要解决的问题的就是："),s("strong",[n._v("如何能够把Mybatis的代理对象作为一个bean放入Spring容器中？")])]),n._v(" "),s("p",[n._v("要解决这个，我们需要对Spring的bean生成过程有一个了解。")]),n._v(" "),s("p",[s("strong",[n._v("Spring中Bean的产生过程")])]),n._v(" "),s("p",[n._v("Spring启动过程中，大致会经过如下步骤去生成bean")]),n._v(" "),s("ol",[s("li",[n._v("扫描指定的包路径下的class文件")]),n._v(" "),s("li",[n._v("根据class信息生成对应的BeanDefinition")]),n._v(" "),s("li",[n._v("在此处，程序员可以利用某些机制去修改BeanDefinition")]),n._v(" "),s("li",[n._v("根据BeanDefinition生成bean实例")]),n._v(" "),s("li",[n._v("把生成的bean实例放入Spring容器中")])]),n._v(" "),s("p",[n._v("假设有一个A类，假设有如下代码：")]),n._v(" "),s("p",[n._v("一个A类：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@Component\npublic class A {\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("一个B类，不存在@Component注解")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class B {\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("执行如下代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\nSystem.out.println(context.getBean("a"));\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("输出结果为：com.tulingxueyuan.beans.A@6acdbdf5")]),n._v(" "),s("p",[n._v("A类对应的bean对象类型仍然为A类。但是这个结论是不确定的，我们可以利用BeanFactory后置处理器来修改BeanDefinition，我们添加一个BeanFactory后置处理器：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Component\npublic class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        BeanDefinition beanDefinition = beanFactory.getBeanDefinition("a");\n        beanDefinition.setBeanClassName(B.class.getName());\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("这样就会导致，原本的A类对应的BeanDefiniton被修改了，被修改成了B类，那么后续正常生成的bean对象的类型就是B类。此时，调用如下代码会报错：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("context.getBean(A.class);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("但是调用如下代码不会报错，尽管B类上没有@Component注解：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    context.getBean(B.class);        \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("并且，下面代码返回的结果是：com.tulingxueyuan.beans.B@4b1c1ea0")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\nSystem.out.println(context.getBean("a"));\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("之所以讲这个问题，是想说明一个问题："),s("strong",[n._v("在Spring中，bean对象跟class没有直接关系，跟BeanDefinition才有直接关系。")])]),n._v(" "),s("p",[n._v("那么回到我们要解决的问题："),s("strong",[n._v("如何能够把Mybatis的代理对象作为一个bean放入Spring容器中？")])]),n._v(" "),s("p",[n._v("在Spring中，"),s("strong",[n._v("如果你想生成一个bean，那么得先生成一个BeanDefinition")]),n._v("，就像你想new一个对象实例，得先有一个class。")]),n._v(" "),s("p",[s("strong",[n._v("解决问题")])]),n._v(" "),s("p",[n._v("继续回到我们的问题，我们现在想自己生成一个bean，那么得先生成一个BeanDefinition，只要有了BeanDefinition，通过在BeanDefinition中设置"),s("strong",[n._v("bean对象的类型")]),n._v("，然后把BeanDefinition添加给Spring，Spring就会根据BeanDefinition自动帮我们生成一个类型对应的bean对象。")]),n._v(" "),s("p",[n._v("所以，现在我们要解决两个问题：")]),n._v(" "),s("ol",[s("li",[s("strong",[n._v("Mybatis的代理对象的类型是什么？因为我们要设置给BeanDefinition")])]),n._v(" "),s("li",[s("strong",[n._v("我们怎么把BeanDefinition添加给Spring容器？")])])]),n._v(" "),s("p",[n._v("注意：上文中我们使用的BeanFactory后置处理器，他只能修改BeanDefinition，并不能新增一个BeanDefinition。我们应该使用Import技术来添加一个BeanDefinition。后文再详细介绍如果使用Import技术来添加一个BeanDefinition，可以先看一下伪代码实现思路。")]),n._v(" "),s("p",[n._v("假设：我们有一个UserMapper接口，他的代理对象的类型为UserMapperProxy。")]),n._v(" "),s("p",[n._v("那么我们的思路就是这样的，伪代码如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("BeanDefinitoin bd = new BeanDefinitoin();\nbd.setBeanClassName(UserMapperProxy.class.getName());\nSpringContainer.addBd(bd);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("但是，这里有一个严重的问题，就是上文中的UserMapperProxy是我们假设的，他表示一个代理类的类型，然而Mybatis中的代理对象是利用的JDK的动态代理技术实现的，也就是代理对象的代理类是动态生成的，我们根本无法确定代理对象的代理类到底是什么。")]),n._v(" "),s("p",[n._v("所以回到我们的问题："),s("strong",[n._v("Mybatis的代理对象的类型是什么？")])]),n._v(" "),s("p",[n._v("本来可以有两个答案：")]),n._v(" "),s("ol",[s("li",[n._v("代理对象对应的代理类")]),n._v(" "),s("li",[n._v("代理对象对应的接口")])]),n._v(" "),s("p",[n._v("那么答案1就相当于没有了，因为是代理类是动态生成的，那么我们来看答案2："),s("strong",[n._v("代理对象对应的接口")])]),n._v(" "),s("p",[n._v("如果我们采用答案2，那么我们的思路就是：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("BeanDefinition bd = new BeanDefinitoin();\n// 注意这里，设置的是UserMapper\nbd.setBeanClassName(UserMapper.class.getName());\nSpringContainer.addBd(bd);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("但是，实际上给BeanDefinition对应的类型设置为一个接口是"),s("strong",[n._v("行不通")]),n._v("的，因为Spring没有办法根据这个BeanDefinition去new出对应类型的实例，接口是没法直接new出实例的。")]),n._v(" "),s("p",[n._v("那么现在问题来了，我要解决的问题："),s("strong",[n._v("Mybatis的代理对象的类型是什么？")])]),n._v(" "),s("p",[n._v("两个答案都被我们否定了，所以这个问题是无解的，所以我们不能再沿着这个思路去思考了，只能回到最开始的问题："),s("strong",[n._v("如何能够把Mybatis的代理对象作为一个bean放入Spring容器中？")])]),n._v(" "),s("p",[n._v("总结上面的推理："),s("strong",[n._v("我们想通过设置BeanDefinition的class类型，然后由Spring自动的帮助我们去生成对应的bean，但是这条路是行不通的。")])]),n._v(" "),s("p",[s("strong",[n._v("终极解决方案")])]),n._v(" "),s("p",[n._v("那么我们还有没有其他办法，可以去生成bean呢？并且"),s("strong",[n._v("生成bean的逻辑不能由Spring来帮我们做")]),n._v("了，得由我们自己来做。")]),n._v(" "),s("p",[s("strong",[n._v("FactoryBean")])]),n._v(" "),s("p",[n._v("有，那就是Spring中的FactoryBean。我们可以利用FactoryBean去自定义我们要生成的bean对象，比如：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@Component\npublic class MyFactoryBean implements FactoryBean {\n    @Override\n    public Object getObject() throws Exception {\n        Object proxyInstance = Proxy.newProxyInstance(MyFactoryBean.class.getClassLoader(), new Class[]{UserMapper.class}, new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                if (Object.class.equals(method.getDeclaringClass())) {\n                    return method.invoke(this, args);\n                } else {\n                    // 执行代理逻辑\n                    return null;\n                }\n            }\n        });\n\n        return proxyInstance;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return UserMapper.class;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[n._v("我们定义了一个MyFactoryBean，它实现了FactoryBean，getObject方法就是用来自定义生成bean对象逻辑的。")]),n._v(" "),s("p",[n._v("执行如下代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class Test {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\n        System.out.println("myFactoryBean: " + context.getBean("myFactoryBean"));\n        System.out.println("&myFactoryBean: " + context.getBean("&myFactoryBean"));\n        System.out.println("myFactoryBean-class: " + context.getBean("myFactoryBean").getClass());\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("将打印：")]),n._v(" "),s("p",[n._v("myFactoryBean: com.tulingxueyuan.beans.myFactoryBean$1@4d41cee")]),n._v(" "),s("p",[n._v("&myFactoryBean: com.tulingxueyuan.beans.myFactoryBean@3712b94")]),n._v(" "),s("p",[n._v("myFactoryBean-class: class com.sun.proxy.$Proxy20")]),n._v(" "),s("p",[n._v('从结果我们可以看到，从Spring容器中拿名字为"myFactoryBean"的bean对象，就是我们所自定义的jdk动态代理所生成的代理对象。')]),n._v(" "),s("p",[n._v("所以，我们可以通过FactoryBean来向Spring容器中添加一个自定义的bean对象。上文中所定义的MyFactoryBean对应的就是UserMapper，表示我们定义了一个MyFactoryBean，相当于把UserMapper对应的代理对象作为一个bean放入到了容器中。")]),n._v(" "),s("p",[n._v("但是作为程序员，我们不可能每定义了一个Mapper，还得去定义一个MyFactoryBean，这是很麻烦的事情，我们改造一下MyFactoryBean，让他变得更通用，比如：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@Component\npublic class MyFactoryBean implements FactoryBean {\n\n    // 注意这里\n    private Class mapperInterface;\n    public MyFactoryBean(Class mapperInterface) {\n        this.mapperInterface = mapperInterface;\n    }\n\n    @Override\n    public Object getObject() throws Exception {\n        Object proxyInstance = Proxy.newProxyInstance(MyFactoryBean.class.getClassLoader(), new Class[]{mapperInterface}, new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\n                if (Object.class.equals(method.getDeclaringClass())) {\n                    return method.invoke(this, args);\n                } else {\n                    // 执行代理逻辑\n                    return null;\n                }\n            }\n        });\n\n        return proxyInstance;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return mapperInterface;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br")])]),s("p",[n._v("改造MyFactoryBean之后，MyFactoryBean变得灵活了，可以在构造MyFactoryBean时，通过构造传入不同的Mapper接口。")]),n._v(" "),s("p",[n._v("实际上MyFactoryBean也是一个Bean，我们也可以通过生成一个BeanDefinition来生成一个MyFactoryBean，并给构造方法的参数设置不同的值，比如伪代码如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("BeanDefinition bd = new BeanDefinitoin();\n// 注意一：设置的是MyFactoryBean\nbd.setBeanClassName(MyFactoryBean.class.getName());\n// 注意二：表示当前BeanDefinition在生成bean对象时，会通过调用MyFactoryBean的构造方法来生成，并传入UserMapper\nbd.getConstructorArgumentValues().addGenericArgumentValue(UserMapper.class.getName())\nSpringContainer.addBd(bd);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("特别说一下注意二，表示表示当前BeanDefinition在生成bean对象时，会通过调用MyFactoryBean的构造方法来生成，并传入UserMapper的Class对象。那么在生成MyFactoryBean时就会生成一个UserMapper接口对应的代理对象作为bean了。")]),n._v(" "),s("p",[n._v("到此为止，其实就完成了我们要解决的问题："),s("strong",[n._v("把Mybatis中的代理对象作为一个bean放入Spring容器中")]),n._v("。只是我们这里是用简单的JDK代理对象模拟的Mybatis中的代理对象，如果有时间，我们完全可以调用Mybatis中提供的方法区生成一个代理对象。这里就不花时间去介绍了。")]),n._v(" "),s("p",[s("strong",[n._v("Import")])]),n._v(" "),s("p",[n._v("到这里，我们还有一个事情没有做，就是怎么真正的定义一个BeanDefinition，并把它"),s("strong",[n._v("添加")]),n._v("到Spring中，上文说到我们要利用Import技术，比如可以这么实现：")]),n._v(" "),s("p",[n._v("定义如下类：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {\n\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();\n        AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();\n        beanDefinition.setBeanClass(MyFactoryBean.class);\n        beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(UserMapper.class);\n        // 添加beanDefinition\n        registry.registerBeanDefinition("my"+UserMapper.class.getSimpleName(), beanDefinition);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("并且在AppConfig上添加@Import注解：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@Import(MyImportBeanDefinitionRegistrar.class)\npublic class AppConfig {\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("这样在启动Spring时就会新增一个BeanDefinition，该BeanDefinition会生成一个MyFactoryBean对象，并且在生成MyFactoryBean对象时会传入UserMapper.class对象，通过MyFactoryBean内部的逻辑，相当于会自动生产一个UserMapper接口的代理对象作为一个bean。")]),n._v(" "),s("p",[s("strong",[n._v("总结")])]),n._v(" "),s("p",[n._v("总结一下，通过我们的分析，我们要整合Spring和Mybatis，需要我们做的事情如下：")]),n._v(" "),s("ol",[s("li",[n._v("定义一个MyFactoryBean")]),n._v(" "),s("li",[n._v("定义一个MyImportBeanDefinitionRegistrar")]),n._v(" "),s("li",[n._v("在AppConfig上添加一个注解@Import(MyImportBeanDefinitionRegistrar.class)")])]),n._v(" "),s("p",[s("strong",[n._v("优化")])]),n._v(" "),s("p",[n._v("这样就可以基本完成整合的需求了，当然还有两个点是可以优化的")]),n._v(" "),s("p",[n._v("第一，单独再定义一个@MyScan的注解，如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@Retention(RetentionPolicy.RUNTIME)\n@Import(MyImportBeanDefinitionRegistrar.class)\npublic @interface MyScan {\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("这样在AppConfig上直接使用@MyScan即可")]),n._v(" "),s("p",[n._v("第二，在MyImportBeanDefinitionRegistrar中，我们可以去扫描Mapper，在MyImportBeanDefinitionRegistrar我们可以通过AnnotationMetadata获取到对应的@MyScan注解，所以我们可以在@MyScan上设置一个value，用来指定待扫描的包路径。然后在MyImportBeanDefinitionRegistrar中获取所设置的包路径，然后扫描该路径下的所有Mapper，生成BeanDefinition，放入Spring容器中。")]),n._v(" "),s("p",[n._v("所以，到此为止，Spring整合Mybatis的核心原理就结束了，再次总结一下：")]),n._v(" "),s("ol",[s("li",[n._v("定义一个MyFactoryBean，用来将Mybatis的代理对象生成一个bean对象")]),n._v(" "),s("li",[n._v("定义一个MyImportBeanDefinitionRegistrar，用来生成不同Mapper对象的MyFactoryBean")]),n._v(" "),s("li",[n._v("定义一个@MynScan，用来在启动Spring时执行MyImportBeanDefinitionRegistrar的逻辑，并指定包路径")])]),n._v(" "),s("p",[n._v("以上这个三个要素分别对象org.mybatis.spring中的：")]),n._v(" "),s("ol",[s("li",[n._v("MapperFactoryBean")]),n._v(" "),s("li",[n._v("MapperScannerRegistrar")]),n._v(" "),s("li",[n._v("@MapperScan")])]),n._v(" "),s("p",[n._v("附录：")]),n._v(" "),s("p",[n._v("spring整合mybatis")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/spring%E6%95%B4%E5%90%88mybatis.png",alt:"spring整合mybatis"}})])])}),[],!1,null,null,null);s.default=t.exports}}]);