(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{494:function(s,t,n){"use strict";n.r(t);var l=n(5),a=Object(l.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import java.util.ArrayList;\nimport java.util.List;\nimport static java.util.stream.Collectors.toList;\n \n \npublic class Test {\n \n    public static void main(String[] args) {\n        List<String> list1 = new ArrayList<String>();\n        list1.add("1");\n\t\tlist1.add("2");\n\t\tlist1.add("3");\n\t\tlist1.add("5");\n\t\tlist1.add("6");\n \n        List<String> list2 = new ArrayList<String>();\n        list2.add("2");\n\t\tlist2.add("3");\n\t\tlist2.add("7");\n\t\tlist2.add("8");\n \n        // 交集\n        List<String> intersection = list1.stream().filter(item -> list2.contains(item)).collect(toList());\n        System.out.println("---交集 intersection---");\n        intersection.parallelStream().forEach(System.out :: println);\n \n        // 差集 (list1 - list2)\n        List<String> reduce1 = list1.stream().filter(item -> !list2.contains(item)).collect(toList());\n        System.out.println("---差集 reduce1 (list1 - list2)---");\n        reduce1.parallelStream().forEach(System.out :: println);\n \n        // 差集 (list2 - list1)\n        List<String> reduce2 = list2.stream().filter(item -> !list1.contains(item)).collect(toList());\n        System.out.println("---差集 reduce2 (list2 - list1)---");\n        reduce2.parallelStream().forEach(System.out :: println);\n \n        // 并集\n        List<String> listAll = list1.parallelStream().collect(toList());\n        List<String> listAll2 = list2.parallelStream().collect(toList());\n        listAll.addAll(listAll2);\n        System.out.println("---并集 listAll---");\n        listAll.parallelStream().forEachOrdered(System.out :: println);\n \n        // 去重并集\n        List<String> listAllDistinct = listAll.stream().distinct().collect(toList());\n        System.out.println("---得到去重并集 listAllDistinct---");\n        listAllDistinct.parallelStream().forEachOrdered(System.out :: println);\n \n        System.out.println("---原来的List1---");\n        list1.parallelStream().forEachOrdered(System.out :: println);\n        System.out.println("---原来的List2---");\n        list2.parallelStream().forEachOrdered(System.out :: println);\n \n    }\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br")])]),t("p",[s._v("代码原出处：https://blog.csdn.net/gzt19881123/article/details/78327465")])])}),[],!1,null,null,null);t.default=a.exports}}]);