(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{574:function(n,s,a){"use strict";a.r(s);var e=a(5),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("U2FsdGVkX18aYZlC9gUKSDbIsUuJmB1x7BA3CxoGo/rZInsHfY/dVPjDGykz30yv\nYv7klxWbz/teS9hUsgT7tvljtajJa+yk8HI/7ug84pyFnfu05bChuHZsARNE97M+\nfQ==\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("并发之父：Doug Lea")]),n._v(" "),s("h2",{attrs:{id:"aqs应用之lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs应用之lock"}},[n._v("#")]),n._v(" AQS应用之Lock")]),n._v(" "),s("p",[n._v("Java并发编程核心在于java.util.concurrent包而juc当中的大多数同步器实现都是围绕着共同的基础行为，比如等待队列、条件队列、独占获取、共享获取等，而这个行为的抽象就是基于"),s("strong",[n._v("AbstractQueuedSynchronizer")]),n._v("简称AQS，AQS定义了一套多线程访问共享资源的同步器框架，是一个依赖状态(state)的同步器。")]),n._v(" "),s("h2",{attrs:{id:"reentrantlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock"}},[n._v("#")]),n._v(" ReentrantLock")]),n._v(" "),s("p",[n._v("ReentrantLock是一种基于AQS框架的应用实现，是JDK中的一种线程并发访问的同步手段，它的功能类似于synchronized是一种互斥锁，可以保证线程安全。而且它具有比synchronized更多的特性，比如它支持手动加锁与解锁，支持加锁的公平性。")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[n._v("使用"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ReentrantLock")]),n._v("进行同步\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ReentrantLock")]),n._v(" lock "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ReentrantLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//false为非公平锁，true为公平锁")]),n._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//加锁")]),n._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//解锁")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("h3",{attrs:{id:"reentrantlock如何实现synchronized不具备的公平与非公平性呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock如何实现synchronized不具备的公平与非公平性呢"}},[n._v("#")]),n._v(" ReentrantLock如何实现synchronized不具备的公平与非公平性呢？")]),n._v(" "),s("p",[n._v("在ReentrantLock内部定义了一个Sync的内部类，该类继承AbstractQueuedSynchronized，对该抽象类的部分方法做了实现；并且还定义了两个子类：")]),n._v(" "),s("blockquote",[s("p",[n._v("1、FairSync 公平锁的实现")]),n._v(" "),s("p",[n._v("2、NonfairSync 非公平锁的实现")])]),n._v(" "),s("p",[n._v("这两个类都继承自Sync，也就是间接继承了AbstractQueuedSynchronized，所以这一个ReentrantLock同时具备公平与非公平特性。")]),n._v(" "),s("blockquote",[s("p",[n._v("用到的设计模式：模板模式-子类根据需要做具体业务实现")])]),n._v(" "),s("h2",{attrs:{id:"aqs具备特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs具备特性"}},[n._v("#")]),n._v(" AQS具备特性")]),n._v(" "),s("blockquote",[s("p",[n._v("阻塞等待队列")]),n._v(" "),s("p",[n._v("共享/独占")]),n._v(" "),s("p",[n._v("公平/非公平")]),n._v(" "),s("p",[n._v("可重入")]),n._v(" "),s("p",[n._v("允许中断")])]),n._v(" "),s("p",[n._v("除了Lock外，Java.util.concurrent当中同步器的实现如Latch,Barrier,BlockingQueue等，都是基于AQS框架实现")]),n._v(" "),s("blockquote",[s("p",[n._v("一般通过定义内部类Sync继承AQS")]),n._v(" "),s("p",[n._v("将同步器所有调用都映射到Sync对应的方法")])]),n._v(" "),s("p",[n._v("AQS内部维护属性"),s("strong",[n._v("volatile")]),n._v(" "),s("strong",[n._v("int state (32位)")])]),n._v(" "),s("blockquote",[s("p",[n._v("state表示资源的可用状态")])]),n._v(" "),s("p",[n._v("State三种访问方式")]),n._v(" "),s("blockquote",[s("p",[n._v("getState()、")]),n._v(" "),s("p",[n._v("setState()、")]),n._v(" "),s("p",[n._v("compareAndSetState()")])]),n._v(" "),s("p",[s("strong",[n._v("AQS定义两种资源共享方式")])]),n._v(" "),s("blockquote",[s("p",[n._v("Exclusive-独占，只有一个线程能执行，如ReentrantLock")]),n._v(" "),s("p",[n._v("Share-共享，多个线程可以同时执行，如Semaphore/CountDownLatch")])]),n._v(" "),s("p",[n._v("AQS定义两种队列")]),n._v(" "),s("blockquote",[s("p",[n._v("同步等待队列")]),n._v(" "),s("p",[n._v("条件等待队列")])]),n._v(" "),s("p",[n._v("不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法：")]),n._v(" "),s("ul",[s("li",[n._v("isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。")]),n._v(" "),s("li",[n._v("tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。")]),n._v(" "),s("li",[n._v("tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。")]),n._v(" "),s("li",[n._v("tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。")]),n._v(" "),s("li",[n._v("tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。")])]),n._v(" "),s("h2",{attrs:{id:"同步等待队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步等待队列"}},[n._v("#")]),n._v(" 同步等待队列")]),n._v(" "),s("p",[n._v("AQS当中的同步等待队列也称"),s("strong",[n._v("CLH队列")]),n._v("，CLH队列是Craig、Landin、Hagersten三人发明的一种基于双向链表数据结构的队列，是FIFO先入先出线程等待队列，Java中的CLH队列是原CLH队列的一个变种,"),s("strong",[n._v("线程由原自旋机制改为阻塞机制")]),n._v("。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/1.png",alt:""}})]),n._v(" "),s("h2",{attrs:{id:"条件等待队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件等待队列"}},[n._v("#")]),n._v(" 条件等待队列")]),n._v(" "),s("p",[n._v("Condition是一个多线程间协调通信的工具类，使得某个，或者某些线程一起等待某个条件（Condition）,只有当该条件具备时，这些等待线程才会被唤醒，从而重新争夺锁")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/2.png",alt:""}})]),n._v(" "),s("h2",{attrs:{id:"aqs源码分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs源码分析"}},[n._v("#")]),n._v(" AQS源码分析")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public abstract class AbstractQueuedSynchronizer\n        extends AbstractOwnableSynchronizer\n        implements java.io.Serializable {\n    private static final long serialVersionUID = 7373984972572414691L;\n\n    /**\n     * Creates a new {@code AbstractQueuedSynchronizer} instance\n     * with initial synchronization state of zero.\n     */\n    protected AbstractQueuedSynchronizer() { }\n\n    /**\n     * Wait queue node class.\n     *\n     * 不管是条件队列，还是CLH等待队列\n     * 都是基于Node类\n     * \n     * AQS当中的同步等待队列也称CLH队列，CLH队列是Craig、Landin、Hagersten三人\n     * 发明的一种基于双向链表数据结构的队列，是FIFO先入先出线程等待队列，Java中的\n     * CLH队列是原CLH队列的一个变种,线程由原自旋机制改为阻塞机制。\n     */\n    static final class Node {\n        /**\n         * 标记节点未共享模式\n         * */\n        static final Node SHARED = new Node();\n        /**\n         *  标记节点为独占模式\n         */\n        static final Node EXCLUSIVE = null;\n\n        /**\n         * 在同步队列中等待的线程等待超时或者被中断，需要从同步队列中取消等待\n         * */\n        static final int CANCELLED =  1;\n        /**\n         *  后继节点的线程处于等待状态，而当前的节点如果释放了同步状态或者被取消，\n         *  将会通知后继节点，使后继节点的线程得以运行。\n         */\n        static final int SIGNAL    = -1;\n        /**\n         *  节点在等待队列中，节点的线程等待在Condition上，当其他线程对Condition调用了signal()方法后，\n         *  该节点会从等待队列中转移到同步队列中，加入到同步状态的获取中\n         */\n        static final int CONDITION = -2;\n        /**\n         * 表示下一次共享式同步状态获取将会被无条件地传播下去\n         */\n        static final int PROPAGATE = -3;\n\n        /**\n         * 标记当前节点的信号量状态 (1,0,-1,-2,-3)5种状态\n         * 使用CAS更改状态，volatile保证线程可见性，高并发场景下，\n         * 即被一个线程修改后，状态会立马让其他线程可见。\n         */\n        volatile int waitStatus;\n\n        /**\n         * 前驱节点，当前节点加入到同步队列中被设置\n         */\n        volatile Node prev;\n\n        /**\n         * 后继节点\n         */\n        volatile Node next;\n\n        /**\n         * 节点同步状态的线程\n         */\n        volatile Thread thread;\n\n        /**\n         * 等待队列中的后继节点，如果当前节点是共享的，那么这个字段是一个SHARED常量，\n         * 也就是说节点类型(独占和共享)和等待队列中的后继节点共用同一个字段。\n         */\n        Node nextWaiter;\n\n        /**\n         * Returns true if node is waiting in shared mode.\n         */\n        final boolean isShared() {\n            return nextWaiter == SHARED;\n        }\n\n        /**\n         * 返回前驱节点\n         */\n        final Node predecessor() throws NullPointerException {\n            Node p = prev;\n            if (p == null)\n                throw new NullPointerException();\n            else\n                return p;\n        }\n        //空节点，用于标记共享模式\n        Node() {    // Used to establish initial head or SHARED marker\n        }\n        //用于同步队列CLH\n        Node(Thread thread, Node mode) {     // Used by addWaiter\n            this.nextWaiter = mode;\n            this.thread = thread;\n        }\n        //用于条件队列\n        Node(Thread thread, int waitStatus) { // Used by Condition\n            this.waitStatus = waitStatus;\n            this.thread = thread;\n        }\n    }\n    \n    /**\n     * 指向同步等待队列的头节点\n     */\n    private transient volatile Node head;\n\n    /**\n     * 指向同步等待队列的尾节点\n     */\n    private transient volatile Node tail;\n\n    /**\n     * 同步资源状态\n     */\n    private volatile int state;\n\n    /**\n     * \n     * @return current state value\n     */\n    protected final int getState() {\n        return state;\n    }\n\n    protected final void setState(int newState) {\n        state = newState;\n    }\n\n    /**\n     * Atomically sets synchronization state to the given updated\n     * value if the current state value equals the expected value.\n     * This operation has memory semantics of a {@code volatile} read\n     * and write.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful. False return indicates that the actual\n     *         value was not equal to the expected value.\n     */\n    protected final boolean compareAndSetState(int expect, int update) {\n        // See below for intrinsics setup to support this\n        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n    }\n\n    // Queuing utilities\n\n    /**\n     * The number of nanoseconds for which it is faster to spin\n     * rather than to use timed park. A rough estimate suffices\n     * to improve responsiveness with very short timeouts.\n     */\n    static final long spinForTimeoutThreshold = 1000L;\n\n    /**\n     * 节点加入CLH同步队列\n     */\n    private Node enq(final Node node) {\n        for (;;) {\n            Node t = tail;\n            if (t == null) { // Must initialize\n                //队列为空需要初始化，创建空的头节点\n                if (compareAndSetHead(new Node()))\n                    tail = head;\n            } else {\n                node.prev = t;\n                //set尾部节点\n                if (compareAndSetTail(t, node)) {//当前节点置为尾部\n                    t.next = node; //前驱节点的next指针指向当前节点\n                    return t;\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates and enqueues node for current thread and given mode.\n     *\n     * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared\n     * @return the new node\n     */\n    private Node addWaiter(Node mode) {\n        // 1. 将当前线程构建成Node类型\n        Node node = new Node(Thread.currentThread(), mode);\n        // Try the fast path of enq; backup to full enq on failure\n        Node pred = tail;\n        // 2. 1当前尾节点是否为null？\n        if (pred != null) {\n            // 2.2 将当前节点尾插入的方式\n            node.prev = pred;\n            // 2.3 CAS将节点插入同步队列的尾部\n            if (compareAndSetTail(pred, node)) {\n                pred.next = node;\n                return node;\n            }\n        }\n        enq(node);\n        return node;\n    }\n\n    /**\n     * Sets head of queue to be node, thus dequeuing. Called only by\n     * acquire methods.  Also nulls out unused fields for sake of GC\n     * and to suppress unnecessary signals and traversals.\n     *\n     * @param node the node\n     */\n    private void setHead(Node node) {\n        head = node;\n        node.thread = null;\n        node.prev = null;\n    }\n\n    /**\n     *\n     */\n    private void unparkSuccessor(Node node) {\n        //获取wait状态\n        int ws = node.waitStatus;\n        if (ws < 0)\n            compareAndSetWaitStatus(node, ws, 0);// 将等待状态waitStatus设置为初始值0\n\n        /**\n         * 若后继结点为空，或状态为CANCEL（已失效），则从后尾部往前遍历找到最前的一个处于正常阻塞状态的结点\n         * 进行唤醒\n         */\n        Node s = node.next; //head.next = Node1 ,thread = T3\n        if (s == null || s.waitStatus > 0) {\n            s = null;\n            for (Node t = tail; t != null && t != node; t = t.prev)\n                if (t.waitStatus <= 0)\n                    s = t;\n        }\n        if (s != null)\n            LockSupport.unpark(s.thread);//唤醒线程,T3唤醒\n    }\n\n    /**\n     * 把当前结点设置为SIGNAL或者PROPAGATE\n     * 唤醒head.next(B节点)，B节点唤醒后可以竞争锁，成功后head->B，然后又会唤醒B.next，一直重复直到共享节点都唤醒\n     * head节点状态为SIGNAL，重置head.waitStatus->0，唤醒head节点线程，唤醒后线程去竞争共享锁\n     * head节点状态为0，将head.waitStatus->Node.PROPAGATE传播状态，表示需要将状态向后继节点传播\n     */\n    private void doReleaseShared() {\n        for (;;) {\n            Node h = head;\n            if (h != null && h != tail) {\n                int ws = h.waitStatus;\n                if (ws == Node.SIGNAL) {//head是SIGNAL状态\n                    /* head状态是SIGNAL，重置head节点waitStatus为0，E这里不直接设为Node.PROPAGAT,\n                     * 是因为unparkSuccessor(h)中，如果ws < 0会设置为0，所以ws先设置为0，再设置为PROPAGATE\n                     * 这里需要控制并发，因为入口有setHeadAndPropagate跟release两个，避免两次unpark\n                     */\n                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                        continue; //设置失败，重新循环\n                    /* head状态为SIGNAL，且成功设置为0之后,唤醒head.next节点线程\n                     * 此时head、head.next的线程都唤醒了，head.next会去竞争锁，成功后head会指向获取锁的节点，\n                     * 也就是head发生了变化。看最底下一行代码可知，head发生变化后会重新循环，继续唤醒head的下一个节点\n                     */\n                    unparkSuccessor(h);\n                    /*\n                     * 如果本身头节点的waitStatus是出于重置状态（waitStatus==0）的，将其设置为“传播”状态。\n                     * 意味着需要将状态向后一个节点传播\n                     */\n                }\n                else if (ws == 0 &&\n                        !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                    continue;                // loop on failed CAS\n            }\n            if (h == head) //如果head变了，重新循环\n                break;\n        }\n    }\n\n    /**\n     * 把node节点设置成head节点，且Node.waitStatus->Node.PROPAGATE\n     */\n    private void setHeadAndPropagate(Node node, int propagate) {\n        Node h = head; //h用来保存旧的head节点\n        setHead(node);//head引用指向node节点\n        /* 这里意思有两种情况是需要执行唤醒操作\n         * 1.propagate > 0 表示调用方指明了后继节点需要被唤醒\n         * 2.头节点后面的节点需要被唤醒（waitStatus<0），不论是老的头结点还是新的头结点\n         */\n        if (propagate > 0 || h == null || h.waitStatus < 0 ||\n                (h = head) == null || h.waitStatus < 0) {\n            Node s = node.next;\n            if (s == null || s.isShared())//node是最后一个节点或者 node的后继节点是共享节点\n                /* 如果head节点状态为SIGNAL，唤醒head节点线程，重置head.waitStatus->0\n                 * head节点状态为0(第一次添加时是0)，设置head.waitStatus->Node.PROPAGATE表示状态需要向后继节点传播\n                 */\n                doReleaseShared();\n        }\n    }\n\n    // Utilities for various versions of acquire\n\n    /**\n     * 终结掉正在尝试去获取锁的节点\n     * @param node the node\n     */\n    private void cancelAcquire(Node node) {\n        // Ignore if node doesn\'t exist\n        if (node == null)\n            return;\n\n        node.thread = null;\n\n        // 剔除掉一件被cancel掉的节点\n        Node pred = node.prev;\n        while (pred.waitStatus > 0)\n            node.prev = pred = pred.prev;\n\n        // predNext is the apparent node to unsplice. CASes below will\n        // fail if not, in which case, we lost race vs another cancel\n        // or signal, so no further action is necessary.\n        Node predNext = pred.next;\n\n        // Can use unconditional write instead of CAS here.\n        // After this atomic step, other Nodes can skip past us.\n        // Before, we are free of interference from other threads.\n        node.waitStatus = Node.CANCELLED;\n\n        // If we are the tail, remove ourselves.\n        if (node == tail && compareAndSetTail(node, pred)) {\n            compareAndSetNext(pred, predNext, null);\n        } else {\n            // If successor needs signal, try to set pred\'s next-link\n            // so it will get one. Otherwise wake it up to propagate.\n            int ws;\n            if (pred != head &&\n                    ((ws = pred.waitStatus) == Node.SIGNAL ||\n                            (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n                    pred.thread != null) {\n                Node next = node.next;\n                if (next != null && next.waitStatus <= 0)\n                    compareAndSetNext(pred, predNext, next);\n            } else {\n                unparkSuccessor(node);\n            }\n\n            node.next = node; // help GC\n        }\n    }\n\n    /**\n     * \n     */\n    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)\n            /*\n             * 若前驱结点的状态是SIGNAL，意味着当前结点可以被安全地park\n             */\n            return true;\n        if (ws > 0) {\n            /*\n             * 前驱节点状态如果被取消状态，将被移除出队列\n             */\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /*\n             * 当前驱节点waitStatus为 0 or PROPAGATE状态时\n             * 将其设置为SIGNAL状态，然后当前结点才可以可以被安全地park\n             */\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n\n    /**\n     * 中断当前线程\n     */\n    static void selfInterrupt() {\n        Thread.currentThread().interrupt();\n    }\n\n    /**\n     * 阻塞当前节点，返回当前Thread的中断状态\n     * LockSupport.park 底层实现逻辑调用系统内核功能 pthread_mutex_lock 阻塞线程\n     */\n    private final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);//阻塞\n        return Thread.interrupted();\n    }\n\n    /**\n     * 已经在队列当中的Thread节点，准备阻塞等待获取锁\n     */\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {//死循环\n                final Node p = node.predecessor();//找到当前结点的前驱结点\n                if (p == head && tryAcquire(arg)) {//如果前驱结点是头结点，才tryAcquire，其他结点是没有机会tryAcquire的。\n                    setHead(node);//获取同步状态成功，将当前结点设置为头结点。\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                /**\n                 * 如果前驱节点不是Head，通过shouldParkAfterFailedAcquire判断是否应该阻塞\n                 * 前驱节点信号量为-1，当前线程可以安全被parkAndCheckInterrupt用来阻塞线程\n                 */\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n    /**\n     * 与acquireQueued逻辑相似，唯一区别节点还不在队列当中需要先进行入队操作\n     */\n    private void doAcquireInterruptibly(int arg)\n            throws InterruptedException {\n        final Node node = addWaiter(Node.EXCLUSIVE);//以独占模式放入队列尾部\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        parkAndCheckInterrupt())\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n    /**\n     * 独占模式定时获取\n     */\n    private boolean doAcquireNanos(int arg, long nanosTimeout)\n            throws InterruptedException {\n        if (nanosTimeout <= 0L)\n            return false;\n        final long deadline = System.nanoTime() + nanosTimeout;\n        final Node node = addWaiter(Node.EXCLUSIVE);//加入队列\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return true;\n                }\n                nanosTimeout = deadline - System.nanoTime();\n                if (nanosTimeout <= 0L)\n                    return false;//超时直接返回获取失败\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        nanosTimeout > spinForTimeoutThreshold)\n                    //阻塞指定时长，超时则线程自动被唤醒\n                    LockSupport.parkNanos(this, nanosTimeout);\n                if (Thread.interrupted())//当前线程中断状态\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n    /**\n     * 尝试获取共享锁\n     */\n    private void doAcquireShared(int arg) {\n        final Node node = addWaiter(Node.SHARED);//入队\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();//前驱节点\n                if (p == head) {\n                    int r = tryAcquireShared(arg); //非公平锁实现，再尝试获取锁\n                    //state==0时tryAcquireShared会返回>=0(CountDownLatch中返回的是1)。\n                    // state为0说明共享次数已经到了，可以获取锁了\n                    if (r >= 0) {//r>0表示state==0,前继节点已经释放锁，锁的状态为可被获取\n                        //这一步设置node为head节点设置node.waitStatus->Node.PROPAGATE，然后唤醒node.thread\n                        setHeadAndPropagate(node, r);\n                        p.next = null; // help GC\n                        if (interrupted)\n                            selfInterrupt();\n                        failed = false;\n                        return;\n                    }\n                }\n                //前继节点非head节点，将前继节点状态设置为SIGNAL，通过park挂起node节点的线程\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n    /**\n     * Acquires in shared interruptible mode.\n     * @param arg the acquire argument\n     */\n    private void doAcquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        final Node node = addWaiter(Node.SHARED);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head) {\n                    int r = tryAcquireShared(arg);\n                    if (r >= 0) {\n                        setHeadAndPropagate(node, r);\n                        p.next = null; // help GC\n                        failed = false;\n                        return;\n                    }\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        parkAndCheckInterrupt())\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n    /**\n     * Acquires in shared timed mode.\n     *\n     * @param arg the acquire argument\n     * @param nanosTimeout max wait time\n     * @return {@code true} if acquired\n     */\n    private boolean doAcquireSharedNanos(int arg, long nanosTimeout)\n            throws InterruptedException {\n        if (nanosTimeout <= 0L)\n            return false;\n        final long deadline = System.nanoTime() + nanosTimeout;\n        final Node node = addWaiter(Node.SHARED);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head) {\n                    int r = tryAcquireShared(arg);\n                    if (r >= 0) {\n                        setHeadAndPropagate(node, r);\n                        p.next = null; // help GC\n                        failed = false;\n                        return true;\n                    }\n                }\n                nanosTimeout = deadline - System.nanoTime();\n                if (nanosTimeout <= 0L)\n                    return false;\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                        nanosTimeout > spinForTimeoutThreshold)\n                    LockSupport.parkNanos(this, nanosTimeout);\n                if (Thread.interrupted())\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n\n    // Main exported methods\n\n    /**\n     * 尝试获取独占锁，可指定锁的获取数量\n     */\n    protected boolean tryAcquire(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 尝试释放独占锁，在子类当中实现\n     */\n    protected boolean tryRelease(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 共享式：共享式地获取同步状态。对于独占式同步组件来讲，同一时刻只有一个线程能获取到同步状态，\n     * 其他线程都得去排队等待，其待重写的尝试获取同步状态的方法tryAcquire返回值为boolean，这很容易理解；\n     * 对于共享式同步组件来讲，同一时刻可以有多个线程同时获取到同步状态，这也是“共享”的意义所在。\n     * 本方法待被之类覆盖实现具体逻辑\n     *  1.当返回值大于0时，表示获取同步状态成功，同时还有剩余同步状态可供其他线程获取；\n     *\n     *　2.当返回值等于0时，表示获取同步状态成功，但没有可用同步状态了；\n\n     *　3.当返回值小于0时，表示获取同步状态失败。\n     */\n    protected int tryAcquireShared(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 释放共享锁，具体实现在子类当中实现\n     */\n    protected boolean tryReleaseShared(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 当前线程是否持有独占锁\n     */\n    protected boolean isHeldExclusively() {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 获取独占锁\n     */\n    public final void acquire(int arg) {\n        //尝试获取锁\n        if (!tryAcquire(arg) &&\n                acquireQueued(addWaiter(Node.EXCLUSIVE), arg))//独占模式\n            selfInterrupt();\n    }\n\n    /**\n     * \n     */\n    public final void acquireInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (!tryAcquire(arg))\n            doAcquireInterruptibly(arg);\n    }\n\n    /**\n     * 获取独占锁，设置最大等待时间\n     */\n    public final boolean tryAcquireNanos(int arg, long nanosTimeout)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        return tryAcquire(arg) ||\n                doAcquireNanos(arg, nanosTimeout);\n    }\n\n    /**\n     * 释放独占模式持有的锁\n     */\n    public final boolean release(int arg) {\n        if (tryRelease(arg)) {//释放一次锁\n            Node h = head;\n            if (h != null && h.waitStatus != 0)\n                unparkSuccessor(h);//唤醒后继结点\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 请求获取共享锁\n     */\n    public final void acquireShared(int arg) {\n        if (tryAcquireShared(arg) < 0)//返回值小于0，获取同步状态失败，排队去；获取同步状态成功，直接返回去干自己的事儿。\n            doAcquireShared(arg);\n    }\n\n\n    /**\n     * Releases in shared mode.  Implemented by unblocking one or more\n     * threads if {@link #tryReleaseShared} returns true.\n     *\n     * @param arg the release argument.  This value is conveyed to\n     *        {@link #tryReleaseShared} but is otherwise uninterpreted\n     *        and can represent anything you like.\n     * @return the value returned from {@link #tryReleaseShared}\n     */\n    public final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n\n    // Queue inspection methods\n\n    public final boolean hasQueuedThreads() {\n        return head != tail;\n    }\n\n    public final boolean hasContended() {\n        return head != null;\n    }\n\n    public final Thread getFirstQueuedThread() {\n        // handle only fast path, else relay\n        return (head == tail) ? null : fullGetFirstQueuedThread();\n    }\n\n    /**\n     * Version of getFirstQueuedThread called when fastpath fails\n     */\n    private Thread fullGetFirstQueuedThread() {\n        Node h, s;\n        Thread st;\n        if (((h = head) != null && (s = h.next) != null &&\n                s.prev == head && (st = s.thread) != null) ||\n                ((h = head) != null && (s = h.next) != null &&\n                        s.prev == head && (st = s.thread) != null))\n            return st;\n\n        Node t = tail;\n        Thread firstThread = null;\n        while (t != null && t != head) {\n            Thread tt = t.thread;\n            if (tt != null)\n                firstThread = tt;\n            t = t.prev;\n        }\n        return firstThread;\n    }\n\n    /**\n     * 判断当前线程是否在队列当中\n     */\n    public final boolean isQueued(Thread thread) {\n        if (thread == null)\n            throw new NullPointerException();\n        for (Node p = tail; p != null; p = p.prev)\n            if (p.thread == thread)\n                return true;\n        return false;\n    }\n\n    final boolean apparentlyFirstQueuedIsExclusive() {\n        Node h, s;\n        return (h = head) != null &&\n                (s = h.next)  != null &&\n                !s.isShared()         &&\n                s.thread != null;\n    }\n\n    /**\n     * 判断当前节点是否有前驱节点\n     */\n    public final boolean hasQueuedPredecessors() {\n        Node t = tail; // Read fields in reverse initialization order\n        Node h = head;\n        Node s;\n        return h != t &&\n                ((s = h.next) == null || s.thread != Thread.currentThread());\n    }\n\n\n    // Instrumentation and monitoring methods\n\n    /**\n     * 同步队列长度\n     */\n    public final int getQueueLength() {\n        int n = 0;\n        for (Node p = tail; p != null; p = p.prev) {\n            if (p.thread != null)\n                ++n;\n        }\n        return n;\n    }\n\n    /**\n     * 获取队列等待thread集合\n     */\n    public final Collection<Thread> getQueuedThreads() {\n        ArrayList<Thread> list = new ArrayList<Thread>();\n        for (Node p = tail; p != null; p = p.prev) {\n            Thread t = p.thread;\n            if (t != null)\n                list.add(t);\n        }\n        return list;\n    }\n\n    /**\n     * 获取独占模式等待thread线程集合\n     */\n    public final Collection<Thread> getExclusiveQueuedThreads() {\n        ArrayList<Thread> list = new ArrayList<Thread>();\n        for (Node p = tail; p != null; p = p.prev) {\n            if (!p.isShared()) {\n                Thread t = p.thread;\n                if (t != null)\n                    list.add(t);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * 获取共享模式等待thread集合\n     */\n    public final Collection<Thread> getSharedQueuedThreads() {\n        ArrayList<Thread> list = new ArrayList<Thread>();\n        for (Node p = tail; p != null; p = p.prev) {\n            if (p.isShared()) {\n                Thread t = p.thread;\n                if (t != null)\n                    list.add(t);\n            }\n        }\n        return list;\n    }\n\n\n    // Internal support methods for Conditions\n\n    /**\n     * 判断节点是否在同步队列中\n     */\n    final boolean isOnSyncQueue(Node node) {\n        //快速判断1：节点状态或者节点没有前置节点\n        //注：同步队列是有头节点的，而条件队列没有\n        if (node.waitStatus == Node.CONDITION || node.prev == null)\n            return false;\n        //快速判断2：next字段只有同步队列才会使用，条件队列中使用的是nextWaiter字段\n        if (node.next != null) // If has successor, it must be on queue\n            return true;\n        //上面如果无法判断则进入复杂判断\n        return findNodeFromTail(node);\n    }\n\n    private boolean findNodeFromTail(Node node) {\n        Node t = tail;\n        for (;;) {\n            if (t == node)\n                return true;\n            if (t == null)\n                return false;\n            t = t.prev;\n        }\n    }\n\n    /**\n     * 将节点从条件队列当中移动到同步队列当中，等待获取锁\n     */\n    final boolean transferForSignal(Node node) {\n        /*\n         * 修改节点信号量状态为0，失败直接返回false\n         */\n        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))\n            return false;\n\n        /*\n         * 加入同步队列尾部当中，返回前驱节点\n         */\n        Node p = enq(node);\n        int ws = p.waitStatus;\n        //前驱节点不可用 或者 修改信号量状态失败\n        if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))\n            LockSupport.unpark(node.thread); //唤醒当前节点\n        return true;\n    }\n\n    final boolean transferAfterCancelledWait(Node node) {\n        if (compareAndSetWaitStatus(node, Node.CONDITION, 0)) {\n            enq(node);\n            return true;\n        }\n        /*\n         * If we lost out to a signal(), then we can\'t proceed\n         * until it finishes its enq().  Cancelling during an\n         * incomplete transfer is both rare and transient, so just\n         * spin.\n         */\n        while (!isOnSyncQueue(node))\n            Thread.yield();\n        return false;\n    }\n\n    /**\n     * 入参就是新创建的节点，即当前节点\n     */\n    final int fullyRelease(Node node) {\n        boolean failed = true;\n        try {\n            //这里这个取值要注意，获取当前的state并释放，这从另一个角度说明必须是独占锁\n            //可以考虑下这个逻辑放在共享锁下面会发生什么？\n            int savedState = getState();\n            if (release(savedState)) {\n                failed = false;\n                return savedState;\n            } else {\n                //如果这里释放失败，则抛出异常\n                throw new IllegalMonitorStateException();\n            }\n        } finally {\n            /**\n             * 如果释放锁失败，则把节点取消，由这里就能看出来上面添加节点的逻辑中\n             * 只需要判断最后一个节点是否被取消就可以了\n             */\n            if (failed)\n                node.waitStatus = Node.CANCELLED;\n        }\n    }\n\n    // Instrumentation methods for conditions\n\n    public final boolean hasWaiters(ConditionObject condition) {\n        if (!owns(condition))\n            throw new IllegalArgumentException("Not owner");\n        return condition.hasWaiters();\n    }\n\n    /**\n     * 获取条件队列长度\n     */\n    public final int getWaitQueueLength(ConditionObject condition) {\n        if (!owns(condition))\n            throw new IllegalArgumentException("Not owner");\n        return condition.getWaitQueueLength();\n    }\n\n    /**\n     * 获取条件队列当中所有等待的thread集合\n     */\n    public final Collection<Thread> getWaitingThreads(ConditionObject condition) {\n        if (!owns(condition))\n            throw new IllegalArgumentException("Not owner");\n        return condition.getWaitingThreads();\n    }\n\n    /**\n     * 条件对象，实现基于条件的具体行为\n     */\n    public class ConditionObject implements Condition, java.io.Serializable {\n        private static final long serialVersionUID = 1173984872572414699L;\n        /** First node of condition queue. */\n        private transient Node firstWaiter;\n        /** Last node of condition queue. */\n        private transient Node lastWaiter;\n\n        /**\n         * Creates a new {@code ConditionObject} instance.\n         */\n        public ConditionObject() { }\n\n        // Internal methods\n\n        /**\n         * 1.与同步队列不同，条件队列头尾指针是firstWaiter跟lastWaiter\n         * 2.条件队列是在获取锁之后，也就是临界区进行操作，因此很多地方不用考虑并发\n         */\n        private Node addConditionWaiter() {\n            Node t = lastWaiter;\n            //如果最后一个节点被取消，则删除队列中被取消的节点\n            //至于为啥是最后一个节点后面会分析\n            if (t != null && t.waitStatus != Node.CONDITION) {\n                //删除所有被取消的节点\n                unlinkCancelledWaiters();\n                t = lastWaiter;\n            }\n            //创建一个类型为CONDITION的节点并加入队列，由于在临界区，所以这里不用并发控制\n            Node node = new Node(Thread.currentThread(), Node.CONDITION);\n            if (t == null)\n                firstWaiter = node;\n            else\n                t.nextWaiter = node;\n            lastWaiter = node;\n            return node;\n        }\n\n        /**\n         * 发信号，通知遍历条件队列当中的节点转移到同步队列当中，准备排队获取锁\n         */\n        private void doSignal(Node first) {\n            do {\n                if ( (firstWaiter = first.nextWaiter) == null)\n                    lastWaiter = null;\n                first.nextWaiter = null;\n            } while (!transferForSignal(first) && //转移节点\n                    (first = firstWaiter) != null);\n        }\n\n        /**\n         * 通知所有节点移动到同步队列当中，并将节点从条件队列删除\n         */\n        private void doSignalAll(Node first) {\n            lastWaiter = firstWaiter = null;\n            do {\n                Node next = first.nextWaiter;\n                first.nextWaiter = null;\n                transferForSignal(first);\n                first = next;\n            } while (first != null);\n        }\n\n        /**\n         * 删除条件队列当中被取消的节点\n         */\n        private void unlinkCancelledWaiters() {\n            Node t = firstWaiter;\n            Node trail = null;\n            while (t != null) {\n                Node next = t.nextWaiter;\n                if (t.waitStatus != Node.CONDITION) {\n                    t.nextWaiter = null;\n                    if (trail == null)\n                        firstWaiter = next;\n                    else\n                        trail.nextWaiter = next;\n                    if (next == null)\n                        lastWaiter = trail;\n                }\n                else\n                    trail = t;\n                t = next;\n            }\n        }\n\n        // public methods\n\n        /**\n         * 发新号，通知条件队列当中节点到同步队列当中去排队\n         */\n        public final void signal() {\n            if (!isHeldExclusively())//节点不能已经持有独占锁\n                throw new IllegalMonitorStateException();\n            Node first = firstWaiter;\n            if (first != null)\n                /**\n                 * 发信号通知条件队列的节点准备到同步队列当中去排队\n                 */\n                doSignal(first);\n        }\n\n        /**\n         * 唤醒所有条件队列的节点转移到同步队列当中\n         */\n            public final void signalAll() {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            Node first = firstWaiter;\n            if (first != null)\n                doSignalAll(first);\n        }\n\n        /**\n         * Implements uninterruptible condition wait.\n         * <ol>\n         * <li> Save lock state returned by {@link #getState}.\n         * <li> Invoke {@link #release} with saved state as argument,\n         *      throwing IllegalMonitorStateException if it fails.\n         * <li> Block until signalled.\n         * <li> Reacquire by invoking specialized version of\n         *      {@link #acquire} with saved state as argument.\n         * </ol>\n         */\n        public final void awaitUninterruptibly() {\n            Node node = addConditionWaiter();\n            int savedState = fullyRelease(node);\n            boolean interrupted = false;\n            while (!isOnSyncQueue(node)) {\n                LockSupport.park(this);\n                if (Thread.interrupted())\n                    interrupted = true;\n            }\n            if (acquireQueued(node, savedState) || interrupted)\n                selfInterrupt();\n        }\n\n        /** 该模式表示在退出等待时重新中断 */\n        private static final int REINTERRUPT =  1;\n        /** 异常中断 */\n        private static final int THROW_IE    = -1;\n\n        /**\n         * 这里的判断逻辑是：\n         * 1.如果现在不是中断的，即正常被signal唤醒则返回0\n         * 2.如果节点由中断加入同步队列则返回THROW_IE，由signal加入同步队列则返回REINTERRUPT\n         */\n        private int checkInterruptWhileWaiting(Node node) {\n            return Thread.interrupted() ?\n                    (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) :\n                    0;\n        }\n\n        /**\n         * 根据中断时机选择抛出异常或者设置线程中断状态\n         */\n        private void reportInterruptAfterWait(int interruptMode)\n                throws InterruptedException {\n            if (interruptMode == THROW_IE)\n                throw new InterruptedException();\n            else if (interruptMode == REINTERRUPT)\n                selfInterrupt();\n        }\n\n        /**\n         * 加入条件队列等待，条件队列入口\n         */\n        public final void await() throws InterruptedException {\n\n            //T2进来\n            //如果当前线程被中断则直接抛出异常\n            if (Thread.interrupted())\n                throw new InterruptedException();\n            //把当前节点加入条件队列\n            Node node = addConditionWaiter();\n            //释放掉已经获取的独占锁资源\n            int savedState = fullyRelease(node);//T2释放锁\n            int interruptMode = 0;\n            //如果不在同步队列中则不断挂起\n            while (!isOnSyncQueue(node)) {\n                LockSupport.park(this);//T1被阻塞\n                //这里被唤醒可能是正常的signal操作也可能是中断\n                if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                    break;\n            }\n            /**\n             * 走到这里说明节点已经条件满足被加入到了同步队列中或者中断了\n             * 这个方法很熟悉吧？就跟独占锁调用同样的获取锁方法，从这里可以看出条件队列只能用于独占锁\n             * 在处理中断之前首先要做的是从同步队列中成功获取锁资源\n             */\n            if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n                interruptMode = REINTERRUPT;\n            //走到这里说明已经成功获取到了独占锁，接下来就做些收尾工作\n            //删除条件队列中被取消的节点\n            if (node.nextWaiter != null) // clean up if cancelled\n                unlinkCancelledWaiters();\n            //根据不同模式处理中断\n            if (interruptMode != 0)\n                reportInterruptAfterWait(interruptMode);\n        }\n\n\n        /**\n         * Implements timed condition wait.\n         * <ol>\n         * <li> If current thread is interrupted, throw InterruptedException.\n         * <li> Save lock state returned by {@link #getState}.\n         * <li> Invoke {@link #release} with saved state as argument,\n         *      throwing IllegalMonitorStateException if it fails.\n         * <li> Block until signalled, interrupted, or timed out.\n         * <li> Reacquire by invoking specialized version of\n         *      {@link #acquire} with saved state as argument.\n         * <li> If interrupted while blocked in step 4, throw InterruptedException.\n         * <li> If timed out while blocked in step 4, return false, else true.\n         * </ol>\n         */\n        public final boolean await(long time, TimeUnit unit)\n                throws InterruptedException {\n            long nanosTimeout = unit.toNanos(time);\n            if (Thread.interrupted())\n                throw new InterruptedException();\n            Node node = addConditionWaiter();\n            int savedState = fullyRelease(node);\n            final long deadline = System.nanoTime() + nanosTimeout;\n            boolean timedout = false;\n            int interruptMode = 0;\n            while (!isOnSyncQueue(node)) {\n                if (nanosTimeout <= 0L) {\n                    timedout = transferAfterCancelledWait(node);\n                    break;\n                }\n                if (nanosTimeout >= spinForTimeoutThreshold)\n                    LockSupport.parkNanos(this, nanosTimeout);\n                if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                    break;\n                nanosTimeout = deadline - System.nanoTime();\n            }\n            if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n                interruptMode = REINTERRUPT;\n            if (node.nextWaiter != null)\n                unlinkCancelledWaiters();\n            if (interruptMode != 0)\n                reportInterruptAfterWait(interruptMode);\n            return !timedout;\n        }\n\n\n        final boolean isOwnedBy(AbstractQueuedSynchronizer sync) {\n            return sync == AbstractQueuedSynchronizer.this;\n        }\n\n        /**\n         * Queries whether any threads are waiting on this condition.\n         * Implements {@link AbstractQueuedSynchronizer#hasWaiters(ConditionObject)}.\n         *\n         * @return {@code true} if there are any waiting threads\n         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         *         returns {@code false}\n         */\n        protected final boolean hasWaiters() {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            for (Node w = firstWaiter; w != null; w = w.nextWaiter) {\n                if (w.waitStatus == Node.CONDITION)\n                    return true;\n            }\n            return false;\n        }\n\n        /**\n         * Returns an estimate of the number of threads waiting on\n         * this condition.\n         * Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength(ConditionObject)}.\n         *\n         * @return the estimated number of waiting threads\n         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         *         returns {@code false}\n         */\n        protected final int getWaitQueueLength() {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            int n = 0;\n            for (Node w = firstWaiter; w != null; w = w.nextWaiter) {\n                if (w.waitStatus == Node.CONDITION)\n                    ++n;\n            }\n            return n;\n        }\n\n        /**\n         * 得到同步队列当中所有在等待的Thread集合\n         */\n        protected final Collection<Thread> getWaitingThreads() {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            ArrayList<Thread> list = new ArrayList<Thread>();\n            for (Node w = firstWaiter; w != null; w = w.nextWaiter) {\n                if (w.waitStatus == Node.CONDITION) {\n                    Thread t = w.thread;\n                    if (t != null)\n                        list.add(t);\n                }\n            }\n            return list;\n        }\n    }\n\n    /**\n     * Setup to support compareAndSet. We need to natively implement\n     * this here: For the sake of permitting future enhancements, we\n     * cannot explicitly subclass AtomicInteger, which would be\n     * efficient and useful otherwise. So, as the lesser of evils, we\n     * natively implement using hotspot intrinsics API. And while we\n     * are at it, we do the same for other CASable fields (which could\n     * otherwise be done with atomic field updaters).\n     * unsafe魔法类，直接绕过虚拟机内存管理机制，修改内存\n     */\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    //偏移量\n    private static final long stateOffset;\n    private static final long headOffset;\n    private static final long tailOffset;\n    private static final long waitStatusOffset;\n    private static final long nextOffset;\n\n    static {\n        try {\n            //状态偏移量\n            stateOffset = unsafe.objectFieldOffset\n                    (AbstractQueuedSynchronizer.class.getDeclaredField("state"));\n            //head指针偏移量，head指向CLH队列的头部\n            headOffset = unsafe.objectFieldOffset\n                    (AbstractQueuedSynchronizer.class.getDeclaredField("head"));\n            tailOffset = unsafe.objectFieldOffset\n                    (AbstractQueuedSynchronizer.class.getDeclaredField("tail"));\n            waitStatusOffset = unsafe.objectFieldOffset\n                    (Node.class.getDeclaredField("waitStatus"));\n            nextOffset = unsafe.objectFieldOffset\n                    (Node.class.getDeclaredField("next"));\n\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    /**\n     * CAS 修改头部节点指向. 并发入队时使用.\n     */\n    private final boolean compareAndSetHead(Node update) {\n        return unsafe.compareAndSwapObject(this, headOffset, null, update);\n    }\n\n    /**\n     * CAS 修改尾部节点指向. 并发入队时使用.\n     */\n    private final boolean compareAndSetTail(Node expect, Node update) {\n        return unsafe.compareAndSwapObject(this, tailOffset, expect, update);\n    }\n\n    /**\n     * CAS 修改信号量状态.\n     */\n    private static final boolean compareAndSetWaitStatus(Node node,\n                                                         int expect,\n                                                         int update) {\n        return unsafe.compareAndSwapInt(node, waitStatusOffset,\n                expect, update);\n    }\n\n    /**\n     * 修改节点的后继指针.\n     */\n    private static final boolean compareAndSetNext(Node node,\n                                                   Node expect,\n                                                   Node update) {\n        return unsafe.compareAndSwapObject(node, nextOffset, expect, update);\n    }\n}\n\n\nAQS框架具体实现-独占锁实现ReentrantLock\n\npublic class ReentrantLock implements Lock, java.io.Serializable {\n    private static final long serialVersionUID = 7373984872572414699L;\n    /**\n     * 内部调用AQS的动作，都基于该成员属性实现\n     */\n    private final Sync sync;\n\n    /**\n     * ReentrantLock锁同步操作的基础类,继承自AQS框架.\n     * 该类有两个继承类，1、NonfairSync 非公平锁，2、FairSync公平锁\n     */\n        abstract static class Sync extends AbstractQueuedSynchronizer {\n        private static final long serialVersionUID = -5179523762034025860L;\n\n        /**\n         * 加锁的具体行为由子类实现\n         */\n        abstract void lock();\n\n        /**\n         * 尝试获取非公平锁\n         */\n        final boolean nonfairTryAcquire(int acquires) {\n            //acquires = 1\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            /**\n             * 不需要判断同步队列（CLH）中是否有排队等待线程\n             * 判断state状态是否为0，不为0可以加锁\n             */\n            if (c == 0) {\n                //unsafe操作，cas修改state状态\n                if (compareAndSetState(0, acquires)) {\n                    //独占状态锁持有者指向当前线程\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            /**\n             * state状态不为0，判断锁持有者是否是当前线程，\n             * 如果是当前线程持有 则state+1\n             */\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error("Maximum lock count exceeded");\n                setState(nextc);\n                return true;\n            }\n            //加锁失败\n            return false;\n        }\n\n        /**\n         * 释放锁\n         */\n        protected final boolean tryRelease(int releases) {\n            int c = getState() - releases;\n            if (Thread.currentThread() != getExclusiveOwnerThread())\n                throw new IllegalMonitorStateException();\n            boolean free = false;\n            if (c == 0) {\n                free = true;\n                setExclusiveOwnerThread(null);\n            }\n            setState(c);\n            return free;\n        }\n\n        /**\n         * 判断持有独占锁的线程是否是当前线程\n         */\n        protected final boolean isHeldExclusively() {\n            return getExclusiveOwnerThread() == Thread.currentThread();\n        }\n\n        //返回条件对象\n        final ConditionObject newCondition() {\n            return new ConditionObject();\n        }\n\n\n        final Thread getOwner() {\n            return getState() == 0 ? null : getExclusiveOwnerThread();\n        }\n\n        final int getHoldCount() {\n            return isHeldExclusively() ? getState() : 0;\n        }\n\n        final boolean isLocked() {\n            return getState() != 0;\n        }\n\n        /**\n         * Reconstitutes the instance from a stream (that is, deserializes it).\n         */\n        private void readObject(java.io.ObjectInputStream s)\n                throws java.io.IOException, ClassNotFoundException {\n            s.defaultReadObject();\n            setState(0); // reset to unlocked state\n        }\n    }\n\n    /**\n     * 非公平锁\n     */\n    static final class NonfairSync extends Sync {\n        private static final long serialVersionUID = 7316153563782823691L;\n        /**\n         * 加锁行为\n         */\n        final void lock() {\n            /**\n             * 第一步：直接尝试加锁\n             * 与公平锁实现的加锁行为一个最大的区别在于，此处不会去判断同步队列(CLH队列)中\n             * 是否有排队等待加锁的节点，上来直接加锁（判断state是否为0,CAS修改state为1）\n             * ，并将独占锁持有者 exclusiveOwnerThread 属性指向当前线程\n             * 如果当前有人占用锁，再尝试去加一次锁\n             */\n            if (compareAndSetState(0, 1))\n                setExclusiveOwnerThread(Thread.currentThread());\n            else\n                //AQS定义的方法,加锁\n                acquire(1);\n        }\n\n        /**\n         * 父类AbstractQueuedSynchronizer.acquire()中调用本方法\n         */\n        protected final boolean tryAcquire(int acquires) {\n            return nonfairTryAcquire(acquires);\n        }\n    }\n\n    /**\n     * 公平锁\n     */\n    static final class FairSync extends Sync {\n        private static final long serialVersionUID = -3000897897090466540L;\n        final void lock() {\n            acquire(1);\n        }\n        /**\n         * 重写aqs中的方法逻辑\n         * 尝试加锁，被AQS的acquire()方法调用\n         */\n        protected final boolean tryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                /**\n                 * 与非公平锁中的区别，需要先判断队列当中是否有等待的节点\n                 * 如果没有则可以尝试CAS获取锁\n                 */\n                if (!hasQueuedPredecessors() &&\n                        compareAndSetState(0, acquires)) {\n                    //独占线程指向当前线程\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error("Maximum lock count exceeded");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n    }\n\n    /**\n     * 默认构造函数，创建非公平锁对象\n     */\n    public ReentrantLock() {\n        sync = new NonfairSync();\n    }\n\n    /**\n     * 根据要求创建公平锁或非公平锁\n     */\n    public ReentrantLock(boolean fair) {\n        sync = fair ? new FairSync() : new NonfairSync();\n    }\n\n    /**\n     * 加锁\n     */\n    public void lock() {\n        sync.lock();\n    }\n\n    /**\n     * 尝试获去取锁，获取失败被阻塞，线程被中断直接抛出异常\n     */\n    public void lockInterruptibly() throws InterruptedException {\n        sync.acquireInterruptibly(1);\n    }\n\n    /**\n     * 尝试加锁\n     */\n    public boolean tryLock() {\n        return sync.nonfairTryAcquire(1);\n    }\n\n    /**\n     * 指定等待时间内尝试加锁\n     */\n    public boolean tryLock(long timeout, TimeUnit unit)\n            throws InterruptedException {\n        return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n    }\n\n    /**\n     * 尝试去释放锁\n     */\n    public void unlock() {\n        sync.release(1);\n    }\n\n    /**\n     * 返回条件对象\n     */\n    public Condition newCondition() {\n        return sync.newCondition();\n    }\n\n    /**\n     * 返回当前线程持有的state状态数量\n     */\n    public int getHoldCount() {\n        return sync.getHoldCount();\n    }\n\n    /**\n     * 查询当前线程是否持有锁\n     */\n    public boolean isHeldByCurrentThread() {\n        return sync.isHeldExclusively();\n    }\n\n    /**\n     * 状态表示是否被Thread加锁持有\n     */\n    public boolean isLocked() {\n        return sync.isLocked();\n    }\n\n    /**\n     * 是否公平锁？是返回true 否则返回 false\n     */\n    public final boolean isFair() {\n        return sync instanceof FairSync;\n    }\n\n    /**\n     * 获取持有锁的当前线程\n     */\n    protected Thread getOwner() {\n        return sync.getOwner();\n    }\n\n    /**\n     * 判断队列当中是否有在等待获取锁的Thread节点\n     */\n    public final boolean hasQueuedThreads() {\n        return sync.hasQueuedThreads();\n    }\n\n    /**\n     * 当前线程是否在同步队列中等待\n     */\n    public final boolean hasQueuedThread(Thread thread) {\n        return sync.isQueued(thread);\n    }\n\n    /**\n     * 获取同步队列长度\n     */\n    public final int getQueueLength() {\n        return sync.getQueueLength();\n    }\n\n    /**\n     * 返回Thread集合，排队中的所有节点Thread会被返回\n     */\n    protected Collection<Thread> getQueuedThreads() {\n        return sync.getQueuedThreads();\n    }\n\n    /**\n     * 条件队列当中是否有正在等待的节点\n     */\n    public boolean hasWaiters(Condition condition) {\n        if (condition == null)\n            throw new NullPointerException();\n        if (!(condition instanceof AbstractQueuedSynchronizer.ConditionObject))\n            throw new IllegalArgumentException("not owner");\n        return sync.hasWaiters((AbstractQueuedSynchronizer.ConditionObject)condition);\n    }\n\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("245")]),s("br"),s("span",{staticClass:"line-number"},[n._v("246")]),s("br"),s("span",{staticClass:"line-number"},[n._v("247")]),s("br"),s("span",{staticClass:"line-number"},[n._v("248")]),s("br"),s("span",{staticClass:"line-number"},[n._v("249")]),s("br"),s("span",{staticClass:"line-number"},[n._v("250")]),s("br"),s("span",{staticClass:"line-number"},[n._v("251")]),s("br"),s("span",{staticClass:"line-number"},[n._v("252")]),s("br"),s("span",{staticClass:"line-number"},[n._v("253")]),s("br"),s("span",{staticClass:"line-number"},[n._v("254")]),s("br"),s("span",{staticClass:"line-number"},[n._v("255")]),s("br"),s("span",{staticClass:"line-number"},[n._v("256")]),s("br"),s("span",{staticClass:"line-number"},[n._v("257")]),s("br"),s("span",{staticClass:"line-number"},[n._v("258")]),s("br"),s("span",{staticClass:"line-number"},[n._v("259")]),s("br"),s("span",{staticClass:"line-number"},[n._v("260")]),s("br"),s("span",{staticClass:"line-number"},[n._v("261")]),s("br"),s("span",{staticClass:"line-number"},[n._v("262")]),s("br"),s("span",{staticClass:"line-number"},[n._v("263")]),s("br"),s("span",{staticClass:"line-number"},[n._v("264")]),s("br"),s("span",{staticClass:"line-number"},[n._v("265")]),s("br"),s("span",{staticClass:"line-number"},[n._v("266")]),s("br"),s("span",{staticClass:"line-number"},[n._v("267")]),s("br"),s("span",{staticClass:"line-number"},[n._v("268")]),s("br"),s("span",{staticClass:"line-number"},[n._v("269")]),s("br"),s("span",{staticClass:"line-number"},[n._v("270")]),s("br"),s("span",{staticClass:"line-number"},[n._v("271")]),s("br"),s("span",{staticClass:"line-number"},[n._v("272")]),s("br"),s("span",{staticClass:"line-number"},[n._v("273")]),s("br"),s("span",{staticClass:"line-number"},[n._v("274")]),s("br"),s("span",{staticClass:"line-number"},[n._v("275")]),s("br"),s("span",{staticClass:"line-number"},[n._v("276")]),s("br"),s("span",{staticClass:"line-number"},[n._v("277")]),s("br"),s("span",{staticClass:"line-number"},[n._v("278")]),s("br"),s("span",{staticClass:"line-number"},[n._v("279")]),s("br"),s("span",{staticClass:"line-number"},[n._v("280")]),s("br"),s("span",{staticClass:"line-number"},[n._v("281")]),s("br"),s("span",{staticClass:"line-number"},[n._v("282")]),s("br"),s("span",{staticClass:"line-number"},[n._v("283")]),s("br"),s("span",{staticClass:"line-number"},[n._v("284")]),s("br"),s("span",{staticClass:"line-number"},[n._v("285")]),s("br"),s("span",{staticClass:"line-number"},[n._v("286")]),s("br"),s("span",{staticClass:"line-number"},[n._v("287")]),s("br"),s("span",{staticClass:"line-number"},[n._v("288")]),s("br"),s("span",{staticClass:"line-number"},[n._v("289")]),s("br"),s("span",{staticClass:"line-number"},[n._v("290")]),s("br"),s("span",{staticClass:"line-number"},[n._v("291")]),s("br"),s("span",{staticClass:"line-number"},[n._v("292")]),s("br"),s("span",{staticClass:"line-number"},[n._v("293")]),s("br"),s("span",{staticClass:"line-number"},[n._v("294")]),s("br"),s("span",{staticClass:"line-number"},[n._v("295")]),s("br"),s("span",{staticClass:"line-number"},[n._v("296")]),s("br"),s("span",{staticClass:"line-number"},[n._v("297")]),s("br"),s("span",{staticClass:"line-number"},[n._v("298")]),s("br"),s("span",{staticClass:"line-number"},[n._v("299")]),s("br"),s("span",{staticClass:"line-number"},[n._v("300")]),s("br"),s("span",{staticClass:"line-number"},[n._v("301")]),s("br"),s("span",{staticClass:"line-number"},[n._v("302")]),s("br"),s("span",{staticClass:"line-number"},[n._v("303")]),s("br"),s("span",{staticClass:"line-number"},[n._v("304")]),s("br"),s("span",{staticClass:"line-number"},[n._v("305")]),s("br"),s("span",{staticClass:"line-number"},[n._v("306")]),s("br"),s("span",{staticClass:"line-number"},[n._v("307")]),s("br"),s("span",{staticClass:"line-number"},[n._v("308")]),s("br"),s("span",{staticClass:"line-number"},[n._v("309")]),s("br"),s("span",{staticClass:"line-number"},[n._v("310")]),s("br"),s("span",{staticClass:"line-number"},[n._v("311")]),s("br"),s("span",{staticClass:"line-number"},[n._v("312")]),s("br"),s("span",{staticClass:"line-number"},[n._v("313")]),s("br"),s("span",{staticClass:"line-number"},[n._v("314")]),s("br"),s("span",{staticClass:"line-number"},[n._v("315")]),s("br"),s("span",{staticClass:"line-number"},[n._v("316")]),s("br"),s("span",{staticClass:"line-number"},[n._v("317")]),s("br"),s("span",{staticClass:"line-number"},[n._v("318")]),s("br"),s("span",{staticClass:"line-number"},[n._v("319")]),s("br"),s("span",{staticClass:"line-number"},[n._v("320")]),s("br"),s("span",{staticClass:"line-number"},[n._v("321")]),s("br"),s("span",{staticClass:"line-number"},[n._v("322")]),s("br"),s("span",{staticClass:"line-number"},[n._v("323")]),s("br"),s("span",{staticClass:"line-number"},[n._v("324")]),s("br"),s("span",{staticClass:"line-number"},[n._v("325")]),s("br"),s("span",{staticClass:"line-number"},[n._v("326")]),s("br"),s("span",{staticClass:"line-number"},[n._v("327")]),s("br"),s("span",{staticClass:"line-number"},[n._v("328")]),s("br"),s("span",{staticClass:"line-number"},[n._v("329")]),s("br"),s("span",{staticClass:"line-number"},[n._v("330")]),s("br"),s("span",{staticClass:"line-number"},[n._v("331")]),s("br"),s("span",{staticClass:"line-number"},[n._v("332")]),s("br"),s("span",{staticClass:"line-number"},[n._v("333")]),s("br"),s("span",{staticClass:"line-number"},[n._v("334")]),s("br"),s("span",{staticClass:"line-number"},[n._v("335")]),s("br"),s("span",{staticClass:"line-number"},[n._v("336")]),s("br"),s("span",{staticClass:"line-number"},[n._v("337")]),s("br"),s("span",{staticClass:"line-number"},[n._v("338")]),s("br"),s("span",{staticClass:"line-number"},[n._v("339")]),s("br"),s("span",{staticClass:"line-number"},[n._v("340")]),s("br"),s("span",{staticClass:"line-number"},[n._v("341")]),s("br"),s("span",{staticClass:"line-number"},[n._v("342")]),s("br"),s("span",{staticClass:"line-number"},[n._v("343")]),s("br"),s("span",{staticClass:"line-number"},[n._v("344")]),s("br"),s("span",{staticClass:"line-number"},[n._v("345")]),s("br"),s("span",{staticClass:"line-number"},[n._v("346")]),s("br"),s("span",{staticClass:"line-number"},[n._v("347")]),s("br"),s("span",{staticClass:"line-number"},[n._v("348")]),s("br"),s("span",{staticClass:"line-number"},[n._v("349")]),s("br"),s("span",{staticClass:"line-number"},[n._v("350")]),s("br"),s("span",{staticClass:"line-number"},[n._v("351")]),s("br"),s("span",{staticClass:"line-number"},[n._v("352")]),s("br"),s("span",{staticClass:"line-number"},[n._v("353")]),s("br"),s("span",{staticClass:"line-number"},[n._v("354")]),s("br"),s("span",{staticClass:"line-number"},[n._v("355")]),s("br"),s("span",{staticClass:"line-number"},[n._v("356")]),s("br"),s("span",{staticClass:"line-number"},[n._v("357")]),s("br"),s("span",{staticClass:"line-number"},[n._v("358")]),s("br"),s("span",{staticClass:"line-number"},[n._v("359")]),s("br"),s("span",{staticClass:"line-number"},[n._v("360")]),s("br"),s("span",{staticClass:"line-number"},[n._v("361")]),s("br"),s("span",{staticClass:"line-number"},[n._v("362")]),s("br"),s("span",{staticClass:"line-number"},[n._v("363")]),s("br"),s("span",{staticClass:"line-number"},[n._v("364")]),s("br"),s("span",{staticClass:"line-number"},[n._v("365")]),s("br"),s("span",{staticClass:"line-number"},[n._v("366")]),s("br"),s("span",{staticClass:"line-number"},[n._v("367")]),s("br"),s("span",{staticClass:"line-number"},[n._v("368")]),s("br"),s("span",{staticClass:"line-number"},[n._v("369")]),s("br"),s("span",{staticClass:"line-number"},[n._v("370")]),s("br"),s("span",{staticClass:"line-number"},[n._v("371")]),s("br"),s("span",{staticClass:"line-number"},[n._v("372")]),s("br"),s("span",{staticClass:"line-number"},[n._v("373")]),s("br"),s("span",{staticClass:"line-number"},[n._v("374")]),s("br"),s("span",{staticClass:"line-number"},[n._v("375")]),s("br"),s("span",{staticClass:"line-number"},[n._v("376")]),s("br"),s("span",{staticClass:"line-number"},[n._v("377")]),s("br"),s("span",{staticClass:"line-number"},[n._v("378")]),s("br"),s("span",{staticClass:"line-number"},[n._v("379")]),s("br"),s("span",{staticClass:"line-number"},[n._v("380")]),s("br"),s("span",{staticClass:"line-number"},[n._v("381")]),s("br"),s("span",{staticClass:"line-number"},[n._v("382")]),s("br"),s("span",{staticClass:"line-number"},[n._v("383")]),s("br"),s("span",{staticClass:"line-number"},[n._v("384")]),s("br"),s("span",{staticClass:"line-number"},[n._v("385")]),s("br"),s("span",{staticClass:"line-number"},[n._v("386")]),s("br"),s("span",{staticClass:"line-number"},[n._v("387")]),s("br"),s("span",{staticClass:"line-number"},[n._v("388")]),s("br"),s("span",{staticClass:"line-number"},[n._v("389")]),s("br"),s("span",{staticClass:"line-number"},[n._v("390")]),s("br"),s("span",{staticClass:"line-number"},[n._v("391")]),s("br"),s("span",{staticClass:"line-number"},[n._v("392")]),s("br"),s("span",{staticClass:"line-number"},[n._v("393")]),s("br"),s("span",{staticClass:"line-number"},[n._v("394")]),s("br"),s("span",{staticClass:"line-number"},[n._v("395")]),s("br"),s("span",{staticClass:"line-number"},[n._v("396")]),s("br"),s("span",{staticClass:"line-number"},[n._v("397")]),s("br"),s("span",{staticClass:"line-number"},[n._v("398")]),s("br"),s("span",{staticClass:"line-number"},[n._v("399")]),s("br"),s("span",{staticClass:"line-number"},[n._v("400")]),s("br"),s("span",{staticClass:"line-number"},[n._v("401")]),s("br"),s("span",{staticClass:"line-number"},[n._v("402")]),s("br"),s("span",{staticClass:"line-number"},[n._v("403")]),s("br"),s("span",{staticClass:"line-number"},[n._v("404")]),s("br"),s("span",{staticClass:"line-number"},[n._v("405")]),s("br"),s("span",{staticClass:"line-number"},[n._v("406")]),s("br"),s("span",{staticClass:"line-number"},[n._v("407")]),s("br"),s("span",{staticClass:"line-number"},[n._v("408")]),s("br"),s("span",{staticClass:"line-number"},[n._v("409")]),s("br"),s("span",{staticClass:"line-number"},[n._v("410")]),s("br"),s("span",{staticClass:"line-number"},[n._v("411")]),s("br"),s("span",{staticClass:"line-number"},[n._v("412")]),s("br"),s("span",{staticClass:"line-number"},[n._v("413")]),s("br"),s("span",{staticClass:"line-number"},[n._v("414")]),s("br"),s("span",{staticClass:"line-number"},[n._v("415")]),s("br"),s("span",{staticClass:"line-number"},[n._v("416")]),s("br"),s("span",{staticClass:"line-number"},[n._v("417")]),s("br"),s("span",{staticClass:"line-number"},[n._v("418")]),s("br"),s("span",{staticClass:"line-number"},[n._v("419")]),s("br"),s("span",{staticClass:"line-number"},[n._v("420")]),s("br"),s("span",{staticClass:"line-number"},[n._v("421")]),s("br"),s("span",{staticClass:"line-number"},[n._v("422")]),s("br"),s("span",{staticClass:"line-number"},[n._v("423")]),s("br"),s("span",{staticClass:"line-number"},[n._v("424")]),s("br"),s("span",{staticClass:"line-number"},[n._v("425")]),s("br"),s("span",{staticClass:"line-number"},[n._v("426")]),s("br"),s("span",{staticClass:"line-number"},[n._v("427")]),s("br"),s("span",{staticClass:"line-number"},[n._v("428")]),s("br"),s("span",{staticClass:"line-number"},[n._v("429")]),s("br"),s("span",{staticClass:"line-number"},[n._v("430")]),s("br"),s("span",{staticClass:"line-number"},[n._v("431")]),s("br"),s("span",{staticClass:"line-number"},[n._v("432")]),s("br"),s("span",{staticClass:"line-number"},[n._v("433")]),s("br"),s("span",{staticClass:"line-number"},[n._v("434")]),s("br"),s("span",{staticClass:"line-number"},[n._v("435")]),s("br"),s("span",{staticClass:"line-number"},[n._v("436")]),s("br"),s("span",{staticClass:"line-number"},[n._v("437")]),s("br"),s("span",{staticClass:"line-number"},[n._v("438")]),s("br"),s("span",{staticClass:"line-number"},[n._v("439")]),s("br"),s("span",{staticClass:"line-number"},[n._v("440")]),s("br"),s("span",{staticClass:"line-number"},[n._v("441")]),s("br"),s("span",{staticClass:"line-number"},[n._v("442")]),s("br"),s("span",{staticClass:"line-number"},[n._v("443")]),s("br"),s("span",{staticClass:"line-number"},[n._v("444")]),s("br"),s("span",{staticClass:"line-number"},[n._v("445")]),s("br"),s("span",{staticClass:"line-number"},[n._v("446")]),s("br"),s("span",{staticClass:"line-number"},[n._v("447")]),s("br"),s("span",{staticClass:"line-number"},[n._v("448")]),s("br"),s("span",{staticClass:"line-number"},[n._v("449")]),s("br"),s("span",{staticClass:"line-number"},[n._v("450")]),s("br"),s("span",{staticClass:"line-number"},[n._v("451")]),s("br"),s("span",{staticClass:"line-number"},[n._v("452")]),s("br"),s("span",{staticClass:"line-number"},[n._v("453")]),s("br"),s("span",{staticClass:"line-number"},[n._v("454")]),s("br"),s("span",{staticClass:"line-number"},[n._v("455")]),s("br"),s("span",{staticClass:"line-number"},[n._v("456")]),s("br"),s("span",{staticClass:"line-number"},[n._v("457")]),s("br"),s("span",{staticClass:"line-number"},[n._v("458")]),s("br"),s("span",{staticClass:"line-number"},[n._v("459")]),s("br"),s("span",{staticClass:"line-number"},[n._v("460")]),s("br"),s("span",{staticClass:"line-number"},[n._v("461")]),s("br"),s("span",{staticClass:"line-number"},[n._v("462")]),s("br"),s("span",{staticClass:"line-number"},[n._v("463")]),s("br"),s("span",{staticClass:"line-number"},[n._v("464")]),s("br"),s("span",{staticClass:"line-number"},[n._v("465")]),s("br"),s("span",{staticClass:"line-number"},[n._v("466")]),s("br"),s("span",{staticClass:"line-number"},[n._v("467")]),s("br"),s("span",{staticClass:"line-number"},[n._v("468")]),s("br"),s("span",{staticClass:"line-number"},[n._v("469")]),s("br"),s("span",{staticClass:"line-number"},[n._v("470")]),s("br"),s("span",{staticClass:"line-number"},[n._v("471")]),s("br"),s("span",{staticClass:"line-number"},[n._v("472")]),s("br"),s("span",{staticClass:"line-number"},[n._v("473")]),s("br"),s("span",{staticClass:"line-number"},[n._v("474")]),s("br"),s("span",{staticClass:"line-number"},[n._v("475")]),s("br"),s("span",{staticClass:"line-number"},[n._v("476")]),s("br"),s("span",{staticClass:"line-number"},[n._v("477")]),s("br"),s("span",{staticClass:"line-number"},[n._v("478")]),s("br"),s("span",{staticClass:"line-number"},[n._v("479")]),s("br"),s("span",{staticClass:"line-number"},[n._v("480")]),s("br"),s("span",{staticClass:"line-number"},[n._v("481")]),s("br"),s("span",{staticClass:"line-number"},[n._v("482")]),s("br"),s("span",{staticClass:"line-number"},[n._v("483")]),s("br"),s("span",{staticClass:"line-number"},[n._v("484")]),s("br"),s("span",{staticClass:"line-number"},[n._v("485")]),s("br"),s("span",{staticClass:"line-number"},[n._v("486")]),s("br"),s("span",{staticClass:"line-number"},[n._v("487")]),s("br"),s("span",{staticClass:"line-number"},[n._v("488")]),s("br"),s("span",{staticClass:"line-number"},[n._v("489")]),s("br"),s("span",{staticClass:"line-number"},[n._v("490")]),s("br"),s("span",{staticClass:"line-number"},[n._v("491")]),s("br"),s("span",{staticClass:"line-number"},[n._v("492")]),s("br"),s("span",{staticClass:"line-number"},[n._v("493")]),s("br"),s("span",{staticClass:"line-number"},[n._v("494")]),s("br"),s("span",{staticClass:"line-number"},[n._v("495")]),s("br"),s("span",{staticClass:"line-number"},[n._v("496")]),s("br"),s("span",{staticClass:"line-number"},[n._v("497")]),s("br"),s("span",{staticClass:"line-number"},[n._v("498")]),s("br"),s("span",{staticClass:"line-number"},[n._v("499")]),s("br"),s("span",{staticClass:"line-number"},[n._v("500")]),s("br"),s("span",{staticClass:"line-number"},[n._v("501")]),s("br"),s("span",{staticClass:"line-number"},[n._v("502")]),s("br"),s("span",{staticClass:"line-number"},[n._v("503")]),s("br"),s("span",{staticClass:"line-number"},[n._v("504")]),s("br"),s("span",{staticClass:"line-number"},[n._v("505")]),s("br"),s("span",{staticClass:"line-number"},[n._v("506")]),s("br"),s("span",{staticClass:"line-number"},[n._v("507")]),s("br"),s("span",{staticClass:"line-number"},[n._v("508")]),s("br"),s("span",{staticClass:"line-number"},[n._v("509")]),s("br"),s("span",{staticClass:"line-number"},[n._v("510")]),s("br"),s("span",{staticClass:"line-number"},[n._v("511")]),s("br"),s("span",{staticClass:"line-number"},[n._v("512")]),s("br"),s("span",{staticClass:"line-number"},[n._v("513")]),s("br"),s("span",{staticClass:"line-number"},[n._v("514")]),s("br"),s("span",{staticClass:"line-number"},[n._v("515")]),s("br"),s("span",{staticClass:"line-number"},[n._v("516")]),s("br"),s("span",{staticClass:"line-number"},[n._v("517")]),s("br"),s("span",{staticClass:"line-number"},[n._v("518")]),s("br"),s("span",{staticClass:"line-number"},[n._v("519")]),s("br"),s("span",{staticClass:"line-number"},[n._v("520")]),s("br"),s("span",{staticClass:"line-number"},[n._v("521")]),s("br"),s("span",{staticClass:"line-number"},[n._v("522")]),s("br"),s("span",{staticClass:"line-number"},[n._v("523")]),s("br"),s("span",{staticClass:"line-number"},[n._v("524")]),s("br"),s("span",{staticClass:"line-number"},[n._v("525")]),s("br"),s("span",{staticClass:"line-number"},[n._v("526")]),s("br"),s("span",{staticClass:"line-number"},[n._v("527")]),s("br"),s("span",{staticClass:"line-number"},[n._v("528")]),s("br"),s("span",{staticClass:"line-number"},[n._v("529")]),s("br"),s("span",{staticClass:"line-number"},[n._v("530")]),s("br"),s("span",{staticClass:"line-number"},[n._v("531")]),s("br"),s("span",{staticClass:"line-number"},[n._v("532")]),s("br"),s("span",{staticClass:"line-number"},[n._v("533")]),s("br"),s("span",{staticClass:"line-number"},[n._v("534")]),s("br"),s("span",{staticClass:"line-number"},[n._v("535")]),s("br"),s("span",{staticClass:"line-number"},[n._v("536")]),s("br"),s("span",{staticClass:"line-number"},[n._v("537")]),s("br"),s("span",{staticClass:"line-number"},[n._v("538")]),s("br"),s("span",{staticClass:"line-number"},[n._v("539")]),s("br"),s("span",{staticClass:"line-number"},[n._v("540")]),s("br"),s("span",{staticClass:"line-number"},[n._v("541")]),s("br"),s("span",{staticClass:"line-number"},[n._v("542")]),s("br"),s("span",{staticClass:"line-number"},[n._v("543")]),s("br"),s("span",{staticClass:"line-number"},[n._v("544")]),s("br"),s("span",{staticClass:"line-number"},[n._v("545")]),s("br"),s("span",{staticClass:"line-number"},[n._v("546")]),s("br"),s("span",{staticClass:"line-number"},[n._v("547")]),s("br"),s("span",{staticClass:"line-number"},[n._v("548")]),s("br"),s("span",{staticClass:"line-number"},[n._v("549")]),s("br"),s("span",{staticClass:"line-number"},[n._v("550")]),s("br"),s("span",{staticClass:"line-number"},[n._v("551")]),s("br"),s("span",{staticClass:"line-number"},[n._v("552")]),s("br"),s("span",{staticClass:"line-number"},[n._v("553")]),s("br"),s("span",{staticClass:"line-number"},[n._v("554")]),s("br"),s("span",{staticClass:"line-number"},[n._v("555")]),s("br"),s("span",{staticClass:"line-number"},[n._v("556")]),s("br"),s("span",{staticClass:"line-number"},[n._v("557")]),s("br"),s("span",{staticClass:"line-number"},[n._v("558")]),s("br"),s("span",{staticClass:"line-number"},[n._v("559")]),s("br"),s("span",{staticClass:"line-number"},[n._v("560")]),s("br"),s("span",{staticClass:"line-number"},[n._v("561")]),s("br"),s("span",{staticClass:"line-number"},[n._v("562")]),s("br"),s("span",{staticClass:"line-number"},[n._v("563")]),s("br"),s("span",{staticClass:"line-number"},[n._v("564")]),s("br"),s("span",{staticClass:"line-number"},[n._v("565")]),s("br"),s("span",{staticClass:"line-number"},[n._v("566")]),s("br"),s("span",{staticClass:"line-number"},[n._v("567")]),s("br"),s("span",{staticClass:"line-number"},[n._v("568")]),s("br"),s("span",{staticClass:"line-number"},[n._v("569")]),s("br"),s("span",{staticClass:"line-number"},[n._v("570")]),s("br"),s("span",{staticClass:"line-number"},[n._v("571")]),s("br"),s("span",{staticClass:"line-number"},[n._v("572")]),s("br"),s("span",{staticClass:"line-number"},[n._v("573")]),s("br"),s("span",{staticClass:"line-number"},[n._v("574")]),s("br"),s("span",{staticClass:"line-number"},[n._v("575")]),s("br"),s("span",{staticClass:"line-number"},[n._v("576")]),s("br"),s("span",{staticClass:"line-number"},[n._v("577")]),s("br"),s("span",{staticClass:"line-number"},[n._v("578")]),s("br"),s("span",{staticClass:"line-number"},[n._v("579")]),s("br"),s("span",{staticClass:"line-number"},[n._v("580")]),s("br"),s("span",{staticClass:"line-number"},[n._v("581")]),s("br"),s("span",{staticClass:"line-number"},[n._v("582")]),s("br"),s("span",{staticClass:"line-number"},[n._v("583")]),s("br"),s("span",{staticClass:"line-number"},[n._v("584")]),s("br"),s("span",{staticClass:"line-number"},[n._v("585")]),s("br"),s("span",{staticClass:"line-number"},[n._v("586")]),s("br"),s("span",{staticClass:"line-number"},[n._v("587")]),s("br"),s("span",{staticClass:"line-number"},[n._v("588")]),s("br"),s("span",{staticClass:"line-number"},[n._v("589")]),s("br"),s("span",{staticClass:"line-number"},[n._v("590")]),s("br"),s("span",{staticClass:"line-number"},[n._v("591")]),s("br"),s("span",{staticClass:"line-number"},[n._v("592")]),s("br"),s("span",{staticClass:"line-number"},[n._v("593")]),s("br"),s("span",{staticClass:"line-number"},[n._v("594")]),s("br"),s("span",{staticClass:"line-number"},[n._v("595")]),s("br"),s("span",{staticClass:"line-number"},[n._v("596")]),s("br"),s("span",{staticClass:"line-number"},[n._v("597")]),s("br"),s("span",{staticClass:"line-number"},[n._v("598")]),s("br"),s("span",{staticClass:"line-number"},[n._v("599")]),s("br"),s("span",{staticClass:"line-number"},[n._v("600")]),s("br"),s("span",{staticClass:"line-number"},[n._v("601")]),s("br"),s("span",{staticClass:"line-number"},[n._v("602")]),s("br"),s("span",{staticClass:"line-number"},[n._v("603")]),s("br"),s("span",{staticClass:"line-number"},[n._v("604")]),s("br"),s("span",{staticClass:"line-number"},[n._v("605")]),s("br"),s("span",{staticClass:"line-number"},[n._v("606")]),s("br"),s("span",{staticClass:"line-number"},[n._v("607")]),s("br"),s("span",{staticClass:"line-number"},[n._v("608")]),s("br"),s("span",{staticClass:"line-number"},[n._v("609")]),s("br"),s("span",{staticClass:"line-number"},[n._v("610")]),s("br"),s("span",{staticClass:"line-number"},[n._v("611")]),s("br"),s("span",{staticClass:"line-number"},[n._v("612")]),s("br"),s("span",{staticClass:"line-number"},[n._v("613")]),s("br"),s("span",{staticClass:"line-number"},[n._v("614")]),s("br"),s("span",{staticClass:"line-number"},[n._v("615")]),s("br"),s("span",{staticClass:"line-number"},[n._v("616")]),s("br"),s("span",{staticClass:"line-number"},[n._v("617")]),s("br"),s("span",{staticClass:"line-number"},[n._v("618")]),s("br"),s("span",{staticClass:"line-number"},[n._v("619")]),s("br"),s("span",{staticClass:"line-number"},[n._v("620")]),s("br"),s("span",{staticClass:"line-number"},[n._v("621")]),s("br"),s("span",{staticClass:"line-number"},[n._v("622")]),s("br"),s("span",{staticClass:"line-number"},[n._v("623")]),s("br"),s("span",{staticClass:"line-number"},[n._v("624")]),s("br"),s("span",{staticClass:"line-number"},[n._v("625")]),s("br"),s("span",{staticClass:"line-number"},[n._v("626")]),s("br"),s("span",{staticClass:"line-number"},[n._v("627")]),s("br"),s("span",{staticClass:"line-number"},[n._v("628")]),s("br"),s("span",{staticClass:"line-number"},[n._v("629")]),s("br"),s("span",{staticClass:"line-number"},[n._v("630")]),s("br"),s("span",{staticClass:"line-number"},[n._v("631")]),s("br"),s("span",{staticClass:"line-number"},[n._v("632")]),s("br"),s("span",{staticClass:"line-number"},[n._v("633")]),s("br"),s("span",{staticClass:"line-number"},[n._v("634")]),s("br"),s("span",{staticClass:"line-number"},[n._v("635")]),s("br"),s("span",{staticClass:"line-number"},[n._v("636")]),s("br"),s("span",{staticClass:"line-number"},[n._v("637")]),s("br"),s("span",{staticClass:"line-number"},[n._v("638")]),s("br"),s("span",{staticClass:"line-number"},[n._v("639")]),s("br"),s("span",{staticClass:"line-number"},[n._v("640")]),s("br"),s("span",{staticClass:"line-number"},[n._v("641")]),s("br"),s("span",{staticClass:"line-number"},[n._v("642")]),s("br"),s("span",{staticClass:"line-number"},[n._v("643")]),s("br"),s("span",{staticClass:"line-number"},[n._v("644")]),s("br"),s("span",{staticClass:"line-number"},[n._v("645")]),s("br"),s("span",{staticClass:"line-number"},[n._v("646")]),s("br"),s("span",{staticClass:"line-number"},[n._v("647")]),s("br"),s("span",{staticClass:"line-number"},[n._v("648")]),s("br"),s("span",{staticClass:"line-number"},[n._v("649")]),s("br"),s("span",{staticClass:"line-number"},[n._v("650")]),s("br"),s("span",{staticClass:"line-number"},[n._v("651")]),s("br"),s("span",{staticClass:"line-number"},[n._v("652")]),s("br"),s("span",{staticClass:"line-number"},[n._v("653")]),s("br"),s("span",{staticClass:"line-number"},[n._v("654")]),s("br"),s("span",{staticClass:"line-number"},[n._v("655")]),s("br"),s("span",{staticClass:"line-number"},[n._v("656")]),s("br"),s("span",{staticClass:"line-number"},[n._v("657")]),s("br"),s("span",{staticClass:"line-number"},[n._v("658")]),s("br"),s("span",{staticClass:"line-number"},[n._v("659")]),s("br"),s("span",{staticClass:"line-number"},[n._v("660")]),s("br"),s("span",{staticClass:"line-number"},[n._v("661")]),s("br"),s("span",{staticClass:"line-number"},[n._v("662")]),s("br"),s("span",{staticClass:"line-number"},[n._v("663")]),s("br"),s("span",{staticClass:"line-number"},[n._v("664")]),s("br"),s("span",{staticClass:"line-number"},[n._v("665")]),s("br"),s("span",{staticClass:"line-number"},[n._v("666")]),s("br"),s("span",{staticClass:"line-number"},[n._v("667")]),s("br"),s("span",{staticClass:"line-number"},[n._v("668")]),s("br"),s("span",{staticClass:"line-number"},[n._v("669")]),s("br"),s("span",{staticClass:"line-number"},[n._v("670")]),s("br"),s("span",{staticClass:"line-number"},[n._v("671")]),s("br"),s("span",{staticClass:"line-number"},[n._v("672")]),s("br"),s("span",{staticClass:"line-number"},[n._v("673")]),s("br"),s("span",{staticClass:"line-number"},[n._v("674")]),s("br"),s("span",{staticClass:"line-number"},[n._v("675")]),s("br"),s("span",{staticClass:"line-number"},[n._v("676")]),s("br"),s("span",{staticClass:"line-number"},[n._v("677")]),s("br"),s("span",{staticClass:"line-number"},[n._v("678")]),s("br"),s("span",{staticClass:"line-number"},[n._v("679")]),s("br"),s("span",{staticClass:"line-number"},[n._v("680")]),s("br"),s("span",{staticClass:"line-number"},[n._v("681")]),s("br"),s("span",{staticClass:"line-number"},[n._v("682")]),s("br"),s("span",{staticClass:"line-number"},[n._v("683")]),s("br"),s("span",{staticClass:"line-number"},[n._v("684")]),s("br"),s("span",{staticClass:"line-number"},[n._v("685")]),s("br"),s("span",{staticClass:"line-number"},[n._v("686")]),s("br"),s("span",{staticClass:"line-number"},[n._v("687")]),s("br"),s("span",{staticClass:"line-number"},[n._v("688")]),s("br"),s("span",{staticClass:"line-number"},[n._v("689")]),s("br"),s("span",{staticClass:"line-number"},[n._v("690")]),s("br"),s("span",{staticClass:"line-number"},[n._v("691")]),s("br"),s("span",{staticClass:"line-number"},[n._v("692")]),s("br"),s("span",{staticClass:"line-number"},[n._v("693")]),s("br"),s("span",{staticClass:"line-number"},[n._v("694")]),s("br"),s("span",{staticClass:"line-number"},[n._v("695")]),s("br"),s("span",{staticClass:"line-number"},[n._v("696")]),s("br"),s("span",{staticClass:"line-number"},[n._v("697")]),s("br"),s("span",{staticClass:"line-number"},[n._v("698")]),s("br"),s("span",{staticClass:"line-number"},[n._v("699")]),s("br"),s("span",{staticClass:"line-number"},[n._v("700")]),s("br"),s("span",{staticClass:"line-number"},[n._v("701")]),s("br"),s("span",{staticClass:"line-number"},[n._v("702")]),s("br"),s("span",{staticClass:"line-number"},[n._v("703")]),s("br"),s("span",{staticClass:"line-number"},[n._v("704")]),s("br"),s("span",{staticClass:"line-number"},[n._v("705")]),s("br"),s("span",{staticClass:"line-number"},[n._v("706")]),s("br"),s("span",{staticClass:"line-number"},[n._v("707")]),s("br"),s("span",{staticClass:"line-number"},[n._v("708")]),s("br"),s("span",{staticClass:"line-number"},[n._v("709")]),s("br"),s("span",{staticClass:"line-number"},[n._v("710")]),s("br"),s("span",{staticClass:"line-number"},[n._v("711")]),s("br"),s("span",{staticClass:"line-number"},[n._v("712")]),s("br"),s("span",{staticClass:"line-number"},[n._v("713")]),s("br"),s("span",{staticClass:"line-number"},[n._v("714")]),s("br"),s("span",{staticClass:"line-number"},[n._v("715")]),s("br"),s("span",{staticClass:"line-number"},[n._v("716")]),s("br"),s("span",{staticClass:"line-number"},[n._v("717")]),s("br"),s("span",{staticClass:"line-number"},[n._v("718")]),s("br"),s("span",{staticClass:"line-number"},[n._v("719")]),s("br"),s("span",{staticClass:"line-number"},[n._v("720")]),s("br"),s("span",{staticClass:"line-number"},[n._v("721")]),s("br"),s("span",{staticClass:"line-number"},[n._v("722")]),s("br"),s("span",{staticClass:"line-number"},[n._v("723")]),s("br"),s("span",{staticClass:"line-number"},[n._v("724")]),s("br"),s("span",{staticClass:"line-number"},[n._v("725")]),s("br"),s("span",{staticClass:"line-number"},[n._v("726")]),s("br"),s("span",{staticClass:"line-number"},[n._v("727")]),s("br"),s("span",{staticClass:"line-number"},[n._v("728")]),s("br"),s("span",{staticClass:"line-number"},[n._v("729")]),s("br"),s("span",{staticClass:"line-number"},[n._v("730")]),s("br"),s("span",{staticClass:"line-number"},[n._v("731")]),s("br"),s("span",{staticClass:"line-number"},[n._v("732")]),s("br"),s("span",{staticClass:"line-number"},[n._v("733")]),s("br"),s("span",{staticClass:"line-number"},[n._v("734")]),s("br"),s("span",{staticClass:"line-number"},[n._v("735")]),s("br"),s("span",{staticClass:"line-number"},[n._v("736")]),s("br"),s("span",{staticClass:"line-number"},[n._v("737")]),s("br"),s("span",{staticClass:"line-number"},[n._v("738")]),s("br"),s("span",{staticClass:"line-number"},[n._v("739")]),s("br"),s("span",{staticClass:"line-number"},[n._v("740")]),s("br"),s("span",{staticClass:"line-number"},[n._v("741")]),s("br"),s("span",{staticClass:"line-number"},[n._v("742")]),s("br"),s("span",{staticClass:"line-number"},[n._v("743")]),s("br"),s("span",{staticClass:"line-number"},[n._v("744")]),s("br"),s("span",{staticClass:"line-number"},[n._v("745")]),s("br"),s("span",{staticClass:"line-number"},[n._v("746")]),s("br"),s("span",{staticClass:"line-number"},[n._v("747")]),s("br"),s("span",{staticClass:"line-number"},[n._v("748")]),s("br"),s("span",{staticClass:"line-number"},[n._v("749")]),s("br"),s("span",{staticClass:"line-number"},[n._v("750")]),s("br"),s("span",{staticClass:"line-number"},[n._v("751")]),s("br"),s("span",{staticClass:"line-number"},[n._v("752")]),s("br"),s("span",{staticClass:"line-number"},[n._v("753")]),s("br"),s("span",{staticClass:"line-number"},[n._v("754")]),s("br"),s("span",{staticClass:"line-number"},[n._v("755")]),s("br"),s("span",{staticClass:"line-number"},[n._v("756")]),s("br"),s("span",{staticClass:"line-number"},[n._v("757")]),s("br"),s("span",{staticClass:"line-number"},[n._v("758")]),s("br"),s("span",{staticClass:"line-number"},[n._v("759")]),s("br"),s("span",{staticClass:"line-number"},[n._v("760")]),s("br"),s("span",{staticClass:"line-number"},[n._v("761")]),s("br"),s("span",{staticClass:"line-number"},[n._v("762")]),s("br"),s("span",{staticClass:"line-number"},[n._v("763")]),s("br"),s("span",{staticClass:"line-number"},[n._v("764")]),s("br"),s("span",{staticClass:"line-number"},[n._v("765")]),s("br"),s("span",{staticClass:"line-number"},[n._v("766")]),s("br"),s("span",{staticClass:"line-number"},[n._v("767")]),s("br"),s("span",{staticClass:"line-number"},[n._v("768")]),s("br"),s("span",{staticClass:"line-number"},[n._v("769")]),s("br"),s("span",{staticClass:"line-number"},[n._v("770")]),s("br"),s("span",{staticClass:"line-number"},[n._v("771")]),s("br"),s("span",{staticClass:"line-number"},[n._v("772")]),s("br"),s("span",{staticClass:"line-number"},[n._v("773")]),s("br"),s("span",{staticClass:"line-number"},[n._v("774")]),s("br"),s("span",{staticClass:"line-number"},[n._v("775")]),s("br"),s("span",{staticClass:"line-number"},[n._v("776")]),s("br"),s("span",{staticClass:"line-number"},[n._v("777")]),s("br"),s("span",{staticClass:"line-number"},[n._v("778")]),s("br"),s("span",{staticClass:"line-number"},[n._v("779")]),s("br"),s("span",{staticClass:"line-number"},[n._v("780")]),s("br"),s("span",{staticClass:"line-number"},[n._v("781")]),s("br"),s("span",{staticClass:"line-number"},[n._v("782")]),s("br"),s("span",{staticClass:"line-number"},[n._v("783")]),s("br"),s("span",{staticClass:"line-number"},[n._v("784")]),s("br"),s("span",{staticClass:"line-number"},[n._v("785")]),s("br"),s("span",{staticClass:"line-number"},[n._v("786")]),s("br"),s("span",{staticClass:"line-number"},[n._v("787")]),s("br"),s("span",{staticClass:"line-number"},[n._v("788")]),s("br"),s("span",{staticClass:"line-number"},[n._v("789")]),s("br"),s("span",{staticClass:"line-number"},[n._v("790")]),s("br"),s("span",{staticClass:"line-number"},[n._v("791")]),s("br"),s("span",{staticClass:"line-number"},[n._v("792")]),s("br"),s("span",{staticClass:"line-number"},[n._v("793")]),s("br"),s("span",{staticClass:"line-number"},[n._v("794")]),s("br"),s("span",{staticClass:"line-number"},[n._v("795")]),s("br"),s("span",{staticClass:"line-number"},[n._v("796")]),s("br"),s("span",{staticClass:"line-number"},[n._v("797")]),s("br"),s("span",{staticClass:"line-number"},[n._v("798")]),s("br"),s("span",{staticClass:"line-number"},[n._v("799")]),s("br"),s("span",{staticClass:"line-number"},[n._v("800")]),s("br"),s("span",{staticClass:"line-number"},[n._v("801")]),s("br"),s("span",{staticClass:"line-number"},[n._v("802")]),s("br"),s("span",{staticClass:"line-number"},[n._v("803")]),s("br"),s("span",{staticClass:"line-number"},[n._v("804")]),s("br"),s("span",{staticClass:"line-number"},[n._v("805")]),s("br"),s("span",{staticClass:"line-number"},[n._v("806")]),s("br"),s("span",{staticClass:"line-number"},[n._v("807")]),s("br"),s("span",{staticClass:"line-number"},[n._v("808")]),s("br"),s("span",{staticClass:"line-number"},[n._v("809")]),s("br"),s("span",{staticClass:"line-number"},[n._v("810")]),s("br"),s("span",{staticClass:"line-number"},[n._v("811")]),s("br"),s("span",{staticClass:"line-number"},[n._v("812")]),s("br"),s("span",{staticClass:"line-number"},[n._v("813")]),s("br"),s("span",{staticClass:"line-number"},[n._v("814")]),s("br"),s("span",{staticClass:"line-number"},[n._v("815")]),s("br"),s("span",{staticClass:"line-number"},[n._v("816")]),s("br"),s("span",{staticClass:"line-number"},[n._v("817")]),s("br"),s("span",{staticClass:"line-number"},[n._v("818")]),s("br"),s("span",{staticClass:"line-number"},[n._v("819")]),s("br"),s("span",{staticClass:"line-number"},[n._v("820")]),s("br"),s("span",{staticClass:"line-number"},[n._v("821")]),s("br"),s("span",{staticClass:"line-number"},[n._v("822")]),s("br"),s("span",{staticClass:"line-number"},[n._v("823")]),s("br"),s("span",{staticClass:"line-number"},[n._v("824")]),s("br"),s("span",{staticClass:"line-number"},[n._v("825")]),s("br"),s("span",{staticClass:"line-number"},[n._v("826")]),s("br"),s("span",{staticClass:"line-number"},[n._v("827")]),s("br"),s("span",{staticClass:"line-number"},[n._v("828")]),s("br"),s("span",{staticClass:"line-number"},[n._v("829")]),s("br"),s("span",{staticClass:"line-number"},[n._v("830")]),s("br"),s("span",{staticClass:"line-number"},[n._v("831")]),s("br"),s("span",{staticClass:"line-number"},[n._v("832")]),s("br"),s("span",{staticClass:"line-number"},[n._v("833")]),s("br"),s("span",{staticClass:"line-number"},[n._v("834")]),s("br"),s("span",{staticClass:"line-number"},[n._v("835")]),s("br"),s("span",{staticClass:"line-number"},[n._v("836")]),s("br"),s("span",{staticClass:"line-number"},[n._v("837")]),s("br"),s("span",{staticClass:"line-number"},[n._v("838")]),s("br"),s("span",{staticClass:"line-number"},[n._v("839")]),s("br"),s("span",{staticClass:"line-number"},[n._v("840")]),s("br"),s("span",{staticClass:"line-number"},[n._v("841")]),s("br"),s("span",{staticClass:"line-number"},[n._v("842")]),s("br"),s("span",{staticClass:"line-number"},[n._v("843")]),s("br"),s("span",{staticClass:"line-number"},[n._v("844")]),s("br"),s("span",{staticClass:"line-number"},[n._v("845")]),s("br"),s("span",{staticClass:"line-number"},[n._v("846")]),s("br"),s("span",{staticClass:"line-number"},[n._v("847")]),s("br"),s("span",{staticClass:"line-number"},[n._v("848")]),s("br"),s("span",{staticClass:"line-number"},[n._v("849")]),s("br"),s("span",{staticClass:"line-number"},[n._v("850")]),s("br"),s("span",{staticClass:"line-number"},[n._v("851")]),s("br"),s("span",{staticClass:"line-number"},[n._v("852")]),s("br"),s("span",{staticClass:"line-number"},[n._v("853")]),s("br"),s("span",{staticClass:"line-number"},[n._v("854")]),s("br"),s("span",{staticClass:"line-number"},[n._v("855")]),s("br"),s("span",{staticClass:"line-number"},[n._v("856")]),s("br"),s("span",{staticClass:"line-number"},[n._v("857")]),s("br"),s("span",{staticClass:"line-number"},[n._v("858")]),s("br"),s("span",{staticClass:"line-number"},[n._v("859")]),s("br"),s("span",{staticClass:"line-number"},[n._v("860")]),s("br"),s("span",{staticClass:"line-number"},[n._v("861")]),s("br"),s("span",{staticClass:"line-number"},[n._v("862")]),s("br"),s("span",{staticClass:"line-number"},[n._v("863")]),s("br"),s("span",{staticClass:"line-number"},[n._v("864")]),s("br"),s("span",{staticClass:"line-number"},[n._v("865")]),s("br"),s("span",{staticClass:"line-number"},[n._v("866")]),s("br"),s("span",{staticClass:"line-number"},[n._v("867")]),s("br"),s("span",{staticClass:"line-number"},[n._v("868")]),s("br"),s("span",{staticClass:"line-number"},[n._v("869")]),s("br"),s("span",{staticClass:"line-number"},[n._v("870")]),s("br"),s("span",{staticClass:"line-number"},[n._v("871")]),s("br"),s("span",{staticClass:"line-number"},[n._v("872")]),s("br"),s("span",{staticClass:"line-number"},[n._v("873")]),s("br"),s("span",{staticClass:"line-number"},[n._v("874")]),s("br"),s("span",{staticClass:"line-number"},[n._v("875")]),s("br"),s("span",{staticClass:"line-number"},[n._v("876")]),s("br"),s("span",{staticClass:"line-number"},[n._v("877")]),s("br"),s("span",{staticClass:"line-number"},[n._v("878")]),s("br"),s("span",{staticClass:"line-number"},[n._v("879")]),s("br"),s("span",{staticClass:"line-number"},[n._v("880")]),s("br"),s("span",{staticClass:"line-number"},[n._v("881")]),s("br"),s("span",{staticClass:"line-number"},[n._v("882")]),s("br"),s("span",{staticClass:"line-number"},[n._v("883")]),s("br"),s("span",{staticClass:"line-number"},[n._v("884")]),s("br"),s("span",{staticClass:"line-number"},[n._v("885")]),s("br"),s("span",{staticClass:"line-number"},[n._v("886")]),s("br"),s("span",{staticClass:"line-number"},[n._v("887")]),s("br"),s("span",{staticClass:"line-number"},[n._v("888")]),s("br"),s("span",{staticClass:"line-number"},[n._v("889")]),s("br"),s("span",{staticClass:"line-number"},[n._v("890")]),s("br"),s("span",{staticClass:"line-number"},[n._v("891")]),s("br"),s("span",{staticClass:"line-number"},[n._v("892")]),s("br"),s("span",{staticClass:"line-number"},[n._v("893")]),s("br"),s("span",{staticClass:"line-number"},[n._v("894")]),s("br"),s("span",{staticClass:"line-number"},[n._v("895")]),s("br"),s("span",{staticClass:"line-number"},[n._v("896")]),s("br"),s("span",{staticClass:"line-number"},[n._v("897")]),s("br"),s("span",{staticClass:"line-number"},[n._v("898")]),s("br"),s("span",{staticClass:"line-number"},[n._v("899")]),s("br"),s("span",{staticClass:"line-number"},[n._v("900")]),s("br"),s("span",{staticClass:"line-number"},[n._v("901")]),s("br"),s("span",{staticClass:"line-number"},[n._v("902")]),s("br"),s("span",{staticClass:"line-number"},[n._v("903")]),s("br"),s("span",{staticClass:"line-number"},[n._v("904")]),s("br"),s("span",{staticClass:"line-number"},[n._v("905")]),s("br"),s("span",{staticClass:"line-number"},[n._v("906")]),s("br"),s("span",{staticClass:"line-number"},[n._v("907")]),s("br"),s("span",{staticClass:"line-number"},[n._v("908")]),s("br"),s("span",{staticClass:"line-number"},[n._v("909")]),s("br"),s("span",{staticClass:"line-number"},[n._v("910")]),s("br"),s("span",{staticClass:"line-number"},[n._v("911")]),s("br"),s("span",{staticClass:"line-number"},[n._v("912")]),s("br"),s("span",{staticClass:"line-number"},[n._v("913")]),s("br"),s("span",{staticClass:"line-number"},[n._v("914")]),s("br"),s("span",{staticClass:"line-number"},[n._v("915")]),s("br"),s("span",{staticClass:"line-number"},[n._v("916")]),s("br"),s("span",{staticClass:"line-number"},[n._v("917")]),s("br"),s("span",{staticClass:"line-number"},[n._v("918")]),s("br"),s("span",{staticClass:"line-number"},[n._v("919")]),s("br"),s("span",{staticClass:"line-number"},[n._v("920")]),s("br"),s("span",{staticClass:"line-number"},[n._v("921")]),s("br"),s("span",{staticClass:"line-number"},[n._v("922")]),s("br"),s("span",{staticClass:"line-number"},[n._v("923")]),s("br"),s("span",{staticClass:"line-number"},[n._v("924")]),s("br"),s("span",{staticClass:"line-number"},[n._v("925")]),s("br"),s("span",{staticClass:"line-number"},[n._v("926")]),s("br"),s("span",{staticClass:"line-number"},[n._v("927")]),s("br"),s("span",{staticClass:"line-number"},[n._v("928")]),s("br"),s("span",{staticClass:"line-number"},[n._v("929")]),s("br"),s("span",{staticClass:"line-number"},[n._v("930")]),s("br"),s("span",{staticClass:"line-number"},[n._v("931")]),s("br"),s("span",{staticClass:"line-number"},[n._v("932")]),s("br"),s("span",{staticClass:"line-number"},[n._v("933")]),s("br"),s("span",{staticClass:"line-number"},[n._v("934")]),s("br"),s("span",{staticClass:"line-number"},[n._v("935")]),s("br"),s("span",{staticClass:"line-number"},[n._v("936")]),s("br"),s("span",{staticClass:"line-number"},[n._v("937")]),s("br"),s("span",{staticClass:"line-number"},[n._v("938")]),s("br"),s("span",{staticClass:"line-number"},[n._v("939")]),s("br"),s("span",{staticClass:"line-number"},[n._v("940")]),s("br"),s("span",{staticClass:"line-number"},[n._v("941")]),s("br"),s("span",{staticClass:"line-number"},[n._v("942")]),s("br"),s("span",{staticClass:"line-number"},[n._v("943")]),s("br"),s("span",{staticClass:"line-number"},[n._v("944")]),s("br"),s("span",{staticClass:"line-number"},[n._v("945")]),s("br"),s("span",{staticClass:"line-number"},[n._v("946")]),s("br"),s("span",{staticClass:"line-number"},[n._v("947")]),s("br"),s("span",{staticClass:"line-number"},[n._v("948")]),s("br"),s("span",{staticClass:"line-number"},[n._v("949")]),s("br"),s("span",{staticClass:"line-number"},[n._v("950")]),s("br"),s("span",{staticClass:"line-number"},[n._v("951")]),s("br"),s("span",{staticClass:"line-number"},[n._v("952")]),s("br"),s("span",{staticClass:"line-number"},[n._v("953")]),s("br"),s("span",{staticClass:"line-number"},[n._v("954")]),s("br"),s("span",{staticClass:"line-number"},[n._v("955")]),s("br"),s("span",{staticClass:"line-number"},[n._v("956")]),s("br"),s("span",{staticClass:"line-number"},[n._v("957")]),s("br"),s("span",{staticClass:"line-number"},[n._v("958")]),s("br"),s("span",{staticClass:"line-number"},[n._v("959")]),s("br"),s("span",{staticClass:"line-number"},[n._v("960")]),s("br"),s("span",{staticClass:"line-number"},[n._v("961")]),s("br"),s("span",{staticClass:"line-number"},[n._v("962")]),s("br"),s("span",{staticClass:"line-number"},[n._v("963")]),s("br"),s("span",{staticClass:"line-number"},[n._v("964")]),s("br"),s("span",{staticClass:"line-number"},[n._v("965")]),s("br"),s("span",{staticClass:"line-number"},[n._v("966")]),s("br"),s("span",{staticClass:"line-number"},[n._v("967")]),s("br"),s("span",{staticClass:"line-number"},[n._v("968")]),s("br"),s("span",{staticClass:"line-number"},[n._v("969")]),s("br"),s("span",{staticClass:"line-number"},[n._v("970")]),s("br"),s("span",{staticClass:"line-number"},[n._v("971")]),s("br"),s("span",{staticClass:"line-number"},[n._v("972")]),s("br"),s("span",{staticClass:"line-number"},[n._v("973")]),s("br"),s("span",{staticClass:"line-number"},[n._v("974")]),s("br"),s("span",{staticClass:"line-number"},[n._v("975")]),s("br"),s("span",{staticClass:"line-number"},[n._v("976")]),s("br"),s("span",{staticClass:"line-number"},[n._v("977")]),s("br"),s("span",{staticClass:"line-number"},[n._v("978")]),s("br"),s("span",{staticClass:"line-number"},[n._v("979")]),s("br"),s("span",{staticClass:"line-number"},[n._v("980")]),s("br"),s("span",{staticClass:"line-number"},[n._v("981")]),s("br"),s("span",{staticClass:"line-number"},[n._v("982")]),s("br"),s("span",{staticClass:"line-number"},[n._v("983")]),s("br"),s("span",{staticClass:"line-number"},[n._v("984")]),s("br"),s("span",{staticClass:"line-number"},[n._v("985")]),s("br"),s("span",{staticClass:"line-number"},[n._v("986")]),s("br"),s("span",{staticClass:"line-number"},[n._v("987")]),s("br"),s("span",{staticClass:"line-number"},[n._v("988")]),s("br"),s("span",{staticClass:"line-number"},[n._v("989")]),s("br"),s("span",{staticClass:"line-number"},[n._v("990")]),s("br"),s("span",{staticClass:"line-number"},[n._v("991")]),s("br"),s("span",{staticClass:"line-number"},[n._v("992")]),s("br"),s("span",{staticClass:"line-number"},[n._v("993")]),s("br"),s("span",{staticClass:"line-number"},[n._v("994")]),s("br"),s("span",{staticClass:"line-number"},[n._v("995")]),s("br"),s("span",{staticClass:"line-number"},[n._v("996")]),s("br"),s("span",{staticClass:"line-number"},[n._v("997")]),s("br"),s("span",{staticClass:"line-number"},[n._v("998")]),s("br"),s("span",{staticClass:"line-number"},[n._v("999")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1000")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1001")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1002")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1003")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1004")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1005")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1006")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1007")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1008")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1009")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1010")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1011")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1012")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1013")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1014")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1015")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1016")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1017")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1018")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1019")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1020")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1021")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1022")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1023")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1024")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1025")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1026")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1027")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1028")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1029")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1030")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1031")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1032")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1033")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1034")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1035")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1036")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1037")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1038")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1039")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1040")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1041")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1042")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1043")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1044")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1045")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1046")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1047")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1048")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1049")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1050")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1051")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1052")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1053")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1054")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1055")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1056")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1057")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1058")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1059")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1060")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1061")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1062")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1063")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1064")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1065")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1066")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1067")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1068")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1069")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1070")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1071")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1072")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1073")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1074")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1075")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1076")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1077")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1078")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1079")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1080")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1081")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1082")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1083")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1084")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1085")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1086")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1087")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1088")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1089")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1090")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1091")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1092")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1093")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1094")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1095")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1096")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1097")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1098")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1099")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1245")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1246")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1247")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1248")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1249")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1250")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1251")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1252")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1253")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1254")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1255")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1256")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1257")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1258")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1259")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1260")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1261")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1262")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1263")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1264")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1265")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1266")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1267")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1268")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1269")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1270")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1271")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1272")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1273")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1274")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1275")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1276")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1277")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1278")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1279")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1280")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1281")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1282")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1283")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1284")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1285")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1286")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1287")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1288")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1289")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1290")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1291")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1292")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1293")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1294")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1295")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1296")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1297")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1298")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1299")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1300")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1301")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1302")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1303")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1304")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1305")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1306")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1307")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1308")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1309")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1310")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1311")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1312")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1313")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1314")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1315")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1316")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1317")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1318")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1319")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1320")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1321")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1322")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1323")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1324")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1325")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1326")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1327")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1328")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1329")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1330")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1331")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1332")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1333")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1334")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1335")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1336")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1337")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1338")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1339")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1340")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1341")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1342")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1343")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1344")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1345")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1346")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1347")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1348")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1349")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1350")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1351")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1352")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1353")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1354")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1355")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1356")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1357")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1358")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1359")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1360")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1361")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1362")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1363")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1364")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1365")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1366")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1367")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1368")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1369")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1370")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1371")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1372")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1373")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1374")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1375")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1376")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1377")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1378")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1379")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1380")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1381")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1382")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1383")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1384")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1385")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1386")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1387")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1388")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1389")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1390")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1391")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1392")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1393")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1394")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1395")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1396")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1397")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1398")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1399")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1400")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1401")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1402")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1403")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1404")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1405")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1406")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1407")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1408")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1409")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1410")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1411")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1412")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1413")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1414")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1415")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1416")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1417")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1418")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1419")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1420")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1421")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1422")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1423")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1424")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1425")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1426")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1427")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1428")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1429")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1430")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1431")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1432")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1433")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1434")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1435")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1436")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1437")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1438")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1439")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1440")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1441")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1442")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1443")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1444")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1445")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1446")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1447")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1448")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1449")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1450")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1451")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1452")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1453")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1454")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1455")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1456")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1457")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1458")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1459")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1460")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1461")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1462")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1463")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1464")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1465")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1466")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1467")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1468")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1469")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1470")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1471")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1472")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1473")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1474")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1475")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1476")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1477")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1478")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1479")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1480")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1481")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1482")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1483")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1484")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1485")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1486")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1487")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1488")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1489")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1490")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1491")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1492")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1493")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1494")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1495")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1496")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1497")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1498")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1499")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1500")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1501")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1502")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1503")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1504")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1505")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1506")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1507")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1508")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1509")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1510")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1511")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1512")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1513")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1514")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1515")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1516")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1517")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1518")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1519")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1520")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1521")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1522")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1523")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1524")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1525")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1526")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1527")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1528")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1529")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1530")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1531")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1532")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1533")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1534")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1535")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1536")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1537")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1538")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1539")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1540")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1541")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1542")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1543")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1544")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1545")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1546")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1547")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1548")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1549")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1550")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1551")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1552")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1553")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1554")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1555")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1556")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1557")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1558")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1559")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1560")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1561")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1562")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1563")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1564")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1565")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1566")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1567")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1568")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1569")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1570")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1571")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1572")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1573")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1574")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1575")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1576")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1577")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1578")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1579")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1580")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1581")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1582")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1583")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1584")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1585")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1586")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1587")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1588")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1589")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1590")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1591")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1592")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1593")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1594")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1595")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1596")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1597")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1598")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1599")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1600")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1601")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1602")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1603")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1604")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1605")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1606")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1607")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1608")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1609")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1610")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1611")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1612")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1613")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1614")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1615")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1616")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1617")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1618")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1619")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1620")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1621")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1622")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1623")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1624")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1625")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1626")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1627")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1628")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1629")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1630")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1631")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1632")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1633")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1634")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1635")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1636")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1637")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1638")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1639")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1640")]),s("br"),s("span",{staticClass:"line-number"},[n._v("1641")]),s("br")])]),s("blockquote",[s("p",[n._v("AQS详解")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ReentrantLock")]),n._v(" lock "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ReentrantLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//false为非公平锁，true为公平锁")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),n._v("个线程\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T0")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T1")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T2")]),n._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//加锁")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v("（cas加锁成功"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//cas->比较与交换compare and swap，")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("跳出循环\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//Thread.yeild()//让出CPU使用权")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//Thread.sleep（1）;")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("HashSet")]),n._v("，"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("LikedQueued")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("LikedQueued")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        阻塞。\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("LockSupport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("park")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        \n        \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T0")]),n._v("获取锁\n    xxxx业务逻辑\n    xxxxx业务逻辑\n    \nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//解锁")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Thread")]),n._v("  t"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Thread")]),n._v("  t "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("LikedQueued")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("take")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("LockSupport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("unpark")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("；\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br")])]),s("p",[n._v("Lock，公平与公平两种特性")]),n._v(" "),s("p",[n._v("三大核心原理")]),n._v(" "),s("p",[n._v("自旋，LocksSuport, CAS，queue队列")]),n._v(" "),s("p",[n._v("CAS依赖汇编指令：cmpxchg()")]),n._v(" "),s("p",[n._v("Lock可重入性：可重入！")]),n._v(" "),s("p",[n._v("synchronized：可重入")]),n._v(" "),s("p",[n._v("公平")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[n._v("exclusiveOwnerThread 当前获取锁的线程是谁！\nstate 状态器\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("final")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("tryAcquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("acquireQueued")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("addWaiter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("EXCLUSIVE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("selfInterrupt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("tryAcquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//锁竞争逻辑")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//CLH ")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("addWaiter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("EXCLUSIVE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//线程入队,Node节点，Node对Thread引用")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Node")]),n._v("：共享属性，独占属性 "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//响应式编程，异步非阻塞，FutureTask，Callbale")]),n._v("\n    创建节点"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Node")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("waitestate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("thread 重要属性\n    waitestate节点的生命状态：信号量\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("SIGNAL")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//可被唤醒")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("CANCELLED")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//代表出现异常，中断引起的，需要废弃结束")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("CONDITION")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 条件等待")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("PROPAGATE")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 传播")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" 初始状态"),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Init")]),n._v("状态\n为了保证所有阻塞线程对象能够被唤醒\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("compareAndSetTail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" 入队也存在竞争\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//当前节点,线程要开始阻塞")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("acquireQueued")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("currentThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n    节点阻塞之前还得再尝试一次获取锁：\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("，能够获取到，节点出队，并且把head往后挪一个节点，新的头结点就是当前节点\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("、不能获取到，阻塞等待被唤醒\n    \t"),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1.")]),n._v("首先第"),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("轮循环、修改head的状态，修改成sinal"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("标记处可以被唤醒"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2.")]),n._v("第"),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("轮循环，阻塞线程，并且需要判断线程是否是有中断信号唤醒的！\n    \t"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("shouldParkAfterFailedAcquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n    waitestate "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" head节点为什么改到"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("，因为持有锁的线程"),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T0")]),n._v("在释放锁的时候，得判断head节点的waitestate是否"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("如果！"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("成立，会再把waitstate "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("->")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("要想唤醒排队的第一个线程"),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T1")]),n._v("，"),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T1")]),n._v("被唤醒再接着走循环，去抢锁，可能会再失败（在非公平锁场景下），此时可能有线程"),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T3")]),n._v("持有了锁！"),s("span",{pre:!0,attrs:{class:"token constant"}},[n._v("T1")]),n._v("可能再次被阻塞，head的节点状态需要再一次经历两轮循环：waitState "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("->")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Park")]),n._v("阻塞线程唤醒有两种方式：\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("、中断\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("、"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("release")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);