(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{429:function(s,n,e){"use strict";e.r(n);var a=e(5),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"rocketmq原生api使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq原生api使用"}},[s._v("#")]),s._v(" RocketMQ原生API使用")]),s._v(" "),n("p",[s._v("​\t使用RocketMQ的原生API开发是最简单也是目前看来最牢靠的方式。这里我们用SpringBoot来搭建一系列消息生产者和消息消费者，来访问我们之前搭建的RocketMQ集群。")]),s._v(" "),n("h3",{attrs:{id:"_1、测试环境搭建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、测试环境搭建"}},[s._v("#")]),s._v(" 1、测试环境搭建")]),s._v(" "),n("p",[s._v("​\t首先创建一个基于Maven的SpringBoot工程，引入如下依赖：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<dependency>\n        <groupId>org.apache.rocketmq</groupId>\n        <artifactId>rocketmq-client</artifactId>\n        <version>4.7.1</version>\n</dependency>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("​\t 另外还与一些依赖，例如openmessage、acl等扩展功能还需要添加对应的依赖。具体可以参见RocketMQ源码中的example模块。在RocketMQ源码包中的example模块提供了非常详尽的测试代码，也可以拿来直接调试。我们这里就用源码包中的示例来连接我们自己搭建的RocketMQ集群来进行演示。")]),s._v(" "),n("blockquote",[n("p",[s._v("RocketMQ的官网上有很多经典的测试代码，这些代码虽然依赖的版本比较老，但是还是都可以运行的。所以我们还是以官网上的顺序进行学习。")])]),s._v(" "),n("p",[s._v("但是在调试这些代码的时候要注意一个问题：这些测试代码中的生产者和消费者都需要依赖NameServer才能运行，只需要将NameServer指向我们自己搭建的RocketMQ集群，而不需要管Broker在哪里，就可以连接我们自己的自己的RocketMQ集群。而RocketMQ提供的生产者和消费者寻找NameServer的方式有两种：")]),s._v(" "),n("p",[s._v('​\t1、在代码中指定namesrvAddr属性。例如：consumer.setNamesrvAddr("127.0.0.1:9876");')]),s._v(" "),n("p",[s._v("​\t2、通过NAMESRV_ADDR环境变量来指定。多个NameServer之间用分号连接。")]),s._v(" "),n("h3",{attrs:{id:"_2、rocketmq的编程模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、rocketmq的编程模型"}},[s._v("#")]),s._v(" 2、RocketMQ的编程模型")]),s._v(" "),n("p",[s._v("​\t然后RocketMQ的生产者和消费者的编程模型都是有个比较固定的步骤的，掌握这个固定的步骤，对于我们学习源码以及以后使用都是很有帮助的。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("消息发送者的固定步骤")]),s._v(" "),n("p",[s._v("1.创建消息生产者producer，并制定生产者组名 2.指定Nameserver地址 3.启动producer 4.创建消息对象，指定主题Topic、Tag和消息体 5.发送消息 6.关闭生产者producer")])]),s._v(" "),n("li",[n("p",[s._v("消息消费者的固定步骤")]),s._v(" "),n("p",[s._v("1.创建消费者Consumer，制定消费者组名 2.指定Nameserver地址 3.订阅主题Topic和Tag 4.设置回调函数，处理消息 5.启动消费者consumer")])])]),s._v(" "),n("h3",{attrs:{id:"_3、rocketmq的消息样例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、rocketmq的消息样例"}},[s._v("#")]),s._v(" 3、RocketMQ的消息样例")]),s._v(" "),n("p",[s._v("​\t那我们来逐一连接下RocketMQ都支持哪些类型的消息：")]),s._v(" "),n("h4",{attrs:{id:"_3-1-基本样例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-基本样例"}},[s._v("#")]),s._v(" 3.1 基本样例")]),s._v(" "),n("p",[s._v("​\t基本样例部分我们使用消息生产者分别通过三种方式发送消息，同步发送、异步发送以及单向发送。")]),s._v(" "),n("p",[s._v("​\t然后使用消费者来消费这些消息。")]),s._v(" "),n("p",[s._v("​\t1、同步发送消息的样例见：org.apache.rocketmq.example.simple.Producer")]),s._v(" "),n("blockquote",[n("p",[s._v("等待消息返回后再继续进行下面的操作。")])]),s._v(" "),n("p",[s._v("​\t2、异步发送消息的样例见：org.apache.rocketmq.example.simple.AsyncProducer")]),s._v(" "),n("blockquote",[n("p",[s._v("这个示例有个比较有趣的地方就是引入了一个countDownLatch来保证所有消息回调方法都执行完了再关闭Producer。 所以从这里可以看出，RocketMQ的Producer也是一个服务端，在往Broker发送消息的时候也要作为服务端提供服务。")])]),s._v(" "),n("p",[s._v("​\t3、单向发送消息的样例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class OnewayProducer {\n    public static void main(String[] args) throws Exception{\n        //Instantiate with a producer group name.\n        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");\n        // Specify name server addresses.\n        producer.setNamesrvAddr("localhost:9876");\n        //Launch the instance.\n        producer.start();\n        for (int i = 0; i < 100; i++) {\n            //Create a message instance, specifying topic, tag and message body.\n            Message msg = new Message("TopicTest" /* Topic */,\n                "TagA" /* Tag */,\n                ("Hello RocketMQ " +\n                    i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n            );\n            //Call send message to deliver message to one of brokers.\n            producer.sendOneway(msg);\n        }\n        //Wait for sending to complete\n        Thread.sleep(5000);        \n        producer.shutdown();\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("blockquote",[n("p",[s._v("关键点就是使用producer.sendOneWay方式来发送消息，这个方法没有返回值，也没有回调。就是只管把消息发出去就行了。")])]),s._v(" "),n("p",[s._v("​\t4、使用消费者消费消息。")]),s._v(" "),n("p",[s._v("​\t消费者消费消息有两种模式，一种是消费者主动去Broker上拉取消息的拉模式，另一种是消费者等待Broker把消息推送过来的推模式。")]),s._v(" "),n("p",[s._v("​\t拉模式的样例见：org.apache.rocketmq.example.simple.PullConsumer")]),s._v(" "),n("p",[s._v("​\t推模式的样例见：org.apache.rocketmq.example.simple.PushConsumer")]),s._v(" "),n("blockquote",[n("p",[s._v("通常情况下，用推模式比较简单。")]),s._v(" "),n("p",[s._v("实际上RocketMQ的推模式也是由拉模式封装出来的。")]),s._v(" "),n("p",[s._v("4.7.1版本中DefaultMQPullConsumerImpl这个消费者类已标记为过期，但是还是可以使用的。替换的类是DefaultLitePullConsumerImpl。")])]),s._v(" "),n("h4",{attrs:{id:"_3-2-顺序消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-顺序消息"}},[s._v("#")]),s._v(" 3.2 顺序消息")]),s._v(" "),n("p",[s._v("顺序消息生产者样例见：org.apache.rocketmq.example.order.Producer")]),s._v(" "),n("p",[s._v("顺序消息消费者样例见：org.apache.rocketmq.example.order.Consumer")]),s._v(" "),n("blockquote",[n("p",[s._v("验证时，可以启动多个Consumer实例，观察下每一个订单的消息分配以及每个订单下多个步骤的消费顺序。")]),s._v(" "),n("p",[s._v("不管订单在多个Consumer实例之前是如何分配的，每个订单下的多条消息顺序都是固定从0~5的。")]),s._v(" "),n("p",[s._v("RocketMQ保证的是消息的局部有序，而不是全局有序。")])]),s._v(" "),n("blockquote",[n("p",[s._v("先从控制台上看下List"),n("MessageQueue",[s._v(" mqs是什么。")])],1),s._v(" "),n("p",[s._v("再回看我们的样例，实际上，RocketMQ也只保证了每个OrderID的所有消息有序(发到了同一个queue)，而并不能保证所有消息都有序。所以这就涉及到了RocketMQ消息有序的原理。要保证最终消费到的消息是有序的，需要从Producer、Broker、Consumer三个步骤都保证消息有序才行。")]),s._v(" "),n("p",[s._v("首先在发送者端：在默认情况下，消息发送者会采取Round  Robin轮询方式把消息发送到不同的MessageQueue(分区队列)，而消费者消费的时候也从多个MessageQueue上拉取消息，这种情况下消息是不能保证顺序的。而只有当一组有序的消息发送到同一个MessageQueue上时，才能利用MessageQueue先进先出的特性保证这一组消息有序。")]),s._v(" "),n("p",[s._v("而Broker中一个队列内的消息是可以保证有序的。")]),s._v(" "),n("p",[s._v("然后在消费者端：消费者会从多个消息队列上去拿消息。这时虽然每个消息队列上的消息是有序的，但是多个队列之间的消息仍然是乱序的。消费者端要保证消息有序，就需要按队列一个一个来取消息，即取完一个队列的消息后，再去取下一个队列的消息。而给consumer注入的MessageListenerOrderly对象，在RocketMQ内部就会通过锁队列的方式保证消息是一个一个队列来取的。MessageListenerConcurrently这个消息监听器则不会锁队列，每次都是从多个Message中取一批数据（默认不超过32条）。因此也无法保证消息有序。")])]),s._v(" "),n("h4",{attrs:{id:"_3-3-广播消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-广播消息"}},[s._v("#")]),s._v(" 3.3 广播消息")]),s._v(" "),n("p",[s._v("​\t广播消息的消息生产者样例见：org.apache.rocketmq.example.broadcast.PushConsumer")]),s._v(" "),n("blockquote",[n("p",[s._v("广播消息并没有特定的消息消费者样例，这是因为这涉及到消费者的集群消费模式。在集群状态(MessageModel.CLUSTERING)下，每一条消息只会被同一个消费者组中的一个实例消费到(这跟kafka和rabbitMQ的集群模式是一样的)。而广播模式则是把消息发给了所有订阅了对应主题的消费者，而不管消费者是不是同一个消费者组。")])]),s._v(" "),n("h4",{attrs:{id:"_3-4-延迟消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-延迟消息"}},[s._v("#")]),s._v(" 3.4 延迟消息")]),s._v(" "),n("p",[s._v("​\t延迟消息的生产者案例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(' public class ScheduledMessageProducer {\n    \n     public static void main(String[] args) throws Exception {\n         // Instantiate a producer to send scheduled messages\n         DefaultMQProducer producer = new DefaultMQProducer("ExampleProducerGroup");\n         // Launch producer\n         producer.start();\n         int totalMessagesToSend = 100;\n         for (int i = 0; i < totalMessagesToSend; i++) {\n             Message message = new Message("TestTopic", ("Hello scheduled message " + i).getBytes());\n             // This message will be delivered to consumer 10 seconds later.\n             message.setDelayTimeLevel(3);\n             // Send the message\n             producer.send(message);\n         }\n    \n         // Shutdown producer after use.\n         producer.shutdown();\n     }\n        \n }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("blockquote",[n("p",[s._v("延迟消息实现的效果就是在调用producer.send方法后，消息并不会立即发送出去，而是会等一段时间再发送出去。这是RocketMQ特有的一个功能。")]),s._v(" "),n("p",[s._v("那会延迟多久呢？延迟时间的设置就是在Message消息对象上设置一个延迟级别message.setDelayTimeLevel(3);")]),s._v(" "),n("p",[s._v("开源版本的RocketMQ中，对延迟消息并不支持任意时间的延迟设定(商业版本中支持)，而是只支持18个固定的延迟级别，1到18分别对应messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h  2h。这从哪里看出来的？其实从rocketmq-console控制台就能看出来。而这18个延迟级别也支持自行定义，不过一般情况下最好不要自定义修改。")]),s._v(" "),n("p",[s._v("那这么好用的延迟消息是怎么实现的？这18个延迟级别除了在延迟消息中用，还有什么地方用到了？别急，我们会在后面部分进行详细讲解。")])]),s._v(" "),n("h4",{attrs:{id:"_3-5-批量消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-批量消息"}},[s._v("#")]),s._v(" 3.5 批量消息")]),s._v(" "),n("p",[s._v("批量消息是指将多条消息合并成一个批量消息，一次发送出去。这样的好处是可以减少网络IO，提升吞吐量。")]),s._v(" "),n("p",[s._v("批量消息的消息生产者样例见：org.apache.rocketmq.example.batch.SimpleBatchProducer和org.apache.rocketmq.example.batch.SplitBatchProducer")]),s._v(" "),n("blockquote",[n("p",[s._v("相信大家在官网以及测试代码中都看到了关键的注释：如果批量消息大于1MB就不要用一个批次发送，而要拆分成多个批次消息发送。也就是说，一个批次消息的大小不要超过1MB")]),s._v(" "),n("p",[s._v("实际使用时，这个1MB的限制可以稍微扩大点，实际最大的限制是4194304字节，大概4MB。但是使用批量消息时，这个消息长度确实是必须考虑的一个问题。而且批量消息的使用是有一定限制的，这些消息应该有相同的Topic，相同的waitStoreMsgOK。而且不能是延迟消息、事务消息等。")])]),s._v(" "),n("h4",{attrs:{id:"_3-6-过滤消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-过滤消息"}},[s._v("#")]),s._v(" 3.6 过滤消息")]),s._v(" "),n("p",[s._v("在大多数情况下，可以使用Message的Tag属性来简单快速的过滤信息。")]),s._v(" "),n("p",[s._v("使用Tag过滤消息的消息生产者案例见：org.apache.rocketmq.example.filter.TagFilterProducer")]),s._v(" "),n("p",[s._v("使用Tag过滤消息的消息消费者案例见：org.apache.rocketmq.example.filter.TagFilterConsumer")]),s._v(" "),n("blockquote",[n("p",[s._v('主要是看消息消费者。consumer.subscribe("TagFilterTest", "TagA || TagC"); 这句只订阅TagA和TagC的消息。')]),s._v(" "),n("p",[s._v("TAG是RocketMQ中特有的一个消息属性。RocketMQ的最佳实践中就建议，使用RocketMQ时，一个应用可以就用一个Topic，而应用中的不同业务就用TAG来区分。")])]),s._v(" "),n("p",[s._v("但是，这种方式有一个很大的限制，就是一个消息只能有一个TAG，这在一些比较复杂的场景就有点不足了。 这时候，可以使用SQL表达式来对消息进行过滤。")]),s._v(" "),n("p",[s._v("SQL过滤的消息生产者案例见：org.apache.rocketmq.example.filter.SqlFilterProducer")]),s._v(" "),n("p",[s._v("SQL过滤的消息消费者案例见：org.apache.rocketmq.example.filter.SqlFilterConsumer")]),s._v(" "),n("blockquote",[n("p",[s._v("这个模式的关键是在消费者端使用MessageSelector.bySql(String sql)返回的一个MessageSelector。这里面的sql语句是按照SQL92标准来执行的。sql中可以使用的参数有默认的TAGS和一个在生产者中加入的a属性。")]),s._v(" "),n("p",[s._v("SQL92语法：")]),s._v(" "),n("p",[s._v("RocketMQ只定义了一些基本语法来支持这个特性。你也可以很容易地扩展它。")]),s._v(" "),n("ul",[n("li",[s._v("数值比较，比如："),n("strong",[s._v(">，>=，<，<=，BETWEEN，=；")])]),s._v(" "),n("li",[s._v("字符比较，比如："),n("strong",[s._v("=，<>，IN；")])]),s._v(" "),n("li",[n("strong",[s._v("IS NULL")]),s._v(" 或者 "),n("strong",[s._v("IS NOT NULL；")])]),s._v(" "),n("li",[s._v("逻辑符号 "),n("strong",[s._v("AND，OR，NOT；")])])]),s._v(" "),n("p",[s._v("常量支持类型为：")]),s._v(" "),n("ul",[n("li",[s._v("数值，比如："),n("strong",[s._v("123，3.1415；")])]),s._v(" "),n("li",[s._v("字符，比如："),n("strong",[s._v("'abc'，必须用单引号包裹起来；")])]),s._v(" "),n("li",[n("strong",[s._v("NULL")]),s._v("，特殊的常量")]),s._v(" "),n("li",[s._v("布尔值，"),n("strong",[s._v("TRUE")]),s._v(" 或 "),n("strong",[s._v("FALSE")])])]),s._v(" "),n("p",[s._v("使用注意：只有推模式的消费者可以使用SQL过滤。拉模式是用不了的。")])]),s._v(" "),n("blockquote",[n("p",[s._v("大家想一下，这个消息过滤是在Broker端进行的还是在Consumer端进行的？")])]),s._v(" "),n("h4",{attrs:{id:"_3-7-事务消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-事务消息"}},[s._v("#")]),s._v(" 3.7 事务消息")]),s._v(" "),n("p",[s._v("这个事务消息是RocketMQ提供的一个非常有特色的功能，需要着重理解。")]),s._v(" "),n("p",[s._v("​\t"),n("strong",[s._v("首先")]),s._v("，我们了解下什么是事务消息。官网的介绍是：事务消息是在分布式系统中保证最终一致性的两阶段提交的消息实现。他可以保证本地事务执行与消息发送两个操作的原子性，也就是这两个操作一起成功或者一起失败。")]),s._v(" "),n("p",[s._v("​\t"),n("strong",[s._v("其次")]),s._v("，我们来理解下事务消息的编程模型。事务消息只保证消息发送者的本地事务与发消息这两个操作的原子性，因此，事务消息的示例只涉及到消息发送者，对于消息消费者来说，并没有什么特别的。")]),s._v(" "),n("p",[s._v("事务消息生产者的案例见：org.apache.rocketmq.example.transaction.TransactionProducer")]),s._v(" "),n("blockquote",[n("p",[s._v("事务消息的关键是在TransactionMQProducer中指定了一个TransactionListener事务监听器，这个事务监听器就是事务消息的关键控制器。源码中的案例有点复杂，我这里准备了一个更清晰明了的事务监听器示例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class TransactionListenerImpl implements TransactionListener {\n\t//在提交完事务消息后执行。\n\t//返回COMMIT_MESSAGE状态的消息会立即被消费者消费到。\n\t//返回ROLLBACK_MESSAGE状态的消息会被丢弃。\n\t//返回UNKNOWN状态的消息会由Broker过一段时间再来回查事务的状态。\n    @Override\n    public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        String tags = msg.getTags();\n        //TagA的消息会立即被消费者消费到\n        if(StringUtils.contains(tags,"TagA")){\n            return LocalTransactionState.COMMIT_MESSAGE;\n        //TagB的消息会被丢弃\n        }else if(StringUtils.contains(tags,"TagB")){\n            return LocalTransactionState.ROLLBACK_MESSAGE;\n        //其他消息会等待Broker进行事务状态回查。\n        }else{\n            return LocalTransactionState.UNKNOW;\n        }\n    }\n\t//在对UNKNOWN状态的消息进行状态回查时执行。返回的结果是一样的。\n    @Override\n    public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n\t\tString tags = msg.getTags();\n        //TagC的消息过一段时间会被消费者消费到\n        if(StringUtils.contains(tags,"TagC")){\n            return LocalTransactionState.COMMIT_MESSAGE;\n        //TagD的消息也会在状态回查时被丢弃掉\n        }else if(StringUtils.contains(tags,"TagD")){\n            return LocalTransactionState.ROLLBACK_MESSAGE;\n        //剩下TagE的消息会在多次状态回查后最终丢弃\n        }else{\n            return LocalTransactionState.UNKNOW;\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])]),n("p",[s._v("​\t"),n("strong",[s._v("然后")]),s._v("，我们要了解下事务消息的使用限制：")]),s._v(" "),n("p",[s._v("​\t1、事务消息不支持延迟消息和批量消息。")]),s._v(" "),n("p",[s._v("​\t2、为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为 15 次，但是用户可以通过 Broker 配置文件的 "),n("code",[s._v("transactionCheckMax")]),s._v("参数来修改此限制。如果已经检查某条消息超过 N 次的话（ N = "),n("code",[s._v("transactionCheckMax")]),s._v(" ） 则 Broker 将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写 "),n("code",[s._v("AbstractTransactionCheckListener")]),s._v(" 类来修改这个行为。")]),s._v(" "),n("blockquote",[n("p",[s._v("回查次数是由BrokerConfig.transactionCheckMax这个参数来配置的，默认15次，可以在broker.conf中覆盖。 然后实际的检查次数会在message中保存一个用户属性MessageConst.PROPERTY_TRANSACTION_CHECK_TIMES。这个属性值大于transactionCheckMax，就会丢弃。 这个用户属性值会按回查次数递增，也可以在Producer中自行覆盖这个属性。")])]),s._v(" "),n("p",[s._v("3、事务消息将在 Broker 配置文件中的参数 transactionMsgTimeout  这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性 CHECK_IMMUNITY_TIME_IN_SECONDS  来改变这个限制，该参数优先于 "),n("code",[s._v("transactionMsgTimeout")]),s._v(" 参数。")]),s._v(" "),n("blockquote",[n("p",[s._v('由BrokerConfig.transactionTimeOut这个参数来配置。默认6秒，可以在broker.conf中进行修改。 另外，也可以给消息配置一个MessageConst.PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS属性来给消息指定一个特定的消息回查时间。 msg.putUserProperty(MessageConst.PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS, "10000"); 这样就是10秒。')])]),s._v(" "),n("p",[s._v("​\t4、事务性消息可能不止一次被检查或消费。")]),s._v(" "),n("p",[s._v("​\t5、提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过 RocketMQ 本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制。")]),s._v(" "),n("p",[s._v("​\t6、事务消息的生产者 ID 不能与其他类型消息的生产者 ID 共享。与其他类型的消息不同，事务消息允许反向查询、MQ服务器能通过它们的生产者 ID 查询到消费者。")]),s._v(" "),n("p",[s._v("​\t"),n("strong",[s._v("接下来")]),s._v("，我们还要了解下事务消息的实现机制，参见下图：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/101.png",alt:""}})]),s._v(" "),n("p",[s._v("事务消息机制的关键是在发送消息时，会将消息转为一个half半消息，并存入RocketMQ内部的一个  RMQ_SYS_TRANS_HALF_TOPIC  这个Topic，这样对消费者是不可见的。再经过一系列事务检查通过后，再将消息转存到目标Topic，这样对消费者就可见了。")]),s._v(" "),n("p",[s._v("​\t"),n("strong",[s._v("最后")]),s._v("，我们还需要思考下事务消息的作用。")]),s._v(" "),n("p",[s._v("​\t大家想一下这个事务消息跟分布式事务有什么关系？为什么扯到了分布式事务相关的两阶段提交上了？事务消息只保证了发送者本地事务和发送消息这两个操作的原子性，但是并不保证消费者本地事务的原子性，所以，事务消息只保证了分布式事务的一半。但是即使这样，"),n("strong",[s._v("对于复杂的分布式事务，RocketMQ提供的事务消息也是目前业内最佳的降级方案")]),s._v("。")]),s._v(" "),n("h4",{attrs:{id:"_3-8-acl权限控制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-acl权限控制"}},[s._v("#")]),s._v(" 3.8 ACL权限控制")]),s._v(" "),n("p",[s._v("权限控制（ACL）主要为RocketMQ提供Topic资源级别的用户访问控制。用户在使用RocketMQ权限控制时，可以在Client客户端通过  RPCHook注入AccessKey和SecretKey签名；同时，将对应的权限控制属性（包括Topic访问权限、IP白名单和AccessKey和SecretKey签名等）设置在$ROCKETMQ_HOME/conf/plain_acl.yml的配置文件中。Broker端对AccessKey所拥有的权限进行校验，校验不过，抛出异常； ACL客户端可以参考："),n("strong",[s._v("org.apache.rocketmq.example.simple")]),s._v("包下面的"),n("strong",[s._v("AclClient")]),s._v("代码。")]),s._v(" "),n("blockquote",[n("p",[s._v("注意，如果要在自己的客户端中使用RocketMQ的ACL功能，还需要引入一个单独的依赖包")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<dependency>\n\t<groupId>org.apache.rocketmq</groupId>\n\t<artifactId>rocketmq-acl</artifactId>\n\t<version>4.7.1</version>\n</dependency>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])]),s._v(" "),n("p",[s._v("​\t 而Broker端具体的配置信息可以参见源码包下docs/cn/acl/user_guide.md。主要是在broker.conf中打开acl的标志：aclEnable=true。然后就可以用plain_acl.yml来进行权限配置了。并且这个配置文件是热加载的，也就是说要修改配置时，只要修改配置文件就可以了，不用重启Broker服务。我们来简单分析下源码中的plan_acl.yml的配置：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#全局白名单，不受ACL控制\n#通常需要将主从架构中的所有节点加进来\nglobalWhiteRemoteAddresses:\n- 10.10.103.*\n- 192.168.0.*\n\naccounts:\n#第一个账户\n- accessKey: RocketMQ\n  secretKey: 12345678\n  whiteRemoteAddress:\n  admin: false \n  defaultTopicPerm: DENY #默认Topic访问策略是拒绝\n  defaultGroupPerm: SUB #默认Group访问策略是只允许订阅\n  topicPerms:\n  - topicA=DENY #topicA拒绝\n  - topicB=PUB|SUB #topicB允许发布和订阅消息\n  - topicC=SUB #topicC只允许订阅\n  groupPerms:\n  # the group should convert to retry topic\n  - groupA=DENY\n  - groupB=PUB|SUB\n  - groupC=SUB\n#第二个账户，只要是来自192.168.1.*的IP，就可以访问所有资源\n- accessKey: rocketmq2\n  secretKey: 12345678\n  whiteRemoteAddress: 192.168.1.*\n  # if it is admin, it could access all resources\n  admin: true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h2",{attrs:{id:"springboot整合rocketmq"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot整合rocketmq"}},[s._v("#")]),s._v(" SpringBoot整合RocketMQ")]),s._v(" "),n("h3",{attrs:{id:"_1、快速实战"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、快速实战"}},[s._v("#")]),s._v(" 1、快速实战")]),s._v(" "),n("p",[s._v("这部分我们看下SpringBoot如何快速集成RocketMQ。")]),s._v(" "),n("blockquote",[n("p",[s._v("在使用SpringBoot的starter集成包时，要特别注意版本。因为SpringBoot集成RocketMQ的starter依赖是由Spring社区提供的，目前正在快速迭代的过程当中，不同版本之间的差距非常大，甚至基础的底层对象都会经常有改动。例如如果使用rocketmq-spring-boot-starter:2.0.4版本开发的代码，升级到目前最新的rocketmq-spring-boot-starter:2.1.1后，基本就用不了了。")])]),s._v(" "),n("p",[s._v("我们创建一个maven工程，引入关键依赖：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<dependencies>\n        <dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-spring-boot-starter</artifactId>\n            <version>2.1.1</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.springframework</groupId>\n                    <artifactId>spring-core</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.springframework</groupId>\n                    <artifactId>spring-webmvc</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>2.1.6.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n    </dependencies>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br")])]),n("blockquote",[n("p",[s._v("rocketmq-spring-boot-starter:2.1.1引入的SpringBoot包版本是2.0.5.RELEASE，这里把SpringBoot的依赖包升级了一下。")])]),s._v(" "),n("p",[s._v("然后我们以SpringBoot的方式，快速创建一个简单的Demo")]),s._v(" "),n("p",[s._v("启动类：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@SpringBootApplication\npublic class RocketMQScApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RocketMQScApplication.class,args);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("配置文件 application.properties")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#NameServer地址\nrocketmq.name-server=192.168.232.128:9876\n#默认的消息生产者组\nrocketmq.producer.group=springBootGroup\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("消息生产者")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.roy.rocket.basic;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.spring.annotation.RocketMQTransactionListener;\nimport org.apache.rocketmq.spring.core.RocketMQTemplate;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.support.MessageBuilder;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport java.io.UnsupportedEncodingException;\n\n/**\n * @author ：楼兰\n * @date ：Created in 2020/10/22\n * @description:\n **/\n@Component\npublic class SpringProducer {\n\n    @Resource\n    private RocketMQTemplate rocketMQTemplate;\n\t//发送普通消息的示例\n    public void sendMessage(String topic,String msg){\n        this.rocketMQTemplate.convertAndSend(topic,msg);\n    }\n\t//发送事务消息的示例\n    public void sendMessageInTransaction(String topic,String msg) throws InterruptedException {\n        String[] tags = new String[] {"TagA", "TagB", "TagC", "TagD", "TagE"};\n        for (int i = 0; i < 10; i++) {\n            Message<String> message = MessageBuilder.withPayload(msg).build();\n            String destination =topic+":"+tags[i % tags.length];\n            SendResult sendResult = rocketMQTemplate.sendMessageInTransaction(destination, message,destination);\n            System.out.printf("%s%n", sendResult);\n\n            Thread.sleep(10);\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("p",[s._v("消息消费者")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.roy.rocket.basic;\n\nimport org.apache.rocketmq.spring.annotation.RocketMQMessageListener;\nimport org.apache.rocketmq.spring.core.RocketMQListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author ：楼兰\n * @date ：Created in 2020/10/22\n * @description:\n **/\n@Component\n@RocketMQMessageListener(consumerGroup = "MyConsumerGroup", topic = "TestTopic")\npublic class SpringConsumer implements RocketMQListener<String> {\n    @Override\n    public void onMessage(String message) {\n        System.out.println("Received message : "+ message);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("blockquote",[n("p",[s._v("SpringBoot集成RocketMQ，消费者部分的核心就在这个@RocketMQMessageListener注解上。所有消费者的核心功能也都会集成到这个注解中。所以我们还要注意下这个注解里面的属性：")]),s._v(" "),n("p",[s._v("例如：消息过滤可以由里面的selectorType属性和selectorExpression来定制")]),s._v(" "),n("p",[s._v("消息有序消费还是并发消费则由consumeMode属性定制。")]),s._v(" "),n("p",[s._v("消费者是集群部署还是广播部署由messageModel属性定制。")])]),s._v(" "),n("p",[s._v("然后关于事务消息，还需要配置一个事务消息监听器：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.roy.rocket.config;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.rocketmq.client.producer.LocalTransactionState;\nimport org.apache.rocketmq.spring.annotation.RocketMQTransactionListener;\nimport org.apache.rocketmq.spring.core.RocketMQLocalTransactionListener;\nimport org.apache.rocketmq.spring.core.RocketMQLocalTransactionState;\nimport org.apache.rocketmq.spring.support.RocketMQUtil;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.converter.StringMessageConverter;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * @author ：楼兰\n * @date ：Created in 2020/11/5\n * @description:\n **/\n\n@RocketMQTransactionListener(rocketMQTemplateBeanName = "rocketMQTemplate")\npublic class MyTransactionImpl implements RocketMQLocalTransactionListener {\n\n    private ConcurrentHashMap<Object, String> localTrans = new ConcurrentHashMap<>();\n    @Override\n    public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        Object id = msg.getHeaders().get("id");\n        String destination = arg.toString();\n        localTrans.put(id,destination);\n        org.apache.rocketmq.common.message.Message message = RocketMQUtil.convertToRocketMessage(new StringMessageConverter(),"UTF-8",destination, msg);\n        String tags = message.getTags();\n        if(StringUtils.contains(tags,"TagA")){\n            return RocketMQLocalTransactionState.COMMIT;\n        }else if(StringUtils.contains(tags,"TagB")){\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }else{\n            return RocketMQLocalTransactionState.UNKNOWN;\n        }\n    }\n\n    @Override\n    public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\n        //SpringBoot的消息对象中，并没有transactionId这个属性。跟原生API不一样。\n//        String destination = localTrans.get(msg.getTransactionId());\n        return RocketMQLocalTransactionState.COMMIT;\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br")])]),n("p",[s._v("这样我们启动应用后，就能够通过访问  http://localhost:8080/MQTest/sendMessage?message=123 接口来发送一条简单消息。并在SpringConsumer中消费到。")]),s._v(" "),n("p",[s._v("也可以通过访问http://localhost:8080/MQTest/sendTransactionMessage?message=123 ，来发送一条事务消息。")]),s._v(" "),n("blockquote",[n("p",[s._v("这里可以看到，对事务消息，SpringBoot进行封装时，就缺少了transactionId，这在事务控制中是非常关键的。")])]),s._v(" "),n("h3",{attrs:{id:"_2、其他更多消息类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、其他更多消息类型"}},[s._v("#")]),s._v(" 2、其他更多消息类型：")]),s._v(" "),n("p",[s._v("对于其他的消息类型，文档中就不一一记录了。具体可以参见源码中的junit测试案例。")]),s._v(" "),n("h3",{attrs:{id:"_3、总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、总结"}},[s._v("#")]),s._v(" 3、总结：")]),s._v(" "),n("ul",[n("li",[s._v("SpringBoot  引入org.apache.rocketmq:rocketmq-spring-boot-starter依赖后，就可以通过内置的RocketMQTemplate来与RocketMQ交互。相关属性都以rockemq.开头。具体所有的配置信息可以参见org.apache.rocketmq.spring.autoconfigure.RocketMQProperties这个类。")]),s._v(" "),n("li",[s._v("SpringBoot依赖中的Message对象和RocketMQ-client中的Message对象是两个不同的对象，这在使用的时候要非常容易弄错。例如RocketMQ-client中的Message里的TAG属性，在SpringBoot依赖中的Message中就没有。Tag属性被移到了发送目标中，与Topic一起，以Topic:Tag的方式指定。")]),s._v(" "),n("li",[s._v("最后强调一次，一定要注意版本。rocketmq-spring-boot-starter的更新进度一般都会略慢于RocketMQ的版本更新，并且版本不同会引发很多奇怪的问题。apache有一个官方的rocketmq-spring示例，地址：https://github.com/apache/rocketmq-spring.git 以后如果版本更新了，可以参考下这个示例代码。")])]),s._v(" "),n("h2",{attrs:{id:"springcloudstream整合rocketmq"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springcloudstream整合rocketmq"}},[s._v("#")]),s._v(" SpringCloudStream整合RocketMQ")]),s._v(" "),n("p",[s._v("​\tSpringCloudStream是Spring社区提供的一个统一的消息驱动框架，目的是想要以一个统一的编程模型来对接所有的MQ消息中间件产品。我们还是来看看SpringCloudStream如何来集成RocketMQ。")]),s._v(" "),n("h3",{attrs:{id:"_1、快速实战-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、快速实战-2"}},[s._v("#")]),s._v(" 1、快速实战")]),s._v(" "),n("p",[s._v("​\t创建Maven工程，引入依赖：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.rocketmq</groupId>\n\t\t\t<artifactId>rocketmq-client</artifactId>\n\t\t\t<version>4.7.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.rocketmq</groupId>\n\t\t\t<artifactId>rocketmq-acl</artifactId>\n\t\t\t<version>4.7.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-stream-rocketmq</artifactId>\n\t\t\t<version>2.2.3.RELEASE</version>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.apache.rocketmq</groupId>\n\t\t\t\t\t<artifactId>rocketmq-client</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.apache.rocketmq</groupId>\n\t\t\t\t\t<artifactId>rocketmq-acl</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t\t<version>2.3.3.RELEASE</version>\n\t\t</dependency>\n\t</dependencies>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[s._v("应用启动类：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.cloud.stream.messaging.Source;\n\n/**\n * @author ：楼兰\n * @date ：Created in 2020/10/22\n * @description:\n **/\n@EnableBinding({Source.class, Sink.class})\n@SpringBootApplication\npublic class ScRocketMQApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ScRocketMQApplication.class,args);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("blockquote",[n("p",[s._v("注意这个@EnableBinding({Source.class, Sink.class})注解，这是SpringCloudStream引入的Binder配置。")])]),s._v(" "),n("p",[s._v("然后增加配置文件application.properties")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#ScStream通用的配置以spring.cloud.stream开头\nspring.cloud.stream.bindings.input.destination=TestTopic\nspring.cloud.stream.bindings.input.group=scGroup\nspring.cloud.stream.bindings.output.destination=TestTopic\n#rocketMQ的个性化配置以spring.cloud.stream.rocketmq开头\n#spring.cloud.stream.rocketmq.binder.name-server=192.168.232.128:9876;192.168.232.129:9876;192.168.232.130:9876\nspring.cloud.stream.rocketmq.binder.name-server=192.168.232.128:9876\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("blockquote",[n("p",[s._v("SpringCloudStream中，一个binding对应一个消息通道。这其中配置的input，是在Sink.class中定义的，对应一个消息消费者。而output，是在Source.class中定义的，对应一个消息生产者。")])]),s._v(" "),n("p",[s._v("然后就可以增加消息消费者：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.roy.scrocket.basic;\n\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author ：楼兰\n * @date ：Created in 2020/10/22\n * @description:\n **/\n@Component\npublic class ScConsumer {\n\n    @StreamListener(Sink.INPUT)\n    public void onMessage(String messsage){\n        System.out.println("received message:"+messsage+" from binding:"+ Sink.INPUT);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("消息生产者：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.roy.scrocket.basic;\n\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.springframework.cloud.stream.messaging.Source;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.MessageHeaders;\nimport org.springframework.messaging.support.MessageBuilder;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author ：楼兰\n * @date ：Created in 2020/10/22\n * @description:\n **/\n@Component\npublic class ScProducer {\n\n    @Resource\n    private Source source;\n\n    public void sendMessage(String msg){\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(MessageConst.PROPERTY_TAGS, "testTag");\n        MessageHeaders messageHeaders = new MessageHeaders(headers);\n        Message<String> message = MessageBuilder.createMessage(msg, messageHeaders);\n        this.source.output().send(message);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[s._v("最后增加一个Controller类用于测试：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.roy.scrocket.controller;\n\nimport com.roy.scrocket.basic.ScProducer;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n/**\n * @author ：楼兰\n * @date ：Created in 2020/10/27\n * @description:\n **/\n@RestController\n@RequestMapping("/MQTest")\npublic class MQTestController {\n\n    @Resource\n    private ScProducer producer;\n    @RequestMapping("/sendMessage")\n    public String sendMessage(String message){\n        producer.sendMessage(message);\n        return "消息发送完成";\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("启动应用后，就可以访问http://localhost:8080/MQTest/sendMessage?message=123，给RocketMQ发送一条消息到TestTopic，并在ScConsumer中消费到了。")]),s._v(" "),n("h3",{attrs:{id:"_2、总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、总结"}},[s._v("#")]),s._v(" 2、总结")]),s._v(" "),n("ul",[n("li",[s._v("关于SpringCloudStream。这是一套几乎通用的消息中间件编程框架，例如从对接RocketMQ换到对接Kafka，业务代码几乎不需要动，只需要更换pom依赖并且修改配置文件就行了。但是，由于各个MQ产品都有自己的业务模型，差距非常大，所以使用使用SpringCloudStream时要注意业务模型转换。并且在实际使用中，要非常注意各个MQ的个性化配置属性。例如RocketMQ的个性化属性都是以spring.cloud.stream.rocketmq开头，只有通过这些属性才能用上RocketMQ的延迟消息、排序消息、事务消息等个性化功能。")]),s._v(" "),n("li",[s._v("SpringCloudStream是Spring社区提供的一套统一框架，但是官方目前只封装了kafka、kafka  Stream、RabbitMQ的具体依赖。而RocketMQ的依赖是交由厂商自己维护的，也就是由阿里巴巴自己来维护。这个维护力度显然是有不小差距的。所以一方面可以看到之前在使用SpringBoot时着重强调的版本问题，在使用SpringCloudStream中被放大了很多。spring-cloud-starter-stream-rocketmq目前最新的2.2.3.RELEASE版本中包含的rocketmq-client版本还是4.4.0。这个差距就非常大了。另一方面，RocketMQ这帮大神不屑于写文档的问题也特别严重，SpringCloudStream中关于RocketMQ的个性化配置几乎很难找到完整的文档。")]),s._v(" "),n("li",[s._v("总之，对于RocketMQ来说，SpringCloudStream目前来说还并不是一个非常好的集成方案。这方面跟kafka和Rabbit还没法比。所以使用时要慎重。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);