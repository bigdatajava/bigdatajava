(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{399:function(v,_,t){"use strict";t.r(_);var d=t(1),a=Object(d.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"mq概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq概念"}},[v._v("#")]),v._v(" MQ概念")]),v._v(" "),_("p",[v._v("MQ全称 Message Queue（消息队列），是在消息的传输过程中保存消息的容器。多用于分布式系统之间进行通信。")]),v._v(" "),_("p",[v._v("队列，是一种FIFO 先进先出的数据结构。消息由生产者发送到MQ进行排队，然后按原来的顺序交由消息的消费者进行处理。QQ和微信就是典型的MQ")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831205938793.png",alt:"image-20210831205938793"}})]),v._v(" "),_("h2",{attrs:{id:"mq优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq优势"}},[v._v("#")]),v._v(" MQ优势")]),v._v(" "),_("ul",[_("li",[v._v("应用解耦：提高系统容错性和可维护性")]),v._v(" "),_("li",[v._v("异步提速：提升用户体验和吞吐量")]),v._v(" "),_("li",[v._v("削峰填谷：提高系统稳定性")])]),v._v(" "),_("h3",{attrs:{id:"应用解耦"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用解耦"}},[v._v("#")]),v._v(" 应用解耦")]),v._v(" "),_("p",[v._v("系统的耦合性越高，容错性就越低，可维护性就越低。")]),v._v(" "),_("p",[v._v("MQ使得应用间解耦，提升容错性和可维护性")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831210119514.png",alt:"image-20210831210119514"}})]),v._v(" "),_("h3",{attrs:{id:"异步提速"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异步提速"}},[v._v("#")]),v._v(" 异步提速")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831210306325.png",alt:"image-20210831210306325"}})]),v._v(" "),_("p",[v._v("一个下单操作耗时：20+300+300+300=920ms，用户点击完成下单按钮后，需要等待920ms才能得到下单响应，太慢了！")]),v._v(" "),_("p",[v._v("使用MQ后，用户点击玩下单按钮后，只需要等待25ms就能得到下单响应（20+5=25ms）。")]),v._v(" "),_("p",[v._v("提升用户体验和系统吞吐量（单位时间内处理请求的数量）")]),v._v(" "),_("h3",{attrs:{id:"削峰填谷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#削峰填谷"}},[v._v("#")]),v._v(" 削峰填谷")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831210644817.png",alt:"image-20210831210644817"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831210728034.png",alt:"image-20210831210728034"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831210758185.png",alt:"image-20210831210758185"}})]),v._v(" "),_("p",[v._v("使用了 MQ 之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在 MQ 中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直到消费完积压的消息，这就叫做“填谷”。")]),v._v(" "),_("p",[v._v("使用MQ后，可以提高系统稳定性。")]),v._v(" "),_("h2",{attrs:{id:"mq劣势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq劣势"}},[v._v("#")]),v._v(" MQ劣势")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831211033103.png",alt:"image-20210831211033103"}})]),v._v(" "),_("ul",[_("li",[_("p",[v._v("系统可用性降低")]),v._v(" "),_("blockquote",[_("p",[v._v("系统引入的外部依赖越多，系统稳定性越差，一旦MQ宕机，就会对业务造成影响，如何保证MQ的高可用")])])]),v._v(" "),_("li",[_("p",[v._v("系统负责度提高")]),v._v(" "),_("blockquote",[_("p",[v._v("引入MQ后系统的复杂度会大大提高。以前服务之间可以进行同步的服务调用，引入MQ后，会变为异步调用，数据的链路就会变得更复杂。并且还会带来其他一些问题。比如：如何保证消费不会丢失？不会被重复调用？怎么保证消息的顺序性等问题。")])])]),v._v(" "),_("li",[_("p",[v._v("消息一致性问题")]),v._v(" "),_("blockquote",[_("p",[v._v("A系统处理完业务，通过MQ发送消息给B、C系统进行后续的业务处理。如果B系统处理成功，C系统处理失败怎么办？这就需要考虑如何保证消息数据处理的一致性")])])])]),v._v(" "),_("h2",{attrs:{id:"mq产品"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq产品"}},[v._v("#")]),v._v(" MQ产品")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[_("strong",[v._v("Ra bbitMQ")])]),v._v(" "),_("th",[_("strong",[v._v("ActiveMQ")])]),v._v(" "),_("th",[_("strong",[v._v("RocketMQ")])]),v._v(" "),_("th",[_("strong",[v._v("Kafka")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("公司/社区")]),v._v(" "),_("td",[v._v("Rabbit")]),v._v(" "),_("td",[v._v("Apache")]),v._v(" "),_("td",[v._v("阿里")]),v._v(" "),_("td",[v._v("Apache")])]),v._v(" "),_("tr",[_("td",[v._v("开发语言")]),v._v(" "),_("td",[v._v("Erlang")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("Scala&Java")])]),v._v(" "),_("tr",[_("td",[v._v("协议支持")]),v._v(" "),_("td",[v._v("AMQP，XMPP，SMTP，STOMP")]),v._v(" "),_("td",[v._v("OpenWire,STOMP，REST,XMPP,AMQP")]),v._v(" "),_("td",[v._v("自定义")]),v._v(" "),_("td",[v._v("自定义协议，社区封装了http协议支持")])]),v._v(" "),_("tr",[_("td",[v._v("客户端支持语言")]),v._v(" "),_("td",[v._v("官方支持Erlang，Java，Ruby等,社区产出多种API，几乎支持所有语言")]),v._v(" "),_("td",[v._v("Java，C，C++，Python，PHP，Perl，.net等")]),v._v(" "),_("td",[v._v("Java，C++（不成熟）")]),v._v(" "),_("td",[v._v("官方支持Java,社区产出多种API，如PHP，Python等")])]),v._v(" "),_("tr",[_("td",[v._v("单机吞吐量")]),v._v(" "),_("td",[v._v("万级（其次）")]),v._v(" "),_("td",[v._v("万级（最差）")]),v._v(" "),_("td",[v._v("十万级（最好）")]),v._v(" "),_("td",[v._v("十万级（次之）")])]),v._v(" "),_("tr",[_("td",[v._v("消息延迟")]),v._v(" "),_("td",[v._v("微妙级")]),v._v(" "),_("td",[v._v("毫秒级")]),v._v(" "),_("td",[v._v("毫秒级")]),v._v(" "),_("td",[v._v("毫秒以内")])]),v._v(" "),_("tr",[_("td",[v._v("功能特性")]),v._v(" "),_("td",[v._v("并发能力强，性能极其好，延时低，社区活跃，管理界面丰富")]),v._v(" "),_("td",[v._v("老牌产品，成熟度高，文档较多")]),v._v(" "),_("td",[v._v("MQ功能比较完备，扩展性佳")]),v._v(" "),_("td",[v._v("只支持主要的MQ功能，毕竟是为大数据领域准备的。")])])])]),v._v(" "),_("h2",{attrs:{id:"amqp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#amqp"}},[v._v("#")]),v._v(" AMQP")]),v._v(" "),_("p",[v._v("AMQP，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。2006年，AMQP 规范发布。类比HTTP。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq//image-20210831211721348.png",alt:"image-20210831211721348"}})]),v._v(" "),_("h2",{attrs:{id:"mq-产品比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-产品比较"}},[v._v("#")]),v._v(" MQ 产品比较")]),v._v(" "),_("h2",{attrs:{id:"几大mq产品特点比较"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#几大mq产品特点比较"}},[v._v("#")]),v._v(" 几大MQ产品特点比较")]),v._v(" "),_("p",[v._v("​\t常用的MQ产品包括Kafka、RabbitMQ和RocketMQ。我们对这三个产品做下简单的比较，重点需要理解他们的适用场景。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rabbitmq/100.png",alt:""}})]),v._v(" "),_("p",[_("strong",[v._v("RocketMQ")])]),v._v(" "),_("p",[v._v("淘宝内部的交易系统使用了淘宝自主研发的 Notify 消息中间件，使用 Mysql 作为消息存储媒介，可 完全水平扩容，为了进一步降低成本，我们认为存储部分可以进一步优化，2011 年初，Linkin 开源 了 Kafka 这个优秀的消息中间件，淘宝中间件团队在对 Kafka 做过充分 Review 之后，Kafka 无限消 息堆积，高效的持久化速度吸引了我们，但是同时发现这个消息系统主要定位于日志传输，对于使用 在淘宝交易、订单、充值等场景下还有诸多特性不满足，为此我们重新用 Java 语言编写了 RocketMQ， 定位于非日志的可靠消息传输（日志场景也 OK），目前 RocketMQ 在阿里集团被广泛应用在订单， 交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。")]),v._v(" "),_("p",[_("strong",[v._v("Kafka")])]),v._v(" "),_("p",[v._v("Kafka 是 LinkedIn 开源的分布式发布-订阅消息系统，目前归属于 Apache 定级项目。Kafka 主要特 点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8 版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互 联网服务的数据收集业务。")]),v._v(" "),_("p",[v._v("R a b b i t MQ")]),v._v(" "),_("p",[v._v("RabbitMQ 是使用 Erlang 语言开发的开源消息队列系统，基于 AMQP 协议来实现。AMQP 的主要特 征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP 协议更多用在企业 系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。")]),v._v(" "),_("p",[_("strong",[v._v("有关测试结论")])]),v._v(" "),_("p",[v._v("Kafka 的吞吐量高达 17.3w/s，不愧是高吞吐量消息中间件的行业老大。这主要取决于它的队列模式 保证了写磁盘的过程是线性 IO。此时 broker 磁盘 IO 已达瓶颈。 RocketMQ 也表现不俗，吞吐量在 11.6w/s，磁盘 IO %util 已接近 100%。RocketMQ 的消息写入内 存后即返回 ack，由单独的线程专门做刷盘的操作，所有的消息均是顺序写文件。 RabbitMQ 的吞吐量 5.95w/s，CPU 资源消耗较高。它支持 AMQP 协议，实现非常重量级，为了保 证消息的可靠性在吞吐量上做了取舍。我们还做了 RabbitMQ 在消息持久化场景下的性能测试，吞吐 量在 2.6w/s 左右。 在服务端处理同步发送的性能上，Kafka>RocketMQ>RabbitMQ。 对比了最简单的小消息发送场景,Kafka 暂时胜出。但是,作为经受过历次双十一洗礼的 RocketMQ,在 互联网应用场景中更有它优越的一面。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("功能")]),v._v(" "),_("th",[v._v("消息队列 RocketMQ")]),v._v(" "),_("th",[v._v("Apache RocketMQ(开源)")]),v._v(" "),_("th",[v._v("Apache  Kafka")]),v._v(" "),_("th",[v._v("RabbitMQ")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("安全防护")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("支持")])]),v._v(" "),_("tr",[_("td",[v._v("主子账号支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("可靠性")]),v._v(" "),_("td",[v._v("- 同步刷盘  - 同步双写  - 超3份数据副本  - 99.99999999%")]),v._v(" "),_("td",[v._v("-  同步刷盘 - 异步刷盘")]),v._v(" "),_("td",[v._v("异步刷盘，丢数据概率高")]),v._v(" "),_("td",[v._v("同步刷盘")])]),v._v(" "),_("tr",[_("td",[v._v("可用性")]),v._v(" "),_("td",[v._v("- 非常好，99.95%  - Always Writable")]),v._v(" "),_("td",[v._v("好")]),v._v(" "),_("td",[v._v("好")]),v._v(" "),_("td",[v._v("好")])]),v._v(" "),_("tr",[_("td",[v._v("横向扩展能力")]),v._v(" "),_("td",[v._v("- 支持平滑扩展  - 支持百万级 QPS")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("- 集群扩容依赖前端 - LVS 负载均衡调度")])]),v._v(" "),_("tr",[_("td",[v._v("Low Latency")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("消费模型")]),v._v(" "),_("td",[v._v("Push  / Pull")]),v._v(" "),_("td",[v._v("Push / Pull")]),v._v(" "),_("td",[v._v("Pull")]),v._v(" "),_("td",[v._v("Push  / Pull")])]),v._v(" "),_("tr",[_("td",[v._v("定时消息")]),v._v(" "),_("td",[v._v("支持（可精确到秒级）")]),v._v(" "),_("td",[v._v("支持（只支持18个固定  Level）")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("支持")])]),v._v(" "),_("tr",[_("td",[v._v("事务消息")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("顺序消息")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("全链路消息轨迹")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("消息堆积能力")]),v._v(" "),_("td",[v._v("百亿级别不影响性能")]),v._v(" "),_("td",[v._v("百亿级别影响性能")]),v._v(" "),_("td",[v._v("影响性能")]),v._v(" "),_("td",[v._v("影响性能")])]),v._v(" "),_("tr",[_("td",[v._v("消息堆积查询")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("消息回溯")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("消息重试")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("支持")])]),v._v(" "),_("tr",[_("td",[v._v("死信队列")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("支持")])]),v._v(" "),_("tr",[_("td",[v._v("性能（常规）")]),v._v(" "),_("td",[v._v("非常好  百万级 QPS")]),v._v(" "),_("td",[v._v("非常好  十万级 QPS")]),v._v(" "),_("td",[v._v("非常好  百万级 QPS")]),v._v(" "),_("td",[v._v("一般  万级 QPS")])]),v._v(" "),_("tr",[_("td",[v._v("性能（万级 Topic 场景）")]),v._v(" "),_("td",[v._v("非常好  百万级 QPS")]),v._v(" "),_("td",[v._v("非常好  十万级 QPS")]),v._v(" "),_("td",[v._v("低")]),v._v(" "),_("td",[v._v("低")])]),v._v(" "),_("tr",[_("td",[v._v("性能（海量消息堆积场景）")]),v._v(" "),_("td",[v._v("非常好  百万级 QPS")]),v._v(" "),_("td",[v._v("非常好  十万级 QPS")]),v._v(" "),_("td",[v._v("低")]),v._v(" "),_("td",[v._v("低")])])])]),v._v(" "),_("p",[_("strong",[v._v("对比")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("Kafka")]),v._v(" "),_("th",[v._v("RocketMq")]),v._v(" "),_("th",[v._v("RabbitMQ")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("关注度")]),v._v(" "),_("td",[v._v("高")]),v._v(" "),_("td",[v._v("中")]),v._v(" "),_("td",[v._v("高")])]),v._v(" "),_("tr",[_("td",[v._v("成熟度")]),v._v(" "),_("td",[v._v("成熟")]),v._v(" "),_("td",[v._v("比较成熟")]),v._v(" "),_("td",[v._v("成熟")])]),v._v(" "),_("tr",[_("td",[v._v("所属社区/公司")]),v._v(" "),_("td",[v._v("Apache")]),v._v(" "),_("td",[v._v("Alibaba  Apache")]),v._v(" "),_("td",[v._v("Mozilla  Public  License")])]),v._v(" "),_("tr",[_("td",[v._v("社区活跃度")]),v._v(" "),_("td",[v._v("高")]),v._v(" "),_("td",[v._v("中")]),v._v(" "),_("td",[v._v("高")])]),v._v(" "),_("tr",[_("td",[v._v("文档")]),v._v(" "),_("td",[v._v("多")]),v._v(" "),_("td",[v._v("中")]),v._v(" "),_("td",[v._v("多")])]),v._v(" "),_("tr",[_("td",[v._v("特点")]),v._v(" "),_("td",[v._v("吞吐量与消息积累都很强大  Topic太多会影响性能。")]),v._v(" "),_("td",[v._v("各个环节分布式扩展设  计，主从 HA；支持上万个队列；多种消费模式；性能很好")]),v._v(" "),_("td",[v._v("由于Erlang 语言的并发能力，性能很好")])]),v._v(" "),_("tr",[_("td",[v._v("授权方式")]),v._v(" "),_("td",[v._v("开源")]),v._v(" "),_("td",[v._v("开源")]),v._v(" "),_("td",[v._v("开源")])]),v._v(" "),_("tr",[_("td",[v._v("开发语言")]),v._v(" "),_("td",[v._v("scala")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("Erlang")])]),v._v(" "),_("tr",[_("td",[v._v("支持的协议")]),v._v(" "),_("td",[v._v("一套自行设计的基于TCP的二进制协议")]),v._v(" "),_("td",[v._v("自己定义的一套(社区提供  JMS--不成熟)")]),v._v(" "),_("td",[v._v("AMQP")])]),v._v(" "),_("tr",[_("td",[v._v("客户端支持语言")]),v._v(" "),_("td",[v._v("C/C++,Python,Go,Erlang,Java  等")]),v._v(" "),_("td",[v._v("Java  C++（不成熟）")]),v._v(" "),_("td",[v._v("Java、C、  C++、  Python、  PHP、  Perl、.net 等")])]),v._v(" "),_("tr",[_("td",[v._v("持久化")]),v._v(" "),_("td",[v._v("磁盘文件")]),v._v(" "),_("td",[v._v("磁盘文件")]),v._v(" "),_("td",[v._v("内存、文件")])]),v._v(" "),_("tr",[_("td",[v._v("事务")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")])])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("集群")]),v._v(" "),_("th",[v._v("Zookeeper")]),v._v(" "),_("th",[v._v("Nameserver")]),v._v(" "),_("th")])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("单机支持的队列")]),v._v(" "),_("td",[v._v("单机超过64个队列，性能会明显下降")]),v._v(" "),_("td",[v._v("单机最高支持5W个队列，性能没有明显变化")]),v._v(" "),_("td",[v._v("依赖于内存")])]),v._v(" "),_("tr",[_("td",[v._v("定时消息")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("开源版仅支持定时Level")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("顺序消费")]),v._v(" "),_("td",[v._v("支持顺序消费，但是一台Broker 宕机后，顺序会乱")]),v._v(" "),_("td",[v._v("支持顺序消费，在顺序消费场景下，消费失败时消费队列将会暂停")]),v._v(" "),_("td",[v._v("支持顺序消费，但是一台 Broker宕机后，顺序会乱")])]),v._v(" "),_("tr",[_("td",[v._v("负载均衡")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")])]),v._v(" "),_("tr",[_("td",[v._v("管理界面")]),v._v(" "),_("td",[v._v("无")]),v._v(" "),_("td",[v._v("无社区有 web   console   实现")]),v._v(" "),_("td",[v._v("好")])]),v._v(" "),_("tr",[_("td",[v._v("部署依赖")]),v._v(" "),_("td",[v._v("zookeeper")]),v._v(" "),_("td",[v._v("Nameserver")]),v._v(" "),_("td",[v._v("Erlang环境")])]),v._v(" "),_("tr",[_("td",[v._v("消费方式")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("保证严格的消费顺序")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("总结：优点")]),v._v(" "),_("td",[v._v("1、   高吞吐、低延迟、高性能  2、   提供多种客户端语言  3、   生态完善，大数据处理方面的必备工具")]),v._v(" "),_("td",[v._v("模型简单，接口易用。在阿里大规模应用。目前支付宝中的余额宝等新兴产品均使用rocketmq。集群规模大概在50台左右，单日处理消息上百亿；性能非常好，可以大量堆积消息在broker中；支持多种消费，包括集群消费、广播消费等。开发度较活跃，版本更新很快。")]),v._v(" "),_("td",[v._v("由于erlang语言的特性， mq性能较好；管理界面较丰富，在互联网公司也有  较大规模的应用；  支持amqp协议，有多种语言且支持amqp的客户端可用")])]),v._v(" "),_("tr",[_("td",[v._v("总结：缺点")]),v._v(" "),_("td",[v._v("消费者集群数受到分区数的限制  单机Topic过多，性能会明显下降不支持事务。容易丢数据。")]),v._v(" "),_("td",[v._v("使用者较少，生态不够完善，消息堆积与吞吐量上与kafka还是有差距。  客户端支持java")]),v._v(" "),_("td",[v._v("Erlang 语言难度较大，集群不支持动态扩展。  不支持事务，消息吞吐能力有限  消息堆积时，性能会明显降低。")])])])])])}),[],!1,null,null,null);_.default=a.exports}}]);