(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{564:function(n,s,e){"use strict";e.r(s);var t=e(1),a=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"spring事件监听机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring事件监听机制"}},[n._v("#")]),n._v(" Spring事件监听机制")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("U2FsdGVkX185qfbj2WNlf/TyQY0vXI5y/qya5vIV1BpTMB2xDRocWxUJ9yAkqWF+\nDTk3OmGLtW7r2ctoJC3bjFW65xoafmf9dsEM2FXI07DAD50n8JwCAk5C/WkbV9ZQ\n2w==\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[s("strong",[n._v("1. 使用Spring 事件")])]),n._v(" "),s("p",[n._v("Spring事件体系包括三个组件：事件，事件监听器，事件广播器。")]),n._v(" "),s("p",[s("strong",[n._v("事件")])]),n._v(" "),s("p",[s("strong",[n._v("Spring内置事件")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("内置事件中由系统内部进行发布，只需注入监听器\n")])])]),s("p",[n._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7078.png",alt:"0"}})]),n._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("strong",[n._v("Event")])]),n._v(" "),s("th",[s("strong",[n._v("说明")])])])]),n._v(" "),s("tbody",[s("tr",[s("td",[n._v("ContextRefreshedEvent")]),n._v(" "),s("td",[n._v("当容器被实例化或refreshed时发布.如调用refresh()方法, 此处的实例化是指所有的bean都已被加载,后置处理器都被激活,所有单例bean都已被实例化, 所有的容器对象都已准备好可使用. 如果容器支持热重载,则refresh可以被触发多次(XmlWebApplicatonContext支持热刷新,而GenericApplicationContext则不支持)")])]),n._v(" "),s("tr",[s("td",[n._v("ContextStartedEvent")]),n._v(" "),s("td",[n._v("当容器启动时发布,即调用start()方法, 已启用意味着所有的Lifecycle bean都已显式接收到了start信号")])]),n._v(" "),s("tr",[s("td",[n._v("ContextStoppedEvent")]),n._v(" "),s("td",[n._v("当容器停止时发布,即调用stop()方法, 即所有的Lifecycle bean都已显式接收到了stop信号 , 关闭的容器可以通过start()方法重启")])]),n._v(" "),s("tr",[s("td",[n._v("ContextClosedEvent")]),n._v(" "),s("td",[n._v("当容器关闭时发布,即调用close方法, 关闭意味着所有的单例bean都已被销毁.关闭的容器不能被重启或refresh")])]),n._v(" "),s("tr",[s("td",[n._v("RequestHandledEvent")]),n._v(" "),s("td",[n._v("这只在使用spring的DispatcherServlet时有效,当一个请求被处理完成时发布")])])])]),n._v(" "),s("p",[s("strong",[n._v("自定义事件")])]),n._v(" "),s("p",[n._v("事件类需要继承ApplicationEvent，代码如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/***\n * @Author 徐庶   QQ:1092002729\n * @Slogan 致敬大师，致敬未来的你\n * 事件\n */\npublic class BigEvent  extends ApplicationEvent {\n\n    private String name;\n\n    public BigEvent(Object source, String name) {\n        super(source);\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("这里为了简单测试，所以写的很简单。")]),n._v(" "),s("p",[n._v("事件类是一种很简单的pojo，除了需要继承ApplicationEvent也没什么了，这个类有一个构造方法需要super。")]),n._v(" "),s("p",[s("strong",[n._v("事件监听器")])]),n._v(" "),s("p",[s("strong",[n._v("事件监听器-基于接口")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Component\npublic class HelloEventListener implements ApplicationListener<OrderEvent> {\n  \n    @Override\n    public void onApplicationEvent(OrderEvent event) {\n        if(event.getName().equals("减库存")){\n            System.out.println("减库存.......");\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("事件监听器需要实现ApplicationListener接口，这是个泛型接口，泛型类类型就是事件类型，其次需要是spring容器托管的bean，所以这里加了@component，只有一个方法，就是onApplicationEvent。")]),n._v(" "),s("p",[s("strong",[n._v("事件监听器-基于注解")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Component\npublic class OrderEventListener {\n    @EventListener(OrderEvent.class)\n    public void onApplicationEvent(OrderEvent event) {\n        if(event.getName().equals("减库存")){\n            System.out.println("减库存.......");\n        }\n    }\n\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[s("strong",[n._v("事件发布操作")])]),n._v(" "),s("p",[n._v("事件发布方式很简单")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('applicationContext.publishEvent(new HelloEvent(this,"lgb"));    \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("然后调用方法就能看到")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("2020-9-22 19:08:00.052 INFO 284928 --- [nio-5577-exec-3] l.b.e.c.s.event.HelloEventListener    : receive lgb say hello!　　     \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7108.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("疑问")])]),n._v(" "),s("ol",[s("li",[n._v("同样的事件能有多个监听器 -- 可以的")]),n._v(" "),s("li",[n._v("事件监听器一定要写一个类去实现吗 -- 其实是可以不需要的，spring有个注解@EventListener，修饰在方法上，稍后给出使用方法")]),n._v(" "),s("li",[n._v("事件监听操作和发布事件的操作是同步的吗？ -- 是的，所以如果有事务，监听操作也在事务内")]),n._v(" "),s("li",[n._v("可以作为异步处理吗？  --可以  看源码有解释。：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Bean(name = "applicationEventMulticaster")\npublic ApplicationEventMulticaster simpleApplicationEventMulticaster() {\n    SimpleApplicationEventMulticaster eventMulticaster\n            = new SimpleApplicationEventMulticaster();\n\n    eventMulticaster.setTaskExecutor(new SimpleAsyncTaskExecutor());\n    return eventMulticaster;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7106.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("2. Spring事件原理")])]),n._v(" "),s("p",[n._v("原理：观察者模式")]),n._v(" "),s("p",[n._v("spring的事件监听有三个部分组成：")]),n._v(" "),s("ul",[s("li",[s("ul",[s("li",[s("strong",[n._v("事件")]),n._v("（ApplicationEvent)  负责对应相应监听器 事件源发生某事件是特定事件监听器被触发的原因。")]),n._v(" "),s("li",[s("strong",[n._v("监听器("),s("strong",[n._v("ApplicationListener) 对应于观察者模式中的")]),n._v("观察者")]),n._v("。监听器监听特定事件,并在内部定义了事件发生后的响应逻辑。")]),n._v(" "),s("li",[s("strong",[n._v("事件发布器")]),n._v("（ApplicationEventMulticaster ）对应于观察者模式中的"),s("strong",[n._v("被观察者/主题，  负责通知观察者")]),n._v(" 对外提供发布事件和增删事件监听器的接口,维护事件和事件监听器之间的映射关系,并在事件发生时负责通知相关监听器。")])])])]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7150.png",alt:"0"}})]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/5843.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("Spring事件机制是观察者模式的一种实现，但是除了发布者和监听者者两个角色之外，还有一个EventMultiCaster的角色负责把事件转发给监听者，工作流程如下：")])]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/5791.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("Spring事件机制")])]),n._v(" "),s("p",[s("strong",[n._v("也就是说上面代码中发布者调用")]),n._v("applicationEventPublisher.publishEvent(msg); "),s("strong",[n._v("是会将事件发送给了EventMultiCaster， 而后由EventMultiCaster注册着所有的Listener，然后根据事件类型决定转发给那个Listener。")])]),n._v(" "),s("p",[s("strong",[n._v("源码流程：")])]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7154.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("Spring在ApplicationContext接口的抽象实现类AbstractApplicationContext中完成了事件体系的搭建。")])]),n._v(" "),s("p",[n._v("AbstractApplicationContext拥有一个applicationEventMulticaster成员变量，applicationEventMulticaster提供了容器监听器的注册表。")]),n._v(" "),s("p",[n._v("AbstractApplicationContext在refresh()这个容器启动方法中搭建了事件的基础设施,其中AbstractApplicationContext的refresh方法实现如下:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Override\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        // Prepare this context for refreshing.\n        prepareRefresh();\n\n        // Tell the subclass to refresh the internal bean factory.\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n        // Prepare the bean factory for use in this context.\n        prepareBeanFactory(beanFactory);\n\n        try {\n            // Allows post-processing of the bean factory in context subclasses.\n            postProcessBeanFactory(beanFactory);\n\n            // Invoke factory processors registered as beans in the context.\n            invokeBeanFactoryPostProcessors(beanFactory);\n\n            // Register bean processors that intercept bean creation.\n            registerBeanPostProcessors(beanFactory);\n\n            // Initialize message source for this context.\n            initMessageSource();\n\n            // Initialize event multicaster for this context.\n            initApplicationEventMulticaster();\n\n            // Initialize other special beans in specific context subclasses.\n            onRefresh();\n\n            // Check for listener beans and register them.\n            registerListeners();\n\n            // Instantiate all remaining (non-lazy-init) singletons.\n            finishBeanFactoryInitialization(beanFactory);\n\n            // Last step: publish corresponding event.\n            finishRefresh();\n        }\n\n        catch (BeansException ex) {\n            if (logger.isWarnEnabled()) {\n                logger.warn("Exception encountered during context initialization - " +\n                        "cancelling refresh attempt: " + ex);\n            }\n\n            // Destroy already created singletons to avoid dangling resources.\n            destroyBeans();\n\n            // Reset \'active\' flag.\n            cancelRefresh(ex);\n\n            // Propagate exception to caller.\n            throw ex;\n        }\n\n        finally {\n            // Reset common introspection caches in Spring\'s core, since we\n            // might not ever need metadata for singleton beans anymore...\n            resetCommonCaches();\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br")])]),s("p",[s("strong",[n._v("1 事件广播器的初始化")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * Initialize the ApplicationEventMulticaster.\n * Uses SimpleApplicationEventMulticaster if none defined in the context.\n * @see org.springframework.context.event.SimpleApplicationEventMulticaster\n */\nprotected void initApplicationEventMulticaster() {\n    ConfigurableListableBeanFactory beanFactory = getBeanFactory();\n    if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) {\n        this.applicationEventMulticaster =\n                beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);\n        if (logger.isDebugEnabled()) {\n            logger.debug("Using ApplicationEventMulticaster [" + this.applicationEventMulticaster + "]");\n        }\n    }\n    else {\n        this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);\n        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);\n        if (logger.isDebugEnabled()) {\n            logger.debug("Unable to locate ApplicationEventMulticaster with name \'" +\n                    APPLICATION_EVENT_MULTICASTER_BEAN_NAME +\n                    "\': using default [" + this.applicationEventMulticaster + "]");\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("p",[n._v("用户可以在配置文件中为容器定义一个自定义的事件广播器，只要实现ApplicationEventMulticaster就可以了，Spring会通过 反射的机制将其注册成容器的事件广播器，如果没有找到配置的外部事件广播器，Spring自动使用 SimpleApplicationEventMulticaster作为事件广播器。")]),n._v(" "),s("p",[s("strong",[n._v("2 注册事件监听器")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Add beans that implement ApplicationListener as listeners.\n * Doesn't affect other listeners, which can be added without being beans.\n */\nprotected void registerListeners() {\n    // Register statically specified listeners first.\n    for (ApplicationListener<?> listener : getApplicationListeners()) {\n        getApplicationEventMulticaster().addApplicationListener(listener);\n    }\n\n    // Do not initialize FactoryBeans here: We need to leave all regular beans\n    // uninitialized to let post-processors apply to them!\n    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);\n    for (String listenerBeanName : listenerBeanNames) {\n        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);\n    }\n\n    // Publish early application events now that we finally have a multicaster...\n    Set<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;\n    this.earlyApplicationEvents = null;\n    if (earlyEventsToProcess != null) {\n        for (ApplicationEvent earlyEvent : earlyEventsToProcess) {\n            getApplicationEventMulticaster().multicastEvent(earlyEvent);\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("p",[n._v("Spring根据反射机制，使用ListableBeanFactory的getBeansOfType方法，从BeanDefinitionRegistry中找出所有实现 org.springframework.context.ApplicationListener的Bean，将它们注册为容器的事件监听器，实际的操作就是将其添加到事件广播器所提供的监听器注册表中。")]),n._v(" "),s("p",[s("strong",[n._v("3 发布事件")])]),n._v(" "),s("p",[n._v("跟着 finishRefresh();方法进入publishEvent(new ContextRefreshedEvent(this));方法如下:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * Publish the given event to all listeners.\n * @param event the event to publish (may be an {@link ApplicationEvent}\n * or a payload object to be turned into a {@link PayloadApplicationEvent})\n * @param eventType the resolved event type, if known\n * @since 4.2\n */\nprotected void publishEvent(Object event, ResolvableType eventType) {\n    Assert.notNull(event, "Event must not be null");\n    if (logger.isTraceEnabled()) {\n        logger.trace("Publishing event in " + getDisplayName() + ": " + event);\n    }\n\n    // Decorate event as an ApplicationEvent if necessary\n    ApplicationEvent applicationEvent;\n    if (event instanceof ApplicationEvent) {\n        applicationEvent = (ApplicationEvent) event;\n    }\n    else {\n        applicationEvent = new PayloadApplicationEvent<Object>(this, event);\n        if (eventType == null) {\n            eventType = ((PayloadApplicationEvent)applicationEvent).getResolvableType();\n        }\n    }\n\n    // Multicast right now if possible - or lazily once the multicaster is initialized\n    if (this.earlyApplicationEvents != null) {\n        this.earlyApplicationEvents.add(applicationEvent);\n    }\n    else {\n        getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);\n    }\n\n    // Publish event via parent context as well...\n    if (this.parent != null) {\n        if (this.parent instanceof AbstractApplicationContext) {\n            ((AbstractApplicationContext) this.parent).publishEvent(event, eventType);\n        }\n        else {\n            this.parent.publishEvent(event);\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br")])]),s("p",[n._v("在AbstractApplicationContext的publishEvent方法中， Spring委托ApplicationEventMulticaster将事件通知给所有的事件监听器.")]),n._v(" "),s("p",[s("strong",[n._v("4 Spring默认的事件广播器SimpleApplicationEventMulticaster")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Override\npublic void multicastEvent(final ApplicationEvent event, ResolvableType eventType) {\n    ResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event));\n    for (final ApplicationListener<?> listener : getApplicationListeners(event, type)) {\n        Executor executor = getTaskExecutor();\n        if (executor != null) {\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    invokeListener(listener, event);\n                }\n            });\n        }\n        else {\n            invokeListener(listener, event);\n        }\n    }\n}\n\n/**\n * Invoke the given listener with the given event.\n * @param listener the ApplicationListener to invoke\n * @param event the current event to propagate\n * @since 4.1\n */\n@SuppressWarnings({"unchecked", "rawtypes"})\nprotected void invokeListener(ApplicationListener listener, ApplicationEvent event) {\n    ErrorHandler errorHandler = getErrorHandler();\n    if (errorHandler != null) {\n        try {\n            listener.onApplicationEvent(event);\n        }\n        catch (Throwable err) {\n            errorHandler.handleError(err);\n        }\n    }\n    else {\n        try {\n            listener.onApplicationEvent(event);\n        }\n        catch (ClassCastException ex) {\n            // Possibly a lambda-defined listener which we could not resolve the generic event type for\n            LogFactory.getLog(getClass()).debug("Non-matching event type for listener: " + listener, ex);\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("遍历注册的每个监听器，并启动来调用每个监听器的onApplicationEvent方法。由于SimpleApplicationEventMulticaster的taskExecutor的实现类是SyncTaskExecutor，因此，事件监听器对事件的处理，是同步进行的。")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("从代码可以看出，applicationContext.publishEvent()方法，需要同步等待各个监听器处理完之后，才返回。")]),n._v(" "),s("p",[n._v("也就是说，Spring提供的事件机制，默认是同步的。如果想用异步的，可以自己实现ApplicationEventMulticaster接口，并在Spring容器中注册id为applicationEventMulticaster的Bean。例如下面所示:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class AsyncApplicationEventMulticaster extends AbstractApplicationEventMulticaster {  \n    private TaskExecutor taskExecutor = new SimpleAsyncTaskExecutor();  \n\n    public void setTaskExecutor(TaskExecutor taskExecutor) {  \n        this.taskExecutor = (taskExecutor != null ? taskExecutor : new SimpleAsyncTaskExecutor());  \n    }  \n\n    protected TaskExecutor getTaskExecutor() {  \n        return this.taskExecutor;  \n    }  \n\n    @SuppressWarnings("unchecked")  \n    public void multicastEvent(final ApplicationEvent event) {  \n        for (Iterator<ApplicationListener> it = getApplicationListeners().iterator(); it.hasNext();) {  \n            final ApplicationListener listener =  it.next();  \n            getTaskExecutor().execute(new Runnable() {  \n                public void run() {  \n                    listener.onApplicationEvent(event);  \n                }  \n            });  \n        }  \n    }  \n}  \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("spring配置：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Bean(name = "applicationEventMulticaster")\npublic ApplicationEventMulticaster simpleApplicationEventMulticaster() {\n    SimpleApplicationEventMulticaster eventMulticaster\n            = new SimpleApplicationEventMulticaster();\n\n    //ThreadPoolTaskExecutor\n    eventMulticaster.setTaskExecutor(new SimpleAsyncTaskExecutor());\n    return eventMulticaster;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("Spring发布事件之后，所有注册的事件监听器，都会收到该事件，因此，事件监听器在处理事件时，需要先判断该事件是否是自己关心的。")]),n._v(" "),s("p",[n._v("Sping事件体系所使用的设计模式是：观察者模式。ApplicationListener是观察者接口，接口中定义了onApplicationEvent方法，该方法的作用是对ApplicationEvent事件进行处理。")])])}),[],!1,null,null,null);s.default=a.exports}}]);