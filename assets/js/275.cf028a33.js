(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{619:function(t,s,e){"use strict";e.r(s);var a=e(1),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("U2FsdGVkX18egn54oN2tkHMX656Up5ajsdt0gmhZmKVYM/DlQTqurJ/JT5Dg1qqN\nZtcfx7eZiqWFQeH/9j2B/7f16ozNR/tuvIK2mZTO1cwMd4QGNjV5ru2g9HiDE2tO\n8A==\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("配置Jmeter压测计划")])]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("将Jmeter压测数据在grafana里展示")])]),t._v(" "),s("p",[s("strong",[t._v("1、Docker 安装 InfluxDB")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("docker pull influxdb:1.8.6    # 拉取influxdb镜像\ndocker run -d -p 8086:8086 --name=jmeterdb influxdb:1.8.6    # 启动influxdb，并命名为jmeterdb\ndocker exec -it jmeterdb bash    # 进入容器\ninflux   # 进入influxdb数据库\ncreate database jmeter;   # 创建jmeter库\nshow databases;    # 显示所有数据库，显示jmeter库就创建成功\nuse jmeter;   # 进入jmeter库\nselect * from jmeter;    # 查询库里面的数据，这时数据是空的正常\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[s("strong",[t._v("2、JMeter 配置 InfluxDB")])]),t._v(" "),s("p",[t._v("在jmeter线程组下添加后端监听器")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("线程组 > 监听器 > 后端监听器\nThread Group > Listener > Backend Listener\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("配置参数")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Backend Listener implementation:org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient\ninfluxdbUrl:http://192.168.65.160:8086/write?db=jmeter\t# 这里的IP输自己主机的\napplication:tuling-mall\t# 这里的名字自己随意定义即可\nmeasurement:jmeter\t# 数据库的名字，jmeter为上面在influxdb中创建的jmeter库\ntestTitle:Jmeter\t# 这个名字也自己随意定义即可\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154438641.png",alt:"image-20220624154438641"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("配置完之后执行一次压测脚本，看influxdb中jmeter库里面有没有数据，有数据就配置成功了。")]),t._v(" "),s("p",[s("strong",[t._v("3、在Grafana中配置influxdb数据源")])]),t._v(" "),s("p",[t._v("配置数据源")]),t._v(" "),s("p",[t._v("访问http://192.168.65.160:3000/，进入登录页，输入账号密码：admin/password")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154454548.png",alt:"image-20220624154454548"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("在grafana添加influxdb数据源，点击按钮Add data source")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154508905.png",alt:"image-20220624154508905"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("找到 influxdb，单击选择该db，配置influxdb数据源：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154519907.png",alt:"image-20220624154519907"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("拉到页面最下面点击 Save&Test 按钮。")]),t._v(" "),s("p",[t._v("点击左侧加号，选择Import")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154534543.png",alt:"image-20220624154534543"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154546847.png",alt:"image-20220624154546847"}})]),t._v(" "),s("p",[t._v("将json文本复制/粘贴到paste JSON 文本框中，单机Load按钮导入（json文件下载地址：https://grafana.com/api/dashboards/5496/revisions/1/download）")]),t._v(" "),s("p",[t._v("在DB name 中选择我们上面创建的数据源tuling-mall，单机 Import 按钮完成 Dashboard 导入")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154559248.png",alt:"image-20220624154559248"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("自动跳转至监控页面")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154606965.png",alt:"image-20220624154606965"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("JMeter脚本跑起来看下grafana数据！")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154615752.png",alt:"image-20220624154615752"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("这样我们在用jmeter压测时就能通过grafana来看实时的压测数据了！")]),t._v(" "),s("p",[s("strong",[t._v("配置电商项目Jmeter压测计划(详细请参考视频)")])]),t._v(" "),s("p",[t._v("1、创建压测请求")]),t._v(" "),s("p",[t._v("在上面新建的线程组下面新增Simple Controller，把我们要压测的接口全部放这下面")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154623983.png",alt:"image-20220624154623983"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("在Simple Controller下面添加我们要压测的接口(添加购物车接口，查询购物车接口，创建订单接口)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154633686.png",alt:"image-20220624154633686"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("添加购物车接口配置如下图所示，${productId}这是压测接口参数，会从csv数据文件里取，后面会详细说：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154642500.png",alt:"image-20220624154642500"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("查询购物车接口配置如下图所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154717194.png",alt:"image-20220624154717194"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("创建订单接口配置如下图所示，${itemIds}这是压测接口参数，后面会详细说如何取值：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154726397.png",alt:"image-20220624154726397"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("配置所有接口的请求header，添加http header manager，${loginToken}会从csv数据文件里取，后面会详细说：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154737005.png",alt:"image-20220624154737005"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154743984.png",alt:"image-20220624154743984"}})]),t._v(" "),s("p",[t._v("我们来准备下压测数据${productId}和${loginToken}：")]),t._v(" "),s("p",[t._v("我们在D盘根目录创建一个txt的记事本文件，在里面放入1000个不同的商品id")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154759530.png",alt:"image-20220624154759530"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("然后写一个简单的test程序用1000个不同的用户登录生成1000个登录成功的token，并且放入D盘根目录的loginTokens.txt的记事本文件里")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('package com.tuling.tulingmall;\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.io.BufferedWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class GenLoginTokensTest {\n\n    @Test\n    public void testGenLoginTokens() throws IOException, JSONException {\n        for (int i = 10; i <= 1000; i++) {\n            login(i);\n        }\n    }\n\n    private void login(int userId) throws IOException, JSONException {\n        List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n        formparams.add(new BasicNameValuePair("username", "zhuge" + userId));\n        formparams.add(new BasicNameValuePair("password", "123456"));\n        HttpEntity reqEntity = new UrlEncodedFormEntity(formparams, "utf-8");\n\n        HttpClient client = new DefaultHttpClient();\n        HttpPost post = new HttpPost("http://gateway.tuling.com/sso/login");\n        post.setEntity(reqEntity);\n        HttpResponse response = client.execute(post);\n\n        if (response.getStatusLine().getStatusCode() == 200) {\n            HttpEntity resEntity = response.getEntity();\n            String message = EntityUtils.toString(resEntity, "utf-8");\n            JSONObject jsonObj = new JSONObject(message);\n            String data = jsonObj.get("data").toString();\n            JSONObject jsonObj2 = new JSONObject(data);\n            //System.out.println(jsonObj2.get("token"));\n            writeFile("d:/loginTokens.txt", "bearer " + jsonObj2.get("token").toString());\n        } else {\n            System.out.println("请求失败");\n        }\n    }\n\n    public static synchronized void writeFile(String file, String conent) throws IOException {\n        BufferedWriter out = null;\n        try {\n            out = new BufferedWriter(new OutputStreamWriter(\n                    new FileOutputStream(file, true)));\n            out.write(conent + "\\r\\n");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            out.close();\n        }\n    }\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br"),s("span",{staticClass:"line-number"},[t._v("63")]),s("br"),s("span",{staticClass:"line-number"},[t._v("64")]),s("br"),s("span",{staticClass:"line-number"},[t._v("65")]),s("br"),s("span",{staticClass:"line-number"},[t._v("66")]),s("br"),s("span",{staticClass:"line-number"},[t._v("67")]),s("br"),s("span",{staticClass:"line-number"},[t._v("68")]),s("br"),s("span",{staticClass:"line-number"},[t._v("69")]),s("br"),s("span",{staticClass:"line-number"},[t._v("70")]),s("br"),s("span",{staticClass:"line-number"},[t._v("71")]),s("br"),s("span",{staticClass:"line-number"},[t._v("72")]),s("br"),s("span",{staticClass:"line-number"},[t._v("73")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154808468.png",alt:"image-20220624154808468"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("在jmeter里添加csv data数据供接口参数使用")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154816312.png",alt:"image-20220624154816312"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154824798.png",alt:"image-20220624154824798"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154838519.png",alt:"image-20220624154838519"}})]),t._v(" "),s("p",[t._v("这样配置完成后，这几个接口每次用一次线程压测时就会从loginTokens.txt和product.txt文件里分别那一条数据放入上面的几个接口参数里")]),t._v(" "),s("p",[t._v("因为创建订单接口依赖到查询购物车接口，需要从查询购物车接口的结果里拿出购物车明细id，所以我们先在jmeter里创建一个JSON Extractor来解析查询购物车接口的结果，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154848967.png",alt:"image-20220624154848967"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("这个JSON Extractor需要放在查询购物车接口的下面，下面的配置意思就是从查询购物车接口结果里解析出购物车明细的id，并且赋值给变脸cartId")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154859275.png",alt:"image-20220624154859275"}})]),t._v(" "),s("p",[t._v("然后在创建订单接口的下面添加一个BeanShell PreProcessor，这个处理器会在创建订单接口调用之前执行，我们需要在这个处理器内部写一点解析参数的代码，对之前的cartId变量做处理，最终传入创建订单接口的itemIds参数里去，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154909568.png",alt:"image-20220624154909568"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154919062.png",alt:"image-20220624154919062"}})]),t._v(" "),s("p",[t._v("上图详细代码如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('log.info("调试是否获取长度id:"+vars.get("cartId_matchNr"));\n\nint num=Integer.valueOf("${cartId_matchNr}");\nlog.info("数据为:"+num);\n\nStringBuilder stringBuilder = new StringBuilder();\nfor(i = 1;i<=num;i++){\n  stringBuilder.append(vars.get("cartId_"+i)+",");\n}\nString itemIds =  stringBuilder.substring(0, stringBuilder.length() - 1);\n\nlog.info("结果："+itemIds);\nvars.put("itemIds",itemIds);\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("上面这些配置做完就可以开始压测了，只需在线程组上配置你自己想压测的线程数就可以了，如果想看压测结果可以打开压测结果报告Aggregate Report和View Results Tree查看压测结果情况")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154933313.png",alt:"image-20220624154933313"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624154956730.png",alt:"image-20220624154956730"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[s("strong",[t._v("压测环境说明")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("总共4台高配服务器，配置见下图，云盘容量显示不准确，实际每台机器都是100G以上:")]),t._v(" "),s("p",[t._v("192.168.65.160：部署了K8S的master节点")]),t._v(" "),s("p",[t._v("192.168.65.203：部署了K8S的node1节点，里面部署了order和product服务")]),t._v(" "),s("p",[t._v("192.168.65.210：部署了K8S的node2节点，里面部署了authcenter、gateway和member服务")]),t._v(" "),s("p",[t._v("192.168.65.42：用docker部署了电商项目所有依赖的中间件和数据库")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155011754.png",alt:"image-20220624155011754"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155018827.png",alt:"image-20220624155018827"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[s("strong",[t._v("用Jmeter开始压测")])]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("压测添加购物车接口")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155030509.png",alt:"image-20220624155030509"}})]),t._v(" "),s("p",[t._v("看下grafana的jmeter压测数据：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155040749.png",alt:"image-20220624155040749"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("qps只有13，这个肯定是太低了，我们需要定位原因，我们打开mysql的grafana监控图，发现有不少慢查询")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155048577.png",alt:"image-20220624155048577"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("我们再看下skywalking观察下整个调用链路是慢在哪一步，可以看到加购车的调用链路如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155056530.png",alt:"image-20220624155056530"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("再看下skywalking的加购物车接口的调用整个链路时长：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155103877.png",alt:"image-20220624155103877"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("我们发现有一个post请求竟然执行30多秒，还有一个mysql操作也执行了近2秒，我们现在看下这个mysql查询是什么")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155111547.png",alt:"image-20220624155111547"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("拉出sql看下执行计划是否合理的走了索引")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155126392.png",alt:"image-20220624155126392"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("我们发现有两个查询没走索引，pa表因为是商品属性表，本身数据量很少，关系不大，但是ps表因为是商品库存表，数据量较大，我们看到扫描了近百万行数据，这必须得加索引优化了，通过sql分析，我们决定给 pms_sku_stock 表的 product_id 字段加上索引，加完索引我们再看下查询计划")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155146670.png",alt:"image-20220624155146670"}})]),t._v(" "),s("p",[t._v("优化效果很明显。")]),t._v(" "),s("p",[t._v("我们重新再压测一次看下效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155200178.png",alt:"image-20220624155200178"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("qps超过了两百多，最高的时候有四五百多，好像优化有效果，继续一直压测下去，会发现qps一直在慢慢往下掉，这是为什么了？")]),t._v(" "),s("p",[t._v("我们看了下mysql机器的cpu，发现已经严重超载了，肯定是有sql执行比较慢了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155208214.png",alt:"image-20220624155208214"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("再看下skywalking，之前那条sql的执行时间已经到了几毫秒了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155218612.png",alt:"image-20220624155218612"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("不过好像又多了一条mysql操作有一百多毫秒，我们拉出sql看下查询计划")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155226918.png",alt:"image-20220624155226918"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155234765.png",alt:"image-20220624155234765"}})]),t._v(" "),s("p",[t._v("这是一条查询购物车的sql，也没有走索引，之前这条sql执行较快可能是因为数据量不大，随着我们压测的进行，数据量越来越大，这条有问题的sql就暴露出来了，这会不会是上面那个qps下降的原因了？")]),t._v(" "),s("p",[t._v("我们试着优化下这条sql，优化完再重新压测下，我们给oms_cart_item表加上联合索引(product_id,member_id)，再看下查询计划")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155244354.png",alt:"image-20220624155244354"}})]),t._v(" "),s("p",[t._v("优化效果很明显，我们再压测一次看下效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155254181.png",alt:"image-20220624155254181"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155304390.png",alt:"image-20220624155304390"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("qps稳定在两千多，mysql的cpu占用也下降了很多，优化效果相当明显，提升了一个数量级，可见平时工作中对数据库的sql优化是非常重要的，一条慢sql在高并发场景下甚至可以拖垮整个数据库")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155313469.png",alt:"image-20220624155313469"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("再看下skywalking这条sql的执行时间也到了几毫秒了，对应的post请求的总执行时间也下降了很多，当然还有100多毫秒，这个应该算正常，在高并发情况下，请求之间争用系统资源会有等待，导致链路调用过程中会有损耗")]),t._v(" "),s("p",[s("strong",[t._v("压测查询购物车接口")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155322818.png",alt:"image-20220624155322818"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155331645.png",alt:"image-20220624155331645"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("qps只有40左右，就一个查询操作，这个qps还是有点低的，需要优化了")]),t._v(" "),s("p",[t._v("我们看下skywalking这个接口的执行链路跟踪")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155340883.png",alt:"image-20220624155340883"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("这里有一个mysql操作耗时较多")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155351159.png",alt:"image-20220624155351159"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("拉出sql看下执行计划，发现又是一个全表扫描")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155420512.png",alt:"image-20220624155420512"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("我们来对这条sql做下索引优化，我们上面对oms_cart_item表加过一个联合索引(product_id,member_id)，这条sql语句没有用上，因为不满足左前缀原则，我们把索引联合索引字段排序改成(member_id，product_id)，再看下执行计划")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155429895.png",alt:"image-20220624155429895"}})]),t._v(" "),s("p",[t._v("已经走了索引，不过这里一个用户的购物车记录有两百多条，这个是因为我们反复压测加购物车接口，但是总共就1000个用户，所以一个用户购物车里有很多商品，这里其实还要注意，这条sql最好要做下分页，我们再重新压测看下效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155451127.png",alt:"image-20220624155451127"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("qps能接近400了，我们再看下skywalking链路追踪，之前那条sql执行已经下降到十几毫秒了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155500195.png",alt:"image-20220624155500195"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("不过我们从上图发现gateway网关的请求时间依然很长，我们试着优化下，我们尝试着跳过网关直接压下查询购物车接口看下qps是否有提升")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155511222.png",alt:"image-20220624155511222"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155519329.png",alt:"image-20220624155519329"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("我们看到qps接近翻倍了，看来网关gateway应用应该要查下是否有优化的地方了")]),t._v(" "),s("p",[s("strong",[t._v("优化网关gateway应用")])]),t._v(" "),s("p",[t._v("因为gateway是java应用，我们可以进入容器用arthas和jdk自带的一些命令分析下jvm情况")]),t._v(" "),s("p",[t._v("在压测的时候进入gateway容器")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("kubectl exec -it tulingmall-gateway-deployment-ddc85c775-gkn2s -- sh\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在容器里下载arthas")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("wget https://arthas.gitee.io/arthas-boot.jar\njava -jar arthas-boot.jar\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("通过arthas的一些常用命令来分析下jvm情况")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dashboard\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624155529186.png",alt:"image-20220624155529186"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("dashboard还算正常，线程和堆占用的资源没有特别的异常情况，我们再执行下thread命令查看下更多的线程执行情况")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("thread\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164757242.png",alt:"image-20220624164757242"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("没有被阻塞的线程，还算正常，不过我们看到gateway内部的线程池很繁忙，占用cpu很高")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("thread -n 3  #最繁忙的3个线程（占用cpu最多的前3个），输出栈信息\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164810128.png",alt:"image-20220624164810128"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("都是gateway的netty线程，也没有太多问题")]),t._v(" "),s("p",[t._v("gateway可以调节netty线程池的大小，有一个参数叫 reactor.netty.ioWorkerCount，但是一般不建议调整，因为这个线程池的内部就是按照cpu核数(我这个gateway部署的机器是8核的)来确定的，调大意义也不是很大，当然我们可以试着来调试下，在gateway的deployment文件里加上这个 -Dreactor.netty.ioWorkerCount=16 JVM参数即可，我们重启再来看下gateway服务内部的线程执行情况")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164818240.png",alt:"image-20220624164818240"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("虽然线程数增加了，但是压测结果并没有显著增加，因为cpu核数只有8个，所以对于gateway这种应用我们机器要尽量把cpu的配置加大一点，它对cpu的消耗很大，继续查下其它原因")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("thread -b  #输出阻塞的线程栈信息，如果响应慢，阻塞状态的线程比较多，我们需要重点关注\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624170236659.png",alt:"image-20220624170236659"}})]),t._v(" "),s("p",[t._v("我们再用jvm命令看下有没有死锁")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" jvm        \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164827508.png",alt:"image-20220624164827508"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("如果有死锁，可以通过thread -b命令找出死锁线程堆栈，类似下图")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164834402.png",alt:"image-20220624164834402"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("总体看下来没有太大问题，我们再用jstat看下gc情况")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("jstat -gcutil 1 1000 1000\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("​")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164841878.png",alt:"image-20220624164841878"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("我们观察一段时间发现，FGC还算正常，但是YGC几乎每秒1次，感觉有点频繁，可能是年轻代太小了，我们看下堆内存情况，当然如果FGC比较频繁我们可以通过jmap查看下对象占用内存的情况")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("jmap -histo 1 | head -20\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164849669.png",alt:"image-20220624164849669"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("结果是比较正常的，skywalking的对象多也是正常的，因为每条请求都生成skywalking相关对象")]),t._v(" "),s("p",[t._v("我们看下当前堆内存情况")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("jinfo -flags 1\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164918491.png",alt:"image-20220624164918491"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("因为我们没有设置JVM参数，所以默认初始内存是比较小的，而且默认的jvm堆设置会导致程序运行的过程中JVM堆的经常性扩容，也会影响程序性能，我们尝试着设置下把堆内存设置到1G看下效果，我们给gateway应用的JVM启动参数增加了如下参数")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-Xms1G -Xmx1G -Xmn512M -Xss512K -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("重新测下不走网关的查询购物车接口和走网关的查询购物车接口的对比情况，看下调整了gateway的JVM参数后的走网关接口的qps是否还会降低一半")]),t._v(" "),s("p",[t._v("我们先压测下不走网关的查询购物车接口：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164925726.png",alt:"image-20220624164925726"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164933227.png",alt:"image-20220624164933227"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("qps在620左右，我们再压测下走网关的查询购物车接口：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164940482.png",alt:"image-20220624164940482"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("这时走网关的查询购物车接口qps也接近了500左右，有一点提升，从经验上来看微服务架构里加了网关这个服务性能会有一定的损耗，但是这个损耗依然有点大，优化效果不是很明显。")]),t._v(" "),s("p",[t._v("因为网关gateway对cpu性能要求较高，我怀疑是不是这两台机器的性能有些区别，我把两台node1和node2上部署的服务对调了后再压测发现经过网关和不经过的差别已经不是很大了。有的时候压测结果跟机器性能会有较大关系。")]),t._v(" "),s("p",[s("strong",[t._v("压测创建订单接口")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164948946.png",alt:"image-20220624164948946"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624164955765.png",alt:"image-20220624164955765"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165004258.png",alt:"image-20220624165004258"}})]),t._v(" "),s("p",[t._v("我们发现创建订单接口的qps不到100，凭经验来说应该是有优化余地的，注意这里grafana里展示的是3个接口的总qps")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165012991.png",alt:"image-20220624165012991"}})]),t._v(" "),s("p",[t._v("我们查看了下skywalking的创建订单接口的链路，发现有一部分请求链路非常长，里面包含上百条查询商品的执行sql，这条sql本身执行比较快，问题不大，不过为什么一次创建订单会执行上百次的查询商品的sql了，从代码定位问题，发现由于我们之前压测时因为压测用户数据不多，所以一个用户下面加入了上百个商品，下单时会查询购物车里每个商品相关的信息，显然这里是可以优化一下的，查询购物车子项数据我们上面讲过最好做下分页，那么我们就可以针对分页数据用 in 这样的sql批量查询商品信息。")]),t._v(" "),s("p",[t._v("其次我们发现一次创建订单请求时间较长，但是里面每一步的具体操作时间很正常，这可能是由于这些操作有锁等待的情况，我们可以进入order服务后台用arthas来分析下")]),t._v(" "),s("p",[t._v("然后看了下应用和mysql的机器使用率，我们发现order和gateway服务占用cpu较高，因为现在主要就在压测order服务")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165023956.png",alt:"image-20220624165023956"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165030891.png",alt:"image-20220624165030891"}})]),t._v(" "),s("p",[t._v("然后看了下mysql机器192.168.65.42，cpu使用率非常高")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165039154.png",alt:"image-20220624165039154"}})]),t._v(" "),s("p",[t._v("我们再观察下mysql的grafana，发现qps非常高，说明mysql正在大量的执行sql，所以cpu高还算正常")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165047243.png",alt:"image-20220624165047243"}})]),t._v(" "),s("p",[t._v("我们再看下order服务的grafana，发现gc还算比较正常，gc主要也是发生在年轻代")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165125431.png",alt:"image-20220624165125431"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165140143.png",alt:"image-20220624165140143"}})]),t._v(" "),s("p",[t._v("我们再进入下order服务的容器，用artha1s观察下是否有锁等待的情况")]),t._v(" "),s("p",[t._v("我们执行下dashboard命令观察下order服务的整体情况，发现没特别异常的情况")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165153610.png",alt:"image-20220624165153610"}})]),t._v(" "),s("p",[t._v("执行下thread命令看下线程整体情况，我们发现waiting的线程好像有点多，关键占用cpu还比较高，那就肯定有问题了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165215243.png",alt:"image-20220624165215243"}})]),t._v(" "),s("p",[t._v("我们看下这些线程栈都是怎么回事")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("thread -n 6\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("我们发现里面大多数线程都是在等待获取数据库的连接")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165225398.png",alt:"image-20220624165225398"}})]),t._v(" "),s("p",[t._v("再看下mysql当前的连接数才60几个，所以我们需要把order应用里的mysql连接池加大一点")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165238285.png",alt:"image-20220624165238285"}})]),t._v(" "),s("p",[t._v("我们初始连接池的大小如下图")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('spring:\n  datasource:\n    url: jdbc:mysql://192.168.65.42:3306/micromall?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8\n    username: root\n    password: root\n    druid:\n      initial-size: 5 #连接池初始化大小\n      min-idle: 10 #最小空闲连接数\n      max-active: 20 #最大连接数\n      web-stat-filter:\n        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" #不统计这些请求数据\n      stat-view-servlet: #访问监控网页的登录用户名和密码\n        login-username: druid\n        login-password: druid\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("我们调整到如下值")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('spring:\n  datasource:\n    url: jdbc:mysql://192.168.65.42:3306/micromall?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8\n    username: root\n    password: root\n    druid:\n      initial-size: 10 #连接池初始化大小\n      min-idle: 20 #最小空闲连接数\n      max-active: 100 #最大连接数\n      web-stat-filter:\n        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" #不统计这些请求数据\n      stat-view-servlet: #访问监控网页的登录用户名和密码\n        login-username: druid\n        login-password: druid\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("重启下pod服务，再压测试下，重启pod可以用直接删除的方式，k8s会自动再启动一个pod")]),t._v(" "),s("p",[t._v("我们再压测看下情况，遗憾的是qps并没有什么变化")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165327035.png",alt:"image-20220624165327035"}})]),t._v(" "),s("p",[t._v("数据库连接倒是用上来了，不过mysql连接已经用满了，我们需要增大点mysql服务端的总连接数")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set global max_connections=500;  # 这样修改mysql重启后会恢复之前值，要彻底修改需要修改mysql的配置文件并重启\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165355006.png",alt:"image-20220624165355006"}})]),t._v(" "),s("p",[t._v("waiting的线程也减少了很多，等待数据库连接的线程已经几乎没有了，但是整体感觉线程都比较忙")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165421951.png",alt:"image-20220624165421951"}})]),t._v(" "),s("p",[t._v("我们试着调大下tomcat的处理线程数再压测试试下有没有效果")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("server:\n  port: 8844\n  tomcat:    \n    accept-count: 200  # accept队列的长度，当accept队列中连接的个数达到acceptCount时，新进来的请求一律被拒绝。默认值是100  \n    threads:      \n      max: 300   # 线程池中最大活跃线程数，默认值200   \n      min-spare: 20   # 线程池中保持的最小线程数   \n    max-connections: 1000  # Tomcat最多能并发处理的请求（连接）\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("重启order服务后再次压测发现下单qps几乎没什么变化，注意，线程数并不是越大越好的，太大了会导致cpu争用，让线程响应时间变长，所以线程数具体设置多少合适，需要通过压测具体的项目不断调整到较合理的值，比如，如果我们期望系统单台机器下单达到300并发，最大线程数设置为100或300都能达到，那我们就可以设置为100会更合适点。")]),t._v(" "),s("p",[t._v("既然加大tomcat线程数不行，我们再回到skywalking看下下单接口的执行链路")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165440824.png",alt:"image-20220624165440824"}})]),t._v(" "),s("p",[t._v("我们发现下单接口执行已经很快了，不到100ms，而且里面每步操作耗费的时间也很少")]),t._v(" "),s("p",[t._v("再次看下几个服务器的资源使用情况，")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165456678.png",alt:"image-20220624165456678"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165603903.png",alt:"image-20220624165603903"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165618192.png",alt:"image-20220624165618192"}})]),t._v(" "),s("p",[t._v("我们发现在我们调整完各种连接池之后，虽然qps没有增加，但是应用的cpu使用率明显降下来了，之前都是百分之两三百，但是mysql的cpu使用率依然很高，说明，mysql这边压力依然很大，但是创建订单接口链路里的sql执行都挺快，我们来看下mysql的慢查询有没有我们没有注意到的sql，慢查询如何监测可以参考mysql课程，如下是一些关键sql")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-- 慢查询\nshow variables  like '%slow_query_log%';  -- 查看是否开启慢查询\nset global slow_query_log=1;  -- 开启慢查询\n\nshow variables like 'long_query_time%';  -- 查看慢查询阈值\nset global long_query_time=0.1;  -- 设置慢查询阈值(单位s)，设置完需要重新开启session才能查看生效\nshow global variables like 'long_query_time';  -- 查看慢查询阈值\n\nshow variables like '%log_output%';  -- 查看慢查询写入文件还是数据表\nset global log_output='TABLE';  -- 设置慢查询写入数据表，默认是写入文件\n\nselect sleep(1);  -- 执行一条慢查询\n\nselect * from mysql.slow_log; -- 查看慢查询记录表\nTRUNCATE mysql.slow_log;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("通过慢查询我们发现竟然还有不少sql执行时间超过100ms的")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165654578.png",alt:"image-20220624165654578"}})]),t._v(" "),s("p",[t._v("我们看了一些执行时间较长的sql，发现基本都是下面这条sql，那我们就来优化下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165706031.png",alt:"image-20220624165706031"}})]),t._v(" "),s("p",[t._v("我们发现这条sql走了索引，但是扫描数据有一千多条，更奇怪的是当我们执行这条sql的时候发现查询的结果竟然为空。。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165733861.png",alt:"image-20220624165733861"}})]),t._v(" "),s("p",[t._v("而且这样的慢sql还挺多，并且查询结果都是空，那我们就需要结合业务代码分析下这个sql是怎么回事了，原来目前系统里实现的生成订单业务在生成完订单后并没有删除购物车记录，而且修改了记录的删除状态delete_status的值为1，所以这条sql是查询的用户购物车里的还没生成的购物项数据，可能后面要生成订单了，因为一个用户可能买过很多商品，所以这个用户对应的购物项数据表里可能有很多delete_status值为1的数据，虽然上面走了一个索引，但是key_len的值我们可以发现只走了member_id的索引，所以每次会扫描出几千条数据，我们之前在mysql课里讲过对于delete_status的字段，只有两个值，一般没必要建索引，但是这里是可以尝试建下索引的，因为表里的delete_status字段的值大多数都是1，而我们查询的sql更多是用0来过滤的，所以理论上建完索引，会大大减少mysql的查询扫描次数，二话不说，我们在oms_cart_item表里再建一个联合索引(member_id，delete_status)，其实，仔细分析下oms_cart_item表，其实里面的两个联合索引是可以合并成一个的(member_id, delete_status, product_id)，重新再压测看下效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165751059.png",alt:"image-20220624165751059"}})]),t._v(" "),s("p",[t._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165813114.png",alt:"image-20220624165813114"}})]),t._v(" "),s("p",[t._v("​    "),s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165826346.png",alt:"image-20220624165826346"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/springboot/image-20220624165849855.png",alt:"image-20220624165849855"}})]),t._v(" "),s("p",[t._v("我们看到优化效果非常明显，下单接口qps超过了300，mysql的cpu使用率明显降低了很多，并且mysql的qps快上万了，再看下mysql的慢查询日志表里也没有再产生新的慢查询了，目前购物车与订单相关表里的数据都已经过百万了，对于这种复杂的接口在这个数据量级和目前这个配置的机器上差不多也就这个水平了")]),t._v(" "),s("p",[t._v("当然，性能优化是无止尽的，我们要权衡优化的代价和给我们系统性能带来的提升是否相匹配！")]),t._v(" "),s("p",[t._v("对于JVM内部的一些内存问题其实还需要长时间的压测，比如一些内存泄漏之类的问题，一般这种短时间的压测是比较难发现的，这块大家可以在课后试着长时间的压测下，看下系统中是不是有些内存泄漏的问题，结合我们JVM课程里讲的方法去调优下，大家可以参考下面JVM参数配置")]),t._v(" "),s("p",[s("strong",[t._v("JVM配置模板")])]),t._v(" "),s("p",[t._v("如果内存不大，比如4核8G的机器，可以用默认的Parallel垃圾收集器，如果对停顿时间有一定要求，Jdk 1.8版本可以使用ParNew+CMS垃圾收集器组合，比如下面配置(参考JVM调优课程)，如果是大内存的服务，对单机并发要求非常高，那么一般可以用G1垃圾收集器了")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-Xms3072M -Xmx3072M -Xmn1536M -Xss1M  -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M  -XX:SurvivorRatio=6\n-XX:MaxTenuringThreshold=5 -XX:PretenureSizeThreshold=1M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC \n-XX:CMSInitiatingOccupancyFaction=92 -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=0\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("优化结论：")])]),t._v(" "),s("p",[t._v("1、我们发现大多数时候我们系统的瓶颈往往出现在数据库上，所以我们秒杀课里的优化方案是尽可能的让各种操作被缓存以及其它各种中间件拦截，让他们尽量少的到达mysql数据库。")]),t._v(" "),s("p",[t._v("2、我们之前在mysql系列课里讲过的尽量不要搞太多表关联的sql查询，因为不好优化索引，所以我们建议对于一些多表的操作能用java做的可以尽量用java做，哪怕java实现可能费时间更多点，但是java应用扩容是很方便的，数据库扩容是比较麻烦的。")]),t._v(" "),s("p",[t._v("批量删除deployment")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("kubectl get deployment | awk '{print $1}' | xargs kubectl delete deployment \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("批量删除Evicted状态的pod")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("kubectl get pods | grep Evicted | awk '{print $1}' | xargs kubectl delete pod\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);