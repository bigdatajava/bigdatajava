(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{435:function(n,s,e){"use strict";e.r(s);var a=e(1),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"netty核心功能与线程模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netty核心功能与线程模型"}},[n._v("#")]),n._v(" Netty核心功能与线程模型")]),n._v(" "),s("p",[s("strong",[n._v("Netty初探")])]),n._v(" "),s("p",[n._v("NIO 的类库和 API 繁杂， 使用麻烦： 需要熟练掌握Selector、 ServerSocketChannel、 SocketChannel、 ByteBuffer等。")]),n._v(" "),s("p",[n._v("开发工作量和难度都非常大： 例如客户端面临断线重连、 网络闪断、心跳处理、半包读写、 网络拥塞和异常流的处理等等。")]),n._v(" "),s("p",[n._v("Netty 对 JDK 自带的 NIO 的 API 进行了良好的封装，解决了上述问题。且Netty拥有高性能、 吞吐量更高，延迟更低，减少资源消耗，最小化不必要的内存复制等优点。")]),n._v(" "),s("p",[n._v("Netty 现在都在用的是4.x，5.x版本已经废弃，Netty 4.x 需要JDK 6以上版本支持")]),n._v(" "),s("p",[s("strong",[n._v("Netty的使用场景：")])]),n._v(" "),s("p",[n._v("1）互联网行业：在分布式系统中，各个节点之间需要远程服务调用，高性能的 RPC 框架必不可少，Netty 作为异步高性能的通信框架，往往作为基础通信组件被这些 RPC 框架使用。典型的应用有：阿里分布式服务框架 Dubbo 的 RPC 框架使用 Dubbo 协议进行节点间通信，Dubbo 协议默认使用 Netty 作为基础通信组件，用于实现。各进程节点之间的内部通信。Rocketmq底层也是用的Netty作为基础通信组件。")]),n._v(" "),s("p",[n._v("2）游戏行业：无论是手游服务端还是大型的网络游戏，Java 语言得到了越来越广泛的应用。Netty 作为高性能的基础通信组件，它本身提供了 TCP/UDP 和 HTTP 协议栈。")]),n._v(" "),s("p",[n._v("3）大数据领域：经典的 Hadoop 的高性能通信和序列化组件 Avro 的 RPC 框架，默认采用 Netty 进行跨界点通信，它的 Netty Service 基于 Netty 框架二次封装实现。")]),n._v(" "),s("p",[n._v("netty相关开源项目：https://netty.io/wiki/related-projects.html")]),n._v(" "),s("p",[s("strong",[n._v("Netty通讯示例")])]),n._v(" "),s("p",[n._v("Netty的maven依赖：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("<dependency>\n    <groupId>io.netty</groupId>\n    <artifactId>netty-all</artifactId>\n    <version>4.1.35.Final</version>\n</dependency>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("服务端代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class NettyServer {\n\n    public static void main(String[] args) throws Exception {\n\n        //创建两个线程组bossGroup和workerGroup, 含有的子线程NioEventLoop的个数默认为cpu核数的两倍\n        // bossGroup只是处理连接请求 ,真正的和客户端业务处理，会交给workerGroup完成\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            //创建服务器端的启动对象\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            //使用链式编程来配置参数\n            bootstrap.group(bossGroup, workerGroup) //设置两个线程组\n                    .channel(NioServerSocketChannel.class) //使用NioServerSocketChannel作为服务器的通道实现\n                    // 初始化服务器连接队列大小，服务端处理客户端连接请求是顺序处理的,所以同一时间只能处理一个客户端连接。\n                    // 多个客户端同时来的时候,服务端将不能处理的客户端连接请求放在队列中等待处理\n                    .option(ChannelOption.SO_BACKLOG, 1024)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {//创建通道初始化对象，设置初始化参数\n\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            //对workerGroup的SocketChannel设置处理器\n                            ch.pipeline().addLast(new NettyServerHandler());\n                        }\n                    });\n            System.out.println("netty server start。。");\n            //绑定一个端口并且同步, 生成了一个ChannelFuture异步对象，通过isDone()等方法可以判断异步事件的执行情况\n            //启动服务器(并绑定端口)，bind是异步操作，sync方法是等待异步操作执行完毕\n            ChannelFuture cf = bootstrap.bind(9000).sync();\n            //给cf注册监听器，监听我们关心的事件\n            /*cf.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (cf.isSuccess()) {\n                        System.out.println("监听端口9000成功");\n                    } else {\n                        System.out.println("监听端口9000失败");\n                    }\n                }\n            });*/\n            //对通道关闭进行监听，closeFuture是异步操作，监听通道关闭\n            // 通过sync方法同步等待通道关闭处理完毕，这里会阻塞等待通道关闭完成\n            cf.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n\n\n/**\n * 自定义Handler需要继承netty规定好的某个HandlerAdapter(规范)\n */\npublic class NettyServerHandler extends ChannelInboundHandlerAdapter {\n\n    /**\n     * 读取客户端发送的数据\n     *\n     * @param ctx 上下文对象, 含有通道channel，管道pipeline\n     * @param msg 就是客户端发送的数据\n     * @throws Exception\n     */\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        System.out.println("服务器读取线程 " + Thread.currentThread().getName());\n        //Channel channel = ctx.channel();\n        //ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站\n        //将 msg 转成一个 ByteBuf，类似NIO 的 ByteBuffer\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println("客户端发送消息是:" + buf.toString(CharsetUtil.UTF_8));\n    }\n\n    /**\n     * 数据读取完毕处理方法\n     *\n     * @param ctx\n     * @throws Exception\n     */\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n        ByteBuf buf = Unpooled.copiedBuffer("HelloClient", CharsetUtil.UTF_8);\n        ctx.writeAndFlush(buf);\n    }\n\n    /**\n     * 处理异常, 一般是需要关闭通道\n     *\n     * @param ctx\n     * @param cause\n     * @throws Exception\n     */\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br")])]),s("p",[n._v("客户端代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class NettyClient {\n    public static void main(String[] args) throws Exception {\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 使用 NioSocketChannel 作为客户端的通道实现\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel channel) throws Exception {\n                            //加入处理器\n                            channel.pipeline().addLast(new NettyClientHandler());\n                        }\n                    });\n            System.out.println("netty client start");\n            //启动客户端去连接服务器端\n            ChannelFuture channelFuture = bootstrap.connect("127.0.0.1", 9000).sync();\n            //对关闭通道进行监听\n            channelFuture.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n\npublic class NettyClientHandler extends ChannelInboundHandlerAdapter {\n\n    /**\n     * 当客户端连接服务器完成就会触发该方法\n     *\n     * @param ctx\n     * @throws Exception\n     */\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        ByteBuf buf = Unpooled.copiedBuffer("HelloServer", CharsetUtil.UTF_8);\n        ctx.writeAndFlush(buf);\n    }\n\n    //当通道有读取事件时会触发，即服务端发送数据给客户端\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println("收到服务端的消息:" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println("服务端的地址： " + ctx.channel().remoteAddress());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br")])]),s("p",[n._v("看完代码，我们发现Netty框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来，让你可以专注业务的开发，而不需写一大堆类似NIO的网络处理操作。")]),n._v(" "),s("p",[s("strong",[n._v("Netty线程模型")])]),n._v(" "),s("p",[n._v("可以先理解下《Scalable IO in Java》这篇文章里说的一些IO处理模式，Netty的线程模型如下图所示：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/5.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("模型解释：")])]),n._v(" "),s("p",[n._v("\\1) Netty 抽象出两组线程池BossGroup和WorkerGroup，BossGroup专门负责接收客户端的连接, WorkerGroup专门负责网络的读写")]),n._v(" "),s("p",[n._v("\\2) BossGroup和WorkerGroup类型都是NioEventLoopGroup")]),n._v(" "),s("p",[n._v("\\3) NioEventLoopGroup 相当于一个事件循环"),s("strong",[n._v("线程组")]),n._v(", 这个组中含有多个事件循环线程 ， 每一个事件循环线程是NioEventLoop")]),n._v(" "),s("p",[n._v("\\4) 每个NioEventLoop都有一个selector , 用于监听注册在其上的socketChannel的网络通讯")]),n._v(" "),s("p",[n._v("\\5) 每个Boss  NioEventLoop线程内部循环执行的步骤有 3 步")]),n._v(" "),s("ul",[s("li",[n._v("处理accept事件 , 与client 建立连接 , 生成 NioSocketChannel")]),n._v(" "),s("li",[n._v("将NioSocketChannel注册到某个worker  NIOEventLoop上的selector")]),n._v(" "),s("li",[n._v("处理任务队列的任务 ， 即runAllTasks")])]),n._v(" "),s("p",[n._v("\\6) 每个worker  NIOEventLoop线程循环执行的步骤")]),n._v(" "),s("ul",[s("li",[n._v("轮询注册到自己selector上的所有NioSocketChannel 的read, write事件")]),n._v(" "),s("li",[n._v("处理 I/O 事件， 即read , write 事件， 在对应NioSocketChannel 处理业务")]),n._v(" "),s("li",[n._v("runAllTasks处理任务队列TaskQueue的任务 ，一些耗时的业务处理一般可以放入TaskQueue中慢慢处理，这样不影响数据在 pipeline 中的流动处理")])]),n._v(" "),s("p",[n._v("\\7) 每个worker NIOEventLoop处理NioSocketChannel业务时，会使用 pipeline (管道)，管道中维护了很多 handler 处理器用来处理 channel 中的数据")]),n._v(" "),s("p",[s("strong",[n._v("Netty模块组件")])]),n._v(" "),s("p",[s("strong",[n._v("【Bootstrap、ServerBootstrap】：")])]),n._v(" "),s("p",[n._v("Bootstrap 意思是引导，一个 Netty 应用通常由一个 Bootstrap 开始，主要作用是配置整个 Netty 程序，串联各个组件，Netty 中 Bootstrap 类是客户端程序的启动引导类，ServerBootstrap 是服务端启动引导类。")]),n._v(" "),s("p",[s("strong",[n._v("【Future、ChannelFuture】：")])]),n._v(" "),s("p",[n._v("正如前面介绍，在 Netty 中所有的 IO 操作都是异步的，不能立刻得知消息是否被正确处理。")]),n._v(" "),s("p",[n._v("但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 Future 和 ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。")]),n._v(" "),s("p",[s("strong",[n._v("【Channel】：")])]),n._v(" "),s("p",[n._v("Netty 网络通信的组件，能够用于执行网络 I/O 操作。Channel 为用户提供：")]),n._v(" "),s("p",[n._v("1）当前网络连接的通道的状态（例如是否打开？是否已连接？）")]),n._v(" "),s("p",[n._v("2）网络连接的配置参数 （例如接收缓冲区大小）")]),n._v(" "),s("p",[n._v("3）提供异步的网络 I/O 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 I/O 调用都将立即返回，并且不保证在调用结束时所请求的 I/O 操作已完成。")]),n._v(" "),s("p",[n._v("4）调用立即返回一个 ChannelFuture 实例，通过注册监听器到 ChannelFuture 上，可以 I/O 操作成功、失败或取消时回调通知调用方。")]),n._v(" "),s("p",[n._v("5）支持关联 I/O 操作与对应的处理程序。")]),n._v(" "),s("p",[n._v("不同协议、不同的阻塞类型的连接都有不同的 Channel 类型与之对应。")]),n._v(" "),s("p",[n._v("下面是一些常用的 Channel 类型：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("NioSocketChannel，异步的客户端 TCP Socket 连接。\nNioServerSocketChannel，异步的服务器端 TCP Socket 连接。\nNioDatagramChannel，异步的 UDP 连接。\nNioSctpChannel，异步的客户端 Sctp 连接。\nNioSctpServerChannel，异步的 Sctp 服务器端连接。\n这些通道涵盖了 UDP 和 TCP 网络 IO 以及文件 IO。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[s("strong",[n._v("【Selector】：")])]),n._v(" "),s("p",[n._v("Netty 基于 Selector 对象实现 I/O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。")]),n._v(" "),s("p",[n._v("当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询(Select) 这些注册的 Channel 是否有已就绪的 I/O 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 Channel 。")]),n._v(" "),s("p",[s("strong",[n._v("【NioEventLoop】：")])]),n._v(" "),s("p",[n._v("NioEventLoop 中维护了一个线程和任务队列，支持异步提交执行任务，线程启动时会调用 NioEventLoop 的 run 方法，执行 I/O 任务和非 I/O 任务：")]),n._v(" "),s("p",[n._v("I/O 任务，即 selectionKey 中 ready 的事件，如 accept、connect、read、write 等，由 processSelectedKeys 方法触发。")]),n._v(" "),s("p",[n._v("非 IO 任务，添加到 taskQueue 中的任务，如 register0、bind0 等任务，由 runAllTasks 方法触发。")]),n._v(" "),s("p",[s("strong",[n._v("【NioEventLoopGroup】：")])]),n._v(" "),s("p",[n._v("NioEventLoopGroup，主要管理 eventLoop 的生命周期，可以理解为一个线程池，内部维护了一组线程，每个线程(NioEventLoop)负责处理多个 Channel 上的事件，而一个 Channel 只对应于一个线程。")]),n._v(" "),s("p",[s("strong",[n._v("【ChannelHandler】：")])]),n._v(" "),s("p",[n._v("ChannelHandler 是一个接口，处理 I/O 事件或拦截 I/O 操作，并将其转发到其 ChannelPipeline(业务处理链)中的下一个处理程序。")]),n._v(" "),s("p",[n._v("ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("ChannelInboundHandler 用于处理入站 I/O 事件。\nChannelOutboundHandler 用于处理出站 I/O 操作。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("或者使用以下适配器类：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("ChannelInboundHandlerAdapter 用于处理入站 I/O 事件。\nChannelOutboundHandlerAdapter 用于处理出站 I/O 操作。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[s("strong",[n._v("【ChannelHandlerContext】：")])]),n._v(" "),s("p",[n._v("保存 Channel 相关的所有上下文信息，同时关联一个 ChannelHandler 对象。")]),n._v(" "),s("p",[s("strong",[n._v("【ChannelPipline】：")])]),n._v(" "),s("p",[n._v("保存 ChannelHandler 的 List，用于处理或拦截 Channel 的入站事件和出站操作。")]),n._v(" "),s("p",[n._v("ChannelPipeline 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 Channel 中各个的 ChannelHandler 如何相互交互。")]),n._v(" "),s("p",[n._v("在 Netty 中每个 Channel 都有且仅有一个 ChannelPipeline 与之对应，它们的组成关系如下：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/6.png",alt:""}})]),n._v(" "),s("p",[n._v("一个 Channel 包含了一个 ChannelPipeline，而 ChannelPipeline 中又维护了一个由 ChannelHandlerContext 组成的双向链表，并且每个 ChannelHandlerContext 中又关联着一个 ChannelHandler。")]),n._v(" "),s("p",[n._v("read事件(入站事件)和write事件(出站事件)在一个双向链表中，入站事件会从链表 head 往后传递到最后一个入站的 handler，出站事件会从链表 tail 往前传递到最前一个出站的 handler，两种类型的 handler 互不干扰。")]),n._v(" "),s("p",[s("strong",[n._v("ByteBuf详解")])]),n._v(" "),s("p",[n._v("从结构上来说，ByteBuf 由一串字节数组构成。数组中每个字节用来存放信息。")]),n._v(" "),s("p",[n._v("ByteBuf 提供了两个索引，一个用于读取数据，一个用于写入数据。这两个索引通过在字节数组中移动，来定位需要读或者写信息的位置。")]),n._v(" "),s("p",[n._v("当从 ByteBuf 读取时，它的 readerIndex（读索引）将会根据读取的字节数递增。")]),n._v(" "),s("p",[n._v("同样，当写 ByteBuf 时，它的 writerIndex 也会根据写入的字节数进行递增。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/7.png",alt:""}})]),n._v(" "),s("p",[n._v("需要注意的是极限的情况是 readerIndex 刚好读到了 writerIndex 写入的地方。")]),n._v(" "),s("p",[n._v("如果 readerIndex 超过了 writerIndex 的时候，Netty 会抛出 IndexOutOf-BoundsException 异常。")]),n._v(" "),s("p",[n._v("示例代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.util.CharsetUtil;\n\npublic class NettyByteBuf {\n    public static void main(String[] args) {\n        // 创建byteBuf对象，该对象内部包含一个字节数组byte[10]\n        // 通过readerindex和writerIndex和capacity，将buffer分成三个区域\n        // 已经读取的区域：[0,readerindex)\n        // 可读取的区域：[readerindex,writerIndex)\n        // 可写的区域: [writerIndex,capacity)\n        ByteBuf byteBuf = Unpooled.buffer(10);\n        System.out.println("byteBuf=" + byteBuf);\n\n        for (int i = 0; i < 8; i++) {\n            byteBuf.writeByte(i);\n        }\n        System.out.println("byteBuf=" + byteBuf);\n\n        for (int i = 0; i < 5; i++) {\n            System.out.println(byteBuf.getByte(i));\n        }\n        System.out.println("byteBuf=" + byteBuf);\n\n        for (int i = 0; i < 5; i++) {\n            System.out.println(byteBuf.readByte());\n        }\n        System.out.println("byteBuf=" + byteBuf);\n\n\n        //用Unpooled工具类创建ByteBuf\n        ByteBuf byteBuf2 = Unpooled.copiedBuffer("hello,zhuge!", CharsetUtil.UTF_8);\n        //使用相关的方法\n        if (byteBuf2.hasArray()) {\n            byte[] content = byteBuf2.array();\n            //将 content 转成字符串\n            System.out.println(new String(content, CharsetUtil.UTF_8));\n            System.out.println("byteBuf2=" + byteBuf2);\n\n            System.out.println(byteBuf2.getByte(0)); // 获取数组0这个位置的字符h的ascii码，h=104\n\n            int len = byteBuf2.readableBytes(); //可读的字节数  12\n            System.out.println("len=" + len);\n\n            //使用for取出各个字节\n            for (int i = 0; i < len; i++) {\n                System.out.println((char) byteBuf2.getByte(i));\n            }\n\n            //范围读取\n            System.out.println(byteBuf2.getCharSequence(0, 6, CharsetUtil.UTF_8));\n            System.out.println(byteBuf2.getCharSequence(6, 6, CharsetUtil.UTF_8));\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br")])]),s("p",[s("strong",[n._v("Netty实战聊天室系统")])]),n._v(" "),s("p",[n._v("腾讯课堂聊天窗口就是一个聊天室")]),n._v(" "),s("p",[n._v("参见示例代码com.tuling.netty.chat包")]),n._v(" "),s("h2",{attrs:{id:"netty编解码、粘包拆包、心跳机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netty编解码、粘包拆包、心跳机制"}},[n._v("#")]),n._v(" netty编解码、粘包拆包、心跳机制")]),n._v(" "),s("p",[s("strong",[n._v("Netty编解码")])]),n._v(" "),s("p",[n._v("Netty涉及到编解码的组件有Channel、ChannelHandler、ChannelPipe等，先大概了解下这几个组件的作用。")]),n._v(" "),s("p",[s("strong",[n._v("ChannelHandler")])]),n._v(" "),s("p",[n._v("ChannelHandler充当了处理入站和出站数据的应用程序逻辑容器。例如，实现ChannelInboundHandler接口（或ChannelInboundHandlerAdapter），你就可以接收入站事件和数据，这些数据随后会被你的应用程序的业务逻辑处理。当你要给连接的客户端发送响应时，也可以从ChannelInboundHandler冲刷数据。你的业务逻辑通常写在一个或者多个ChannelInboundHandler中。ChannelOutboundHandler原理一样，只不过它是用来处理出站数据的。")]),n._v(" "),s("p",[s("strong",[n._v("ChannelPipeline")])]),n._v(" "),s("p",[n._v("ChannelPipeline提供了ChannelHandler链的容器。"),s("strong",[n._v("以客户端应用程序为例")]),n._v("，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为"),s("strong",[n._v("出站的")]),n._v("，即客户端发送给服务端的数据会通过pipeline中的一系列"),s("strong",[n._v("ChannelOutboundHandler(ChannelOutboundHandler调用是"),s("strong",[s("strong",[n._v("从tail到head方向")])]),n._v("逐个调用每个handler的逻辑)")]),n._v("，并被这些Handler处理，反之则称为"),s("strong",[n._v("入站的，"),s("strong",[n._v("入站只调用pipeline里的")]),n._v("ChannelInboundHandler")]),n._v("逻辑**(ChannelInboundHandler调用是"),s("strong",[s("strong",[n._v("从head到tail方向")])]),n._v("逐个调用每个handler的逻辑)**。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/8.jpg",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("编码解码器")])]),n._v(" "),s("p",[n._v("当你通过Netty发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被"),s("strong",[n._v("解码")]),n._v("：从字节转换为另一种格式（比如java对象）；如果是出站消息，它会被"),s("strong",[n._v("编码成字节")]),n._v("。")]),n._v(" "),s("p",[n._v("Netty提供了一系列实用的编码解码器，他们都实现了ChannelInboundHadnler或者ChannelOutboundHandler接口。在这些类中，channelRead方法已经被重写了。以入站为例，对于每个从入站Channel读取的消息，这个方法会被调用。随后，它将调用由已知解码器所提供的decode()方法进行解码，并将已经解码的字节转发给ChannelPipeline中的下一个ChannelInboundHandler。")]),n._v(" "),s("p",[n._v("Netty提供了很多编解码器，比如编解码字符串的StringEncoder和StringDecoder，编解码对象的ObjectEncoder和ObjectDecoder等。")]),n._v(" "),s("p",[n._v("如果要实现高效的编解码可以用protobuf，但是protobuf需要维护大量的proto文件比较麻烦，现在一般可以使用protostuff。")]),n._v(" "),s("p",[n._v("protostuff是一个基于protobuf实现的序列化方法，它较于protobuf最明显的好处是，在几乎不损耗性能的情况下做到了不用我们写.proto文件来实现序列化。使用它也非常简单，代码如下：")]),n._v(" "),s("p",[n._v("引入依赖：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("<dependency>\n    <groupId>com.dyuproject.protostuff</groupId>\n    <artifactId>protostuff-api</artifactId>\n    <version>1.0.10</version>\n</dependency>\n<dependency>\n    <groupId>com.dyuproject.protostuff</groupId>\n    <artifactId>protostuff-core</artifactId>\n    <version>1.0.10</version>\n</dependency>\n<dependency>\n    <groupId>com.dyuproject.protostuff</groupId>\n    <artifactId>protostuff-runtime</artifactId>\n    <version>1.0.10</version>\n</dependency>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("p",[n._v("protostuff使用示例：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import com.dyuproject.protostuff.LinkedBuffer;\nimport com.dyuproject.protostuff.ProtostuffIOUtil;\nimport com.dyuproject.protostuff.Schema;\nimport com.dyuproject.protostuff.runtime.RuntimeSchema;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * protostuff 序列化工具类，基于protobuf封装\n */\npublic class ProtostuffUtil {\n\n    private static Map<Class<?>, Schema<?>> cachedSchema = new ConcurrentHashMap<Class<?>, Schema<?>>();\n\n    private static <T> Schema<T> getSchema(Class<T> clazz) {\n        @SuppressWarnings("unchecked")\n        Schema<T> schema = (Schema<T>) cachedSchema.get(clazz);\n        if (schema == null) {\n            schema = RuntimeSchema.getSchema(clazz);\n            if (schema != null) {\n                cachedSchema.put(clazz, schema);\n            }\n        }\n        return schema;\n    }\n\n    /**\n     * 序列化\n     *\n     * @param obj\n     * @return\n     */\n    public static <T> byte[] serializer(T obj) {\n        @SuppressWarnings("unchecked")\n        Class<T> clazz = (Class<T>) obj.getClass();\n        LinkedBuffer buffer = LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);\n        try {\n            Schema<T> schema = getSchema(clazz);\n            return ProtostuffIOUtil.toByteArray(obj, schema, buffer);\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        } finally {\n            buffer.clear();\n        }\n    }\n\n    /**\n     * 反序列化\n     *\n     * @param data\n     * @param clazz\n     * @return\n     */\n    public static <T> T deserializer(byte[] data, Class<T> clazz) {\n        try {\n            T obj = clazz.newInstance();\n            Schema<T> schema = getSchema(clazz);\n            ProtostuffIOUtil.mergeFrom(data, obj, schema);\n            return obj;\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n\n    public static void main(String[] args) {\n        byte[] userBytes = ProtostuffUtil.serializer(new User(1, "zhuge"));\n        User user = ProtostuffUtil.deserializer(userBytes, User.class);\n        System.out.println(user);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br")])]),s("p",[s("strong",[n._v("参见项目示例com.tuling.netty.codec包下代码")])]),n._v(" "),s("p",[s("strong",[n._v("Netty粘包拆包")])]),n._v(" "),s("p",[n._v("TCP是一个流协议，就是没有界限的一长串二进制数据。TCP作为传输层协议并不不了解上层业务数据的具体含义，它会根据TCP缓冲区的实际情况进行数据包的划分，所以在业务上认为是一个完整的包，可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送，这就是所谓的TCP粘包和拆包问题。面向流的通信是无消息保护边界的。")]),n._v(" "),s("p",[n._v("如下图所示，client发了两个数据包D1和D2，但是server端可能会收到如下几种情况的数据。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/9.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("解决方案")])]),n._v(" "),s("p",[n._v("1）消息定长度，传输的数据大小固定长度，例如每段的长度固定为100字节，如果不够空位补空格")]),n._v(" "),s("p",[n._v("2）在数据包尾部添加特殊分隔符，比如下划线，中划线等，这种方法简单易行，但选择分隔符的时候一定要注意每条数据的内部一定不能出现分隔符。")]),n._v(" "),s("p",[n._v("3）发送长度：发送每条数据的时候，将数据的长度一并发送，比如可以选择每条数据的前4位是数据的长度，应用层处理时可以根据长度来判断每条数据的开始和结束。")]),n._v(" "),s("p",[n._v("Netty提供了多个解码器，可以进行分包的操作，如下：")]),n._v(" "),s("ul",[s("li",[n._v("LineBasedFrameDecoder （回车换行分包）")]),n._v(" "),s("li",[n._v("DelimiterBasedFrameDecoder（特殊分隔符分包）")]),n._v(" "),s("li",[n._v("FixedLengthFrameDecoder（固定长度报文来分包）")])]),n._v(" "),s("p",[n._v("**自定义长度分包编解码器，**"),s("strong",[n._v("参见项目示例com.tuling.netty.split包下代码")])]),n._v(" "),s("p",[s("strong",[n._v("Netty心跳检测机制")])]),n._v(" "),s("p",[n._v("所谓心跳, 即在 TCP 长连接中, 客户端和服务器之间定期发送的一种特殊的数据包, 通知对方自己还在线, 以确保 TCP 连接的有效性.")]),n._v(" "),s("p",[n._v("在 Netty 中, 实现心跳机制的关键是 IdleStateHandler, 看下它的构造器：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public IdleStateHandler(int readerIdleTimeSeconds, int writerIdleTimeSeconds, int allIdleTimeSeconds) {\n    this((long)readerIdleTimeSeconds, (long)writerIdleTimeSeconds, (long)allIdleTimeSeconds, TimeUnit.SECONDS);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("这里解释下三个参数的含义：")]),n._v(" "),s("ul",[s("li",[n._v("readerIdleTimeSeconds: 读超时. 即当在指定的时间间隔内没有从 Channel 读取到数据时, 会触发一个 READER_IDLE 的 IdleStateEvent 事件.")]),n._v(" "),s("li",[n._v("writerIdleTimeSeconds: 写超时. 即当在指定的时间间隔内没有数据写入到 Channel 时, 会触发一个 WRITER_IDLE 的 IdleStateEvent 事件.")]),n._v(" "),s("li",[n._v("allIdleTimeSeconds: 读/写超时. 即当在指定的时间间隔内没有读或写操作时, 会触发一个 ALL_IDLE 的 IdleStateEvent 事件.")])]),n._v(" "),s("p",[n._v("注：这三个参数默认的时间单位是秒。若需要指定其他时间单位，可以使用另一个构造方法：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("IdleStateHandler(boolean observeOutput, long readerIdleTime, long writerIdleTime, long allIdleTime, TimeUnit unit)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("要实现Netty服务端心跳检测机制需要在服务器端的ChannelInitializer中加入如下的代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(" pipeline.addLast(new IdleStateHandler(3, 0, 0, TimeUnit.SECONDS));\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("初步地看下IdleStateHandler源码，先看下IdleStateHandler中的channelRead方法：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/10.png",alt:""}})]),n._v(" "),s("p",[n._v("红框代码其实表示该方法只是进行了透传，不做任何业务逻辑处理，让channelPipe中的下一个handler处理channelRead方法")]),n._v(" "),s("p",[n._v("我们再看看channelActive方法：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/11.png",alt:""}})]),n._v(" "),s("p",[n._v("这里有个initialize的方法，这是IdleStateHandler的精髓，接着探究：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/12.png",alt:""}})]),n._v(" "),s("p",[n._v("这边会触发一个Task，ReaderIdleTimeoutTask，这个task里的run方法源码是这样的：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/13.png",alt:""}})]),n._v(" "),s("p",[n._v("第一个红框代码是用当前时间减去最后一次channelRead方法调用的时间，假如这个结果是6s，说明最后一次调用channelRead已经是6s之前的事情了，你设置的是5s，那么nextDelay则为-1，说明超时了，那么第二个红框代码则会触发下一个handler的userEventTriggered方法：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/14.png",alt:""}})]),n._v(" "),s("p",[n._v("如果没有超时则不触发userEventTriggered方法。")]),n._v(" "),s("p",[n._v("Netty心跳检测代码示例：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('//服务端代码\npublic class HeartBeatServer {\n\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup boss = new NioEventLoopGroup();\n        EventLoopGroup worker = new NioEventLoopGroup();\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(boss, worker)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            pipeline.addLast("decoder", new StringDecoder());\n                            pipeline.addLast("encoder", new StringEncoder());\n                            //IdleStateHandler的readerIdleTime参数指定超过3秒还没收到客户端的连接，\n                            //会触发IdleStateEvent事件并且交给下一个handler处理，下一个handler必须\n                            //实现userEventTriggered方法处理对应事件\n                            pipeline.addLast(new IdleStateHandler(3, 0, 0, TimeUnit.SECONDS));\n                            pipeline.addLast(new HeartBeatHandler());\n                        }\n                    });\n            System.out.println("netty server start。。");\n            ChannelFuture future = bootstrap.bind(9000).sync();\n            future.channel().closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            worker.shutdownGracefully();\n            boss.shutdownGracefully();\n        }\n    }\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('//服务端处理handler\npublic class HeartBeatServerHandler extends SimpleChannelInboundHandler<String> {\n\n    int readIdleTimes = 0;\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {\n        System.out.println(" ====== > [server] message received : " + s);\n        if ("Heartbeat Packet".equals(s)) {\n            ctx.channel().writeAndFlush("ok");\n        } else {\n            System.out.println(" 其他信息处理 ... ");\n        }\n    }\n\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n        IdleStateEvent event = (IdleStateEvent) evt;\n\n        String eventType = null;\n        switch (event.state()) {\n            case READER_IDLE:\n                eventType = "读空闲";\n                readIdleTimes++; // 读空闲的计数加1\n                break;\n            case WRITER_IDLE:\n                eventType = "写空闲";\n                // 不处理\n                break;\n            case ALL_IDLE:\n                eventType = "读写空闲";\n                // 不处理\n                break;\n        }\n        System.out.println(ctx.channel().remoteAddress() + "超时事件：" + eventType);\n        if (readIdleTimes > 3) {\n            System.out.println(" [server]读空闲超过3次，关闭连接，释放更多资源");\n            ctx.channel().writeAndFlush("idle close");\n            ctx.channel().close();\n        }\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.err.println("=== " + ctx.channel().remoteAddress() + " is active ===");\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('   //客户端代码\n   public class HeartBeatClient {\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(eventLoopGroup).channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            pipeline.addLast("decoder", new StringDecoder());\n                            pipeline.addLast("encoder", new StringEncoder());\n                            pipeline.addLast(new HeartBeatClientHandler());\n                        }\n                    });\n\n            System.out.println("netty client start。。");\n            Channel channel = bootstrap.connect("127.0.0.1", 9000).sync().channel();\n            String text = "Heartbeat Packet";\n            Random random = new Random();\n            while (channel.isActive()) {\n                int num = random.nextInt(10);\n                Thread.sleep(num * 1000);\n                channel.writeAndFlush(text);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            eventLoopGroup.shutdownGracefully();\n        }\n    }\n\n    static class HeartBeatClientHandler extends SimpleChannelInboundHandler<String> {\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n            System.out.println(" client received :" + msg);\n            if (msg != null && msg.equals("idle close")) {\n                System.out.println(" 服务端关闭连接，客户端也关闭");\n                ctx.channel().closeFuture();\n            }\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br")])]),s("p",[s("strong",[n._v("Netty断线自动重连实现")])]),n._v(" "),s("p",[n._v("1、客户端启动连接服务端时，如果网络或服务端有问题，客户端连接失败，可以重连，重连的逻辑加在客户端。")]),n._v(" "),s("p",[n._v("参见代码com.tuling.netty.reconnect.NettyClient")]),n._v(" "),s("p",[n._v("2、系统运行过程中网络故障或服务端故障，导致客户端与服务端断开连接了也需要重连，可以在客户端处理数据的Handler的channelInactive方法中进行重连。")]),n._v(" "),s("p",[n._v("参见代码com.tuling.netty.reconnect.NettyClientHandler")]),n._v(" "),s("h2",{attrs:{id:"netty核心源码剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netty核心源码剖析"}},[n._v("#")]),n._v(" Netty核心源码剖析")]),n._v(" "),s("p",[s("strong",[n._v("Netty线程模型图")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/20.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("Netty线程模型源码剖析图")])]),n._v(" "),s("p",[n._v("图链接：https://www.processon.com/view/link/5dee0943e4b079080a26c2ac")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/21.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("Netty高并发高性能架构设计精髓")])]),n._v(" "),s("ul",[s("li",[n._v("主从Reactor线程模型")]),n._v(" "),s("li",[n._v("NIO多路复用非阻塞")]),n._v(" "),s("li",[s("strong",[n._v("无锁串行化")]),n._v("设计思想")]),n._v(" "),s("li",[n._v("支持高性能序列化协议")]),n._v(" "),s("li",[n._v("零拷贝(直接内存的使用)")]),n._v(" "),s("li",[n._v("ByteBuf内存池设计")]),n._v(" "),s("li",[n._v("灵活的TCP参数配置能力")]),n._v(" "),s("li",[n._v("并发优化")])]),n._v(" "),s("p",[s("strong",[n._v("无锁串行化设计思想")])]),n._v(" "),s("p",[n._v("在大多数场景下，并行多线程处理可以提升系统的并发性能。但是，如果对于共享资源的并发访问处理不当，会带来严重的锁竞争，这最终会导致性能的下降。为了尽可能的避免锁竞争带来的性能损耗，可以通过串行化设计，即消息的处理尽可能在同一个线程内完成，期间不进行线程切换，这样就避免了多线程竞争和同步锁。NIO的多路复用就是一种无锁串行化的设计思想(理解下Redis和Netty的线程模型)")]),n._v(" "),s("p",[n._v("为了尽可能提升性能，Netty采用了串行无锁化设计，在IO线程内部进行串行操作，避免多线程竞争导致的性能下降。表面上看，串行化设计似乎CPU利用率不高，并发程度不够。但是，通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列-多个工作线程模型性能更优。")]),n._v(" "),s("p",[n._v("Netty的NioEventLoop读取到消息之后，直接调用ChannelPipeline的fireChannelRead(Object msg)，只要用户不主动切换线程，一直会由NioEventLoop调用到用户的Handler，期间不进行线程切换，这种串行化处理方式避免了多线程操作导致的锁的竞争，从性能角度看是最优的。")]),n._v(" "),s("p",[s("strong",[n._v("直接内存")])]),n._v(" "),s("p",[n._v("直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，某些情况下这部分内存也会被频繁地使用，而且也可能导致OutOfMemoryError异常出现。Java里用DirectByteBuffer可以分配一块直接内存(堆外内存)，元空间对应的内存也叫作直接内存，它们对应的都是机器的物理内存。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/22.png",alt:""}})]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * 直接内存与堆内存的区别\n */\npublic class DirectMemoryTest {\n\n    public static void heapAccess() {\n        long startTime = System.currentTimeMillis();\n        //分配堆内存\n        ByteBuffer buffer = ByteBuffer.allocate(1000);\n        for (int i = 0; i < 100000; i++) {\n            for (int j = 0; j < 200; j++) {\n                buffer.putInt(j);\n            }\n            buffer.flip();\n            for (int j = 0; j < 200; j++) {\n                buffer.getInt();\n            }\n            buffer.clear();\n        }\n        long endTime = System.currentTimeMillis();\n        System.out.println("堆内存访问:" + (endTime - startTime) + "ms");\n    }\n\n    public static void directAccess() {\n        long startTime = System.currentTimeMillis();\n        //分配直接内存\n        ByteBuffer buffer = ByteBuffer.allocateDirect(1000);\n        for (int i = 0; i < 100000; i++) {\n            for (int j = 0; j < 200; j++) {\n                buffer.putInt(j);\n            }\n            buffer.flip();\n            for (int j = 0; j < 200; j++) {\n                buffer.getInt();\n            }\n            buffer.clear();\n        }\n        long endTime = System.currentTimeMillis();\n        System.out.println("直接内存访问:" + (endTime - startTime) + "ms");\n    }\n\n    public static void heapAllocate() {\n        long startTime = System.currentTimeMillis();\n        for (int i = 0; i < 100000; i++) {\n            ByteBuffer.allocate(100);\n        }\n        long endTime = System.currentTimeMillis();\n        System.out.println("堆内存申请:" + (endTime - startTime) + "ms");\n    }\n\n    public static void directAllocate() {\n        long startTime = System.currentTimeMillis();\n        for (int i = 0; i < 100000; i++) {\n            ByteBuffer.allocateDirect(100);\n        }\n        long endTime = System.currentTimeMillis();\n        System.out.println("直接内存申请:" + (endTime - startTime) + "ms");\n    }\n\n    public static void main(String args[]) {\n        for (int i = 0; i < 10; i++) {\n            heapAccess();\n            directAccess();\n        }\n\n        System.out.println();\n\n        for (int i = 0; i < 10; i++) {\n            heapAllocate();\n            directAllocate();\n        }\n    }\n}\n\n运行结果：\n堆内存访问:44ms\n直接内存访问:29ms\n堆内存访问:33ms\n直接内存访问:19ms\n堆内存访问:55ms\n直接内存访问:38ms\n堆内存访问:39ms\n直接内存访问:20ms\n堆内存访问:38ms\n直接内存访问:18ms\n堆内存访问:36ms\n直接内存访问:19ms\n堆内存访问:34ms\n直接内存访问:19ms\n堆内存访问:40ms\n直接内存访问:20ms\n堆内存访问:37ms\n直接内存访问:24ms\n堆内存访问:59ms\n直接内存访问:25ms\n\n堆内存申请:11ms\n直接内存申请:36ms\n堆内存申请:13ms\n直接内存申请:52ms\n堆内存申请:62ms\n直接内存申请:40ms\n堆内存申请:2ms\n直接内存申请:37ms\n堆内存申请:1ms\n直接内存申请:81ms\n堆内存申请:2ms\n直接内存申请:23ms\n堆内存申请:1ms\n直接内存申请:31ms\n堆内存申请:2ms\n直接内存申请:32ms\n堆内存申请:7ms\n直接内存申请:41ms\n堆内存申请:8ms\n直接内存申请:142ms\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br")])]),s("p",[n._v("从程序运行结果看出直接内存申请较慢，但访问效率高。在java虚拟机实现上，本地IO一般会直接操作直接内存（直接内存=>系统调用=>硬盘/网卡），而非直接内存则需要二次拷贝（堆内存=>直接内存=>系统调用=>硬盘/网卡）。")]),n._v(" "),s("p",[s("strong",[n._v("直接内存分配源码分析")]),n._v("：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static ByteBuffer allocateDirect(int capacity) {\n    return new DirectByteBuffer(capacity);\n}\n\n\nDirectByteBuffer(int cap) {                   // package-private\n    super(-1, 0, cap, cap);\n    boolean pa = VM.isDirectMemoryPageAligned();\n    int ps = Bits.pageSize();\n    long size = Math.max(1L, (long)cap + (pa ? ps : 0));\n    //判断是否有足够的直接内存空间分配，可通过-XX:MaxDirectMemorySize=<size>参数指定直接内存最大可分配空间，如果不指定默认为最大堆内存大小，\n    //在分配直接内存时如果发现空间不够会显示调用System.gc()触发一次full gc回收掉一部分无用的直接内存的引用对象，同时直接内存也会被释放掉\n    //如果释放完分配空间还是不够会抛出异常java.lang.OutOfMemoryError\n   Bits.reserveMemory(size, cap);\n\n    long base = 0;\n    try {\n        // 调用unsafe本地方法分配直接内存\n        base = unsafe.allocateMemory(size);\n    } catch (OutOfMemoryError x) {\n        // 分配失败，释放内存\n        Bits.unreserveMemory(size, cap);\n        throw x;\n    }\n    unsafe.setMemory(base, size, (byte) 0);\n    if (pa && (base % ps != 0)) {\n        // Round up to page boundary\n        address = base + ps - (base & (ps - 1));\n    } else {\n        address = base;\n    }\n    \n    // 使用Cleaner机制注册内存回收处理函数，当直接内存引用对象被GC清理掉时，\n    // 会提前调用这里注册的释放直接内存的Deallocator线程对象的run方法\n    cleaner = Cleaner.create(this, new Deallocator(base, size, cap));\n    att = null;\n}\n\n\n// 申请一块本地内存。内存空间是未初始化的，其内容是无法预期的。\n// 使用freeMemory释放内存，使用reallocateMemory修改内存大小\npublic native long allocateMemory(long bytes);\n\n// openjdk8/hotspot/src/share/vm/prims/unsafe.cpp\nUNSAFE_ENTRY(jlong, Unsafe_AllocateMemory(JNIEnv *env, jobject unsafe, jlong size))\n  UnsafeWrapper("Unsafe_AllocateMemory");\n  size_t sz = (size_t)size;\n  if (sz != (julong)size || size < 0) {\n    THROW_0(vmSymbols::java_lang_IllegalArgumentException());\n  }\n  if (sz == 0) {\n    return 0;\n  }\n  sz = round_to(sz, HeapWordSize);\n  // 调用os::malloc申请内存，内部使用malloc这个C标准库的函数申请内存\n  void* x = os::malloc(sz, mtInternal);\n  if (x == NULL) {\n    THROW_0(vmSymbols::java_lang_OutOfMemoryError());\n  }\n  //Copy::fill_to_words((HeapWord*)x, sz / HeapWordSize);\n      return addr_to_java(x);\nUNSAFE_END\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br")])]),s("p",[s("strong",[n._v("使用直接内存的优缺点：")])]),n._v(" "),s("p",[n._v("优点：")]),n._v(" "),s("ul",[s("li",[n._v("不占用堆内存空间，减少了发生GC的可能")]),n._v(" "),s("li",[n._v("java虚拟机实现上，本地IO会直接操作直接内存（直接内存=>系统调用=>硬盘/网卡），而非直接内存则需要二次拷贝（堆内存=>直接内存=>系统调用=>硬盘/网卡）")])]),n._v(" "),s("p",[n._v("缺点：")]),n._v(" "),s("ul",[s("li",[n._v("初始分配较慢")]),n._v(" "),s("li",[n._v("没有JVM直接帮助管理内存，容易发生内存溢出。为了避免一直没有FULL GC，最终导致直接内存把物理内存耗完。我们可以指定直接内存的最大值，通过-XX：MaxDirectMemorySize来指定，当达到阈值的时候，调用system.gc来进行一次FULL GC，间接把那些没有被使用的直接内存回收掉。")])]),n._v(" "),s("p",[s("strong",[n._v("Netty零拷贝")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/23.png",alt:""}})]),n._v(" "),s("p",[n._v("Netty的接收和发送ByteBuf采用DIRECT BUFFERS，使用堆外"),s("strong",[n._v("直接内存")]),n._v("进行Socket读写，不需要进行字节缓冲区的二次拷贝。")]),n._v(" "),s("p",[n._v("如果使用传统的JVM堆内存（HEAP BUFFERS）进行Socket读写，JVM会将堆内存Buffer拷贝一份到直接内存中，然后才能写入Socket中。JVM堆内存的数据是不能直接写入Socket中的。相比于堆外直接内存，消息在发送过程中多了一次缓冲区的内存拷贝。")]),n._v(" "),s("p",[n._v("可以看下netty的读写源码，比如read源码NioByteUnsafe.read()")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/24.png",alt:""}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/25.png",alt:""}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/26.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("ByteBuf内存池设计")])]),n._v(" "),s("p",[n._v("随着JVM虚拟机和JIT即时编译技术的发展，对象的分配和回收是个非常轻量级的工作。但是对于缓冲区Buffer(相当于一个内存块)，情况却稍有不同，特别是对于堆外直接内存的分配和回收，是一件耗时的操作。为了尽量重用缓冲区，Netty提供了基于ByteBuf内存池的缓冲区重用机制。需要的时候直接从池子里获取ByteBuf使用即可，使用完毕之后就重新放回到池子里去。下面我们一起看下Netty ByteBuf的实现：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/27.png",alt:""}})]),n._v(" "),s("p",[n._v("可以看下netty的读写源码里面用到的ByteBuf内存池，比如read源码NioByteUnsafe.read()")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/28.png",alt:""}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/29.png",alt:""}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/30.png",alt:""}})]),n._v(" "),s("p",[n._v("继续看newDirectBuffer方法，我们发现它是一个抽象方法，由AbstractByteBufAllocator的子类负责具体实现，代码如下：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/31.png",alt:""}})]),n._v(" "),s("p",[n._v("代码跳转到PooledByteBufAllocator的newDirectBuffer方法，从Cache中获取内存区域PoolArena，调用它的allocate方法进行内存分配：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/32.png",alt:""}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/33.png",alt:""}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/34.png",alt:""}})]),n._v(" "),s("p",[n._v("我们这里使用的是直接内存，因此重点分析DirectArena的实现")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/35.png",alt:""}})]),n._v(" "),s("p",[n._v("最终执行了PooledUnsafeDirectByteBuf的newInstance方法，代码如下：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/36.png",alt:""}})]),n._v(" "),s("p",[n._v("通过RECYCLER的get方法循环使用ByteBuf对象，如果是非内存池实现，则直接创建一个新的ByteBuf对象。")]),n._v(" "),s("p",[s("strong",[n._v("灵活的TCP参数配置能力")])]),n._v(" "),s("p",[n._v("合理设置TCP参数在某些场景下对于性能的提升可以起到显著的效果，例如接收缓冲区SO_RCVBUF和发送缓冲区SO_SNDBUF。如果设置不当，对性能的影响是非常大的。通常建议值为128K或者256K。")]),n._v(" "),s("p",[n._v("Netty在启动辅助类ChannelOption中可以灵活的配置TCP参数，满足不同的用户场景。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/37.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("并发优化")])]),n._v(" "),s("ul",[s("li",[n._v("volatile的大量、正确使用;")]),n._v(" "),s("li",[n._v("CAS和原子类的广泛使用；")]),n._v(" "),s("li",[n._v("线程安全容器的使用；")]),n._v(" "),s("li",[n._v("通过读写锁提升并发性能。")])]),n._v(" "),s("p",[s("strong",[n._v("ByteBuf扩容机制")])]),n._v(" "),s("p",[n._v("如果我们需要了解ByteBuf的扩容,我们需要先了解ByteBuf中定义的几个成员变量，再从源码的角度来分析扩容。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/38.jpeg",alt:""}})]),n._v(" "),s("ul",[s("li",[n._v("minNewCapacity：表用户需要写入的值大小")]),n._v(" "),s("li",[n._v("threshold：阈值，为Bytebuf内部设定容量的最大值")]),n._v(" "),s("li",[n._v("maxCapacity：Netty最大能接受的容量大小，一般为int的最大值")])]),n._v(" "),s("p",[n._v("ByteBuf核心扩容方法")]),n._v(" "),s("p",[n._v("​    进入ByteBuf源码中，深入分析其扩容方法： idea源码进入：ByteBuf.writeByte()->AbstractByteBuf->calculateNewCapacity")]),n._v(" "),s("ol",[s("li",[n._v("判断目标值与阈值threshold（4MB）的大小关系，等于直接返回阈值")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/39.png",alt:""}})]),n._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[n._v("采用步进4MB的方式完成扩容")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/40.png",alt:""}})]),n._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[n._v("采用64为基数，做倍增的方式完成扩容")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/nio/41.png",alt:""}})])])]),n._v(" "),s("p",[s("strong",[n._v("总结")]),n._v("：Netty的ByteBuf需要动态扩容来满足需要，扩容过程： 默认门限阈值为4MB(这个阈值是一个经验值，不同场景，可能取值不同)，当需要的容量等于门限阈值，使用阈值作为新的缓存区容量 目标容量，如果大于阈值，采用每次步进4MB的方式进行内存扩张（(需要扩容值/4MB)*4MB），扩张后需要和最大内存（maxCapacity）进行比较，大于maxCapacity的话就用maxCapacity,否则使用扩容值 目标容量，如果小于阈值，采用倍增的方式，以64（字节）作为基本数值，每次翻倍增长64 --\x3e128 --\x3e 256，直到倍增后的结果大于或等于需要的容量值。")]),n._v(" "),s("p",[s("strong",[n._v("补充：handler的生命周期回调接口调用顺序")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('\n/**\n *  在channel的pipeline里如下handler：ch.pipeline().addLast(new LifeCycleInBoundHandler());\n *  handler的生命周期回调接口调用顺序:\n *  handlerAdded -> channelRegistered -> channelActive -> channelRead -> channelReadComplete\n *  -> channelInactive -> channelUnRegistered -> handlerRemoved\n *\n * handlerAdded: 新建立的连接会按照初始化策略，把handler添加到该channel的pipeline里面，也就是channel.pipeline.addLast(new LifeCycleInBoundHandler)执行完成后的回调；\n * channelRegistered: 当该连接分配到具体的worker线程后，该回调会被调用。\n * channelActive：channel的准备工作已经完成，所有的pipeline添加完成，并分配到具体的线上上，说明该channel准备就绪，可以使用了。\n * channelRead：客户端向服务端发来数据，每次都会回调此方法，表示有数据可读；\n * channelReadComplete：服务端每次读完一次完整的数据之后，回调该方法，表示数据读取完毕；\n * channelInactive：当连接断开时，该回调会被调用，说明这时候底层的TCP连接已经被断开了。\n * channelUnRegistered: 对应channelRegistered，当连接关闭后，释放绑定的workder线程；\n * handlerRemoved： 对应handlerAdded，将handler从该channel的pipeline移除后的回调方法。\n */\npublic class LifeCycleInBoundHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRegistered(ChannelHandlerContext ctx)\n            throws Exception {\n        System.out.println("channelRegistered: channel注册到NioEventLoop");\n        super.channelRegistered(ctx);\n    }\n\n    @Override\n    public void channelUnregistered(ChannelHandlerContext ctx) \n            throws Exception {\n        System.out.println("channelUnregistered: channel取消和NioEventLoop的绑定");\n        super.channelUnregistered(ctx);\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) \n            throws Exception {\n        System.out.println("channelActive: channel准备就绪");\n        super.channelActive(ctx);\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) \n            throws Exception {\n        System.out.println("channelInactive: channel被关闭");\n        super.channelInactive(ctx);\n    }\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) \n            throws Exception {\n        System.out.println("channelRead: channel中有可读的数据" );\n        super.channelRead(ctx, msg);\n    }\n\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) \n            throws Exception {\n        System.out.println("channelReadComplete: channel读数据完成");\n        super.channelReadComplete(ctx);\n    }\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) \n            throws Exception {\n        System.out.println("handlerAdded: handler被添加到channel的pipeline");\n        super.handlerAdded(ctx);\n    }\n\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) \n            throws Exception {\n        System.out.println("handlerRemoved: handler从channel的pipeline中移除");\n        super.handlerRemoved(ctx);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);