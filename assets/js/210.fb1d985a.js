(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{577:function(s,n,a){"use strict";a.r(n);var t=a(5),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("U2FsdGVkX18f0+mO0QXSRuboxtGBRUAnXgUHOfBN26JXZ6KtdOHp5a94d9P97IH+\n+4tx3sJrY7a5ln40FfWhxMH/yg1Dbf5wOj0A5B3u0JfN4sdfqFDlQgLVE/yTmlkB\nWg==\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"hashmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[s._v("#")]),s._v(" HashMap")]),s._v(" "),n("h3",{attrs:{id:"数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),n("p",[s._v("数组+链表+(红黑树jdk>=8)")]),s._v(" "),n("h3",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")]),s._v(" 原理")]),s._v(" "),n("p",[s._v("xxx")]),s._v(" "),n("p",[s._v("HashMap是线程不安全的，不安全的具体原因就是在高并发场景下，扩容可能产生死锁(Jdk1.7存在)以及get操作可能带来的数据丢失。")]),s._v(" "),n("h3",{attrs:{id:"重要成员变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重要成员变量"}},[s._v("#")]),s._v(" 重要成员变量")]),s._v(" "),n("ul",[n("li",[s._v("DEFAULT_INITIAL_CAPACITY = 1 << 4; Hash表默认初始容量")]),s._v(" "),n("li",[s._v("MAXIMUM_CAPACITY = 1 << 30; 最大Hash表容量")]),s._v(" "),n("li",[s._v("DEFAULT_LOAD_FACTOR = 0.75f；默认加载因子")]),s._v(" "),n("li",[s._v("TREEIFY_THRESHOLD = 8；链表转红黑树阈值")]),s._v(" "),n("li",[s._v("UNTREEIFY_THRESHOLD = 6；红黑树转链表阈值")]),s._v(" "),n("li",[s._v("MIN_TREEIFY_CAPACITY = 64；链表转红黑树时hash表最小容量阈值，达不到优先扩容。")])]),s._v(" "),n("h3",{attrs:{id:"jdk7-扩容死锁分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk7-扩容死锁分析"}},[s._v("#")]),s._v(" Jdk7-扩容死锁分析")]),s._v(" "),n("p",[s._v("死锁问题核心在于下面代码，多线程扩容导致形成的链表环!")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    for (Entry<K,V> e : table) {\n        while(null != e) {\n            Entry<K,V> next = e.next;//第一行\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);//第二行\n            e.next = newTable[i];//第三行\n            newTable[i] = e;//第四行\n            e = next;//第五行\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("去掉了一些冗余的代码， 层次结构更加清晰了。")]),s._v(" "),n("ul",[n("li",[s._v("第一行：记录oldhash表中e.next")]),s._v(" "),n("li",[s._v("第二行：rehash计算出数组的位置(hash表中桶的位置)")]),s._v(" "),n("li",[s._v("第三行：e要插入链表的头部， 所以要先将e.next指向new hash表中的第一个元素")]),s._v(" "),n("li",[s._v("第四行：将e放入到new hash表的头部")]),s._v(" "),n("li",[s._v("第五行： 转移e到下一个节点， 继续循环下去")])]),s._v(" "),n("h4",{attrs:{id:"单线程扩容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单线程扩容"}},[s._v("#")]),s._v(" 单线程扩容")]),s._v(" "),n("p",[s._v("**假设：**hash算法就是简单的key与length(数组长度)求余。hash表长度为2，如果不扩容， 那么元素key为3,5,7按照计算(key%table.length)的话都应该碰撞到table[1]上。")]),s._v(" "),n("p",[n("strong",[s._v("扩容："),n("strong",[s._v("hash表长度会扩容为4重新hash，key=3 会落到table[3]上(3%4=3)， 当前e.next为key(7), 继续while循环重新hash，key=7 会落到table[3]上(7%4=3), 产生碰撞， 这里采用的是")]),s._v("头插入法")]),s._v("，所以key=7的Entry会排在key=3前面(这里可以具体看while语句中代码)当前e.next为key(5), 继续while循环重新hash，key=5 会落到table[1]上(5%4=3)， 当前e.next为null, 跳出while循环，resize结束。")]),s._v(" "),n("p",[s._v("如下图所示")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/40.png",alt:""}})]),s._v(" "),n("h4",{attrs:{id:"多线程扩容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程扩容"}},[s._v("#")]),s._v(" 多线程扩容")]),s._v(" "),n("p",[s._v("下面就是多线程同时put的情况了， 然后同时进入transfer方法中：假设这里有两个线程同时执行了put()操作，并进入了transfer()环节")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("while(null != e) {\n      Entry<K,V> next = e.next;//第一行，线程1执行到此被调度挂起\n      int i = indexFor(e.hash, newCapacity);//第二行\n      e.next = newTable[i];//第三行\n      newTable[i] = e;//第四行\n      e = next;//第五行\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("那么此时状态为：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/41.png",alt:""}})]),s._v(" "),n("p",[s._v("从上面的图我们可以看到，因为线程1的 e 指向了 key(3)，而 next 指向了 key(7)，在线程2 rehash 后，就指向了线程2 rehash 后的链表。")]),s._v(" "),n("p",[s._v("然后线程1被唤醒了：")]),s._v(" "),n("ol",[n("li",[s._v("执行e.next = newTable[i]，于是 key(3)的 next 指向了线程1的新 Hash 表，因为新 Hash 表为空，所以e.next = null，")]),s._v(" "),n("li",[s._v("执行newTable[i] = e，所以线程1的新 Hash 表第一个元素指向了线程2新 Hash 表的 key(3)。好了，e 处理完毕。")]),s._v(" "),n("li",[s._v("执行e = next，将 e 指向 next，所以新的 e 是 key(7)")])]),s._v(" "),n("p",[s._v("然后该执行 key(3)的 next 节点 key(7)了:")]),s._v(" "),n("ol",[n("li",[s._v("现在的 e 节点是 key(7)，首先执行Entry next = e.next,那么 next 就是 key(3)了")]),s._v(" "),n("li",[s._v("执行e.next = newTable[i]，于是key(7) 的 next 就成了 key(3)")]),s._v(" "),n("li",[s._v("执行newTable[i] = e，那么线程1的新 Hash 表第一个元素变成了 key(7)")]),s._v(" "),n("li",[s._v("执行e = next，将 e 指向 next，所以新的 e 是 key(3)")])]),s._v(" "),n("p",[s._v("此时状态为：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/42.png",alt:""}})]),s._v(" "),n("p",[s._v("然后又该执行 key(7)的 next 节点 key(3)了：")]),s._v(" "),n("ol",[n("li",[s._v("现在的 e 节点是 key(3)，首先执行Entry next = e.next,那么 next 就是 null")]),s._v(" "),n("li",[s._v("执行e.next = newTable[i]，于是key(3) 的 next 就成了 key(7)")]),s._v(" "),n("li",[s._v("执行newTable[i] = e，那么线程1的新 Hash 表第一个元素变成了 key(3)")]),s._v(" "),n("li",[s._v("执行e = next，将 e 指向 next，所以新的 e 是 key(7)")])]),s._v(" "),n("p",[s._v("这时候的状态如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/43.png",alt:""}})]),s._v(" "),n("p",[s._v("很明显，环形链表出现了。")]),s._v(" "),n("h3",{attrs:{id:"jdk8-扩容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-扩容"}},[s._v("#")]),s._v(" Jdk8-扩容")]),s._v(" "),n("p",[s._v("Java8 HashMap扩容跳过了Jdk7扩容的坑，对源码进行了优化，采用"),n("strong",[s._v("高低位拆分转移方式")]),s._v("，避免了链表环的产生。")]),s._v(" "),n("p",[s._v("扩容前：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/44.png",alt:""}})]),s._v(" "),n("p",[s._v("扩容后：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/45.png",alt:""}})]),s._v(" "),n("p",[s._v("由于Jdk8引入了新的数据结构，所以put方法过程也有了一定改进，其过程如下图所示。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/46.png",alt:""}})]),s._v(" "),n("h2",{attrs:{id:"concurrenthashmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[s._v("#")]),s._v(" ConcurrentHashMap")]),s._v(" "),n("h3",{attrs:{id:"数据结构-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-2"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),n("p",[s._v("ConcurrentHashMap的数据结构与HashMap基本类似，区别在于：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("内部在数据写入时加了同步机制(分段锁)保证线程安全，读操作是无锁操作；")])]),s._v(" "),n("li",[n("p",[s._v("扩容时老数据的转移是并发执行的，这样扩容的效率更高。")])])]),s._v(" "),n("h3",{attrs:{id:"原理-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[s._v("#")]),s._v(" 原理")]),s._v(" "),n("p",[n("strong",[s._v("Java7 ConcurrentHashMap基于ReentrantLock实现分段锁")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/47.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("Java8中 ConcurrentHashMap基于synchronized实现分段锁+CAS保证线程安全；")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/48.png",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"重要成员变量-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重要成员变量-2"}},[s._v("#")]),s._v(" 重要成员变量")]),s._v(" "),n("p",[s._v("ConcurrentHashMap拥有出色的性能, 在真正掌握内部结构时, 先要掌握比较重要的成员:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("LOAD_FACTOR: 负载因子, 默认75%, 当table使用率达到75%时, 为减少table的hash碰撞, tabel长度将扩容一倍。负载因子计算: 元素总个数%table.lengh")])]),s._v(" "),n("li",[n("p",[s._v("TREEIFY_THRESHOLD: 默认8, 当链表长度达到8时, 将结构转变为红黑树。")])]),s._v(" "),n("li",[n("p",[s._v("UNTREEIFY_THRESHOLD: 默认6, 红黑树转变为链表的阈值。")])]),s._v(" "),n("li",[n("p",[s._v("MIN_TRANSFER_STRIDE: 默认16, table扩容时, 每个线程最少迁移table的槽位个数。")])]),s._v(" "),n("li",[n("p",[s._v("MOVED: 值为-1, 当Node.hash为MOVED时, 代表着table正在扩容")])]),s._v(" "),n("li",[n("p",[s._v("TREEBIN, 置为-2, 代表此元素后接红黑树。")])]),s._v(" "),n("li",[n("p",[s._v("nextTable: table迁移过程临时变量, 在迁移过程中将元素全部迁移到nextTable上。")])]),s._v(" "),n("li",[n("p",[s._v("sizeCtl: 用来标志table初始化和扩容的,不同的取值代表着不同的含义:")])]),s._v(" "),n("li",[n("ul",[n("li",[n("ul",[n("li",[s._v("0: table还没有被初始化")]),s._v(" "),n("li",[s._v("-1: table正在初始化")]),s._v(" "),n("li",[s._v("小于-1: 实际值为resizeStamp(n)<")]),s._v(" "),n("li",[s._v("大于0: 初始化完成后, 代表table最大存放元素的个数, 默认为0.75*n")])])])])]),s._v(" "),n("li",[n("p",[s._v("transferIndex: table容量从n扩到2n时, 是从索引n->1的元素开始迁移, transferIndex代表当前已经迁移的元素下标")])]),s._v(" "),n("li",[n("p",[s._v("ForwardingNode: 一个特殊的Node节点, 其hashcode=MOVED, 代表着此时table正在做扩容操作。扩容期间, 若table某个元素为null, 那么该元素设置为ForwardingNode, 当下个线程向这个元素插入数据时, 检查hashcode=MOVED, 就会帮着扩容。")])])]),s._v(" "),n("p",[s._v("​    ConcurrentHashMap由三部分构成, table+链表+红黑树, 其中table是一个数组, 既然是数组, 必须要在使用时确定数组的大小, 当table存放的元素过多时, 就需要扩容, 以减少碰撞发生次数, 本文就讲解扩容的过程。扩容检查主要发生在插入元素(putVal())的过程:")]),s._v(" "),n("ul",[n("li",[s._v("一个线程插完元素后, 检查table使用率, 若超过阈值, 调用transfer进行扩容")]),s._v(" "),n("li",[s._v("一个线程插入数据时, 发现table对应元素的hash=MOVED, 那么调用helpTransfer()协助扩容。")])]),s._v(" "),n("h3",{attrs:{id:"协助扩容helptransfer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#协助扩容helptransfer"}},[s._v("#")]),s._v(" 协助扩容helpTransfer")]),s._v(" "),n("p",[s._v("下面是协助扩容的过程")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("final Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) { //table扩容\n        Node<K,V>[] nextTab; int sc;\n        if (tab != null && (f instanceof ForwardingNode) &&\n            (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {\n            // 根据 length 得到一个标识符号\n            int rs = resizeStamp(tab.length);\n            while (nextTab == nextTable && table == tab &&\n                   (sc = sizeCtl) < 0) {//说明还在扩容\n                //判断是否标志发生了变化||  扩容结束了\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                     //达到最大的帮助线程 ||  判断扩容转移下标是否在调整（扩容结束）\n                    sc == rs + MAX_RESIZERS || transferIndex <= 0)\n                    break;\n                // 将 sizeCtl + 1, （表示增加了一个线程帮助其扩容）\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) {\n                    transfer(tab, nextTab);\n                    break;\n                }\n            }\n            return nextTab;\n        }\n        return table;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("主要做了如下事情:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("检查是否扩容完成")])]),s._v(" "),n("li",[n("p",[s._v("对sizeCtrl = sizeCtrl+1, 然后调用transfer()进行真正的扩容。")])])]),s._v(" "),n("h3",{attrs:{id:"扩容transfer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩容transfer"}},[s._v("#")]),s._v(" 扩容transfer")]),s._v(" "),n("p",[s._v("扩容的整体步骤就是新建一个nextTab, size是之前的2倍, 将table上的非空元素迁移到nextTab上面去。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n    int n = tab.length, stride;\n    if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n       // subdivide range，每个线程最少迁移16个槽位，大的话，最多\n        stride = MIN_TRANSFER_STRIDE;\n    // initiating  才开始初始化新的nextTab\n    if (nextTab == null) {\n        try {\n            @SuppressWarnings("unchecked")\n            Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];  //扩容2倍\n            nextTab = nt;\n        } catch (Throwable ex) {      // try to cope with OOME\n            sizeCtl = Integer.MAX_VALUE;\n            return;\n        }\n        nextTable = nextTab;\n        transferIndex = n;//更新的转移下标，\n    }\n    int nextn = nextTab.length;\n    ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n    //是否能够向前推进到下一个周期\n    boolean advance = true;\n    // to ensure sweep before committing nextTab，完成状态，如果是，则结束此方法\n    boolean finishing = false;\n    for (int i = 0, bound = 0;;) {\n        Node<K,V> f; int fh;\n        while (advance) { //取下一个周期\n            int nextIndex, nextBound;\n            //本线程处理的区间范围为[bound, i),范围还没有处理完成，那么就继续处理\n            if (--i >= bound || finishing)\n                advance = false;\n            //目前处理到了这里（从大到小， 下线），开始找新的一轮的区间\n            else if ((nextIndex = transferIndex) <= 0) {\n                i = -1;\n                advance = false;\n            }\n            //这个条件改变的是transferIndex的值，从16变成了1\n            else if (U.compareAndSwapInt\n                     (this, TRANSFERINDEX, nextIndex,\n                     //nextBound 是这次迁移任务的边界，注意，是从后往前\n                      nextBound = (nextIndex > stride ?\n                                   nextIndex - stride : 0))) {\n                bound = nextBound; //一块区间最小桶的下标\n                i = nextIndex - 1; //能够处理的最大桶的下标\n                advance = false;\n            }\n        }\n        if (i < 0 || i >= n || i + n >= nextn) { //每个迁移线程都能达到这里\n            int sc;\n            if (finishing) { //迁移完成\n                nextTable = null;\n                //直接把以前的table丢弃了，上面的MOVE等标志全部丢弃，使用新的\n                table = nextTab;\n                sizeCtl = (n << 1) - (n >>> 1); //扩大2n-0.5n = 1.50n, 更新新的容量阈值\n                return;\n            }\n            //表示当前线程迁移完成了\n            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {\n                 //注意此时sc的值并不等于sizeCtl，上一步，sizeCtl=sizeCtl-1了。这两个对象还是分割的\n                if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)\n                    return;\n                finishing = advance = true;\n                i = n; // recheck before commit\n            }\n        }\n        //如果对应位置为null， 则将ForwardingNode放在对应的地方\n        else if ((f = tabAt(tab, i)) == null)\n            advance = casTabAt(tab, i, null, fwd);\n        else if ((fh = f.hash) == MOVED) //别的线程已经在处理了，再推进一个下标\n            advance = true; // already processed，推动到下一个周期，仍然会检查i与bound是否结束\n        else { //说明位置上有值了，\n            //需要加锁，防止再向里面放值，在放数据时，也会锁住。比如整个table正在迁移，还没有迁移到这个元素，另外一个线程向这个节点插入数据，此时迁移到这里了，会被阻塞住\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {//判断i下标和f是否相同\n                    Node<K,V> ln, hn; //高位桶， 地位桶\n                    if (fh >= 0) {\n                        int runBit = fh & n;//n为2^n, 取余后只能是2^n\n                        Node<K,V> lastRun = f;\n                        ///找到最后一个不和fn相同的节点\n                        for (Node<K,V> p = f.next; p != null; p = p.next) {\n                            int b = p.hash & n;\n                            //只要找到这，之后的取值都是一样的，下次循环时，就不用再循环后面的\n                            if (b != runBit) {\n                                runBit = b;\n                                lastRun = p;\n                            }\n                        }\n                        if (runBit == 0) {\n                            ln = lastRun;\n                            hn = null;\n                        }\n                        else { //比如1，16，32,如果低位%16，那么肯定是0。\n                            hn = lastRun;\n                            ln = null;\n                        }\n                        for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                            int ph = p.hash; K pk = p.key; V pv = p.val;\n                            if ((ph & n) == 0)\n                                 //这样就把相同串的给串起来了\n                                ln = new Node<K,V>(ph, pk, pv, ln);\n                            else\n                                //这样就把相同串的给串起来了，注意这里ln用法，第一个next为null，烦着串起来了。\n                                hn = new Node<K,V>(ph, pk, pv, hn);\n                        }\n                        setTabAt(nextTab, i, ln); //反着给串起来了\n                        setTabAt(nextTab, i + n, hn);\n                        setTabAt(tab, i, fwd);\n                        advance = true;\n                    }\n                    else if (f instanceof TreeBin) {// 如果是红黑树\n                        TreeBin<K,V> t = (TreeBin<K,V>)f;\n                        TreeNode<K,V> lo = null, loTail = null; //也是高低节点\n                        TreeNode<K,V> hi = null, hiTail = null;//也是高低节点\n                        int lc = 0, hc = 0;\n                        for (Node<K,V> e = t.first; e != null; e = e.next) { //中序遍历红黑树\n                            int h = e.hash;\n                            TreeNode<K,V> p = new TreeNode<K,V>\n                                (h, e.key, e.val, null, null);\n                            if ((h & n) == 0) { //0的放低位\n                                //注意这里p.prev = loTail，每一个p都是下一个的prev\n                                if ((p.prev = loTail) == null)\n                                    lo = p; //把头记住\n                                else\n                                    loTail.next = p;  //上一次的p的next是这次的p\n                                loTail = p; //把上次p给记住\n                                ++lc;\n                            }\n                            else { //高位\n                                if ((p.prev = hiTail) == null)\n                                    hi = p; //把尾记住\n                                else\n                                    hiTail.next = p;\n                                hiTail = p;\n                                ++hc;\n                            }\n                        }\n                        ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :// //判断是否需要转化为树\n                            (hc != 0) ? new TreeBin<K,V>(lo) : t; //如果没有高低的话，则部分为两个树\n                        hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n                            (lc != 0) ? new TreeBin<K,V>(hi) : t;\n                        setTabAt(nextTab, i, ln);\n                        setTabAt(nextTab, i + n, hn);\n                        setTabAt(tab, i, fwd);\n                        advance = true;\n                    }\n                }\n            }\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br"),n("span",{staticClass:"line-number"},[s._v("129")]),n("br"),n("span",{staticClass:"line-number"},[s._v("130")]),n("br"),n("span",{staticClass:"line-number"},[s._v("131")]),n("br"),n("span",{staticClass:"line-number"},[s._v("132")]),n("br"),n("span",{staticClass:"line-number"},[s._v("133")]),n("br"),n("span",{staticClass:"line-number"},[s._v("134")]),n("br"),n("span",{staticClass:"line-number"},[s._v("135")]),n("br"),n("span",{staticClass:"line-number"},[s._v("136")]),n("br"),n("span",{staticClass:"line-number"},[s._v("137")]),n("br"),n("span",{staticClass:"line-number"},[s._v("138")]),n("br"),n("span",{staticClass:"line-number"},[s._v("139")]),n("br"),n("span",{staticClass:"line-number"},[s._v("140")]),n("br"),n("span",{staticClass:"line-number"},[s._v("141")]),n("br"),n("span",{staticClass:"line-number"},[s._v("142")]),n("br"),n("span",{staticClass:"line-number"},[s._v("143")]),n("br"),n("span",{staticClass:"line-number"},[s._v("144")]),n("br"),n("span",{staticClass:"line-number"},[s._v("145")]),n("br"),n("span",{staticClass:"line-number"},[s._v("146")]),n("br"),n("span",{staticClass:"line-number"},[s._v("147")]),n("br"),n("span",{staticClass:"line-number"},[s._v("148")]),n("br"),n("span",{staticClass:"line-number"},[s._v("149")]),n("br"),n("span",{staticClass:"line-number"},[s._v("150")]),n("br")])]),n("p",[s._v("其中有两个变量需要了解下:")]),s._v(" "),n("ul",[n("li",[s._v("advance: 表示是否可以向下一个轮元素进行迁移。")]),s._v(" "),n("li",[s._v("finishing: table所有元素是否迁移完成。")])]),s._v(" "),n("p",[s._v("大致做了如下事情:")]),s._v(" "),n("ul",[n("li",[s._v("确定线程每轮迁移元素的个数stride, 比如进来一个线程, 确定扩容table下标为(a,b]之间元素, 下一个线程扩容(b,c]。这里对b-a或者c-b也是由最小值16限制的。 也就是说每个线程最少扩容连续16个table的元素。而标志当前迁移的下标保存在transferIndex里面。")]),s._v(" "),n("li",[s._v("检查nextTab是否完成初始化, 若没有的话, 说明是第一个迁移的线程, 先初始化nextTab, size是之前table的2倍。")]),s._v(" "),n("li",[s._v("进入while循环查找本轮迁移的table下标元素区间, 保存在(bound, i]中, 注意这里是半开半闭区间。")]),s._v(" "),n("li",[s._v("从i -> bound开始遍历table中每个元素, 这里是从大到小遍历的:")])]),s._v(" "),n("ol",[n("li",[s._v("若该元素为空, 则向该元素标写入ForwardingNode, 然后检查下一个元素。 当别的线程向这个元素插入数据时, 根据这个标志符知道了table正在被别的线程迁移, 在putVal中就会调用helpTransfer帮着迁移。")]),s._v(" "),n("li",[s._v("若该元素的hash=MOVED, 代表次table正在处于迁移之中, 跳过。 按道理不会跑着这里的。")]),s._v(" "),n("li",[s._v("否则说明该元素跟着的是一个链表或者是个红黑树结构, 若hash>0, 则说明是个链表, 若f instanceof TreeBin, 则说明是个红黑树结构。")])]),s._v(" "),n("ul",[n("li",[s._v("链表迁移原理如下: 遍历链表每个节点。 若节点的f.hash&n==0成立, 则将节点放在i, 否则, 则将节点放在n+i上面。")])]),s._v(" "),n("p",[s._v("​    迁移前, 对该元素进行加锁。 遍历链表时, 这里使用lastRun变量, 保留的是上次hash的值, 假如整个链表全部节点f.hash&n==0, 那么第二次遍历, 只要找到lastRun的值, 那么认为之后的节点都是相同值, 减少了不必要的f.hash&n取值。遍历完所有的节点后, 此时形成了两条链表, ln存放的是f.hash&n=0的节点, hn存放的是非0的节点, 然后将ln存放在nextTable第i元素的位置, n+i存放在n+i的位置。")]),s._v(" "),n("p",[s._v("蓝色节点代表:f.hash&n==0, 绿色节点代表f.hash&n!=0。 最终蓝色的节点仍在存放在(0, n)范围里, 绿的节点存放在(n, 2n-1)的范围之内。")]),s._v(" "),n("ul",[n("li",[s._v("迁移链表和红黑树的原理是一样的, 在红黑树中, 我们记录了每个红黑树的first(这个节点不是hash最小的节点)和每个节点的next, 根据这两个元素, 我们可以访问红黑树所有的元素, 红黑树此时也是一个链表, 红黑树和链表迁移的过程一样。红黑树根据迁移后拆分成了hn和ln, 根据链表长度确定链表是红黑树结构还是退化为了链表。")])]),s._v(" "),n("p",[s._v("4.如何确定table所有元素迁移完成:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//表示当前线程迁移完成了\nif (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {\n     //注意此时sc的值并不等于sizeCtl，上一步，sizeCtl=sizeCtl-1了。这两个对象还是分割的\n    if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)\n        return;\n    finishing = advance = true;\n    i = n; // recheck before commit\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("第一个线程开始迁移时, 设置了sizeCtl= resizeStamp(n) << RESIZE_STAMP_SHIFT+2, 此后每个新来帮助迁移的线程都会sizeCtl=sizeCtl+1, 完成迁移后,sizeCtl-1, 那么只要有一个线程还处于迁移状态, 那么sizeCtl> resizeStamp(n) << RESIZE_STAMP_SHIFT+2一直成立, 当只有最后一个线程完成迁移之后, 等式两边才成立。 可能大家会有疑问, 第一个线程并没有对sizeCtl=sizeCtl+1, 此时完成后再减一, 那不是不相等了吗, 注意这里, sizeCtl在减一前, 将值赋给了sc, 等式比较的是sc。")]),s._v(" "),n("p",[n("strong",[s._v("总结")])]),s._v(" "),n("p",[s._v("table扩容过程就是将table元素迁移到新的table上, 在元素迁移时, 可以并发完成, 加快了迁移速度, 同时不至于阻塞线程。所有元素迁移完成后, 旧的table直接丢失, 直接使用新的table。")]),s._v(" "),n("h2",{attrs:{id:"copyonwrite机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyonwrite机制"}},[s._v("#")]),s._v(" CopyOnWrite机制")]),s._v(" "),n("p",[s._v("核心思想：读写分离，空间换时间，避免为保证并发安全导致的激烈的锁竞争。")]),s._v(" "),n("p",[s._v("划关键点：")]),s._v(" "),n("blockquote",[n("p",[s._v("1、CopyOnWrite适用于读多写少的情况，最大程度的提高读的效率；")]),s._v(" "),n("p",[s._v("2、CopyOnWrite是最终一致性，在写的过程中，原有的读的数据是不会发生更新的，只有新的读才能读到最新数据；")]),s._v(" "),n("p",[s._v("3、如何使其他线程能够及时读到新的数据，需要使用volatile变量；")]),s._v(" "),n("p",[s._v("4、写的时候不能并发写，需要对写操作进行加锁；")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/lock/49.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("源码原理")])]),s._v(" "),n("p",[s._v("写时复制")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/*\n *   添加元素api\n */\npublic boolean add(E e) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        Object[] newElements = Arrays.copyOf(elements, len + 1); //复制一个array副本\n        newElements[len] = e; //往副本里写入\n        setArray(newElements); //副本替换原本，成为新的原本\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n//读api\npublic E get(int index) {\n    return get(getArray(), index); //无锁\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h2",{attrs:{id:"问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[s._v("#")]),s._v(" 问题")]),s._v(" "),n("blockquote",[n("p",[s._v("HashMap")])]),s._v(" "),n("p",[s._v("1.7-hashtable = 数组（基础） + 链表")]),s._v(" "),n("p",[s._v("（>=）1.8 = 数组 + 链表 + 红黑树")]),s._v(" "),n("p",[s._v("HashMap->数组的大小")]),s._v(" "),n("p",[s._v("new HashMap（）；如果不写构造参数，默认大小16")]),s._v(" "),n("p",[s._v("如果说：写了初始容量：11 ？hashmap的容量就是11？")]),s._v(" "),n("p",[s._v("hashmap的get，put操作时间复杂度O(1)")]),s._v(" "),n("p",[s._v("key.hashCode = 不确定 - 有符号的整型值")]),s._v(" "),n("p",[s._v("key.hashCode % 16 = table.lenth = [0-15]  = index = 3;")]),s._v(" "),n("p",[s._v("array[index] = value;")]),s._v(" "),n("p",[s._v("数组所有的元素位是否能够100%被利用起来？")]),s._v(" "),n("p",[s._v("不一定，hash碰")]),s._v(" "),n("p",[s._v("引入链表结构解决hash冲突，采用头部插入链表法，链表时间复杂度O(n)")]),s._v(" "),n("p",[s._v("hash并不是用取模计算index，而是用位运算！")]),s._v(" "),n("p",[s._v("效率：位运算>%")]),s._v(" "),n("p",[s._v("并没有说hashmap的容量一定是16，")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** * The default initial capacity - MUST be a power of two. */")]),s._v("必须是"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的指数幂？\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("roundUpToPowerOf2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，强型将非"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的指数次幂的数值转化成"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的指数次幂\n怎么转化？\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、必须最接近size，"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、必须大于"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("size，\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、是"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的指数次幂\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\nsize "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("，capacity "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("\n\n为什么一定要转成"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的指数次幂？\n计算索引："),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexFor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexFor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" h"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  key.hashCode % table.lenth")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" h "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lenth"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nh "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0111")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0010")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0001")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0101")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0010")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1010")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("\nbit位运算："),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1815")]),s._v("ms\nmod取模运算："),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("22282")]),s._v("\n效率差"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("倍\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),s._v("扩容，\n当前hashmap存了多少element，size"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v("threshold\nthreshold扩容阈值 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" capacity "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" 扩容阈值比率 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.75")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.75")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n扩容怎么扩？\n扩容为原来的"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("倍。\n转移数据\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("transfer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Entry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" newTable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" rehash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" newCapacity "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newTable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Entry")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rehash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n                    e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hash "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//再一次进行hash计算？")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexFor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newCapacity"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newTable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                newTable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                e "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n链表成环，死锁问题\n\nhash扩容，有个加载因子？loadfactor "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.75")]),s._v("为什么是"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.75")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n牛顿二项式：基于空间与时间的折中考虑"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),s._v("\n\n引入红黑树！\n容量"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("才会链表转红黑树，否则优先扩容\n只有等链表过长，阈值设置"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TREEIFY_THRESHOLD")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("，不是代表链表长度，链表长度"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("链表"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("的时候转红黑树\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" loHead "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" loTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" hiHead "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hiTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hash "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" oldCap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//yangguo.hashcode & 16 = 0，用低位指针")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                loHead "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n                loTail"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            loTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n             "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//yangguo.hashcode & 16 》 0 高位指针")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hiTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                hiHead "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n                hiTail"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            hiTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    loTail"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    newTab"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" loHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("，移到新的数组上的同样的index位置\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hiTail "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    hiTail"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    newTab"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" oldCap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hiHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//index 3+16 = 19")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n完全绕开rehash，要满足高低位移动，必须数组容量是"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的幂次方\n\n    \n分库分表，在线扩容\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("台master tuling（"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("） "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("台\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br")])]),n("h2",{attrs:{id:"图片附录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图片附录"}},[s._v("#")]),s._v(" 图片附录")]),s._v(" "),n("h3",{attrs:{id:"skip-list-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#skip-list-map"}},[s._v("#")]),s._v(" Skip_list_map")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/Skip_list_map.gif",alt:"Skip_list_map"}})])])}),[],!1,null,null,null);n.default=e.exports}}]);