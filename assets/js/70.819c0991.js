(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{437:function(e,t,a){"use strict";a.r(t);var s=a(5),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"课程内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程内容"}},[e._v("#")]),e._v(" 课程内容")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Dubbo SPI案例演示")])]),e._v(" "),t("li",[t("p",[e._v("Dubbo SPI主流程源码解析")])]),e._v(" "),t("li",[t("p",[e._v("Dubbo中的依赖注入源码解析")])]),e._v(" "),t("li",[t("p",[e._v("Dubbo中的AOP实现源码解析")])]),e._v(" "),t("li",[t("p",[e._v("Dubbo中的Adaptive机制源码解析")])])]),e._v(" "),t("p",[e._v("dubbo源码项目clone地址：https://gitee.com/archguide/dubbovip.git")]),e._v(" "),t("h2",{attrs:{id:"笔记更新地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#笔记更新地址"}},[e._v("#")]),e._v(" 笔记更新地址：")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497?#",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497"),t("OutboundLink")],1),e._v("（密码：kyys） 《Dubbo笔记》")]),e._v(" "),t("h2",{attrs:{id:"dubbo-spi-架构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-spi-架构图"}},[e._v("#")]),e._v(" Dubbo SPI 架构图")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/dubbo/7.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ExtensionLoader<Protocol> extensionLoader = ExtensionLoader.getExtensionLoader(Protocol.class);\nProtocol http = extensionLoader.getExtension("dubbo");\nSystem.out.println(http);\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v('上面这个Demo就是Dubbo常见的写法，表示获取"dubbo"对应的Protocol扩展点。Protocol是一个接口。')]),e._v(" "),t("p",[e._v("在ExtensionLoader类的内部有一个static的ConcurrentHashMap，用来缓存"),t("strong",[e._v("某个接口类型"),t("strong",[t("strong",[e._v("所对应的")])]),e._v("ExtensionLoader实例")])]),e._v(" "),t("h2",{attrs:{id:"extensionloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extensionloader"}},[e._v("#")]),e._v(" ExtensionLoader")]),e._v(" "),t("p",[e._v("ExtensionLoader表示某个接口的扩展点加载器，可以用来加载某个扩展点实例。")]),e._v(" "),t("p",[e._v("在ExtensionLoader中除开有上文的static的Map外，还有两个非常重要的属性：")]),e._v(" "),t("ol",[t("li",[e._v("**Class<?> type：**表示当前ExtensionLoader实例是哪个接口的扩展点加载器")]),e._v(" "),t("li",[e._v("**ExtensionFactory objectFactory：**扩展点工厂（对象工厂），可以获得某个对象")])]),e._v(" "),t("p",[t("strong",[e._v("ExtensionLoader")]),e._v("和"),t("strong",[e._v("ExtensionFactory")]),e._v("的区别在于：")]),e._v(" "),t("ol",[t("li",[e._v("ExtensionLoader最终所得到的对象是Dubbo SPI机制产生的")]),e._v(" "),t("li",[e._v("ExtensionFactory最终所得到的对象可能是Dubbo SPI机制所产生的，也可能是从Spring容器中所获得的对象")])]),e._v(" "),t("p",[e._v("在"),t("strong",[e._v("ExtensionLoader")]),e._v("中有三个常用的方法：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v('**getExtension("dubbo")：**表示获取名字为dubbo的扩展点实例')])]),e._v(" "),t("li",[t("p",[e._v("**getAdaptiveExtension()：**表示获取一个自适应的扩展点实例")])]),e._v(" "),t("li",[t("p",[e._v("**getActivateExtension(URL url, String[] values, String group)：**表示一个可以被url激活的扩展点实例，后文详细解释")])])]),e._v(" "),t("p",[e._v("其中，什么是"),t("strong",[e._v("自适应扩展点实例")]),e._v("？它其实就是当前这个接口的一个"),t("strong",[e._v("代理对象。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ExtensionLoader<Protocol> extensionLoader = ExtensionLoader.getExtensionLoader(Protocol.class);\nProtocol protocol = extensionLoader.getExtension("dubbo");\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("当我们调用上述代码，我们会将得到一个DubboProtocol的实例对象，但在getExtension()方法中，Dubbo会对DubboProtocol对象进行**依赖注入（也就是自动给属性赋值，属性的类型为一个接口，记为A接口），**这个时候，对于Dubbo来说它并不知道该给这个属性赋什么值，换句话说，Dubbo并不知道在进行依赖注入时该找一个什么的的扩展点对象给这个属性，这时就会预先赋值一个A接口的自适应扩展点实例，也就是A接口的一个代理对象。")]),e._v(" "),t("p",[e._v("后续，在A接口的代理对象被真正用到时，才会结合URL信息找到真正的A接口对应的扩展点实例进行调用。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/dubbo/5.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"getextension-string-name-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getextension-string-name-方法"}},[e._v("#")]),e._v(" getExtension(String name)方法")]),e._v(" "),t("p",[e._v("在调用getExtension去获取一个扩展点实例后，会对实例进行缓存，下次再获取同样名字的扩展点实例时就会从缓存中拿了。")]),e._v(" "),t("h2",{attrs:{id:"createextension-string-name-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#createextension-string-name-方法"}},[e._v("#")]),e._v(" createExtension(String name)方法")]),e._v(" "),t("p",[e._v("在调用createExtension(String name)方法去创建一个扩展点实例时，要经过以下几个步骤：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("根据name找到对应的扩展点实现类")])]),e._v(" "),t("li",[t("p",[e._v("根据实现类生成一个实例，把"),t("strong",[e._v("实现类和对应生成的实例")]),e._v("进行缓存")])]),e._v(" "),t("li",[t("p",[e._v("对生成出来的实例进行依赖注入（给实例的属性进行赋值）")])]),e._v(" "),t("li",[t("p",[e._v("对依赖注入后的实例进行AOP（Wrapper）,把当前接口类的所有的Wrapper全部一层一层包裹在实例对象上，没包裹个Wrapper后，也会对Wrapper对象进行依赖注入")])]),e._v(" "),t("li",[t("p",[e._v("返回最终的Wrapper对象")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/dubbo/6.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"getextensionclasses"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getextensionclasses"}},[e._v("#")]),e._v(" getExtensionClasses")]),e._v(" "),t("p",[e._v("getExtensionClasses()是用来加载当前接口所有的扩展点实现类的，返回一个Map。之后可以从这个Map中按照指定的name获取对应的扩展点实现类。")]),e._v(" "),t("p",[e._v("当把当前接口的所有扩展点实现类都加载出来后也会进行缓存，下次需要加载时直接拿缓存中的。")]),e._v(" "),t("p",[e._v("Dubbo在加载一个接口的扩展点时，思路是这样的：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("根据接口的全限定名去**META-INF/dubbo/"),t("strong",[t("strong",[e._v("internal")])]),e._v("/**目录下寻找对应的文件，调用loadResource方法进行加载")])]),e._v(" "),t("li",[t("p",[e._v("根据接口的全限定名去**META-INF/dubbo****/**目录下寻找对应的文件，调用loadResource方法进行加载")])]),e._v(" "),t("li",[t("p",[e._v("根据接口的全限定名去**META-INF/services****/**目录下寻找对应的文件，调用loadResource方法进行加载")])])]),e._v(" "),t("p",[e._v("这里其实会设计到老版本兼容的逻辑，不解释了。")]),e._v(" "),t("h3",{attrs:{id:"loadresource方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loadresource方法"}},[e._v("#")]),e._v(" loadResource方法")]),e._v(" "),t("p",[e._v('loadResource方法就是完成对文件内容的解析，按行进行解析，会解析出**"="**两边的内容，"="左边的内容就是扩展点的name，右边的内容就是扩展点实现类，并且会利用ExtensionLoader类的类加载器来加载扩展点实现类。')]),e._v(" "),t("p",[e._v("然后调用loadClass方法对name和扩展点实例进行详细的解析，并且最终把他们放到Map中去。")]),e._v(" "),t("h3",{attrs:{id:"loadclass方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loadclass方法"}},[e._v("#")]),e._v(" loadClass方法")]),e._v(" "),t("p",[e._v("loadClass方法会做如下几件事情：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("当前扩展点实现类上是否存在@Adaptive注解，如果存在则把该类认为是当前接口的默认自适应类（接口代理类），并把该类存到cachedAdaptiveClass属性上。")])]),e._v(" "),t("li",[t("p",[e._v("当前扩展点实现是否是一个当前接口的一个Wrapper类，如果判断的？就是看当前类中是否存在一个构造方法，该构造方法只有一个参数，参数类型为接口类型，如果存在这一的构造方法，那么这个类就是该接口的Wrapper类，如果是，则把该类添加到cachedWrapperClasses中去， cachedWrapperClasses是一个set。")])]),e._v(" "),t("li",[t("p",[e._v("如果不是自适应类，或者也不是Wrapper类，则判断是有存在name，如果没有name，则报错。")])]),e._v(" "),t("li",[t("p",[e._v("如果有多个name，则判断一下当前扩展点实现类上是否存在@Activate注解，如果存在，则把该类添加到cachedActivates中，cachedWrapperClasses是一个map**。**")])]),e._v(" "),t("li",[t("p",[e._v("最后，遍历多个name，把每个name和对应的实现类存到extensionClasses中去，extensionClasses就是上文所提到的map。")])])]),e._v(" "),t("p",[e._v("至此，加载类就走完了。")]),e._v(" "),t("p",[e._v("回到createExtension(String name)方法中的逻辑，当前这个接口的所有扩展点实现类都扫描完了之后，就可以根据用户所指定的名字，找到对应的实现类了，然后进行实例化，然后进行IOC(依赖注入)和AOP。")]),e._v(" "),t("h3",{attrs:{id:"dubbo中的ioc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dubbo中的ioc"}},[e._v("#")]),e._v(" Dubbo中的IOC")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("根据当前实例的类，找到这个类中的setter方法，进行依赖注入")])]),e._v(" "),t("li",[t("p",[e._v("先分析出setter方法的参数类型pt")])]),e._v(" "),t("li",[t("p",[e._v("在截取出setter方法所对应的属性名property")])]),e._v(" "),t("li",[t("p",[e._v("调用"),t("strong",[e._v("objectFactory")]),e._v(".getExtension(pt, property)得到一个对象，这里就会从Spring容器或通过DubboSpi机制得到一个对象，比较特殊的是，如果是通过DubboSpi机制得到的对象，是pt这个类型的一个自适应对象(代理对象)。")])]),e._v(" "),t("li",[t("p",[e._v("再反射调用setter方法进行注入")])])]),e._v(" "),t("h3",{attrs:{id:"dubbo中的aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dubbo中的aop"}},[e._v("#")]),e._v(" Dubbo中的AOP")]),e._v(" "),t("p",[e._v("dubbo中也实现了一套非常简单的AOP，就是利用Wrapper，如果一个接口的扩展点中包含了多个Wrapper类，那么在实例化完某个扩展点后，就会利用这些Wrapper类对这个实例进行包裹，比如：现在有一个DubboProtocol的实例，同时对于Protocol这个接口还有很多的Wrapper，比如ProtocolFilterWrapper、ProtocolListenerWrapper，那么，当对DubboProtocol的实例完成了IOC之后，就会先调用new ProtocolFilterWrapper(DubboProtocol实例)生成一个新的Protocol的实例，再对此实例进行IOC，完了之后，会再调用new ProtocolListenerWrapper(ProtocolFilterWrapper实例)生成一个新的Protocol的实例，然后进行IOC，从而完成DubboProtocol实例的AOP。")]),e._v(" "),t("h2",{attrs:{id:"自适应扩展点补充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自适应扩展点补充"}},[e._v("#")]),e._v(" 自适应扩展点补充")]),e._v(" "),t("p",[e._v("上面提到的自适应扩展点对象，也就是某个接口的代理对象是通过Dubbo内部生成代理类，然后生成代理对象的。")]),e._v(" "),t("p",[e._v("额外的，在Dubbo中还设计另外一种机制来生成自适应扩展点，这种机制就是可以通过@Adaptive注解来指定某个类为某个接口的代理类，如果指定了，Dubbo在生成自适应扩展点对象时实际上生成的就是@Adaptive注解所注解的类的实例对象。")]),e._v(" "),t("p",[e._v("如果是由Dubbo默认实现的，那么我们就看看Dubbo是如何生成代理类的。")]),e._v(" "),t("h3",{attrs:{id:"createadaptiveextensionclass方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#createadaptiveextensionclass方法"}},[e._v("#")]),e._v(" createAdaptiveExtensionClass方法")]),e._v(" "),t("p",[e._v("createAdaptiveExtensionClass方法就是Dubbo中默认生成Adaptive类实例的逻辑。说白了，这个实例就是当前这个接口的一个代理对象。比如下面的代码：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ExtensionLoader<Protocol> extensionLoader = ExtensionLoader.getExtensionLoader(Protocol.class);\nProtocol protocol = extensionLoader.getAdaptiveExtension();\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("这个代码就是Protocol接口的一个代理对象，那么代理逻辑就是在"),t("strong",[e._v("new")]),e._v(" AdaptiveClassCodeGenerator("),t("strong",[e._v("type")]),e._v(", "),t("strong",[e._v("cachedDefaultName")]),e._v(").generate()方法中。")]),e._v(" "),t("ol",[t("li",[e._v("type就是接口")]),e._v(" "),t("li",[e._v("cacheDefaultName就是该接口默认的扩展点实现的名字")])]),e._v(" "),t("p",[e._v("看个例子，Protocol接口的Adaptive类：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('package org.apache.dubbo.rpc;\nimport org.apache.dubbo.common.extension.ExtensionLoader;\npublic class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {\n    \n\tpublic void destroy()  {\n\t\tthrow new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");\n\t}\n\n    public int getDefaultPort()  {\n\t\tthrow new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");\n\t}\n    \n\tpublic org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {\n\t\tif (arg0 == null) \n            throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");\n\t\tif (arg0.getUrl() == null) \n            throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");\n\t\t\n        org.apache.dubbo.common.URL url = arg0.getUrl();\n\t\t\n        String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );\n\n        if(extName == null) \n            throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");\n        \n        org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);\n \t\t\n        return extension.export(arg0);\n\t}\n\n    public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {\n\n        if (arg1 == null) throw new IllegalArgumentException("url == null");\n\n        org.apache.dubbo.common.URL url = arg1;\n\n        String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );\n\n        if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");\n\n        org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);\n\n        return extension.refer(arg0, arg1);\n\t}\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br"),t("span",{staticClass:"line-number"},[e._v("42")]),t("br"),t("span",{staticClass:"line-number"},[e._v("43")]),t("br"),t("span",{staticClass:"line-number"},[e._v("44")]),t("br"),t("span",{staticClass:"line-number"},[e._v("45")]),t("br")])]),t("p",[e._v("可以看到，Protocol接口中有四个方法，但是只有export和refer两个方法进行代理。为什么？因为Protocol接口中在export方法和refer方法上加了@Adaptive注解。但是，不是只要在方法上加了@Adaptive注解就可以进行代理，还有其他条件，比如：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("该方法如果是无参的，那么则会报错")])]),e._v(" "),t("li",[t("p",[e._v("该方法有参数，可以有多个，并且其中某个参数类型是URL，那么则可以进行代理")])]),e._v(" "),t("li",[t("p",[e._v("该方法有参数，可以有多个，但是没有URL类型的参数，那么则不能进行代理")])]),e._v(" "),t("li",[t("p",[e._v("该方法有参数，可以有多个，没有URL类型的参数，但是如果这些参数类型，对应的类中存在getUrl方法（返回值类型为URL），那么也可以进行代理")])])]),e._v(" "),t("p",[e._v("所以，可以发现，某个接口的Adaptive对象，在调用某个方法时，是通过该方法中的URL参数，通过调用ExtensionLoader.getExtensionLoader(com.luban.Car.class).getExtension(extName);得到一个扩展点实例，然后调用该实例对应的方法。")]),e._v(" "),t("h2",{attrs:{id:"activate扩展点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#activate扩展点"}},[e._v("#")]),e._v(" Activate扩展点")]),e._v(" "),t("p",[e._v("上文说到，每个扩展点都有一个name，通过这个name可以获得该name对应的扩展点实例，但是有的场景下，希望一次性获得多个扩展点实例")]),e._v(" "),t("h3",{attrs:{id:"demo-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-2"}},[e._v("#")]),e._v(" demo")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ExtensionLoader<Filter> extensionLoader = ExtensionLoader.getExtensionLoader(Filter.class);\nURL url = new URL("http://", "localhost", 8080);\nurl = url.addParameter("cache", "test");\n\nList<Filter> activateExtensions = extensionLoader.getActivateExtension(url, \n                                                      new String[]{"validation"},\n                                                      CommonConstants.CONSUMER);\nfor (Filter activateExtension : activateExtensions) {\n\tSystem.out.println(activateExtension);\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("会找到5个Filter")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("org.apache.dubbo.rpc.filter.ConsumerContextFilter@4566e5bd\norg.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter@1ed4004b\norg.apache.dubbo.monitor.support.MonitorFilter@ff5b51f\norg.apache.dubbo.cache.filter.CacheFilter@25bbe1b6\norg.apache.dubbo.validation.filter.ValidationFilter@5702b3b1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("前三个是通过CommonConstants.CONSUMER找到的")]),e._v(" "),t("p",[e._v("CacheFilter是通过url中的参数找到的")]),e._v(" "),t("p",[e._v("ValidationFilter是通过指定的name找到的")]),e._v(" "),t("p",[e._v("在一个扩展点类上，可以添加@Activate注解，这个注解的属性有：")]),e._v(" "),t("ol",[t("li",[e._v("String[] group()：表示这个扩展点是属于哪组的，这里组通常分为PROVIDER和CONSUMER，表示该扩展点能在服务提供者端，或者消费端使用")]),e._v(" "),t("li",[e._v("String[] value()：表示的是URL中的某个参数key，当利用getActivateExtension方法来寻找扩展点时，如果传入的url中包含的参数的所有key中，包括了当前扩展点中的value值，那么则表示当前url可以使用该扩展点。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);