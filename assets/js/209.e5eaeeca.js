(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{551:function(a,t,s){"use strict";s.r(t);var e=s(1),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("U2FsdGVkX18D7hVC9oYgPCazMvy0hSpBWqROVDRBTicUk4yl71UWnVIn7Hk3Cs0Z\nEXD9Ogw+PNo60nIym4jaYoofEpmsANo+cZ7AmPa37FleE2jFwgn62eTw8PA9IN23\n7vq9ryOEjGlrMX9JHPhAgJ8JxtmX1JHtgawAHjNzoQ==\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h2",{attrs:{id:"原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子操作"}},[a._v("#")]),a._v(" 原子操作")]),a._v(" "),t("p",[a._v("原子（atom）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。在多处理器上实现原子操作就变得有点复杂。本文让我们一起来聊一聊在Inter处理器和Java里是如何实现原子操作的。")]),a._v(" "),t("h2",{attrs:{id:"相关术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关术语"}},[a._v("#")]),a._v(" 相关术语")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[t("strong",[a._v("术语名称")])]),a._v(" "),t("th",[t("strong",[a._v("英文")])]),a._v(" "),t("th",[t("strong",[a._v("解释")])])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("缓存行")]),a._v(" "),t("td",[a._v("Cache line")]),a._v(" "),t("td",[a._v("缓存的最小操作单位")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("比较并交换")]),a._v(" "),t("td",[a._v("Compare and Swap")]),a._v(" "),t("td",[a._v("CAS操作需要输入两个数值，一个旧值（期望操作前的值）和一个新值，在操作期间先"),t("strong",[a._v("比较")]),a._v("下在旧值有没有发生变化，如果没有发生变化，才"),t("strong",[a._v("交换")]),a._v("成新值，发生了变化则不交换。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("CPU流水线")]),a._v(" "),t("td",[a._v("CPU pipeline")]),a._v(" "),t("td",[a._v("CPU流水线的工作方式就象工业生产上的装配流水线，在CPU中由5~6个不同功能的电路单元组成一条指令处理流水线，然后将一条X86指令分成5~6步后再由这些电路单元分别执行，这样就能实现在一个CPU时钟周期完成一条指令，因此提高CPU的运算速度。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("内存顺序冲突")]),a._v(" "),t("td",[t("strong",[a._v("Memory order violation")])]),a._v(" "),t("td",[a._v("内存顺序冲突一般是由假共享引起，假共享是指多个CPU同时修改同一个缓存行的不同部分而引起其中一个CPU的操作无效，当出现这个内存顺序冲突时，CPU必须清空流水线。")])])])]),a._v(" "),t("h2",{attrs:{id:"处理器如何实现原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理器如何实现原子操作"}},[a._v("#")]),a._v(" 处理器如何实现原子操作")]),a._v(" "),t("p",[a._v("32位IA-32处理器使用"),t("strong",[a._v("基于对缓存加锁或总线加锁")]),a._v("的方式来实现多处理器之间的原子操作。")]),a._v(" "),t("h3",{attrs:{id:"处理器自动保证基本内存操作的原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理器自动保证基本内存操作的原子性"}},[a._v("#")]),a._v(" 处理器自动保证基本内存操作的原子性")]),a._v(" "),t("p",[t("strong",[a._v("首先处理器会自动保证基本的内存操作的原子性")]),a._v("。处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。奔腾6和最新的处理器能自动保证单处理器对同一个缓存行里进行16/32/64位的操作是原子的，但是复杂的内存操作处理器不能自动保证其原子性，比如跨总线宽度，跨多个缓存行，跨页表的访问。但是"),t("strong",[a._v("处理器提供总线锁定和缓存锁定两个机制")]),a._v("来保证复杂内存操作的原子性。")]),a._v(" "),t("h3",{attrs:{id:"使用总线锁保证原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用总线锁保证原子性"}},[a._v("#")]),a._v(" 使用总线锁保证原子性")]),a._v(" "),t("p",[t("strong",[a._v("第一个机制是通过总线锁保证原子性")]),a._v("。如果多个处理器同时对共享变量进行读改写（i++就是经典的读改写操作）操作，那么共享变量就会被多个处理器同时进行操作，这样读改写操作就不是原子的，操作完之后共享变量的值会和期望的不一致，举个例子：如果i=1,我们进行两次i++操作，我们期望的结果是3，但是有可能结果是2。如下图")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/30.png",alt:""}})]),a._v(" "),t("p",[a._v("原因是有可能多个处理器同时从各自的缓存中读取变量i，分别进行加一操作，然后分别写入系统内存当中。那么想要保证读改写共享变量的操作是原子的，就必须保证CPU1读改写共享变量的时候，CPU2不能操作缓存了该共享变量内存地址的缓存。")]),a._v(" "),t("p",[t("strong",[a._v("处理器使用总线锁就是来解决这个问题的")]),a._v("。所谓总线锁就是使用处理器提供的一个LOCK＃信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住,那么该处理器可以独占使用共享内存。")]),a._v(" "),t("h3",{attrs:{id:"使用缓存锁保证原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用缓存锁保证原子性"}},[a._v("#")]),a._v(" 使用缓存锁保证原子性")]),a._v(" "),t("p",[t("strong",[a._v("第二个机制是通过缓存锁定保证原子性")]),a._v("。在同一时刻我们只需保证对某个内存地址的操作是原子性即可，但总线锁定把CPU和内存之间通信锁住了，这使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁定的开销比较大，最近的处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。")]),a._v(" "),t("p",[a._v("频繁使用的内存会缓存在处理器的L1，L2和L3高速缓存里，那么原子操作就可以直接在处理器内部缓存中进行，并不需要声明总线锁，在奔腾6和最近的处理器中可以使用“缓存锁定”的方式来实现复杂的原子性。所谓“缓存锁定”就是如果缓存在处理器缓存行中内存区域在LOCK操作期间被锁定，当它执行锁操作回写内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时会起缓存行无效，在例1中，当CPU1修改缓存行中的i时使用缓存锁定，那么CPU2就不能同时缓存了i的缓存行。")]),a._v(" "),t("p",[t("strong",[a._v("但是有两种情况下处理器不会使用缓存锁定")]),a._v("。第一种情况是：当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行（cache line），则处理器会调用总线锁定。第二种情况是：有些处理器不支持缓存锁定。对于Inter486和奔腾处理器,就算锁定的内存区域在处理器的缓存行中也会调用总线锁定。")]),a._v(" "),t("p",[a._v("以上两个机制我们可以通过Inter处理器提供了很多LOCK前缀的指令来实现。比如位测试和修改指令BTS，BTR，BTC，交换指令XADD，CMPXCHG和其他一些操作数和逻辑指令，比如ADD（加），OR（或）等，被这些指令操作的内存区域就会加锁，导致其他处理器不能同时访问它。")]),a._v(" "),t("h2",{attrs:{id:"java当中如何实现原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java当中如何实现原子操作"}},[a._v("#")]),a._v(" Java当中如何实现原子操作")]),a._v(" "),t("p",[t("strong",[a._v("在java中可以通过锁和循环CAS的方式来实现原子操作")]),a._v("。")]),a._v(" "),t("p",[a._v("JVM中的CAS操作正是利用了上文中提到的处理器提供的CMPXCHG指令实现的。")]),a._v(" "),t("p",[a._v("自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止，具体的类可以参见juc下的atomic包内的原子类。")]),a._v(" "),t("h2",{attrs:{id:"atomic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomic"}},[a._v("#")]),a._v(" Atomic")]),a._v(" "),t("p",[a._v("在Atomic包里一共有12个类，四种原子更新方式，分别是"),t("strong",[a._v("原子更新基本类型，原子更新数组，原子更新引用和原子更新字段")]),a._v("。")]),a._v(" "),t("p",[a._v("Atomic包里的类基本都是使用Unsafe实现的包装类。")]),a._v(" "),t("p",[a._v("**基本类：**AtomicInteger、AtomicLong、AtomicBoolean；")]),a._v(" "),t("p",[a._v("**引用类型：**AtomicReference、AtomicReference的ABA实例、AtomicStampedRerence、AtomicMarkableReference；")]),a._v(" "),t("p",[a._v("**数组类型：**AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray")]),a._v(" "),t("p",[t("strong",[a._v("属性原子修改器（Updater）")]),a._v("：AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater")]),a._v(" "),t("h3",{attrs:{id:"原子更新基本类型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子更新基本类型类"}},[a._v("#")]),a._v(" 原子更新基本类型类")]),a._v(" "),t("p",[a._v("用于通过原子的方式更新基本类型，Atomic包提供了以下三个类：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[a._v("AtomicBoolean：原子更新布尔类型。")])]),a._v(" "),t("li",[t("p",[a._v("AtomicInteger：原子更新整型。")])]),a._v(" "),t("li",[t("p",[a._v("AtomicLong：原子更新长整型。")])])])]),a._v(" "),t("p",[a._v("AtomicInteger的常用方法如下：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("int addAndGet(int delta) ：以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果")]),a._v(" "),t("li",[a._v("boolean compareAndSet(int expect, int update) ：如果输入的数值等于预期值，则以原子方式将该值设置为输入的值。")]),a._v(" "),t("li",[a._v("int getAndIncrement()：以原子方式将当前值加1，注意：这里返回的是自增前的值。")]),a._v(" "),t("li",[a._v("void lazySet(int newValue)：最终会设置成newValue，使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。")]),a._v(" "),t("li",[a._v("int getAndSet(int newValue)：以原子方式设置为newValue的值，并返回旧值。")])])]),a._v(" "),t("p",[a._v("Atomic包提供了三种基本类型的原子更新，但是Java的基本类型里还有char，float和double等。那么问题来了，如何原子的更新其他的基本类型呢？Atomic包里的类基本都是使用Unsafe实现的，Unsafe只提供了三种CAS方法，compareAndSwapObject，compareAndSwapInt和compareAndSwapLong。")]),a._v(" "),t("p",[a._v("再看AtomicBoolean源码，发现其是先把Boolean转换成整型，再使用compareAndSwapInt进行CAS，所以原子更新double也可以用类似的思路来实现。")]),a._v(" "),t("h3",{attrs:{id:"原子更新数组类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子更新数组类"}},[a._v("#")]),a._v(" 原子更新数组类")]),a._v(" "),t("p",[a._v("通过原子的方式更新数组里的某个元素，Atomic包提供了以下三个类：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("AtomicIntegerArray：原子更新整型数组里的元素。")]),a._v(" "),t("li",[a._v("AtomicLongArray：原子更新长整型数组里的元素。")]),a._v(" "),t("li",[a._v("AtomicReferenceArray：原子更新引用类型数组里的元素。")])])]),a._v(" "),t("p",[a._v("AtomicIntegerArray类主要是提供原子的方式更新数组里的整型，其常用方法如下")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("int addAndGet(int i, int delta)：以原子方式将输入值与数组中索引i的元素相加。")]),a._v(" "),t("li",[a._v("boolean compareAndSet(int i, int expect, int update)：如果当前值等于预期值，则以原子方式将数组位置i的元素设置成update值。")])])]),a._v(" "),t("h3",{attrs:{id:"原子更新引用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子更新引用类型"}},[a._v("#")]),a._v(" 原子更新引用类型")]),a._v(" "),t("p",[a._v("原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下三个类：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("AtomicReference：原子更新引用类型。")]),a._v(" "),t("li",[a._v("AtomicReferenceFieldUpdater：原子更新引用类型里的字段。")]),a._v(" "),t("li",[a._v("AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子的更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference(V initialRef, boolean initialMark)")])])]),a._v(" "),t("h3",{attrs:{id:"原子更新字段类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子更新字段类"}},[a._v("#")]),a._v(" 原子更新字段类")]),a._v(" "),t("p",[a._v("如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类，Atomic包提供了以下三个类：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。")]),a._v(" "),t("li",[a._v("AtomicLongFieldUpdater：原子更新长整型字段的更新器。")]),a._v(" "),t("li",[a._v("AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更数据和数据的版本号，可以解决使用CAS进行原子更新时，可能出现的ABA问题。")])])]),a._v(" "),t("p",[a._v("原子更新字段类都是抽象类，每次使用都时候必须使用静态方法newUpdater创建一个更新器。原子更新类的字段的必须使用public volatile修饰符。")]),a._v(" "),t("h2",{attrs:{id:"unsafe应用解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unsafe应用解析"}},[a._v("#")]),a._v(" Unsafe应用解析")]),a._v(" "),t("h3",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("p",[a._v("Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。")]),a._v(" "),t("p",[a._v("Unsafe类为一单例实现，提供静态方法getUnsafe获取Unsafe实例，当且仅当调用getUnsafe方法的类为引导类加载器所加载时才合法，否则抛出SecurityException异常。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 单例对象")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),a._v(" theUnsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@CallerSensitive")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getUnsafe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v(" var0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Reflection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getCallerClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 仅在引导类加载器`BootstrapClassLoader`加载时才合法")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("VM")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isSystemDomainLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("var0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SecurityException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Unsafe"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" theUnsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("h3",{attrs:{id:"如何获取unsafe实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何获取unsafe实例"}},[a._v("#")]),a._v(" 如何获取Unsafe实例？")]),a._v(" "),t("p",[a._v("1、从getUnsafe方法的使用限制条件出发，通过Java命令行命令-Xbootclasspath/a把调用Unsafe相关方法的类A所在jar包路径追加到默认的bootstrap路径中，使得A被引导类加载器加载，从而通过Unsafe.getUnsafe方法安全的获取Unsafe实例。")]),a._v(" "),t("p",[a._v("java -Xbootclasspath/a:${path}   // 其中path为调用Unsafe相关方法的类所在jar包路径")]),a._v(" "),t("p",[a._v("2、通过反射获取单例对象theUnsafe。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UnsafeInstance")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("reflectGetUnsafe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Field")]),a._v(" field "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getDeclaredField")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"theUnsafe"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setAccessible")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Unsafe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("h3",{attrs:{id:"unsafe功能介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unsafe功能介绍"}},[a._v("#")]),a._v(" Unsafe功能介绍")]),a._v(" "),t("p",[a._v("Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类，下面将对其相关方法和应用场景进行详细介绍。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/31.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"内存操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存操作"}},[a._v("#")]),a._v(" 内存操作")]),a._v(" "),t("p",[a._v("这部分主要包含堆外内存的分配、拷贝、释放、给定地址值操作等方法。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//分配内存, 相当于C++的malloc函数\npublic native long allocateMemory(long bytes);\n//扩充内存\npublic native long reallocateMemory(long address, long bytes);\n//释放内存\npublic native void freeMemory(long address);\n//在给定的内存块中设置值\npublic native void setMemory(Object o, long offset, long bytes, byte value);\n//内存拷贝\npublic native void copyMemory(Object srcBase, long srcOffset, Object destBase, long destOffset, long bytes);\n//获取给定地址值，忽略修饰限定符的访问限制。与此类似操作还有: getInt，getDouble，getLong，getChar等\npublic native Object getObject(Object o, long offset);\n//为给定地址设置值，忽略修饰限定符的访问限制，与此类似操作还有: putInt,putDouble，putLong，putChar等\npublic native void putObject(Object o, long offset, Object x);\npublic native byte getByte(long address);\n//为给定地址设置byte类型的值（当且仅当该内存地址为allocateMemory分配\t时，此方法结果才是确定的）\npublic native void putByte(long address, byte x);\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("p",[a._v("通常，我们在Java中创建的对象都处于堆内内存（heap）中，堆内内存是由JVM所管控的Java进程内存，并且它们遵循JVM的内存管理机制，JVM会采用垃圾回收机制统一管理堆内存。与之相对的是堆外内存，存在于JVM管控之外的内存区域，Java中对堆外内存的操作，依赖于Unsafe提供的操作堆外内存的native方法。")]),a._v(" "),t("h3",{attrs:{id:"使用堆外内存的原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用堆外内存的原因"}},[a._v("#")]),a._v(" 使用堆外内存的原因")]),a._v(" "),t("ul",[t("li",[a._v("对垃圾回收停顿的改善。由于堆外内存是直接受操作系统管理而不是JVM，所以当我们使用堆外内存时，即可保持较小的堆内内存规模。从而在GC时减少回收停顿对于应用的影响。")]),a._v(" "),t("li",[a._v("提升程序I/O操作的性能。通常在I/O通信过程中，会存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间数据拷贝且生命周期较短的暂存数据，都建议存储到堆外内存。")])]),a._v(" "),t("h3",{attrs:{id:"典型应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#典型应用"}},[a._v("#")]),a._v(" 典型应用")]),a._v(" "),t("p",[a._v("DirectByteBuffer是Java用于实现堆外内存的一个重要类，通常用在通信过程中做缓冲池，如在Netty、MINA等NIO框架中应用广泛。DirectByteBuffer对于堆外内存的创建、使用、销毁等逻辑均由Unsafe提供的堆外内存API来实现。")]),a._v(" "),t("p",[a._v("下图为DirectByteBuffer构造函数，创建DirectByteBuffer的时候，通过Unsafe.allocateMemory分配内存、Unsafe.setMemory进行内存初始化，而后构建Cleaner对象用于跟踪DirectByteBuffer对象的垃圾回收，以实现当DirectByteBuffer被垃圾回收时，分配的堆外内存一起被释放。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/32.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"cas相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cas相关"}},[a._v("#")]),a._v(" CAS相关")]),a._v(" "),t("p",[a._v("如下源代码释义所示，这部分主要为CAS相关操作的方法。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n *  CAS\n * @param o         包含要修改field的对象\n * @param offset    对象中某field的偏移量\n * @param expected  期望值\n * @param update    更新值\n * @return          true | false\n */\npublic final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5);\n\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n\npublic final native boolean compareAndSwapLong(Object var1, long var2, long var4, long var6);\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("h3",{attrs:{id:"典型应用-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#典型应用-2"}},[a._v("#")]),a._v(" 典型应用")]),a._v(" "),t("p",[a._v("如下图所示，AtomicInteger的实现中，静态字段valueOffset即为字段value的内存偏移地址，valueOffset的值在AtomicInteger初始化时，在静态代码块中通过Unsafe的objectFieldOffset方法获取。在AtomicInteger中提供的线程安全方法中，通过字段valueOffset的值可以定位到AtomicInteger对象中value的内存地址，从而可以根据CAS实现对value字段的原子操作。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/33.png",alt:""}})]),a._v(" "),t("p",[a._v("下图为某个AtomicInteger对象自增操作前后的内存示意图，对象的基地址baseAddress=“0x110000”，通过baseAddress+valueOffset得到value的内存地址valueAddress=“0x11000c”；然后通过CAS进行原子性的更新操作，成功则返回，否则继续重试，直到更新成功为止。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/34.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"线程调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程调度"}},[a._v("#")]),a._v(" 线程调度")]),a._v(" "),t("p",[a._v("包括线程挂起、恢复、锁机制等方法。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//取消阻塞线程\npublic native void unpark(Object thread);\n//阻塞线程\npublic native void park(boolean isAbsolute, long time);\n//获得对象锁（可重入锁）\n@Deprecated\npublic native void monitorEnter(Object o);\n//释放对象锁\n@Deprecated\npublic native void monitorExit(Object o);\n//尝试获取对象锁\n@Deprecated\npublic native boolean tryMonitorEnter(Object o);\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("p",[a._v("方法park、unpark即可实现线程的挂起与恢复，将一个线程进行挂起是通过park方法实现的，调用park方法后，线程将一直阻塞直到超时或者中断等条件出现；unpark可以终止一个挂起的线程，使其恢复正常。")]),a._v(" "),t("h3",{attrs:{id:"典型应用-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#典型应用-3"}},[a._v("#")]),a._v(" "),t("strong",[a._v("典型应用")])]),a._v(" "),t("p",[a._v("Java锁和同步器框架的核心类AbstractQueuedSynchronizer，就是通过调用**LockSupport.park()"),t("strong",[a._v("和")]),a._v("LockSupport.unpark()**实现线程的阻塞和唤醒的，而LockSupport的park、unpark方法实际是调用Unsafe的park、unpark方式来实现。")]),a._v(" "),t("h2",{attrs:{id:"内存屏障"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[a._v("#")]),a._v(" 内存屏障")]),a._v(" "),t("p",[a._v("在Java 8中引入，用于定义内存屏障（也称内存栅栏，内存栅障，屏障指令等，是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作），避免代码重排序。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前\npublic native void loadFence();\n//内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前\npublic native void storeFence();\n//内存屏障，禁止load、store操作重排序\npublic native void fullFence();\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("h3",{attrs:{id:"典型应用-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#典型应用-4"}},[a._v("#")]),a._v(" 典型应用")]),a._v(" "),t("p",[a._v("在Java 8中引入了一种锁的新机制——StampedLock，它可以看成是读写锁的一个改进版本。StampedLock提供了一种乐观读锁的实现，这种乐观读锁类似于无锁的操作，完全不会阻塞写线程获取写锁，从而缓解读多写少时写线程“饥饿”现象。由于StampedLock提供的乐观读锁不阻塞写线程获取读锁，当线程共享变量从主内存load到线程工作内存时，会存在数据不一致问题，所以当使用StampedLock的乐观读锁时，需要遵从如下图用例中使用的模式来确保数据的一致性。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/35.png",alt:""}})]),a._v(" "),t("p",[a._v("如上图用例所示计算坐标点Point对象，包含点移动方法move及计算此点到原点的距离的方法distanceFromOrigin。在方法distanceFromOrigin中，首先，通过tryOptimisticRead方法获取乐观读标记；然后从主内存中加载点的坐标值 (x,y)；而后通过StampedLock的validate方法校验锁状态，判断坐标点(x,y)从主内存加载到线程工作内存过程中，主内存的值是否已被其他线程通过move方法修改，如果validate返回值为true，证明(x, y)的值未被修改，可参与后续计算；否则，需加悲观读锁，再次从主内存加载(x,y)的最新值，然后再进行距离计算。其中，校验锁状态这步操作至关重要，需要判断锁状态是否发生改变，从而判断之前copy到线程工作内存中的值是否与主内存的值存在不一致。")]),a._v(" "),t("p",[a._v("下图为StampedLock.validate方法的源码实现，通过锁标记与相关常量进行位运算、比较来校验锁状态，在校验逻辑之前，会通过Unsafe的loadFence方法加入一个load内存屏障，目的是避免上图用例中步骤②和StampedLock.validate中锁状态校验运算发生重排序导致锁状态校验不准确的问题。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/36.png",alt:""}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/CompareAndSwap.jpg",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[a._v("#")]),a._v(" 问题")]),a._v(" "),t("blockquote",[t("p",[a._v("Dougli->Atomic原子包")])]),a._v(" "),t("p",[a._v("1、全面走一遍Atomic包下面的原子类")]),a._v(" "),t("p",[a._v("2、CAS->原子比较与交换算法的bug-ABA")]),a._v(" "),t("p",[a._v("3、魔法类->Unsafe,jni->堆外内存")]),a._v(" "),t("p",[a._v("1、atomic底层实现是基于无锁算法cas")]),a._v(" "),t("p",[a._v("基于魔术类Unsafe提供的三大cas-api完成")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("compareAndSwapObject\ncompareAndSwapInt\ncompareAndSwapLong\n基于硬件原语-CMPXCHG实现原子操作cas\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AtomicInteger")]),a._v("分析\n    \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    oldvalue "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getIntVolatile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("var1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" var2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//读AtomicInteger的value值")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("///valueOffset---value属性在对象内存当中的偏移量")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareAndSwapInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AtomicInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" valueOffset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" oldvalue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" oldvalue "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" var5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n什么叫偏移量？\n要用cas修改某个对象属性的值"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("，首先要知道属性在对象的内存空间的哪个位置，必须知道属性的偏移量\n    \n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")])]),t("p",[a._v("如果说要原子修改的属性是一个Array？")]),a._v(" "),t("p",[a._v("提供数组的cas修改")]),a._v(" "),t("p",[a._v("如果不是整形数组？可以改？")]),a._v(" "),t("p",[a._v("CAS修改的ABA问题！")]),a._v(" "),t("p",[a._v("王百万： 打算往自己账户100w,先查一下自w己账户：有多少钱->100W,在柜台查的，撩妹->耽误时间（1小时），")]),a._v(" "),t("p",[a._v("撩妹聊完了，又查了一下自己的户头，100w；")]),a._v(" "),t("p",[a._v("张三：去老王账户100w->非法转入股票市场户口(此时老王账户0)->炒股做T的高手(低买高卖)--\x3e150w->100W又转回老王的户头，张三赚了50w")]),a._v(" "),t("p",[a._v("ABA-》怎么解决？")]),a._v(" "),t("p",[a._v("A-0->B-1->A-2->B-3->A-4")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("AtomicStampedReference(V initialRef, int initialStamp)\n\n//initialRef要改的初始值，initialStamp-初始版本号\n操作线程Thread[主操作线程,5,main]stamp=0,初始值 a = 1\n操作线程Thread[干扰线程,5,main]stamp=1,【increment】 ,值 = 2\n操作线程Thread[干扰线程,5,main]stamp=2,【decrement】 ,值 = 1\n操作线程Thread[主操作线程,5,main]stamp=0,CAS操作结果: false\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("blockquote",[t("p",[a._v("Unsafe jdk1.7之后，加的api")])]),a._v(" "),t("p",[a._v("内存管理：")]),a._v(" "),t("p",[a._v("举个例子：文件上传，并发量也比较高；可以用unsafe申请堆外内存")]),a._v(" "),t("p",[a._v("堆外内存不属于GC管，注意用完一定要手动释放。否则内存泄露")]),a._v(" "),t("h2",{attrs:{id:"图片附录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片附录"}},[a._v("#")]),a._v(" 图片附录")]),a._v(" "),t("h3",{attrs:{id:"compare-and-swap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compare-and-swap"}},[a._v("#")]),a._v(" Compare And Swap")]),a._v(" "),t("p",[a._v("![](https://gitee.com/nylg/picture/raw/master/spring/Compare And Swap.jpg)")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/IA%5BNP%7DS2LU",alt:""}}),a._v("MOKGUYVVJ{)H.png)")])])}),[],!1,null,null,null);t.default=n.exports}}]);