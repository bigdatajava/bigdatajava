(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{563:function(n,t,a){"use strict";a.r(t);var s=a(1),e=Object(s.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("U2FsdGVkX19tgAaVWaOgfw8ireFk+utnPPQJOaavmPe7lGynjlIZ7zAMgcujFuPt\nay/AkmFxdZ9oSO5ApPzZPcly1KINakHN1dDQ5fZB3Glp3H9lMW5HnsY6KToMywpe\niQ==\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h2",{attrs:{id:"transactional的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#transactional的使用"}},[n._v("#")]),n._v(" @Transactional的使用")]),n._v(" "),t("p",[n._v("SpringBoot大行其道的今天，基于XML配置的Spring Framework的使用方式注定已成为过去式。")]),n._v(" "),t("p",[n._v("注解驱动应用，面向元数据编程已然成受到越来越多开发者的偏好了，毕竟它的便捷程度、优势都是XML方式不可比拟的。")]),n._v(" "),t("p",[n._v("对SpringBoot有多了解，其实就是看你对Spring Framework有多熟悉~ 比如SpringBoot大量的模块装配的设计模式，其实它属于Spring Framework提供的能力")]),n._v(" "),t("p",[n._v("1、开启注解驱动")]),n._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/**\n * Created by xsls on 2019/6/17.\n */")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@EnableTransactionManagement")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@EnableAspectJAutoProxy")]),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//(exposeProxy = true)")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@ComponentScan")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("basePackages "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"com.tuling"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("MainConfig")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Bean")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DataSource")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("dataSource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DruidDataSource")]),n._v(" dataSource "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DruidDataSource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("setUsername")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"root"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("setPassword")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"123456"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("setUrl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"jdbc:mysql://localhost:3306/tuling-spring-trans"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("setDriverClassName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"com.mysql.jdbc.Driver"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('/**\n     *  配置JdbcTemplate Bean组件\n     *     <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">\n     *         <property name="dataSource" ref="dataSource" ></property>\n     *     </bean>\n     * @param dataSource\n     * @return\n     */')]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Bean")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("JdbcTemplate")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("jdbcTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DataSource")]),n._v(" dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("JdbcTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('/**\n     *  配置事务管理器\n     *     <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">\n     *         <property name="dataSource" ref="dataSource"></property>\n     *     </bean>\n     * @param dataSource\n     * @return\n     */')]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Bean")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("PlatformTransactionManager")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("transactionManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DataSource")]),n._v(" dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DataSourceTransactionManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("blockquote",[t("p",[n._v("提示：使用@EnableTransactionManagement注解前，请务必保证你已经配置了至少一个PlatformTransactionManager的Bean，否则会报错。（当然你也可以实现TransactionManagementConfigurer来提供一个专属的，只是我们一般都不这么去做~~~）")])]),n._v(" "),t("p",[n._v("2、在你想要加入事务的方法上(或者类（接口）上)标注@Transactional注解")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Component\n@Transactional(rollbackFor = Exception.class)\npublic class PayServiceImpl implements PayService {\n\n    @Autowired\n    private AccountInfoDao accountInfoDao;\n\n    @Autowired\n    private ProductInfoDao productInfoDao;\n\n    public void pay(String accountId, double money) { \n\n        //更新余额\n         int retVal = accountInfoDao.updateAccountBlance(accountId,money);\n \n\n        System.out.println(1/0);\n\n    }\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("运行测试：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public static void main(String[] args) {\n    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(MainConfig.class);\n\n    PayService payService = (PayService) context.getBean("payServiceImpl");\n    payService.pay("123456789",10);\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v("就这么简单，事务就生效了（这条数据并没有insert成功~）。")]),n._v(" "),t("h2",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[n._v("#")]),n._v(" 原理")]),n._v(" "),t("h3",{attrs:{id:"事务集成过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务集成过程"}},[n._v("#")]),n._v(" 事务集成过程：")]),n._v(" "),t("p",[n._v("接下来分析注解驱动事务的原理，同样的我们从@EnableTransactionManagement开始：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7433.png",alt:"0"}})]),n._v(" "),t("p",[t("strong",[n._v("@EnableTransactionManagement")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(TransactionManagementConfigurationSelector.class)\npublic @interface EnableTransactionManagement {\n\tboolean proxyTargetClass() default false;\n\tAdviceMode mode() default AdviceMode.PROXY;\n\tint order() default Ordered.LOWEST_PRECEDENCE;\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("简直不要太面熟好不好，属性和@EnableAspectJAutoProxy注解一个套路。不同之处只在于@Import导入器导入的这个类，不同的是：它导入的是个ImportSelector")]),n._v(" "),t("p",[t("strong",[n._v("TransactionManagementConfigurationSelector")])]),n._v(" "),t("p",[n._v("它所在的包为org.springframework.transaction.annotation，jar属于：spring-tx（"),t("strong",[n._v("若引入了spring-jdbc，这个jar会自动导入")]),n._v("）")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class TransactionManagementConfigurationSelector extends AdviceModeImportSelector<EnableTransactionManagement> {\n\n\t@Override\n\tprotected String[] selectImports(AdviceMode adviceMode) {\n\t\tswitch (adviceMode) {\n\t\t\t// 很显然，绝大部分情况下，我们都不会使用AspectJ的静态代理的~~~~~~~~\n\t\t\t// 这里面会导入两个类~~~\n\t\t\tcase PROXY:\n\t\t\t\treturn new String[] {AutoProxyRegistrar.class.getName(),\n\t\t\t\t\t\tProxyTransactionManagementConfiguration.class.getName()};\n\t\t\tcase ASPECTJ:\n\t\t\t\treturn new String[] {determineTransactionAspectClass()};\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\tprivate String determineTransactionAspectClass() {\n\t\treturn (ClassUtils.isPresent("javax.transaction.Transactional", getClass().getClassLoader()) ?\n\t\t\t\tTransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME :\n\t\t\t\tTransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME);\n\t}\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br")])]),t("p",[n._v("AdviceModeImportSelector目前所知的三个子类是：AsyncConfigurationSelector、TransactionManagementConfigurationSelector、CachingConfigurationSelector。由此可见后面还会着重分析的Spring的缓存体系@EnableCaching，和异步@EnableAsync模式也是和这个极其类似的~~~")]),n._v(" "),t("p",[t("strong",[n._v("AutoProxyRegistrar")])]),n._v(" "),t("p",[n._v("从名字是意思是：自动代理注册器。它是个ImportBeanDefinitionRegistrar，可以实现自己向容器里注册Bean的定义信息")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// @since 3.1\npublic class AutoProxyRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t@Override\n\tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\t\tboolean candidateFound = false;\n\t\t\n\t\t// 这里面需要特别注意的是：这里是拿到所有的注解类型~~~而不是只拿@EnableAspectJAutoProxy这个类型的\n\t\t// 原因：因为mode、proxyTargetClass等属性会直接影响到代理得方式，而拥有这些属性的注解至少有：\n\t\t// @EnableTransactionManagement、@EnableAsync、@EnableCaching等~~~~\n\t\t// 甚至还有启用AOP的注解：@EnableAspectJAutoProxy它也能设置`proxyTargetClass`这个属性的值，因此也会产生关联影响~\n\t\tSet<String> annoTypes = importingClassMetadata.getAnnotationTypes();\n\t\tfor (String annoType : annoTypes) {\n\t\t\tAnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);\n\t\t\tif (candidate == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// 拿到注解里的这两个属性\n\t\t\t// 说明：如果你是比如@Configuration或者别的注解的话  他们就是null了\n\t\t\tObject mode = candidate.get("mode");\n\t\t\tObject proxyTargetClass = candidate.get("proxyTargetClass");\n\n\t\t\t// 如果存在mode且存在proxyTargetClass 属性\n\t\t\t// 并且两个属性的class类型也是对的，才会进来此处（因此其余注解相当于都挡外面了~）\n\t\t\tif (mode != null && proxyTargetClass != null && AdviceMode.class == mode.getClass() &&\n\t\t\t\t\tBoolean.class == proxyTargetClass.getClass()) {\n\t\t\n\t\t\t\t// 标志：找到了候选的注解~~~~\n\t\t\t\tcandidateFound = true;\n\t\t\t\tif (mode == AdviceMode.PROXY) {\n\t\t\t\t\t// 这一部是非常重要的~~~~又到了我们熟悉的AopConfigUtils工具类，且是熟悉的registerAutoProxyCreatorIfNecessary方法\n\t\t\t\t\t// 它主要是注册了一个`internalAutoProxyCreator`，但是若出现多次的话，这里不是覆盖的形式，而是以第一次的为主\n\t\t\t\t\t// 当然它内部有做等级的提升之类的，这个之前也有分析过~~~~\n\t\t\t\t\tAopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);\n\t\t\t\t\t\n\t\t\t\t\t// 看要不要强制使用CGLIB的方式(由此可以发现  这个属性若出现多次，是会是覆盖的形式)\n\t\t\t\t\tif ((Boolean) proxyTargetClass) {\n\t\t\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 如果一个都没有找到（我在想，肿么可能呢？）\n\t\t// 其实有可能：那就是自己注入这个类，而不是使用注解去注入（但并不建议这么去做）\n\t\tif (!candidateFound && logger.isInfoEnabled()) {\n\t\t\t// 输出info日志（注意并不是error日志）\n\t\t}\n\t}\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br")])]),t("p",[n._v("这一步最重要的就是向Spring容器注入了一个自动代理创建器：org.springframework.aop.config.internalAutoProxyCreator，这里有个小细节注意一下，由于AOP和事务注册的都是名字为org.springframework.aop.config.internalAutoProxyCreator  的BeanPostProcessor，但是只会保留一个，AOP的会覆盖事务的， 因为AOP优先级更大")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7430.png",alt:"0"}})]),n._v(" "),t("p",[n._v("所以假如@EnableTransactionManagement和@EnableAspectJAutoProxy 同时存在， 那么AOP的 AutoProxyCreator    会进行覆盖。")]),n._v(" "),t("p",[t("strong",[n._v("ProxyTransactionManagementConfiguration")])]),n._v(" "),t("p",[n._v("它是一个@Configuration,所以看看它向容器里注入了哪些Bean")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@Configuration\npublic class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration {\n\n\t// 这个Advisor可是事务的核心内容。。。。。也是本文重点分析的对象\n\t@Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tpublic BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor() {\n\t\tBeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor();\n\t\tadvisor.setTransactionAttributeSource(transactionAttributeSource());\n\t\tadvisor.setAdvice(transactionInterceptor());\n\t\t// 顺序由@EnableTransactionManagement注解的Order属性来指定 默认值为：Ordered.LOWEST_PRECEDENCE\n\t\tif (this.enableTx != null) {\n\t\t\tadvisor.setOrder(this.enableTx.<Integer>getNumber("order"));\n\t\t}\n\t\treturn advisor;\n\t}\n\n\t// TransactionAttributeSource 这种类特别像 `TargetSource`这种类的设计模式\n\t// 这里直接使用的是AnnotationTransactionAttributeSource  基于注解的事务属性源~~~\n\t@Bean\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tpublic TransactionAttributeSource transactionAttributeSource() {\n\t\treturn new AnnotationTransactionAttributeSource();\n\t}\n\n\t// 事务拦截器，它是个`MethodInterceptor`，它也是Spring处理事务最为核心的部分\n\t// 请注意：你可以自己定义一个TransactionInterceptor（同名的），来覆盖此Bean（注意是覆盖）\n\t// 另外请注意：你自定义的BeanName必须同名，也就是必须名为：transactionInterceptor  否则两个都会注册进容器里面去~~~~~~\n\t@Bean\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tpublic TransactionInterceptor transactionInterceptor() {\n\t\tTransactionInterceptor interceptor = new TransactionInterceptor();\n\t\t// 事务的属性\n\t\tinterceptor.setTransactionAttributeSource(transactionAttributeSource());\n\t\t// 事务管理器（也就是注解最终需要使用的事务管理器,父类已经处理好了）\n\t\t// 此处注意：我们是可议不用特殊指定的，最终它自己会去容器匹配一个适合的~~~~\n\t\tif (this.txManager != null) {\n\t\t\tinterceptor.setTransactionManager(this.txManager);\n\t\t}\n\t\treturn interceptor;\n\t}\n\n}\n\n// 父类（抽象类）  它实现了ImportAware接口  所以拿到@Import所在类的所有注解信息\n@Configuration\npublic abstract class AbstractTransactionManagementConfiguration implements ImportAware {\n\n\t@Nullable\n\tprotected AnnotationAttributes enableTx;\n\t/**\n\t * Default transaction manager, as configured through a {@link TransactionManagementConfigurer}.\n\t */\n\t// 此处：注解的默认的事务处理器（可议通过实现接口TransactionManagementConfigurer来自定义配置）\n\t// 因为事务管理器这个东西，一般来说全局一个就行，但是Spring也提供了定制化的能力~~~\n\t@Nullable\n\tprotected PlatformTransactionManager txManager;\n\n\t@Override\n\tpublic void setImportMetadata(AnnotationMetadata importMetadata) {\n\t\t// 此处：只拿到@EnableTransactionManagement这个注解的就成~~~~~ 作为AnnotationAttributes保存起来\n\t\tthis.enableTx = AnnotationAttributes.fromMap(importMetadata.getAnnotationAttributes(EnableTransactionManagement.class.getName(), false));\n\t\t// 这个注解是必须的~~~~~~~~~~~~~~~~\n\t\tif (this.enableTx == null) {\n\t\t\tthrow new IllegalArgumentException("@EnableTransactionManagement is not present on importing class " + importMetadata.getClassName());\n\t\t}\n\t}\n\n\t// 可以配置一个Bean实现这个接口。然后给注解驱动的给一个默认的事务管理器~~~~\n\t// 设计模式都是想通的~~~\n\t@Autowired(required = false)\n\tvoid setConfigurers(Collection<TransactionManagementConfigurer> configurers) {\n\t\tif (CollectionUtils.isEmpty(configurers)) {\n\t\t\treturn;\n\t\t}\n\t\t// 同样的，最多也只允许你去配置一个~~~\n\t\tif (configurers.size() > 1) {\n\t\t\tthrow new IllegalStateException("Only one TransactionManagementConfigurer may exist");\n\t\t}\n\t\tTransactionManagementConfigurer configurer = configurers.iterator().next();\n\t\tthis.txManager = configurer.annotationDrivenTransactionManager();\n\t}\n\n\n\t// 注册一个监听器工厂，用以支持@TransactionalEventListener注解标注的方法，来监听事务相关的事件\n\t// 通过事件监听模式来实现事务的监控~~~~\n\t@Bean(name = TransactionManagementConfigUtils.TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME)\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tpublic static TransactionalEventListenerFactory transactionalEventListenerFactory() {\n\t\treturn new TransactionalEventListenerFactory();\n\t}\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br"),t("span",{staticClass:"line-number"},[n._v("89")]),t("br"),t("span",{staticClass:"line-number"},[n._v("90")]),t("br"),t("span",{staticClass:"line-number"},[n._v("91")]),t("br"),t("span",{staticClass:"line-number"},[n._v("92")]),t("br"),t("span",{staticClass:"line-number"},[n._v("93")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("下面重中之重来了，那就是BeanFactoryTransactionAttributeSourceAdvisor这个增强器")]),n._v(" "),t("p",[t("strong",[n._v("BeanFactoryTransactionAttributeSourceAdvisor")])]),n._v(" "),t("p",[t("strong",[n._v("首先看它的父类")]),n._v("：AbstractBeanFactoryPointcutAdvisor"),t("strong",[n._v("它是一个和Bean工厂和事务都有关系的Advisor")])]),n._v(" "),t("p",[n._v("从上面的配置类可议看出，它是new出来一个。")]),n._v(" "),t("p",[n._v("使用的Advice为：advisor.setAdvice(transactionInterceptor())，既容器内的事务拦截器~~~~")]),n._v(" "),t("p",[n._v("使用的事务属性源为：advisor.setTransactionAttributeSource(transactionAttributeSource())，既一个new AnnotationTransactionAttributeSource()支持三种事务注解来标注~~~")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// @since 2.5.5\n// 它是一个AbstractBeanFactoryPointcutAdvisor ，关于这个Advisor 请参阅之前的博文讲解~~~\npublic class BeanFactoryTransactionAttributeSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor {\n\t\n\t@Nullable\n\tprivate TransactionAttributeSource transactionAttributeSource;\n\t\n\t// 这个很重要，就是切面。它决定了哪些类会被切入，从而生成的代理对象~ \n\t// 关于：TransactionAttributeSourcePointcut 下面有说~\n\tprivate final TransactionAttributeSourcePointcut pointcut = new TransactionAttributeSourcePointcut() {\n\t\t// 注意此处`getTransactionAttributeSource`就是它的一个抽象方法~~~\n\t\t@Override\n\t\t@Nullable\n\t\tprotected TransactionAttributeSource getTransactionAttributeSource() {\n\t\t\treturn transactionAttributeSource;\n\t\t}\n\t};\n\t\n\t// 可议手动设置一个事务属性源~\n\tpublic void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {\n\t\tthis.transactionAttributeSource = transactionAttributeSource;\n\t}\n\n\t// 当然我们可以指定ClassFilter  默认情况下：ClassFilter classFilter = ClassFilter.TRUE;  匹配所有的类的\n\tpublic void setClassFilter(ClassFilter classFilter) {\n\t\tthis.pointcut.setClassFilter(classFilter);\n\t}\n\n\t// 此处pointcut就是使用自己的这个pointcut去切入~~~\n\t@Override\n\tpublic Pointcut getPointcut() {\n\t\treturn this.pointcut;\n\t}\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br")])]),t("p",[n._v("下面当然要重点看看TransactionAttributeSourcePointcut，它是怎么切入的")]),n._v(" "),t("p",[t("strong",[n._v("TransactionAttributeSourcePointcut")])]),n._v(" "),t("p",[n._v("这个就是事务的匹配Pointcut切面，决定了哪些类需要生成代理对象从而应用事务。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 首先它的访问权限事default 显示是给内部使用的\n// 首先它继承自StaticMethodMatcherPointcut   所以`ClassFilter classFilter = ClassFilter.TRUE;` 匹配所有的类\n// 并且isRuntime=false  表示只需要对方法进行静态匹配即可~~~~\nabstract class TransactionAttributeSourcePointcut extends StaticMethodMatcherPointcut implements Serializable {\n\n\t// 方法的匹配  静态匹配即可（因为事务无需要动态匹配这么细粒度~~~）\n\t@Override\n\tpublic boolean matches(Method method, Class<?> targetClass) {\n\t\t// 实现了如下三个接口的子类，就不需要被代理了  直接放行\n\t\t// TransactionalProxy它是SpringProxy的子类。  如果是被TransactionProxyFactoryBean生产出来的Bean，就会自动实现此接口，那么就不会被这里再次代理了\n\t\t// PlatformTransactionManager：spring抽象的事务管理器~~~\n\t\t// PersistenceExceptionTranslator对RuntimeException转换成DataAccessException的转换接口\n\t\tif (TransactionalProxy.class.isAssignableFrom(targetClass) ||\n\t\t\t\tPlatformTransactionManager.class.isAssignableFrom(targetClass) ||\n\t\t\t\tPersistenceExceptionTranslator.class.isAssignableFrom(targetClass)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// 重要：拿到事务属性源~~~~~~\n\t\t// 如果tas == null表示没有配置事务属性源，那是全部匹配的  也就是说所有的方法都匹配~~~~（这个处理还是比较让我诧异的~~~）\n\t\t// 或者 标注了@Transaction这样的注解的方法才会给与匹配~~~\n\t\tTransactionAttributeSource tas = getTransactionAttributeSource();\n\t\treturn (tas == null || tas.getTransactionAttribute(method, targetClass) != null);\n\t}\t\n\t...\n\t// 由子类提供给我，告诉事务属性源~~~~ 我才好知道哪些方法我需要切嘛~~~\n\t@Nullable\n\tprotected abstract TransactionAttributeSource getTransactionAttributeSource();\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br")])]),t("p",[n._v("关于matches方法的调用时机：只要是容器内的每个Bean，都会经过AbstractAutoProxyCreator#postProcessAfterInitialization从而会调用wrapIfNecessary方法，因此容器内所有的Bean的所有方法在容器启动时候都会执行此matche方法，因此请注意缓存的使用~~~~~")]),n._v(" "),t("h3",{attrs:{id:"解析advisor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析advisor"}},[n._v("#")]),n._v(" 解析advisor")]),n._v(" "),t("p",[n._v("https://www.processon.com/view/link/5f4f4c195653bb0c71e5f9f4")]),n._v(" "),t("p",[n._v("在Spring AOP中有过过介绍，解析事务advisor详细代码：org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper#findAdvisorBeans")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public List<Advisor> findAdvisorBeans() {\n\n   /**\n    * 探测器字段缓存中cachedAdvisorBeanNames 是用来保存我们的Advisor全类名\n    * 会在第一个单实例bean的中会去把这个advisor名称解析出来\n    */\n   String[] advisorNames = this.cachedAdvisorBeanNames;\n   if (advisorNames == null) {\n      /**\n       * 去我们的容器中获取到实现了Advisor接口的实现类\n       * 而我们的事务注解@EnableTransactionManagement 导入了一个叫ProxyTransactionManagementConfiguration配置类\n       * 而在这个配置类中配置了\n       * @Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)\n         @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n         public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor();\n         然后把他的名字获取出来保存到 本类的属性变量cachedAdvisorBeanNames中\n       */\n      advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n            this.beanFactory, Advisor.class, true, false);\n      this.cachedAdvisorBeanNames = advisorNames;\n   }\n   //若在容器中没有找到，直接返回一个空的集合\n   if (advisorNames.length == 0) {\n      return new ArrayList<>();\n   }\n\n   List<Advisor> advisors = new ArrayList<>();\n   //ioc容器中找到了我们配置的BeanFactoryTransactionAttributeSourceAdvisor\n   for (String name : advisorNames) {\n      //判断他是不是一个合适的 是我们想要的 默认true\n      if (isEligibleBean(name)) {\n         //BeanFactoryTransactionAttributeSourceAdvisor是不是正在创建的bean\n         if (this.beanFactory.isCurrentlyInCreation(name)) {\n            if (logger.isDebugEnabled()) {\n               logger.debug("Skipping currently created advisor \'" + name + "\'");\n            }\n         }\n         //不是的话\n         else {\n            try {\n               //显示的调用getBean方法方法创建我们的BeanFactoryTransactionAttributeSourceAdvisor返回去\n               advisors.add(this.beanFactory.getBean(name, Advisor.class));\n            }\n            catch (BeanCreationException ex) {\n               Throwable rootCause = ex.getMostSpecificCause();\n               if (rootCause instanceof BeanCurrentlyInCreationException) {\n                  BeanCreationException bce = (BeanCreationException) rootCause;\n                  String bceBeanName = bce.getBeanName();\n                  if (bceBeanName != null && this.beanFactory.isCurrentlyInCreation(bceBeanName)) {\n                     if (logger.isDebugEnabled()) {\n                        logger.debug("Skipping advisor \'" + name +\n                              "\' with dependency on currently created bean: " + ex.getMessage());\n                     }\n                     // Ignore: indicates a reference back to the bean we\'re trying to advise.\n                     // We want to find advisors other than the currently created bean itself.\n                     continue;\n                  }\n               }\n               throw ex;\n            }\n         }\n      }\n   }\n   return advisors;\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("去我们的容器中获取到实现了Advisor接口的实现类")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7434.png",alt:"0"}})]),n._v(" "),t("p",[n._v("显示的调用getBean方法方法创建我们的BeanFactoryTransactionAttributeSourceAdvisor返回去")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7432.png",alt:"0"}})]),n._v(" "),t("h3",{attrs:{id:"创建动态代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建动态代理"}},[n._v("#")]),n._v(" 创建动态代理")]),n._v(" "),t("p",[n._v("https://www.processon.com/view/link/5f507c7407912902cf700145")]),n._v(" "),t("p",[n._v("在Spring AOP中有过过介绍，区别在于匹配方式的不同：")]),n._v(" "),t("ul",[t("li",[n._v("AOP是按照Aspectj提供的API 结合切点表达式进行匹配。")]),n._v(" "),t("li",[n._v("事务是根据方法或者类或者接口上面的@Transactional进行匹配。")])]),n._v(" "),t("p",[n._v("所以本文和aop重复的就省略了如下：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 创建Bean\ncreateBean:524, AbstractAutowireCapableBeanFactory (org.springframework.beans.factory.support)\n// 执行带 Bean的生命周期的doCreateBean\ndoCreateBean:614, AbstractAutowireCapableBeanFactory (org.springframework.beans.factory.support)\n// 初始化方法\ninitializeBean:1931, AbstractAutowireCapableBeanFactory (org.springframework.beans.factory.support)\n// 执行初始化后的  BeanPostProcessor\napplyBeanPostProcessorsAfterInitialization:445, AbstractAutowireCapableBeanFactory (org.springframework.beans.factory.support)\n// 调用创建动态代理方法   AbstractAutoProxyCreator.postProcessAfterInitialization\npostProcessAfterInitialization:327, AbstractAutoProxyCreator (org.springframework.aop.framework.autoproxy)\nwrapIfNecessary:378, AbstractAutoProxyCreator (org.springframework.aop.framework.autoproxy)\n// 根据当前bean找到匹配的advisor  \ngetAdvicesAndAdvisorsForBean:84, AbstractAdvisorAutoProxyCreator (org.springframework.aop.framework.autoproxy)\n// 拿到before解析的所有adivsor做匹配\nfindEligibleAdvisors:106, AbstractAdvisorAutoProxyCreator (org.springframework.aop.framework.autoproxy)\nfindAdvisorsThatCanApply:144, AbstractAdvisorAutoProxyCreator (org.springframework.aop.framework.autoproxy)\nfindAdvisorsThatCanApply:344, AopUtils (org.springframework.aop.support)\n// 根据TransactionAttributeSourcePointcut判断是否匹配\ncanApply:305, AopUtils (org.springframework.aop.support)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("从该方法开始跟AOP有所区别了：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) {\n   Assert.notNull(pc, "Pointcut must not be null");\n   // 进行类级别过滤 这里会返回\n   if (!pc.getClassFilter().matches(targetClass)) {\n      return false;\n   }\n   /**\n    * 进行方法级别过滤\n    */\n   //如果pc.getMethodMatcher()返回TrueMethodMatcher则匹配所有方法\n   MethodMatcher methodMatcher = pc.getMethodMatcher();\n   if (methodMatcher == MethodMatcher.TRUE) {\n      // No need to iterate the methods if we\'re matching any method anyway...\n      return true;\n   }\n\n   //判断匹配器是不是IntroductionAwareMethodMatcher  只有AspectJExpressionPointCut才会实现这个接口\n   IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null;\n   if (methodMatcher instanceof IntroductionAwareMethodMatcher) {\n      introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;\n   }\n\n   //创建一个集合用于保存targetClass 的class对象\n   Set<Class<?>> classes = new LinkedHashSet<>();\n   //判断当前class是不是代理的class对象\n   if (!Proxy.isProxyClass(targetClass)) {\n      //加入到集合中去\n      classes.add(ClassUtils.getUserClass(targetClass));\n   }\n   //获取到targetClass所实现的接口的class对象，然后加入到集合中\n   classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));\n\n   //循环所有的class对象\n   for (Class<?> clazz : classes) {\n      //通过class获取到所有的方法\n      Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);\n      //循环我们的方法\n      for (Method method : methods) {\n         //通过methodMatcher.matches来匹配我们的方法\n         if (introductionAwareMethodMatcher != null ?\n               // 通过切点表达式进行匹配 AspectJ方式\n               introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :\n               // 通过方法匹配器进行匹配 内置aop接口方式\n               methodMatcher.matches(method, targetClass)) {\n            // 只要有1个方法匹配上了就创建代理\n            return true;\n         }\n      }\n   }\n\n   return false;\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("关键点：")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("if (!pc.getClassFilter().matches(targetClass)) {")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("初筛时事务不像aop，  上面介绍的TransactionAttributeSourcePointcut的getClassFilter是TrueClassFilter。所以所有的类都能匹配")])])]),n._v(" "),t("li",[t("p",[n._v("if (methodMatcher instanceof IntroductionAwareMethodMatcher) {")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("事务的methodMatcher 没有实现该接口。 只有AOP的实现了该接口所以也导致下面：")])])]),n._v(" "),t("li",[t("p",[n._v("methodMatcher.matches(method, targetClass)")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("所以事务时直接调用methodMatcher.matches进行匹配")])])])]),n._v(" "),t("p",[t("strong",[n._v("匹配方式：")])]),n._v(" "),t("p",[n._v("1.org.springframework.transaction.interceptor.TransactionAttributeSourcePointcut#matches")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Override\npublic boolean matches(Method method, @Nullable Class<?> targetClass) {\n   if (targetClass != null && TransactionalProxy.class.isAssignableFrom(targetClass)) {\n      return false;\n   }\n   /**\n    * 获取我们@EnableTransactionManagement注解为我们容器中导入的ProxyTransactionManagementConfiguration\n        * 配置类中的TransactionAttributeSource对象\n    */\n   TransactionAttributeSource tas = getTransactionAttributeSource();\n   // 通过getTransactionAttribute看是否有@Transactional注解\n   return (tas == null || tas.getTransactionAttribute(method, targetClass) != null);\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br")])]),t("p",[t("strong",[n._v("关键点")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("TransactionAttributeSource tas = getTransactionAttributeSource();")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("这里获取到的时候 通过@Import 的ImportSelect 注册的配置类ProxyTransactionManagementConfiguration 中设置的"),t("strong",[n._v("AnnotationTransactionAttributeSource")]),n._v("：它是基于注解驱动的事务管理的事务属性源，和@Transaction相关，也是现在使用得最最多的方式。")])])])]),n._v(" "),t("p",[n._v("它的基本作用为：它遇上比如@Transaction标注的方法时，此类会分析此事务注解，最终组织形成一个TransactionAttribute供随后的调用。")]),n._v(" "),t("p",[n._v("当然还有其他的类型 ，稍微举几个例：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7431.png",alt:""}})]),n._v(" "),t("ul",[t("li",[n._v("**NameMatchTransactionAttributeSource：**根据名字就能匹配，然后该事务属性就会作用在对应的方法上。比如下面例子：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@Bean\npublic TransactionAttributeSource transactionAttributeSource() {\n    Map<String, TransactionAttribute> txMap = new HashMap<>();\n    // required事务  适用于增删改场景~\n    RuleBasedTransactionAttribute requiredTx = new RuleBasedTransactionAttribute();\n    requiredTx.setRollbackRules(Collections.singletonList(new RollbackRuleAttribute(RuntimeException.class)));\n    requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n    txMap.put("add*", requiredTx);\n    txMap.put("save*", requiredTx);\n    txMap.put("insert*", requiredTx);\n    txMap.put("update*", requiredTx);\n    txMap.put("delete*", requiredTx); \n\n    // 查询 使用只读事务\n    RuleBasedTransactionAttribute readOnlyTx = new RuleBasedTransactionAttribute();\n    readOnlyTx.setReadOnly(true);\n    readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);\n    txMap.put("get*", readOnlyTx);\n    txMap.put("query*", readOnlyTx);\n\n    NameMatchTransactionAttributeSource source = new NameMatchTransactionAttributeSource();\n    source.setNameMap(txMap);\n\n    return source;\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br")])]),t("ul",[t("li",[n._v("**MethodMapTransactionAttributeSource:**它的使用方式和NameMatchTransactionAttributeSource基本相同,指定具体方法名")]),n._v(" "),t("li",[n._v("**CompositeTransactionAttributeSource ：**组合模式，这里不细讲")])]),n._v(" "),t("p",[n._v("2.org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource#getTransactionAttribute")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7491.png",alt:"0"}})]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {\n   //判断method所在的class 是不是Object类型\n   if (method.getDeclaringClass() == Object.class) {\n      return null;\n   }\n\n   //构建我们的缓存key\n   Object cacheKey = getCacheKey(method, targetClass);\n   //先去我们的缓存中获取\n   TransactionAttribute cached = this.attributeCache.get(cacheKey);\n   //缓存中不为空\n   if (cached != null) {\n      //判断缓存中的对象是不是空事务属性的对象\n      if (cached == NULL_TRANSACTION_ATTRIBUTE) {\n         return null;\n      }\n      //不是的话 就进行返回\n      else {\n         return cached;\n      }\n   }\n   else {\n      //我们需要查找我们的事务注解 匹配在这体现\n      TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);\n      // 若解析出来的事务注解属性为空\n      if (txAttr == null) {\n         //往缓存中存放空事务注解属性\n         this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE);\n      }\n      else {\n         //我们执行方法的描述符 全类名+方法名\n         String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass);\n         //把方法描述设置到事务属性上去\n         if (txAttr instanceof DefaultTransactionAttribute) {\n            ((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);\n         }\n         if (logger.isDebugEnabled()) {\n            logger.debug("Adding transactional method \'" + methodIdentification + "\' with attribute: " + txAttr);\n         }\n         //加入到缓存\n         this.attributeCache.put(cacheKey, txAttr);\n      }\n      return txAttr;\n   }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br")])]),t("p",[t("strong",[n._v("关键点：")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("if (cached != null) {")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("先从缓存中取， 因为这个过程相对比较耗资源，会使用缓存存储已经解析过的， 后续调用时需要获取")])])]),n._v(" "),t("li",[t("p",[n._v("TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("该方法中具体执行匹配过程  大致是：  实现类方法---\x3e接口的方法---\x3e实现类----\x3e接口类")])])]),n._v(" "),t("li",[t("p",[n._v("((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("记录当前需要执行事务的方法名，记录到Descriptor   方便后续调用时判断")])])]),n._v(" "),t("li",[t("p",[n._v("this.attributeCache.put(cacheKey, txAttr);")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("加入到缓存中")])])])]),n._v(" "),t("p",[n._v("\\3. 看下是怎么匹配的：")]),n._v(" "),t("p",[n._v("org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource#computeTransactionAttribute")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7522.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Nullable\nprotected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {\n   //判断我们的事务方法上的修饰符是不是public的\n   if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {\n      return null;\n   }\n\n   // The method may be on an interface, but we need attributes from the target class.\n   // If the target class is null, the method will be unchanged.\n   Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);\n\n   //第一步，我们先去目标class的方法上去找我们的事务注解\n   TransactionAttribute txAttr = findTransactionAttribute(specificMethod);\n   if (txAttr != null) {\n      return txAttr;\n   }\n\n   //第二步:去我们targetClass类[实现类]上找事务注解\n   txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());\n   if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {\n      return txAttr;\n   }\n   // 具体方法不是当前的方法说明  当前方法是接口方法\n   if (specificMethod != method) {\n      //去我们的实现类的接口上的方法去找事务注解\n      txAttr = findTransactionAttribute(method);\n      if (txAttr != null) {\n         return txAttr;\n      }\n      //去我们的实现类的接口上去找事务注解\n      txAttr = findTransactionAttribute(method.getDeclaringClass());\n      if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {\n         return txAttr;\n      }\n   }\n\n   return null;\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("关键点：")])]),n._v(" "),t("p",[t("strong",[n._v("这个方法乍一看，觉得是先从实现类方法--\x3e实现类---\x3e接口方法---\x3e接口类     但是！！！！   他在第一个实现方法查找就已经找了接口方法父类方法。在实现类里面就找了接口类和父类，  所以接口方法---\x3e接口类  基本走了也没啥用")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("得到具体方法， 如果method是接口方法那将从targetClass得到实现类的方法 ， 所以说无论传的是接口还是实现， 都会先解析实现类， 所以接口传进来基本没啥用，因为findTransactionAttribute方法本身就会去接口中解析")])])]),n._v(" "),t("li",[t("p",[n._v("TransactionAttribute txAttr = findTransactionAttribute(specificMethod);")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("根据具体方法解析")])])]),n._v(" "),t("li",[t("p",[n._v("txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("根据实现类解析")])])])]),n._v(" "),t("p",[t("strong",[n._v("@Transactional简单解释")])]),n._v(" "),t("p",[n._v("这个事务注解可以用在类上，也可以用在方法上。")]),n._v(" "),t("ul",[t("li",[n._v("将事务注解标记到服务组件类级别,相当于为该服务组件的每个服务方法都应用了这个注解")]),n._v(" "),t("li",[n._v("事务注解应用在方法级别，是更细粒度的一种事务注解方式")])]),n._v(" "),t("p",[n._v("注意 : 如果某个方法和该方法所属类上都有事务注解属性，优先使用方法上的事务注解属性。")]),n._v(" "),t("p",[n._v("另外，Spring 支持三个不同的事务注解 :")]),n._v(" "),t("ol",[t("li",[n._v("Spring 事务注解 org.springframework.transaction.annotation.Transactional（纯正血统，官方推荐）")]),n._v(" "),t("li",[n._v("JTA事务注解 javax.transaction.Transactional")]),n._v(" "),t("li",[n._v("EJB 3 事务注解 javax.ejb.TransactionAttribute")])]),n._v(" "),t("p",[n._v("上面三个注解虽然语义上一样，但是使用方式上不完全一样，若真要使其它的时请注意各自的使用方式~")]),n._v(" "),t("p",[n._v("所以， 我们来看下Spring 事务注解：SpringTransactionAnnotationParser的解析：")]),n._v(" "),t("p",[n._v("findTransactionAttribute:146, AnnotationTransactionAttributeSource (org.springframework.transaction.annotation)")]),n._v(" "),t("p",[n._v("determineTransactionAttribute:164, AnnotationTransactionAttributeSource (org.springframework.transaction.annotation)")]),n._v(" "),t("p",[n._v("parseTransactionAnnotation:46, SpringTransactionAnnotationParser (org.springframework.transaction.annotation)")]),n._v(" "),t("p",[n._v("findMergedAnnotationAttributes:607, AnnotatedElementUtils (org.springframework.core.annotation)")]),n._v(" "),t("p",[n._v("searchWithFindSemantics:981, AnnotatedElementUtils (org.springframework.core.annotation)")]),n._v(" "),t("p",[n._v("searchWithFindSemantics:1009, AnnotatedElementUtils (org.springframework.core.annotation)")]),n._v(" "),t("p",[n._v("org.springframework.core.annotation.AnnotatedElementUtils#searchWithFindSemantics：")]),n._v(" "),t("p",[n._v("这是个公共方法， 根据传入的注解类型和元素进行匹配")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7543.png",alt:""}})]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7552.png",alt:""}})]),n._v(" "),t("ul",[t("li",[n._v("最终会解析成TransactionAttribute")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194136279.png",alt:"image-20220617194136279"}})]),n._v(" "),t("p",[n._v("OK,解析完成！！！")]),n._v(" "),t("ul",[t("li",[n._v("记录当前需要执行事务的方法名，记录到descriptor   方便后续调用时判断")])]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194136279.png",alt:""}})]),n._v(" "),t("ul",[t("li",[n._v("加入到缓存")])]),n._v(" "),t("p",[n._v("this.attributeCache.put(cacheKey, txAttr);")]),n._v(" "),t("ul",[t("li",[n._v("如果txAttr!=null 说明解析成功，return true    匹配成功！")]),n._v(" "),t("li",[n._v("创建动态代理跟Aop的逻辑是一样的，这里就不详细说了")])]),n._v(" "),t("h3",{attrs:{id:"调用代理对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用代理对象"}},[n._v("#")]),n._v(" 调用代理对象")]),n._v(" "),t("p",[n._v("https://www.processon.com/view/link/5f50d4c75653bb53ea8df95a")]),n._v(" "),t("p",[n._v("调用开始和AOP是一样的，这里省略之前的代码：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194241537.png",alt:"image-20220617194241537"}})]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("最终调用org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Nullable\nprotected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,\n      final InvocationCallback invocation) throws Throwable {\n\n   //获取我们的事务属源对象 在配置类中添加的， 在创建代理进行匹配的时候还用了它还记得吗（将解析的事务属性赋值进去了）\n   TransactionAttributeSource tas = getTransactionAttributeSource();\n   // 获取解析后的事务属性信息，\n   //  创建代理的时候也调用了getTransactionAttribute还记得吗， 如果解析到了事务属性就可以创建代理，\n   //  在这里是从解析后的缓存中获取\n   final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null);\n   // 获取我们配置的事务管理器对象 在我们自己的配置类里面配置的\n   final PlatformTransactionManager tm = determineTransactionManager(txAttr);\n   // 从tx属性对象中获取出标注了@Transactionl的方法描述符\n   // 之前往descriptor中设置的还记得吧\n   final String joinpointIdentification = methodIdentification(method, targetClass, txAttr);\n\n   //处理声明式事务\n   if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {\n      //有没有必要创建事务\n      TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);\n\n      Object retVal;\n      try {\n         //调用钩子函数进行回调目标方法\n         retVal = invocation.proceedWithInvocation();\n      }\n      catch (Throwable ex) {\n         //抛出异常进行回滚处理\n         completeTransactionAfterThrowing(txInfo, ex);\n         throw ex;\n      }\n      finally {\n         //清空我们的线程变量中transactionInfo的值\n         cleanupTransactionInfo(txInfo);\n      }\n      //提交事务\n      commitTransactionAfterReturning(txInfo);\n      return retVal;\n   }\n   // 编程式事务：（回调偏向）\n   else {\n       ...\n   }\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("方法概览：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194314225.png",alt:"image-20220617194314225"}})]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("关键点：")])]),n._v(" "),t("ul",[t("li",[n._v("前面4行都是获取一些基本信息")]),n._v(" "),t("li",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194346262.png",alt:"image-20220617194346262"}})])]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("createTransactionIfNecessary     这个方法逻辑最多，事务传播行为等实现都是在这种方法")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("如果有必要会创建一个事务，什么是有必要？")])])]),n._v(" "),t("li",[t("p",[n._v('try  中回调"连接点（事务的方法）"')])]),n._v(" "),t("li",[t("p",[n._v("catch中出现异常回滚事务")])]),n._v(" "),t("li",[t("p",[n._v("commitTransactionAfterReturning 提交事务")])])]),n._v(" "),t("p",[n._v("着重看一下"),t("strong",[n._v("createTransactionIfNecessary")]),n._v("的逻辑实现")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194400481.png",alt:"image-20220617194400481"}})]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('protected TransactionInfo createTransactionIfNecessary(@Nullable PlatformTransactionManager tm,\n      @Nullable TransactionAttribute txAttr, final String joinpointIdentification) {\n\n   // 如果还没有定义名字，把连接点的ID定义成事务的名称\n   if (txAttr != null && txAttr.getName() == null) {\n      txAttr = new DelegatingTransactionAttribute(txAttr) {\n         @Override\n         public String getName() {\n            return joinpointIdentification;\n         }\n      };\n   }\n\n   TransactionStatus status = null;\n   if (txAttr != null) {\n      if (tm != null) {\n         //获取一个事务状态\n         status = tm.getTransaction(txAttr);\n      }\n      else {\n         if (logger.isDebugEnabled()) {\n            logger.debug("Skipping transactional joinpoint [" + joinpointIdentification +\n                  "] because no transaction manager has been configured");\n         }\n      }\n   }\n   //把事物状态和事物属性等信息封装成一个TransactionInfo对象\n   return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("关键点：")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("将之前的Descriptor   作为事务名称")])]),n._v(" "),t("li",[t("p",[n._v("这里重点看下tm.getTransaction")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("tm 是我们在配置类 中的transactionManager")])])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Bean\npublic PlatformTransactionManager transactionManager(DataSource dataSource) {\n    return new DataSourceTransactionManager(dataSource);\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br")])]),t("p",[n._v("所以重点看下tm."),t("strong",[n._v("getTransaction")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException {\n   //尝试获取一个事务对象\n   Object transaction = doGetTransaction();\n\n   // Cache debug flag to avoid repeated checks.\n   boolean debugEnabled = logger.isDebugEnabled();\n\n   /**\n    * 判断从上一个方法传递进来的事务属性是不是为空\n    */\n   if (definition == null) {\n\n      definition = new DefaultTransactionDefinition();\n   }\n\n   /**\n    * 判断是不是已经存在了事务对象（事务嵌套）\n    */\n   if (isExistingTransaction(transaction)) {\n      //处理存在的事务\n      return handleExistingTransaction(definition, transaction, debugEnabled);\n   }\n\n   //检查事务设置的超时时间\n   if (definition.getTimeout() < TransactionDefinition.TIMEOUT_DEFAULT) {\n      throw new InvalidTimeoutException("Invalid transaction timeout", definition.getTimeout());\n   }\n\n   /**\n    * 若当前的事务属性式 PROPAGATION_MANDATORY 表示必须运行在事务中，若当前没有事务就抛出异常\n    * 由于isExistingTransaction(transaction)跳过了这里，说明当前是不存在事务的，那么就会抛出异常\n    */\n   if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) {\n      throw new IllegalTransactionStateException(\n            "No existing transaction found for transaction marked with propagation \'mandatory\'");\n   }\n   /**\n    * PROPAGATION_REQUIRED 当前存在事务就加入到当前的事务,没有就新开一个\n    * PROPAGATION_REQUIRES_NEW:新开一个事务,若当前存在事务就挂起当前事务\n    * PROPAGATION_NESTED: PROPAGATION_NESTED\n       表示如果当前正有一个事务在运行中，则该方法应该运行在 一个嵌套的事务中，\n       被嵌套的事务可以独立于封装事务进行提交或者回滚(保存点)，\n       如果封装事务不存在,行为就像 PROPAGATION_REQUIRES NEW\n    */\n   else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||\n         definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||\n         definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {\n      /**\n       * 挂起当前事务，在这里为啥传入null?\n       * 因为逻辑走到这里了,经过了上面的isExistingTransaction(transaction) 判断当前是不存在事务的\n       * 所有再这里是挂起当前事务传递一个null进去\n       */\n      SuspendedResourcesHolder suspendedResources = suspend(null);\n      if (debugEnabled) {\n         logger.debug("Creating new transaction with name [" + definition.getName() + "]: " + definition);\n      }\n      try {\n         //  意思是可以进行同步\n         boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);\n         // 构造事务状态对象,newTransaction=true代表是一个新事务\n         DefaultTransactionStatus status = newTransactionStatus(\n               definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);\n         //开启一个新的事物\n         doBegin(transaction, definition);\n         //把当前的事务信息绑定到线程变量去\n         prepareSynchronization(status, definition);\n         return status;\n      }\n      catch (RuntimeException | Error ex) {\n         resume(null, suspendedResources);\n         throw ex;\n      }\n   }\n   else { //创建一个空的事务\n      // Create "empty" transaction: no actual transaction, but potentially synchronization.\n      if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT && logger.isWarnEnabled()) {\n         logger.warn("Custom isolation level specified but no actual transaction initiated; " +\n               "isolation level will effectively be ignored: " + definition);\n      }\n      boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);\n      return prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);\n   }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br")])]),t("p",[n._v("​     "),t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194503743.png",alt:"image-20220617194503743"}})]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("**关键点：**可以看到这个方法里面做了很多关于事务的逻辑实现")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("Object transaction = doGetTransaction();")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("获得事务对象，这里事务是否存在主要看它携带的ConnectionHolder（数据库连接持有者），如果ConnectionHolder有则基本说明存在事务，什么情况下会存在已存在事务？  ——嵌套事务")])])]),n._v(" "),t("li",[t("p",[n._v("if (isExistingTransaction(transaction)) {")])]),n._v(" "),t("li",[t("ul",[t("li",[t("p",[n._v("这里判断是否存在事务，")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("如果已存在就处理嵌套的事务逻辑， 这里我们待会作为分支再来跟进")]),n._v(" "),t("li",[n._v("如果不存在就处理顶层的事务逻辑，下面将先介绍顶层的事务逻辑")])])])])])]),n._v(" "),t("h3",{attrs:{id:"顶层的事务逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顶层的事务逻辑"}},[n._v("#")]),n._v(" 顶层的事务逻辑")]),n._v(" "),t("ul",[t("li",[n._v("处理不同的传播行为，看这之前我们先了解一下事务的传播行为")])]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[n._v("事务传播行为类型")])]),n._v(" "),t("th",[t("strong",[n._v("外部不存在事务")])]),n._v(" "),t("th",[t("strong",[n._v("外部存在事务")])]),n._v(" "),t("th",[t("strong",[n._v("使用方式")])])])]),n._v(" "),t("tbody",[t("tr",[t("td",[n._v("REQUIRED（默认）")]),n._v(" "),t("td",[n._v("开启新的事务")]),n._v(" "),t("td",[n._v("融合到外部事务中")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.REQUIRED)适用增删改查")])]),n._v(" "),t("tr",[t("td",[n._v("SUPPORTS")]),n._v(" "),t("td",[n._v("不开启新的事务")]),n._v(" "),t("td",[n._v("融合到外部事务中")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.SUPPORTS)适用查询")])]),n._v(" "),t("tr",[t("td",[n._v("REQUIRES_NEW")]),n._v(" "),t("td",[n._v("开启新的事务")]),n._v(" "),t("td",[n._v("挂起外部事务，创建新的事务")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.REQUIRES_NEW)适用内部事务和外部事务不存在业务关联情况，如日志")])]),n._v(" "),t("tr",[t("td",[n._v("NOT_SUPPORTED")]),n._v(" "),t("td",[n._v("不开启新的事务")]),n._v(" "),t("td",[n._v("挂起外部事务，不开启事务")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.NOT_SUPPORTED)不常用")])]),n._v(" "),t("tr",[t("td",[n._v("NEVER")]),n._v(" "),t("td",[n._v("不开启新的事务")]),n._v(" "),t("td",[n._v("抛出异常")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.NEVER )不常用")])]),n._v(" "),t("tr",[t("td",[n._v("MANDATORY")]),n._v(" "),t("td",[n._v("抛出异常")]),n._v(" "),t("td",[n._v("融合到外部事务中")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.MANDATORY)不常用")])]),n._v(" "),t("tr",[t("td",[n._v("NESTED")]),n._v(" "),t("td",[n._v("开启新的事务")]),n._v(" "),t("td",[n._v("融合到外部事务中,SavePoint机制，外层影响内层， 内层不会影响外层")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.NESTED)不常用")])])])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("PROPAGATION_MANDATORY")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("当事务传播行为是MANDATORY ， 所以这里直接抛出异常")])])]),n._v(" "),t("li",[t("p",[n._v("PROPAGATION_REQUIRED || PROPAGATION_REQUIRES_NEW || PROPAGATION_NESTED")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("当事务传播行为是REQUIRED 或者 REQUIRES_NEW 或者 NESTED  都将开启一个新的事务，怎么开启：")])])])]),n._v(" "),t("ol",[t("li",[t("p",[n._v("suspend(null);  挂起当前事务， 顶层事务当前还没创建事务，没啥可挂的，所以传个null进去")])]),n._v(" "),t("li",[t("p",[n._v("newSynchronization   允许开启同步事务")])]),n._v(" "),t("li",[t("p",[n._v("newTransactionStatus  构造事务状态对象, 并且把事务的信息封装进去：")])]),n._v(" "),t("li",[t("ol",[t("li",[n._v("definition,    事务的属性")]),n._v(" "),t("li",[n._v("transaction,   事务的对象")]),n._v(" "),t("li",[n._v("true,      代表是一个新的事务")])])]),n._v(" "),t("li",[t("p",[n._v("doBegin(transaction, definition);    开启一个新事务， 这里跟进去看下怎么开启的")])]),n._v(" "),t("li",[t("p",[n._v("prepareSynchronization(status, definition);")])]),n._v(" "),t("li",[t("ol",[t("li",[n._v("把当前的事务信息绑定到线程变量去:   为什么要绑定要线程变量呢？  因为存在嵌套事务情况下需要用到")])])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 事务的名称\nprivate static final ThreadLocal<String> currentTransactionName = new NamedThreadLocal<>("Current transaction name");\n// 是否为只读事务\nprivate static final ThreadLocal<Boolean> currentTransactionReadOnly = new NamedThreadLocal<>("Current transaction read-only status");\n// 当前事务的隔离级别\nprivate static final ThreadLocal<Integer> currentTransactionIsolationLevel = new NamedThreadLocal<>("Current transaction isolation level");\n// 当前事务是否激活  ，怎么样算激活：  就是有事务就是已开启， 当然到这一步一般就有事务的，因为执行doBegin就开启了\nprivate static final ThreadLocal<Boolean> actualTransactionActive = new NamedThreadLocal<>("Actual transaction active");\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("看下"),t("strong",[n._v("doBegin")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('protected void doBegin(Object transaction, TransactionDefinition definition) {\n   //强制转化事物对象\n   DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;\n   Connection con = null;\n\n   try {\n      //判断事务对象没有数据库连接持有器\n      if (!txObject.hasConnectionHolder() ||\n            txObject.getConnectionHolder().isSynchronizedWithTransaction()) {\n         //通过数据源获取一个数据库连接对象\n         Connection newCon = obtainDataSource().getConnection();\n         if (logger.isDebugEnabled()) {\n            logger.debug("Acquired Connection [" + newCon + "] for JDBC transaction");\n         }\n         //把我们的数据库连接包装成一个ConnectionHolder对象 然后设置到我们的txObject对象中去\n         txObject.setConnectionHolder(new ConnectionHolder(newCon), true);\n      }\n\n      //标记当前的连接是一个同步事务...?\n      txObject.getConnectionHolder().setSynchronizedWithTransaction(true);\n      con = txObject.getConnectionHolder().getConnection();\n\n      // 设置isReadOnly、隔离级别\n      Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);\n      txObject.setPreviousIsolationLevel(previousIsolationLevel);\n\n      //setAutoCommit 默认为true，即每条SQL语句在各自的一个事务中执行。\n      if (con.getAutoCommit()) {\n         txObject.setMustRestoreAutoCommit(true);\n         if (logger.isDebugEnabled()) {\n            logger.debug("Switching JDBC Connection [" + con + "] to manual commit");\n         }\n         con.setAutoCommit(false); // 开启事务\n      }\n\n      //判断事务为只读事务\n      prepareTransactionalConnection(con, definition);\n      //设置事务激活\n      txObject.getConnectionHolder().setTransactionActive(true);\n\n      //设置事务超时时间\n      int timeout = determineTimeout(definition);\n      if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {\n         txObject.getConnectionHolder().setTimeoutInSeconds(timeout);\n      }\n\n      // 绑定我们的数据源和连接到我们的同步管理器上   把数据源作为key,数据库连接作为value 设置到线程变量中\n      if (txObject.isNewConnectionHolder()) {\n         TransactionSynchronizationManager.bindResource(obtainDataSource(), txObject.getConnectionHolder());\n      }\n   }\n\n   ...\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br")])]),t("p",[t("strong",[n._v("关键点：")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("txObject.setConnectionHolder(new ConnectionHolder(newCon), true);")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("获取一个数据库Connection,封装到ConnectionHolder中,  是不是跟上面doGetTransaction();上下呼应了。  所以假如存在嵌套事务， 就可以拿到ConnectionHolder了")])])]),n._v(" "),t("li",[t("p",[n._v("txObject.getConnectionHolder().setTransactionActive(true);")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("开启事务后将事务激活， 又上下呼应了")])])])]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617194945466.png",alt:"image-20220617194945466"}})]),n._v(" "),t("p",[n._v("到这里，如果不存在嵌套事务的话  事务的主要逻辑代码就是这些。")]),n._v(" "),t("h3",{attrs:{id:"嵌套的事务逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌套的事务逻辑"}},[n._v("#")]),n._v(" 嵌套的事务逻辑")]),n._v(" "),t("p",[n._v("ps:注意   要触发嵌套事务 如果是调用本类的方法一定要保证  将动态代理暴露在线程中：")]),n._v(" "),t("p",[n._v("@EnableAspectJAutoProxy(exposeProxy = true)")]),n._v(" "),t("p",[n._v("通过当前线程代理调用才能触发本类方法的调用：((PayService)AopContext.currentProxy()).updateProductStore(1);")]),n._v(" "),t("p",[n._v("在pay方法基础上加入嵌套事务方法：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public void pay(String accountId, double money) {\n    //更新余额\n     int retVal = accountInfoDao.updateAccountBlance(accountId,money);\n\n    ((PayService)AopContext.currentProxy()).updateProductStore(1);\n    System.out.println(1/0);\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("p",[n._v("我们就从嵌套方法第5行开始跟踪调试：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" ((PayService)AopContext.currentProxy()).updateProductStore(1);              \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("p",[n._v("同样也会来到：")]),n._v(" "),t("p",[n._v("org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction")]),n._v(" "),t("p",[n._v("org.springframework.transaction.interceptor.TransactionAspectSupport#createTransactionIfNecessary")]),n._v(" "),t("p",[n._v("org.springframework.transaction.support.AbstractPlatformTransactionManager#getTransaction")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Override\npublic final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException {\n   //尝试获取一个事务对象\n   Object transaction = doGetTransaction();\n\n   // Cache debug flag to avoid repeated checks.\n   boolean debugEnabled = logger.isDebugEnabled();\n\n   /**\n    * 判断从上一个方法传递进来的事务属性是不是为空\n    */\n   if (definition == null) {\n\n      definition = new DefaultTransactionDefinition();\n   }\n\n   /**\n    * 判断是不是已经存在了事务对象（事务嵌套）\n    */\n   if (isExistingTransaction(transaction)) {\n      //处理存在的事务\n      return handleExistingTransaction(definition, transaction, debugEnabled);\n   }\n   \n    ...省略\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("doGetTransaction  将能获得ConnectionHolder，因为顶层事务在开启事务时已经存储。  已经存在事务意味着什么不用我说了吧")])]),n._v(" "),t("li",[t("p",[n._v("if (isExistingTransaction(transaction)) {")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("成立！因为事务ConnectionHolder已经存在  并且 已经激活（在doBegin中激活的）。  执行嵌套事务handleExistingTransaction")])])])]),n._v(" "),t("p",[t("strong",[n._v("handleExistingTransaction")]),n._v("执行嵌套事务")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('private TransactionStatus handleExistingTransaction(\n      TransactionDefinition definition, Object transaction, boolean debugEnabled)\n      throws TransactionException {\n\n   /**\n    * NEVER  存在外部事务： 抛出异常\n    */\n   if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) {\n      throw new IllegalTransactionStateException(\n            "Existing transaction found for transaction marked with propagation \'never\'");\n   }\n\n   /**\n    * NOT_SUPPORTED 存在外部事务： 挂起外部事务\n    */\n   if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) {\n      if (debugEnabled) {\n         logger.debug("Suspending current transaction");\n      }\n      //挂起存在的事物\n      Object suspendedResources = suspend(transaction);\n      boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);\n      //创建一个新的非事物状态(保存了上一个存在事物状态的属性)\n      return prepareTransactionStatus(\n            definition, null, false, newSynchronization, debugEnabled, suspendedResources);\n   }\n\n   /**\n    * REQUIRES_NEW 存在外部事务： 挂起外部事务，创建新的事务\n    */\n   if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) {\n      if (debugEnabled) {\n         logger.debug("Suspending current transaction, creating new transaction with name [" +\n               definition.getName() + "]");\n      }\n      //挂起已经存在的事物\n      SuspendedResourcesHolder suspendedResources = suspend(transaction);\n      try {\n         // 是否需要新开启同步\n         boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);\n         //创建一个新的事物状态(包含了挂起的事务的属性)\n         DefaultTransactionStatus status = newTransactionStatus(\n               definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);\n         //开启新的事物\n         doBegin(transaction, definition);\n         //把新的事物状态设置到当前的线程变量中去\n         prepareSynchronization(status, definition);\n         return status;\n      }\n      catch (RuntimeException | Error beginEx) {\n         resumeAfterBeginException(transaction, suspendedResources, beginEx);\n         throw beginEx;\n      }\n   }\n\n   /**\n    *NESTED 存在外部事务： 融合到外部事务中  应用层面和REQUIRED一样， 源码层面\n    */\n   if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {\n      if (!isNestedTransactionAllowed()) {\n         throw new NestedTransactionNotSupportedException(\n               "Transaction manager does not allow nested transactions by default - " +\n               "specify \'nestedTransactionAllowed\' property with value \'true\'");\n      }\n      if (debugEnabled) {\n         logger.debug("Creating nested transaction with name [" + definition.getName() + "]");\n      }\n      // 是否支持保存点：非JTA事务走这个分支。AbstractPlatformTransactionManager默认是true，JtaTransactionManager复写了该方法false，DataSourceTransactionManager没有复写，还是true,\n      if (useSavepointForNestedTransaction()) {\n         //开启一个新的事物\n         DefaultTransactionStatus status =\n               prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null);\n         // 为事物设置一个回退点\n         // savepoint 可以在一组事务中，设置一个回滚点，点以上的不受影响，点以下的回滚。（外层影响内层， 内层不会影响外层）\n         status.createAndHoldSavepoint();\n         return status;\n      }\n      else { //  JTA事务走这个分支，创建新事务\n         boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);\n         DefaultTransactionStatus status = newTransactionStatus(\n               definition, transaction, true, newSynchronization, debugEnabled, null);\n         doBegin(transaction, definition);\n         prepareSynchronization(status, definition);\n         return status;\n      }\n   }\n\n   // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.\n   if (debugEnabled) {\n      logger.debug("Participating in existing transaction");\n   }\n   if (isValidateExistingTransaction()) {\n      if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {\n         Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();\n         if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) {\n            Constants isoConstants = DefaultTransactionDefinition.constants;\n            throw new IllegalTransactionStateException("Participating transaction with definition [" +\n                  definition + "] specifies isolation level which is incompatible with existing transaction: " +\n                  (currentIsolationLevel != null ?\n                        isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :\n                        "(unknown)"));\n         }\n      }\n      if (!definition.isReadOnly()) {\n         if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {\n            throw new IllegalTransactionStateException("Participating transaction with definition [" +\n                  definition + "] is not marked as read-only but existing transaction is");\n         }\n      }\n   }\n   boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);\n   return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br"),t("span",{staticClass:"line-number"},[n._v("89")]),t("br"),t("span",{staticClass:"line-number"},[n._v("90")]),t("br"),t("span",{staticClass:"line-number"},[n._v("91")]),t("br"),t("span",{staticClass:"line-number"},[n._v("92")]),t("br"),t("span",{staticClass:"line-number"},[n._v("93")]),t("br"),t("span",{staticClass:"line-number"},[n._v("94")]),t("br"),t("span",{staticClass:"line-number"},[n._v("95")]),t("br"),t("span",{staticClass:"line-number"},[n._v("96")]),t("br"),t("span",{staticClass:"line-number"},[n._v("97")]),t("br"),t("span",{staticClass:"line-number"},[n._v("98")]),t("br"),t("span",{staticClass:"line-number"},[n._v("99")]),t("br"),t("span",{staticClass:"line-number"},[n._v("100")]),t("br"),t("span",{staticClass:"line-number"},[n._v("101")]),t("br"),t("span",{staticClass:"line-number"},[n._v("102")]),t("br"),t("span",{staticClass:"line-number"},[n._v("103")]),t("br"),t("span",{staticClass:"line-number"},[n._v("104")]),t("br"),t("span",{staticClass:"line-number"},[n._v("105")]),t("br"),t("span",{staticClass:"line-number"},[n._v("106")]),t("br"),t("span",{staticClass:"line-number"},[n._v("107")]),t("br"),t("span",{staticClass:"line-number"},[n._v("108")]),t("br"),t("span",{staticClass:"line-number"},[n._v("109")]),t("br"),t("span",{staticClass:"line-number"},[n._v("110")]),t("br"),t("span",{staticClass:"line-number"},[n._v("111")]),t("br"),t("span",{staticClass:"line-number"},[n._v("112")]),t("br"),t("span",{staticClass:"line-number"},[n._v("113")]),t("br")])]),t("p",[t("strong",[n._v("关键点：")])]),n._v(" "),t("ul",[t("li",[n._v("根据事务传播行为作处理：")])]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[n._v("事务传播行为类型")])]),n._v(" "),t("th",[t("strong",[n._v("外部不存在事务")])]),n._v(" "),t("th",[t("strong",[n._v("外部存在事务")])]),n._v(" "),t("th",[t("strong",[n._v("使用方式")])])])]),n._v(" "),t("tbody",[t("tr",[t("td",[n._v("REQUIRED（默认）")]),n._v(" "),t("td",[n._v("开启新的事务")]),n._v(" "),t("td",[n._v("融合到外部事务中")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.REQUIRED)适用增删改查")])]),n._v(" "),t("tr",[t("td",[n._v("SUPPORTS")]),n._v(" "),t("td",[n._v("不开启新的事务")]),n._v(" "),t("td",[n._v("融合到外部事务中")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.SUPPORTS)适用查询")])]),n._v(" "),t("tr",[t("td",[n._v("REQUIRES_NEW")]),n._v(" "),t("td",[n._v("开启新的事务")]),n._v(" "),t("td",[n._v("挂起外部事务，创建新的事务")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.REQUIRES_NEW)适用内部事务和外部事务不存在业务关联情况，如日志")])]),n._v(" "),t("tr",[t("td",[n._v("NOT_SUPPORTED")]),n._v(" "),t("td",[n._v("不开启新的事务")]),n._v(" "),t("td",[n._v("挂起外部事务")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.NOT_SUPPORTED)不常用")])]),n._v(" "),t("tr",[t("td",[n._v("NEVER")]),n._v(" "),t("td",[n._v("不开启新的事务")]),n._v(" "),t("td",[n._v("抛出异常")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.NEVER )不常用")])]),n._v(" "),t("tr",[t("td",[n._v("MANDATORY")]),n._v(" "),t("td",[n._v("抛出异常")]),n._v(" "),t("td",[n._v("融合到外部事务中")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.MANDATORY)不常用")])]),n._v(" "),t("tr",[t("td",[n._v("NESTED")]),n._v(" "),t("td",[n._v("开启新的事务")]),n._v(" "),t("td",[n._v("融合到外部事务中,SavePoint机制，外层影响内层， 内层不会影响外层")]),n._v(" "),t("td",[n._v("@Transactional(propagation = Propagation.NESTED)不常用")])])])]),n._v(" "),t("ul",[t("li",[t("ul",[t("li",[t("p",[n._v("PROPAGATION_NEVER  抛出异常")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("当事务传播行为是MANDATORY ，外部存在事务抛出异常： 所以这里直接抛出异常")])])]),n._v(" "),t("li",[t("p",[n._v("PROPAGATION_NOT_SUPPORTED 挂起外部事务，不开启事务提交")])])])])]),n._v(" "),t("ol",[t("li",[n._v("suspend(transaction);   挂起当前顶层事务，怎么挂呢？ 其实就是将线程变量里面的事务信息拿出来，再置空。 待事务提交或回滚后再放回线程变量中")])]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617195145047.png",alt:"image-20220617195145047"}})]),n._v(" "),t("ol",[t("li",[t("p",[n._v("newSynchronization   允许开启同步事务")])]),n._v(" "),t("li",[t("p",[n._v("newTransactionStatus  构造事务状态对象, 并且把事务的信息封装进去：")])]),n._v(" "),t("li",[t("ol",[t("li",[n._v("definition,    事务的属性")]),n._v(" "),t("li",[n._v("transaction,   null    因为它不开启事务")]),n._v(" "),t("li",[n._v("false,     不是新事务")]),n._v(" "),t("li",[n._v("suspendedResources   挂起的事务对象，在事务提交或回滚后会调用重新放回线程变量中")])])]),n._v(" "),t("li",[t("p",[n._v("prepareSynchronization(status, definition);")])])]),n._v(" "),t("p",[n._v("把当前的事务信息绑定到线程变量去:   为什么要绑定要线程变量呢？  因为存在嵌套事务情况下需要用到")]),n._v(" "),t("ul",[t("li",[t("ul",[t("li",[n._v("PROPAGATION_REQUIRES_NEW 挂起外部事务，创建新的事务")])])])]),n._v(" "),t("ol",[t("li",[t("p",[n._v("suspend(null);  挂起当前顶层事务，怎么挂呢？ 其实就是将线程变量里面的事务信息拿出来，再置空。 待事务提交或回滚后再放回线程变量中")])]),n._v(" "),t("li",[t("p",[n._v("newSynchronization   允许开启同步事务")])]),n._v(" "),t("li",[t("p",[n._v("newTransactionStatus  构造事务状态对象, 并且把事务的信息封装进去：")])]),n._v(" "),t("li",[t("ol",[t("li",[n._v("definition,    事务的属性")]),n._v(" "),t("li",[n._v("transaction,   事务的对象")]),n._v(" "),t("li",[n._v("true,      代表是一个新的事务")]),n._v(" "),t("li",[n._v("suspendedResources   挂起的事务对象，在事务提交或回滚后会调用重新放回线程变量中")])])]),n._v(" "),t("li",[t("p",[n._v("doBegin(transaction, definition);    开启一个新事务， 这里跟进去看下怎么开启的")])]),n._v(" "),t("li",[t("p",[n._v("prepareSynchronization(status, definition);")])]),n._v(" "),t("li",[t("ol",[t("li",[n._v("把当前的事务信息绑定到线程变量去:   为什么要绑定要线程变量呢？  因为存在嵌套事务情况下需要用到")])])])]),n._v(" "),t("ul",[t("li",[t("ul",[t("li",[n._v("PROPAGATION_NESTED 融合到外部事务中,SavePoint机制，外层影响内层， 内层不会影响外层")])])]),n._v(" "),t("li",[t("p",[n._v("这个不做过多介绍，  去了解一下jdbc的Savepoint自然就懂了")])]),n._v(" "),t("li",[t("ul",[t("li",[n._v("return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);")])])]),n._v(" "),t("li",[t("ol",[t("li",[n._v("definition,    原事务的属性")]),n._v(" "),t("li",[n._v("transaction,   原事务的对象")]),n._v(" "),t("li",[n._v("newTransaction:false,      代表"),t("strong",[n._v("不")]),n._v("是一个新的事务,如果不是新事务，提交事务时： 由外层事务控制统一提交事务")])])])]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/image-20220617195201907.png",alt:"image-20220617195201907"}})]),n._v(" "),t("p",[n._v("所以最终返回一个DefaultTransactionStatus， 后续回滚、提交 都可以根据改对象进行控制。  回滚提交逻辑比较简单不在这里重复了")]),n._v(" "),t("p",[n._v("事务挂起")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/%E4%BA%8B%E5%8A%A1%E6%8C%82%E8%B5%B7-%E8%AF%BE%E4%B8%8A%E5%9B%BE.png",alt:""}})])])}),[],!1,null,null,null);t.default=e.exports}}]);