(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{438:function(n,e,a){"use strict";a.r(e);var s=a(5),i=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"课程内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#课程内容"}},[n._v("#")]),n._v(" 课程内容")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("Dubbo中propertie文件解析以及处理原理")])]),n._v(" "),e("li",[e("p",[n._v("Dubbo中@Service注解解析以及处理原理")])]),n._v(" "),e("li",[e("p",[n._v("Dubbo中@Reference注解解析以及处理原理")])])]),n._v(" "),e("h2",{attrs:{id:"笔记更新地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#笔记更新地址"}},[n._v("#")]),n._v(" 笔记更新地址：")]),n._v(" "),e("p",[e("a",{attrs:{href:"https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497?#",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497"),e("OutboundLink")],1),n._v("（密码：kyys） 《Dubbo笔记》")]),n._v(" "),e("h2",{attrs:{id:"整体架构和流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整体架构和流程"}},[n._v("#")]),n._v(" 整体架构和流程")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/dubbo/30.png",alt:""}})]),n._v(" "),e("p",[n._v("应用启动类与配置")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class Application {\n    public static void main(String[] args) throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ProviderConfiguration.class);\n        context.start();\n        System.in.read();\n    }\n\n    @Configuration\n    @EnableDubbo(scanBasePackages = "org.apache.dubbo.demo.provider")\n    @PropertySource("classpath:/spring/dubbo-provider.properties")\n    static class ProviderConfiguration {\n       \n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("p",[n._v("应用配置类为ProviderConfiguration, 在配置上有两个比较重要的注解")]),n._v(" "),e("ol",[e("li",[n._v("@PropertySource表示将dubbo-provider.properties中的配置项添加到Spring容器中，可以通过@Value的方式获取到配置项中的值")]),n._v(" "),e("li",[n._v('@EnableDubbo(scanBasePackages = "org.apache.dubbo.demo.provider")表示对指定包下的类进行扫描，扫描@Service与@Reference注解，并且进行处理')])]),n._v(" "),e("h3",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[n._v("#")])]),n._v(" "),e("h2",{attrs:{id:"enabledubbo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enabledubbo"}},[n._v("#")]),n._v(" @EnableDubbo")]),n._v(" "),e("p",[n._v("在EnableDubbo注解上，有另外两个注解，也是研究Dubbo最重要的两个注解")]),n._v(" "),e("ol",[e("li",[n._v("@EnableDubboConfig")]),n._v(" "),e("li",[n._v("@DubboComponentScan")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@Documented\n@Import(DubboConfigConfigurationRegistrar.class)\npublic @interface EnableDubboConfig {\n    boolean multiple() default true;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(DubboComponentScanRegistrar.class)\npublic @interface DubboComponentScan {\n    String[] value() default {};\n\n    String[] basePackages() default {};\n\n    Class<?>[] basePackageClasses() default {};\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("注意两个注解中对应的@Import注解所导入的类：")]),n._v(" "),e("ol",[e("li",[n._v("DubboConfigConfigurationRegistrar")]),n._v(" "),e("li",[n._v("DubboComponentScanRegistrar")])]),n._v(" "),e("p",[n._v("Spring在启动时会解析这两个注解，并且执行对应的Registrar类中的registerBeanDefinitions方法（这是Spring中提供的扩展功能。）")]),n._v(" "),e("h2",{attrs:{id:"dubboconfigconfigurationregistrar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubboconfigconfigurationregistrar"}},[n._v("#")]),n._v(" DubboConfigConfigurationRegistrar")]),n._v(" "),e("h3",{attrs:{id:"流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程"}},[n._v("#")]),n._v(" 流程")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/dubbo/31.png",alt:""}})]),n._v(" "),e("p",[n._v("Spring启动时，会调用DubboConfigConfigurationRegistrar的registerBeanDefinitions方法，该方法是利用Spring中的AnnotatedBeanDefinitionReader来读取：")]),n._v(" "),e("ol",[e("li",[n._v("DubboConfigConfiguration.Single."),e("strong",[n._v("class")])]),n._v(" "),e("li",[n._v("DubboConfigConfiguration.Multiple."),e("strong",[n._v("class")])])]),n._v(" "),e("p",[n._v("这两个类上的注解。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@EnableDubboConfigBindings({\n    @EnableDubboConfigBinding(prefix = "dubbo.application", type = ApplicationConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.module", type = ModuleConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.registry", type = RegistryConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.protocol", type = ProtocolConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.monitor", type = MonitorConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.provider", type = ProviderConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.consumer", type = ConsumerConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.config-center", type = ConfigCenterBean.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.metadata-report", type = MetadataReportConfig.class),\n    @EnableDubboConfigBinding(prefix = "dubbo.metrics", type = MetricsConfig.class)\n})\npublic static class Single {\n\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@EnableDubboConfigBindings({\n\t@EnableDubboConfigBinding(prefix = "dubbo.applications", type = ApplicationConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.modules", type = ModuleConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.registries", type = RegistryConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.protocols", type = ProtocolConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.monitors", type = MonitorConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.providers", type = ProviderConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.consumers", type = ConsumerConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.config-centers", type = ConfigCenterBean.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.metadata-reports", type = MetadataReportConfig.class, multiple = true),\n\t@EnableDubboConfigBinding(prefix = "dubbo.metricses", type = MetricsConfig.class, multiple = true)\n})\npublic static class Multiple {\n\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("这两个类主要用到的就是@EnableDubboConfigBindings注解：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(DubboConfigBindingsRegistrar.class)\npublic @interface EnableDubboConfigBindings {\n\n    /**\n     * The value of {@link EnableDubboConfigBindings}\n     *\n     * @return non-null\n     */\n    EnableDubboConfigBinding[] value();\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("p",[n._v("@EnableDubboConfigBindings注解上也有一个@Import注解，导入的是DubboConfigBindingsRegistrar."),e("strong",[n._v("class")]),n._v("。该类会获取@EnableDubboConfigBindings注解中的value，也就是多个@EnableDubboConfigBinding注解，然后利用DubboConfigBindingRegistrar去处理这些@EnableDubboConfigBinding注解。")]),n._v(" "),e("h3",{attrs:{id:"dubboconfigbindingregistrar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubboconfigbindingregistrar"}},[n._v("#")]),n._v(" DubboConfigBindingRegistrar")]),n._v(" "),e("p",[n._v("此类中的主要方法是registerDubboConfigBeans()方法，主要功能就是获取用户所设置的properties文件中的内容，对Properties文件进行解析，根据Properties文件的每个配置项的前缀、参数名、参数值生成对应的BeanDefinition。")]),n._v(" "),e("p",[n._v("比如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("dubbo.application.name=dubbo-demo-provider1-application\ndubbo.application.logger=log4j\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v('前缀为"dubbo.application"的配置项，会生成一个ApplicationConfig类型的BeanDefinition，并且name和logger属性为对应的值。')]),n._v(" "),e("p",[n._v("再比如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("dubbo.protocols.p1.name=dubbo\ndubbo.protocols.p1.port=20880\ndubbo.protocols.p1.host=0.0.0.0\n\ndubbo.protocols.p2.name=dubbo\ndubbo.protocols.p2.port=20881\ndubbo.protocols.p2.host=0.0.0.0\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v('比如前缀为"dubbo.protocols"的配置项，会生成'),e("strong",[n._v("两")]),n._v("个ProtocolConfig类型的BeanDefinition，两个BeanDefinition的beanName分别为p1和p2。")]),n._v(" "),e("p",[n._v("并且还会针对生成的每个BeanDefinition生成一个和它一对一绑定的BeanPostProcessor，类型为DubboConfigBindingBeanPostProcessor."),e("strong",[n._v("class")]),n._v("。")]),n._v(" "),e("h3",{attrs:{id:"dubboconfigbindingbeanpostprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubboconfigbindingbeanpostprocessor"}},[n._v("#")]),n._v(" DubboConfigBindingBeanPostProcessor")]),n._v(" "),e("p",[n._v("DubboConfigBindingBeanPostProcessor是一个BeanPostProcessor，在Spring启动过程中，会针对所有的Bean对象进行后置加工，但是在DubboConfigBindingBeanPostProcessor中有如下判断：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("if (this.beanName.equals(beanName) && bean instanceof AbstractConfig)\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("所以DubboConfigBindingBeanPostProcessor并不会处理Spring容器中的所有Bean，它只会处理上文由Dubbo所生成的Bean对象。")]),n._v(" "),e("p",[n._v("并且，在afterPropertiesSet()方法中，会先创建一个DefaultDubboConfigBinder。")]),n._v(" "),e("h3",{attrs:{id:"defaultdubboconfigbinder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defaultdubboconfigbinder"}},[n._v("#")]),n._v(" DefaultDubboConfigBinder")]),n._v(" "),e("p",[n._v("当某个AbstractConfig类型的Bean，在经过DubboConfigBindingBeanPostProcessor处理时，此时Bean对象中的属性是没有值的，会利用DefaultDubboConfigBinder进行赋值。底层就是利用Spring中的DataBinder技术，结合properties文件对对应的属性进行赋值。")]),n._v(" "),e("p",[n._v("对应一个AbstractConfig类型（针对的其实是子类，比如ApplicationConfig、RegistryConfig）的Bean，每个类都有一些属性，而properties文件是一个key-value对，所以实际上DataBinder就是将属性名和properties文件中的key进行匹配，如果匹配成功，则把value赋值给属性。具体DataBinder技术是如何工作的，请自行学习（不难）。")]),n._v(" "),e("p",[n._v("举个例子：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("dubbo.application.name=dubbo-demo-provider1-application\ndubbo.application.logger=log4j\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("对于此配置，它对应ApplicationConfig对象（beanName是自动生成的），所以最终ApplicationConfig对象的name属性的值为“dubbo-demo-provider1-application”，logger属性的值为“log4j”。")]),n._v(" "),e("p",[n._v("对于")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("dubbo.protocols.p1.name=dubbo\ndubbo.protocols.p1.port=20880\ndubbo.protocols.p1.host=0.0.0.0\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("它对应ProtocolConfig对象（beanName为p1）,所以最终ProtocolConfig对象的name属性的值为“dubbo”，port属性的值为20880，host属性的值为“0.0.0.0”。")]),n._v(" "),e("p",[n._v("这样就完成了对properties文件的解析。")]),n._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[n._v("DubboConfigConfigurationRegistrar的主要作用就是对propties文件进行解析并根据不同的配置项项生成对应类型的Bean对象。")]),n._v(" "),e("h2",{attrs:{id:"dubbocomponentscanregistrar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubbocomponentscanregistrar"}},[n._v("#")]),n._v(" DubboComponentScanRegistrar")]),n._v(" "),e("p",[n._v("DubboConfigConfigurationRegistrar的作用是向Spring容器中注册两个Bean:")]),n._v(" "),e("ol",[e("li",[n._v("ServiceAnnotationBeanPostProcessor")]),n._v(" "),e("li",[n._v("ReferenceAnnotationBeanPostProcessor")])]),n._v(" "),e("h3",{attrs:{id:"serviceannotationbeanpostprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serviceannotationbeanpostprocessor"}},[n._v("#")]),n._v(" ServiceAnnotationBeanPostProcessor")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/dubbo/32.png",alt:""}})]),n._v(" "),e("p",[n._v("ServiceAnnotationBeanPostProcessor是一个BeanDefinitionRegistryPostProcessor，是用来注册BeanDefinition的。")]),n._v(" "),e("p",[n._v("它的主要作用是扫描Dubbo的@Service注解，一旦扫描到某个@Service注解就把它以及被它注解的类当做一个Dubbo服务，进行"),e("strong",[n._v("服务导出")]),n._v("。")]),n._v(" "),e("h4",{attrs:{id:"dubboclasspathbeandefinitionscanner"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubboclasspathbeandefinitionscanner"}},[n._v("#")]),n._v(" DubboClassPathBeanDefinitionScanner")]),n._v(" "),e("p",[n._v("DubboClassPathBeanDefinitionScanner是所Dubbo自定义的扫描器，继承了Spring中的ClassPathBeanDefinitionScanner了。")]),n._v(" "),e("p",[n._v("DubboClassPathBeanDefinitionScanner相对于ClassPathBeanDefinitionScanner并没有做太多的改变，只是把useDefaultFilters设置为了false，主要是因为Dubbo中的@Service注解是Dubbo自定义的，在这个注解上并没有用@Component注解（因为Dubbo不是一定要结合Spring才能用），所以为了能利用Spring的扫描逻辑，需要把useDefaultFilters设置为false。")]),n._v(" "),e("p",[n._v("没扫描到一个@Service注解，就会得到一个BeanDefinition，这个BeanDefinition的beanClass属性就是具体的服务实现类。")]),n._v(" "),e("p",[n._v("但，如果仅仅只是这样，这只是得到了一个Spring中的Bean，对于Dubbo来说此时得到的Bean是一个"),e("strong",[n._v("服务")]),n._v("，并且，还需要解析@Service注解的配置信息，因为这些都是服务的参数信息，所以在扫描完了之后，会针对所得到的每个BeanDefinition，都会"),e("strong",[n._v("额外")]),n._v("的再生成一个"),e("strong",[n._v("ServiceBean")]),n._v("类型的Bean对象。")]),n._v(" "),e("h4",{attrs:{id:"servicebean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servicebean"}},[n._v("#")]),n._v(" ServiceBean")]),n._v(" "),e("p",[n._v("ServiceBean表示一个Dubbo服务，它有一些参数，比如：")]),n._v(" "),e("ol",[e("li",[e("p",[e("strong",[n._v("ref，表示服务的具体实现类")])])]),n._v(" "),e("li",[e("p",[e("strong",[n._v("interface，表示服务的接口")])])]),n._v(" "),e("li",[e("p",[e("strong",[n._v("parameters，表示服务的参数（@Service注解中所配置的信息）")])])]),n._v(" "),e("li",[e("p",[e("strong",[n._v("application，表示服务所属的应用")])])]),n._v(" "),e("li",[e("p",[e("strong",[n._v("protocols，表示服务所使用的协议")])])]),n._v(" "),e("li",[e("p",[e("strong",[n._v("registries，表示服务所要注册的注册中心")])])])]),n._v(" "),e("p",[e("strong",[n._v("所以在扫描到一个@Service注解后，其实会得到两个Bean:")])]),n._v(" "),e("ol",[e("li",[n._v("一个就是服务实现类本身一个Bean对象")]),n._v(" "),e("li",[n._v("一个就是对应的ServiceBean类型的一个Bean对象")])]),n._v(" "),e("p",[n._v("并且需要注意的是，ServiceBean实现了ApplicationListener接口，所以当Spring启动完成后会触发onApplicationEvent()方法的调用，而在这个方法内会调用"),e("strong",[n._v("export()")]),n._v("，这个方法就是"),e("strong",[n._v("服务导出的入口方法")]),n._v("。")]),n._v(" "),e("p",[n._v("关于RuntimeBeanReference参考https://www.yuque.com/renyong-jmovm/ufz328/gbwvk7。")]),n._v(" "),e("h3",{attrs:{id:"referenceannotationbeanpostprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#referenceannotationbeanpostprocessor"}},[n._v("#")]),n._v(" ReferenceAnnotationBeanPostProcessor")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/dubbo/33.png",alt:""}})]),n._v(" "),e("p",[n._v("ReferenceAnnotationBeanPostProcessor是处理@Reference注解的。")]),n._v(" "),e("p",[n._v("ReferenceAnnotationBeanPostProcessor的父类是AnnotationInjectedBeanPostProcessor，是一个InstantiationAwareBeanPostProcessorAdapter，是一个BeanPostProcessor。")]),n._v(" "),e("p",[n._v("Spring在对Bean进行依赖注入时会调用AnnotationInjectedBeanPostProcessor的postProcessPropertyValues()方法来给某个Bean按照ReferenceAnnotationBeanPostProcessor的逻辑进行依赖注入。")]),n._v(" "),e("p",[n._v("在注入之前会查找注入点，被@Reference注解的属性或方法都是注入点。")]),n._v(" "),e("p",[n._v("针对某个Bean找到所有注入点之后，就会进行注入了，注入就是给属性或给set方法赋值，但是在赋值之前得先得到一个值，此时就会调用ReferenceAnnotationBeanPostProcessor的"),e("strong",[n._v("doGetInjectedBean()"),e("strong",[n._v("方法来得到一个对象，而这个对象的构造就比较复杂了，因为对于Dubbo来说，注入给某个属性的应该是当前这个")]),n._v("属性所对应的服务接口的代理对象")]),n._v("。")]),n._v(" "),e("p",[n._v("但是在生成这个代理对象之前，还要考虑问题：")]),n._v(" "),e("ol",[e("li",[n._v("当前所需要引入的这个服务，是不是在本地就存在？不存在则要把按Dubbo的逻辑生成一个代理对象")]),n._v(" "),e("li",[n._v("当前所需要引入的这个服务，是不是已经被引入过了（是不是已经生成过代理对象了），如果是应该是不用再重复去生成了。")])]),n._v(" "),e("p",[e("strong",[n._v("首先如何判断当前所引入的服务是本地的一个服务（就是当前应用自己所提供的服务）。")])]),n._v(" "),e("p",[n._v("我们前面提到，Dubbo通过@Service来提供一个服务，并且会生成两个Bean：")]),n._v(" "),e("ol",[e("li",[n._v("一个服务实现类本身Bean")]),n._v(" "),e("li",[n._v("一个ServiceBean类型的Bean，这个Bean的名字是这么生成的：")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('private String generateServiceBeanName(AnnotationAttributes serviceAnnotationAttributes, Class<?> interfaceClass) {\n\tServiceBeanNameBuilder builder = create(interfaceClass, environment)\n                .group(serviceAnnotationAttributes.getString("group"))\n                .version(serviceAnnotationAttributes.getString("version"));\n\treturn builder.build();\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("是通过接口类型+group+version来作为ServiceBean类型Bean的名字的。")]),n._v(" "),e("p",[n._v("所以现在对于服务引入，也应该提前根据@Reference注解中的信息和属性接口类型去判断一下当前Spring容器中是否存在对应的ServiceBean对象，如果存在则直接取出ServiceBean对象的ref属性所对应的对象，作为要注入的结果。")]),n._v(" "),e("p",[e("strong",[n._v("然后如何判断当前所引入的这个服务是否已经被引入过了")]),n._v("**（是不是已经生成过代理对象了）。**")]),n._v(" "),e("p",[n._v("这就需要在第一次引入某个服务后（生成代理对象后）进行缓存（记录一下）。Dubbo中是这么做的:")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("首先根据@Reference注解的所有信息+属性接口类型生成一个"),e("strong",[n._v("字符串")])])]),n._v(" "),e("li",[e("p",[n._v("然后@Reference注解的所有信息+属性接口类型生成一个ReferenceBean对象（"),e("strong",[n._v("ReferenceBean对象中的get方法可以得到一个Dubbo生成的代理对象，可以理解为服务引入的入口方法")]),n._v("）")])]),n._v(" "),e("li",[e("p",[n._v("把字符串作为beanName，ReferenceBean对象作为bean注册到Spring容器中，同时也会放入"),e("strong",[n._v("referenceBeanCache")]),n._v("中。")])])]),n._v(" "),e("p",[n._v("有了这些逻辑，@Reference注解服务引入的过程是这样的：")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("得到当前所引入服务对应的ServiceBean的beanName（源码中叫referencedBeanName）")])]),n._v(" "),e("li",[e("p",[n._v("根据@Reference注解的所有信息+属性接口类型得到一个referenceBeanName")])]),n._v(" "),e("li",[e("p",[n._v("根据referenceBeanName从"),e("strong",[n._v("referenceBeanCach")]),n._v("e获取对应的ReferenceBean，如果没有则创建一个ReferenceBean")])]),n._v(" "),e("li",[e("p",[n._v("根据referencedBeanName（ServiceBean的beanName）判断Spring容器中是否存在该bean，如果存在则给ref属性所对应的bean取一个别名，别名为referenceBeanName。")])]),n._v(" "),e("li",[e("ol",[e("li",[n._v("如果Spring容器中不存在referencedBeanName对应的bean，则判断容器中是否存在referenceBeanName所对应的Bean，如果不存在则将创建出来的ReferenceBean注册到Spring容器中（**此处这么做就支持了可以通过@Autowired注解也可以使用服务了，**"),e("strong",[n._v("ReferenceBean是一个FactoryBean")]),n._v("）")])])]),n._v(" "),e("li",[e("p",[n._v("如果referencedBeanName存在对应的Bean，则额外生成一个代理对象，代理对象的InvocationHandler会缓存在"),e("strong",[n._v("localReferenceBeanInvocationHandlerCache中，这样如果引入的是同一个服务，并且这个服务在本地，")])])]),n._v(" "),e("li",[e("p",[n._v("如果referencedBeanName不存在对应的Bean，则直接调用ReferenceBean的get()方法得到一个代理对象")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);