(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{647:function(n,s,t){"use strict";t.r(s);var a=t(5),e=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[n._v("#")]),n._v(" 简介")]),n._v(" "),s("p",[n._v("Java可以用枚举类写法来实现单例模式，它可以防止反射和序列化破坏单例。")]),n._v(" "),s("h1",{attrs:{id:"枚举类单例模式的写法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举类单例模式的写法"}},[n._v("#")]),n._v(" 枚举类单例模式的写法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public enum Singleton {\n    INSTANCE;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("h1",{attrs:{id:"防止反射破坏单例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防止反射破坏单例"}},[n._v("#")]),n._v(" "),s("strong",[n._v("防止反射破坏单例")])]),n._v(" "),s("h2",{attrs:{id:"例1-无参构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例1-无参构造函数"}},[n._v("#")]),n._v(" "),s("strong",[n._v("例1：无参构造函数")])]),n._v(" "),s("p",[s("strong",[n._v("实例")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package org.example.a;\nimport java.lang.reflect.Constructor;\npublic class Demo {\n    public static void main(String[] args) {\n        Class<?> singletonClass = Singleton.class;\n        try {\n            Constructor c = singletonClass.getDeclaredConstructor(null);\n            c.setAccessible(true);\n            Object singleton1 = c.newInstance();\n            Object singleton2 = c.newInstance();\n            System.out.println(singleton1 == singleton2);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("执行结果")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("java.lang.NoSuchMethodException: org.example.a.Singleton.<init>()\n\tat java.lang.Class.getConstructor0(Class.java:3082)\n\tat java.lang.Class.getDeclaredConstructor(Class.java:2178)\n\tat org.example.a.Demo.main(Demo.java:9)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[s("strong",[n._v("原理")])]),n._v(" "),s("p",[n._v("SingletonClass.getDeclaredConstructors()获取所有构造器，会发现并没有我们所设置的无参构造器，只有一个参数为（String.class,int.class）构造器，因为一旦一个类声明为枚举，实际上就是继承了Enum，来看看Enum类源码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public abstract class Enum<E extends Enum<E>>\n\t\timplements Comparable<E>, Serializable {\n\tprivate final String name;\n\tpublic final String name() {\n\t\treturn name;\n\t}\n\tprivate final int ordinal;\n\tpublic final int ordinal() {\n\t\treturn ordinal;\n\t}\n\tprotected Enum(String name, int ordinal) {\n\t\tthis.name = name;\n\t\tthis.ordinal = ordinal;\n\t}\n\t//余下省略\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("h2",{attrs:{id:"例2-使用-string-class-int-class-构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例2-使用-string-class-int-class-构造器"}},[n._v("#")]),n._v(" "),s("strong",[n._v("例2：使用（String.class,int.class）构造器")])]),n._v(" "),s("p",[s("strong",[n._v("实例")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package org.example.a;\nimport java.lang.reflect.Constructor;\npublic class Demo {\n    public static void main(String[] args) {\n        Class<?> singletonClass = Singleton.class;\n        try {\n            Constructor c = singletonClass.getDeclaredConstructor(String.class, int.class);\n            c.setAccessible(true);\n            Object singleton1 = c.newInstance();\n            Object singleton2 = c.newInstance();\n            System.out.println(singleton1 == singleton2);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("执行结果")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("java.lang.IllegalArgumentException: Cannot reflectively create enum objects\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:417)\n\tat org.example.a.Demo.main(Demo.java:11)\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[s("strong",[n._v("原理")])]),n._v(" "),s("p",[n._v("追踪java.lang.reflect.Constructor#newInstance")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@CallerSensitive\npublic T newInstance(Object ... initargs)\n\tthrows InstantiationException, IllegalAccessException,\n\t\t   IllegalArgumentException, InvocationTargetException\n{\n\tif (!override) {\n\t\tif (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n\t\t\tClass<?> caller = Reflection.getCallerClass();\n\t\t\tcheckAccess(caller, clazz, null, modifiers);\n\t\t}\n\t}\n\tif ((clazz.getModifiers() & Modifier.ENUM) != 0)\n\t\tthrow new IllegalArgumentException("Cannot reflectively create enum objects");\n\tConstructorAccessor ca = constructorAccessor;   // read volatile\n\tif (ca == null) {\n\t\tca = acquireConstructorAccessor();\n\t}\n\t@SuppressWarnings("unchecked")\n\tT inst = (T) ca.newInstance(initargs);\n\treturn inst;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("p",[n._v("重点看：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('if ((clazz.getModifiers() & Modifier.ENUM) != 0)\n\t\tthrow new IllegalArgumentException("Cannot reflectively create enum objects");\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("反射在通过newInstance创建对象时，会检查该类是否ENUM修饰，如果是则抛出异常，反射失败。所以枚举是不怕反射攻击的。")]),n._v(" "),s("h1",{attrs:{id:"防止序列化破坏单例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防止序列化破坏单例"}},[n._v("#")]),n._v(" 防止序列化破坏单例")]),n._v(" "),s("p",[s("strong",[n._v("简介")])]),n._v(" "),s("p",[n._v("枚举可避免被反序列化破坏单例。原因：枚举对象的序列化、反序列化有自己的一套机制：序列化时，仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过java.lang.Enum的valueOf()方法来根据名字查找枚举对象。")]),n._v(" "),s("p",[s("strong",[n._v("源码分析")])]),n._v(" "),s("p",[s("strong",[n._v("java.lang.Enum#valueOf")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static <T extends Enum<T>> T valueOf(Class<T> enumType,\n\t\t\t\t\t\t\t\t\t\t\tString name) {\n\tT result = enumType.enumConstantDirectory().get(name);\n\tif (result != null)\n\t\treturn result;\n\tif (name == null)\n\t\tthrow new NullPointerException("Name is null");\n\tthrow new IllegalArgumentException(\n\t\t"No enum constant " + enumType.getCanonicalName() + "." + name);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("重点：T result = enumType.enumConstantDirectory().get(name); //enumConstantDirectory()返回一个map")]),n._v(" "),s("p",[s("strong",[n._v("java.lang.Class#enumConstantDirectory")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('Map<String, T> enumConstantDirectory() {\n\tif (enumConstantDirectory == null) {\n\t\tT[] universe = getEnumConstantsShared();\n\t\tif (universe == null)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\tgetName() + " is not an enum type");\n\t\tMap<String, T> m = new HashMap<>(2 * universe.length);\n\t\tfor (T constant : universe)\n\t\t\tm.put(((Enum<?>)constant).name(), constant);\n\t\tenumConstantDirectory = m;\n\t}\n\treturn enumConstantDirectory;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("重点：m.put(((Enum<?>)constant).name(), constant);")]),n._v(" "),s("p",[n._v("name()：枚举name；constant：枚举对象")]),n._v(" "),s("p",[s("strong",[n._v("java.lang.Class#getEnumConstantsShared")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('T[] getEnumConstantsShared() {\n\tif (enumConstants == null) {\n\t\tif (!isEnum()) return null;\n\t\ttry {\n\t\t\t// 获取枚举的values方法\n\t\t\tfinal Method values = getMethod("values");\n\t\t\tjava.security.AccessController.doPrivileged(\n\t\t\t\tnew java.security.PrivilegedAction<Void>() {\n\t\t\t\t\tpublic Void run() {\n\t\t\t\t\t\t\tvalues.setAccessible(true);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t@SuppressWarnings("unchecked")\n\t\t\t// 通过values方法获得枚举对象数组\n\t\t\tT[] temporaryConstants = (T[])values.invoke(null);\n\t\t\tenumConstants = temporaryConstants;\n\t\t}\n\t\t// These can happen when users concoct enum-like classes\n\t\t// that don\'t comply with the enum spec.\n\t\tcatch (InvocationTargetException | NoSuchMethodException |\n\t\t\t   IllegalAccessException ex) { return null; }\n\t}\n\treturn enumConstants;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("p",[n._v("每个枚举对象都有一个唯一的name属性。序列化只是将name属性序列化，在反序列化的时候，通过创建一个Map(key,value)，搭建起name和与之对应的对象之间的联系，然后通过索引key来获得枚举对象。")]),n._v(" "),s("p",[n._v("总的来说就是枚举在反序列化的过程中并没有创建新的对象，而通过name属性拿到原有的对象，因此保证了枚举类型实现单例模式的序列化安全。")])])}),[],!1,null,null,null);s.default=e.exports}}]);