(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{452:function(n,e,s){"use strict";s.r(e);var t=s(5),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("示例代码：https://gitee.com/nylg/picture/tree/master/file/netty")]),n._v(" "),e("p",[e("strong",[n._v("IO模型")])]),n._v(" "),e("p",[n._v("IO模型就是说用什么样的通道进行数据的发送和接收，Java共支持3种网络编程IO模式："),e("strong",[n._v("BIO，NIO，AIO")])]),n._v(" "),e("p",[e("strong",[n._v("BIO(Blocking IO)")])]),n._v(" "),e("p",[n._v("同步阻塞模型，一个客户端连接对应一个处理线程")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/nio/1.png",alt:""}})]),n._v(" "),e("p",[n._v("BIO代码示例：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.tuling.bio;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class SocketServer {\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(9000);\n        while (true) {\n            System.out.println("等待连接。。");\n            //阻塞方法\n            Socket clientSocket = serverSocket.accept();\n            System.out.println("有客户端连接了。。");\n            handler(clientSocket);\n\n            /*new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        handler(clientSocket);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();*/\n        }\n    }\n\n    private static void handler(Socket clientSocket) throws IOException {\n        byte[] bytes = new byte[1024];\n        System.out.println("准备read。。");\n        //接收客户端的数据，阻塞方法，没有数据可读时就阻塞\n        int read = clientSocket.getInputStream().read(bytes);\n        System.out.println("read完毕。。");\n        if (read != -1) {\n            System.out.println("接收到客户端的数据：" + new String(bytes, 0, read));\n        }\n        clientSocket.getOutputStream().write("HelloClient".getBytes());\n        clientSocket.getOutputStream().flush();\n    }\n}\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//客户端代码\npublic class SocketClient {\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket("localhost", 9000);\n        //向服务端发送数据\n        socket.getOutputStream().write("HelloServer".getBytes());\n        socket.getOutputStream().flush();\n        System.out.println("向服务端发送数据结束");\n        byte[] bytes = new byte[1024];\n        //接收服务端回传的数据\n        socket.getInputStream().read(bytes);\n        System.out.println("接收到服务端的数据：" + new String(bytes));\n        socket.close();\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[e("strong",[n._v("缺点：")])]),n._v(" "),e("p",[n._v("1、IO代码里read操作是阻塞操作，如果连接不做数据读写操作会导致线程阻塞，浪费资源")]),n._v(" "),e("p",[n._v("2、如果线程很多，会导致服务器线程太多，压力太大，比如C10K问题")]),n._v(" "),e("p",[e("strong",[n._v("应用场景：")])]),n._v(" "),e("p",[n._v("BIO 方式适用于连接数目比较小且固定的架构， 这种方式对服务器资源要求比较高，  但程序简单易理解。")]),n._v(" "),e("p",[e("strong",[n._v("NIO(Non Blocking IO)")])]),n._v(" "),e("p",[n._v("同步非阻塞，服务器实现模式为"),e("strong",[n._v("一个线程可以处理多个请求(连接)")]),n._v("，客户端发送的连接请求都会注册到"),e("strong",[n._v("多路复用器selector")]),n._v("上，多路复用器轮询到连接有IO请求就进行处理，JDK1.4开始引入。")]),n._v(" "),e("p",[e("strong",[n._v("应用场景：")])]),n._v(" "),e("p",[n._v("NIO方式适用于连接数目多且连接比较短（轻操作） 的架构， 比如聊天服务器， 弹幕系统， 服务器间通讯，编程比较复杂")]),n._v(" "),e("p",[n._v("NIO非阻塞代码示例：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.tuling.nio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class NioServer {\n\n    // 保存客户端连接\n    static List<SocketChannel> channelList = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n        // 创建NIO ServerSocketChannel,与BIO的serverSocket类似\n        ServerSocketChannel serverSocket = ServerSocketChannel.open();\n        serverSocket.socket().bind(new InetSocketAddress(9000));\n        // 设置ServerSocketChannel为非阻塞\n        serverSocket.configureBlocking(false);\n        System.out.println("服务启动成功");\n\n        while (true) {\n            // 非阻塞模式accept方法不会阻塞，否则会阻塞\n            // NIO的非阻塞是由操作系统内部实现的，底层调用了linux内核的accept函数\n            SocketChannel socketChannel = serverSocket.accept();\n            if (socketChannel != null) { // 如果有客户端进行连接\n                System.out.println("连接成功");\n                // 设置SocketChannel为非阻塞\n                socketChannel.configureBlocking(false);\n                // 保存客户端连接在List中\n                channelList.add(socketChannel);\n            }\n            // 遍历连接进行数据读取\n            Iterator<SocketChannel> iterator = channelList.iterator();\n            while (iterator.hasNext()) {\n                SocketChannel sc = iterator.next();\n                ByteBuffer byteBuffer = ByteBuffer.allocate(128);\n                // 非阻塞模式read方法不会阻塞，否则会阻塞\n                int len = sc.read(byteBuffer);\n                // 如果有数据，把数据打印出来\n                if (len > 0) {\n                    System.out.println("接收到消息：" + new String(byteBuffer.array()));\n                } else if (len == -1) { // 如果客户端断开，把socket从集合中去掉\n                    iterator.remove();\n                    System.out.println("客户端断开连接");\n                }\n            }\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br")])]),e("p",[n._v("总结：如果连接数太多的话，会有大量的无效遍历，假如有10000个连接，其中只有1000个连接有写数据，但是由于其他9000个连接并没有断开，我们还是要每次轮询遍历一万次，其中有十分之九的遍历都是无效的，这显然不是一个让人很满意的状态。")]),n._v(" "),e("p",[e("strong",[n._v("NIO引入多路复用器代码示例：")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.tuling.nio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioSelectorServer {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n        // 创建NIO ServerSocketChannel\n        ServerSocketChannel serverSocket = ServerSocketChannel.open();\n        serverSocket.socket().bind(new InetSocketAddress(9000));\n        // 设置ServerSocketChannel为非阻塞\n        serverSocket.configureBlocking(false);\n        // 打开Selector处理Channel，即创建epoll\n        Selector selector = Selector.open();\n        // 把ServerSocketChannel注册到selector上，并且selector对客户端accept连接操作感兴趣\n        serverSocket.register(selector, SelectionKey.OP_ACCEPT);\n        System.out.println("服务启动成功");\n\n        while (true) {\n            // 阻塞等待需要处理的事件发生\n            selector.select();\n\n            // 获取selector中注册的全部事件的 SelectionKey 实例\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = selectionKeys.iterator();\n\n            // 遍历SelectionKey对事件进行处理\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                // 如果是OP_ACCEPT事件，则进行连接获取和事件注册\n                if (key.isAcceptable()) {\n                    ServerSocketChannel server = (ServerSocketChannel) key.channel();\n                    SocketChannel socketChannel = server.accept();\n                    socketChannel.configureBlocking(false);\n                    // 这里只注册了读事件，如果需要给客户端发送数据可以注册写事件\n                    socketChannel.register(selector, SelectionKey.OP_READ);\n                    System.out.println("客户端连接成功");\n                } else if (key.isReadable()) {  // 如果是OP_READ事件，则进行读取和打印\n                    SocketChannel socketChannel = (SocketChannel) key.channel();\n                    ByteBuffer byteBuffer = ByteBuffer.allocate(128);\n                    int len = socketChannel.read(byteBuffer);\n                    // 如果有数据，把数据打印出来\n                    if (len > 0) {\n                        System.out.println("接收到消息：" + new String(byteBuffer.array()));\n                    } else if (len == -1) { // 如果客户端断开连接，关闭Socket\n                        System.out.println("客户端断开连接");\n                        socketChannel.close();\n                    }\n                }\n                //从事件集合里删除本次处理的key，防止下次select重复处理\n                iterator.remove();\n            }\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br")])]),e("p",[n._v("NIO 有三大核心组件： "),e("strong",[n._v("Channel(通道)， Buffer(缓冲区)，Selector(多路复用器)")])]),n._v(" "),e("p",[n._v("1、channel 类似于流，每个 channel 对应一个 buffer缓冲区，buffer 底层就是个数组")]),n._v(" "),e("p",[n._v("2、channel 会注册到 selector 上，由 selector 根据 channel 读写事件的发生将其交由某个空闲的线程处理")]),n._v(" "),e("p",[n._v("3、NIO 的 Buffer 和 channel 都是既可以读也可以写")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/nio/2.png",alt:""}})]),n._v(" "),e("p",[n._v("NIO底层在JDK1.4版本是用linux的内核函数select()或poll()来实现，跟上面的NioServer代码类似，selector每次都会轮询所有的sockchannel看下哪个channel有读写事件，有的话就处理，没有就继续遍历，JDK1.5开始引入了epoll基于事件响应机制来优化NIO。")]),n._v(" "),e("p",[n._v("NioSelectorServer 代码里如下几个方法非常重要，我们从Hotspot与Linux内核函数级别来理解下")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Selector.open()  //创建多路复用器\n socketChannel.register(selector, SelectionKey.OP_READ)  //将channel注册到多路复用器上\nselector.select()  //阻塞等待需要处理的事件发生\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/nio/3.jpg",alt:""}})]),n._v(" "),e("p",[n._v("总结：NIO整个调用流程就是Java调用了操作系统的内核函数来创建Socket，获取到Socket的文件描述符，再创建一个Selector对象，对应操作系统的Epoll描述符，将获取到的Socket连接的文件描述符的事件绑定到Selector对应的Epoll文件描述符上，进行事件的异步通知，这样就实现了使用一条线程，并且不需要太多的无效的遍历，将事件处理交给了操作系统内核(操作系统中断程序实现)，大大提高了效率。")]),n._v(" "),e("p",[e("strong",[n._v("Epoll函数详解")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("int epoll_create(int size);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("创建一个epoll实例，并返回一个非负数作为文件描述符，用于对epoll接口的所有后续调用。参数size代表可能会容纳size个描述符，但size不是一个最大值，只是提示操作系统它的数量级，现在这个参数基本上已经弃用了。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("使用文件描述符epfd引用的epoll实例，对目标文件描述符fd执行op操作。")]),n._v(" "),e("p",[n._v("参数epfd表示epoll对应的文件描述符，参数fd表示socket对应的文件描述符。")]),n._v(" "),e("p",[n._v("参数op有以下几个值：")]),n._v(" "),e("p",[n._v("EPOLL_CTL_ADD：注册新的fd到epfd中，并关联事件event；")]),n._v(" "),e("p",[n._v("EPOLL_CTL_MOD：修改已经注册的fd的监听事件；")]),n._v(" "),e("p",[n._v("EPOLL_CTL_DEL：从epfd中移除fd，并且忽略掉绑定的event，这时event可以为null；")]),n._v(" "),e("p",[n._v("参数event是一个结构体")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("    struct epoll_event {\n\t    __uint32_t   events;      /* Epoll events */\n\t    epoll_data_t data;        /* User data variable */\n\t};\n\t\n\ttypedef union epoll_data {\n\t    void        *ptr;\n\t    int          fd;\n\t    __uint32_t   u32;\n\t    __uint64_t   u64;\n\t} epoll_data_t;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("events有很多可选值，这里只举例最常见的几个：")]),n._v(" "),e("p",[n._v("EPOLLIN ：表示对应的文件描述符是可读的；")]),n._v(" "),e("p",[n._v("EPOLLOUT：表示对应的文件描述符是可写的；")]),n._v(" "),e("p",[n._v("EPOLLERR：表示对应的文件描述符发生了错误；")]),n._v(" "),e("p",[n._v("成功则返回0，失败返回-1")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("等待文件描述符epfd上的事件。")]),n._v(" "),e("p",[n._v("epfd是Epoll对应的文件描述符，events表示调用者所有可用事件的集合，maxevents表示最多等到多少个事件就返回，timeout是超时时间。")]),n._v(" "),e("p",[n._v("I/O多路复用底层主要用的Linux 内核·函数（select，poll，epoll）来实现，windows不支持epoll实现，windows底层是基于winsock2的select函数实现的(不开源)")]),n._v(" "),e("table",[e("thead",[e("tr",[e("th"),n._v(" "),e("th",[e("strong",[n._v("select")])]),n._v(" "),e("th",[e("strong",[n._v("poll")])]),n._v(" "),e("th",[e("strong",[n._v("epoll(jdk 1.5及以上)")])])])]),n._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[n._v("操作方式")])]),n._v(" "),e("td",[n._v("遍历")]),n._v(" "),e("td",[n._v("遍历")]),n._v(" "),e("td",[n._v("回调")])]),n._v(" "),e("tr",[e("td",[e("strong",[n._v("底层实现")])]),n._v(" "),e("td",[n._v("数组")]),n._v(" "),e("td",[n._v("链表")]),n._v(" "),e("td",[n._v("哈希表")])]),n._v(" "),e("tr",[e("td",[e("strong",[n._v("IO效率")])]),n._v(" "),e("td",[n._v("每次调用都进行线性遍历，时间复杂度为O(n)")]),n._v(" "),e("td",[n._v("每次调用都进行线性遍历，时间复杂度为O(n)")]),n._v(" "),e("td",[n._v("事件通知方式，每当有IO事件就绪，系统注册的回调函数就会被调用，时间复杂度O(1)")])]),n._v(" "),e("tr",[e("td",[e("strong",[n._v("最大连接")])]),n._v(" "),e("td",[n._v("有上限")]),n._v(" "),e("td",[n._v("无上限")]),n._v(" "),e("td",[n._v("无上限")])])])]),n._v(" "),e("p",[e("strong",[n._v("Redis线程模型")])]),n._v(" "),e("p",[n._v("Redis就是典型的基于epoll的NIO线程模型(nginx也是)，epoll实例收集所有事件(连接与读写事件)，由一个服务端线程连续处理所有事件命令。")]),n._v(" "),e("p",[n._v("Redis底层关于epoll的源码实现在redis的src源码目录的ae_epoll.c文件里，感兴趣可以自行研究。")]),n._v(" "),e("p",[e("strong",[n._v("AIO(NIO 2.0)")])]),n._v(" "),e("p",[e("strong",[n._v("异步非阻塞， 由操作系统完成后回调通知服务端程序启动线程去处理， 一般适用于连接数较多且连接时间较长的应用")])]),n._v(" "),e("p",[e("strong",[n._v("应用场景：")])]),n._v(" "),e("p",[n._v("AIO方式适用于连接数目多且连接比较长(重操作)的架构，JDK7 开始支持")]),n._v(" "),e("p",[n._v("AIO代码示例：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.tuling.aio;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\n\npublic class AIOServer {\n\n    public static void main(String[] args) throws Exception {\n        final AsynchronousServerSocketChannel serverChannel =\n                AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(9000));\n\n        serverChannel.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() {\n            @Override\n            public void completed(AsynchronousSocketChannel socketChannel, Object attachment) {\n                try {\n                    System.out.println("2--"+Thread.currentThread().getName());\n                    // 再此接收客户端连接，如果不写这行代码后面的客户端连接连不上服务端\n                    serverChannel.accept(attachment, this);\n                    System.out.println(socketChannel.getRemoteAddress());\n                    ByteBuffer buffer = ByteBuffer.allocate(1024);\n                    socketChannel.read(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n                        @Override\n                        public void completed(Integer result, ByteBuffer buffer) {\n                            System.out.println("3--"+Thread.currentThread().getName());\n                            buffer.flip();\n                            System.out.println(new String(buffer.array(), 0, result));\n                            socketChannel.write(ByteBuffer.wrap("HelloClient".getBytes()));\n                        }\n\n                        @Override\n                        public void failed(Throwable exc, ByteBuffer buffer) {\n                            exc.printStackTrace();\n                        }\n                    });\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            @Override\n            public void failed(Throwable exc, Object attachment) {\n                exc.printStackTrace();\n            }\n        });\n\n        System.out.println("1--"+Thread.currentThread().getName());\n        Thread.sleep(Integer.MAX_VALUE);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.tuling.aio;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousSocketChannel;\n\npublic class AIOClient {\n\n    public static void main(String... args) throws Exception {\n        AsynchronousSocketChannel socketChannel = AsynchronousSocketChannel.open();\n        socketChannel.connect(new InetSocketAddress("127.0.0.1", 9000)).get();\n        socketChannel.write(ByteBuffer.wrap("HelloServer".getBytes()));\n        ByteBuffer buffer = ByteBuffer.allocate(512);\n        Integer len = socketChannel.read(buffer).get();\n        if (len != -1) {\n            System.out.println("客户端收到信息：" + new String(buffer.array(), 0, len));\n        }\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])]),e("p",[e("strong",[n._v("BIO、 NIO、 AIO 对比：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/nio/4.png",alt:""}})]),n._v(" "),e("p",[e("strong",[n._v("为什么Netty使用NIO而不是AIO？")])]),n._v(" "),e("p",[n._v("在Linux系统上，AIO的底层实现仍使用Epoll，没有很好实现AIO，因此在性能上没有明显的优势，而且被JDK封装了一层不容易深度优化，Linux上AIO还不够成熟。Netty是"),e("strong",[n._v("异步非阻塞")]),n._v("框架，Netty在NIO上做了很多异步的封装。")]),n._v(" "),e("p",[e("strong",[n._v("同步异步与阻塞非阻塞")]),n._v("(段子)")]),n._v(" "),e("p",[n._v("老张爱喝茶，废话不说，煮开水。")]),n._v(" "),e("p",[n._v("出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。")]),n._v(" "),e("p",[n._v("1 老张把水壶放到火上，立等水开。"),e("strong",[n._v("（同步阻塞）")])]),n._v(" "),e("p",[n._v("老张觉得自己有点傻")]),n._v(" "),e("p",[n._v("2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。"),e("strong",[n._v("（同步非阻塞）")])]),n._v(" "),e("p",[n._v("老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。")]),n._v(" "),e("p",[n._v("3 老张把响水壶放到火上，立等水开。"),e("strong",[n._v("（异步阻塞）")])]),n._v(" "),e("p",[n._v("老张觉得这样傻等意义不大")]),n._v(" "),e("p",[n._v("4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。"),e("strong",[n._v("（异步非阻塞）")])]),n._v(" "),e("p",[n._v("老张觉得自己聪明了。")]),n._v(" "),e("p",[n._v("所谓同步异步，只是对于水壶而言。")]),n._v(" "),e("p",[n._v("普通水壶，同步；响水壶，异步。")]),n._v(" "),e("p",[n._v("虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。")]),n._v(" "),e("p",[n._v("同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。")]),n._v(" "),e("p",[n._v("所谓阻塞非阻塞，仅仅对于老张而言。")]),n._v(" "),e("p",[n._v("立等的老张，阻塞；看电视的老张，非阻塞。")])])}),[],!1,null,null,null);e.default=a.exports}}]);