(window.webpackJsonp=window.webpackJsonp||[]).push([[288],{633:function(n,s,a){"use strict";a.r(s);var t=a(1),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("言")]),n._v(" "),s("p",[n._v("今天看到了一道面试题")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("一千万个数，如何高效求和?\n")])])]),s("p",[n._v("看到这个题中的“高效求和”，第一反应想到了JDK1.8提供的LongAdder类的设计思想，就是分段求和再汇总。也就是开启多个线程，每个线程负责计算一部分，所以线程都计算完成后再汇总。整个过程大致如下：\n高效求和")]),n._v(" "),s("p",[n._v("思路已经有了，接下来就开始愉快的编码吧")]),n._v(" "),s("h2",{attrs:{id:"测试环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试环境"}},[n._v("#")]),n._v(" 测试环境")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("win10系统\n4核4线程CPU\nJDK1.8\ncom.google.guava.guava-25.1-jre.jar\nlombok\n")])])]),s("h2",{attrs:{id:"实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[n._v("#")]),n._v(" 实例")]),n._v(" "),s("p",[n._v("由于题目对一千万个数没有明确定义是什么数，所以暂定为int类型的随机数。为了对比效率，博主实现了单线程版本和多线程版本，看看多线程到底有多高效。")]),n._v(" "),s("h3",{attrs:{id:"单线程版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单线程版本"}},[n._v("#")]),n._v(" 单线程版本")]),n._v(" "),s("p",[n._v("单线程累加一千万个数，代码比较简单，直接给出")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * 单线程的方式累加\n * @param arr 一千万个随机数\n */\npublic static int singleThreadSum(int[] arr) {\n    long start = System.currentTimeMillis();\n    int sum = 0;\n    int length = arr.length;\n    for (int i = 0; i < length; i++) {\n        sum += arr[i];\n    }\n    long end = System.currentTimeMillis();\n    log.info("单线程方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n    return sum;\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("h3",{attrs:{id:"多线程版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程版本"}},[n._v("#")]),n._v(" 多线程版本")]),n._v(" "),s("p",[n._v("多线程的版本涉及到线程池、CountDownLatch等工具的使用，所以稍微复杂一些。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// 每个task求和的规模\nprivate static final int SIZE_PER_TASK = 200000;\n// 线程池\nprivate static ThreadPoolExecutor executor = null;\n\nstatic {\n    // 核心线程数 CPU数量 + 1\n    int corePoolSize = Runtime.getRuntime().availableProcessors() + 1;\n    executor = new ThreadPoolExecutor(corePoolSize, corePoolSize, 3, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());\n}\n\n/**\n * 多线程的方式累加\n *\n * @param arr 一千万个随机数\n * @throws InterruptedException\n */\npublic static int concurrencySum(int[] arr) throws InterruptedException {\n    long start = System.currentTimeMillis();\n    LongAdder sum = new LongAdder();\n    // 拆分任务\n    List<List<int[]>> taskList = Lists.partition(Arrays.asList(arr), SIZE_PER_TASK);\n    // 任务总数\n    final int taskSize = taskList.size();\n    final CountDownLatch latch = new CountDownLatch(taskSize);\n    for (int i = 0; i < taskSize; i++) {\n        int[] task = taskList.get(i).get(0);\n        executor.submit(() -> {\n            try {\n                for (int num : task) {\n                \t// 把每个task中的数字累加\n                    sum.add(num);\n                }\n            } finally {\n            \t// task执行完成后，计数器减一\n                latch.countDown();\n            }\n        });\n    }\n    // 主线程等待所有子线程执行完成\n    latch.await();\n    long end = System.currentTimeMillis();\n    log.info("多线程方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n    // 关闭线程池\n    executor.shutdown();\n    return sum.intValue();\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br")])]),s("p",[n._v("由于代码中有了详细的注释，所以不再赘述。")]),n._v(" "),s("h3",{attrs:{id:"main方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#main方法"}},[n._v("#")]),n._v(" main方法")]),n._v(" "),s("p",[n._v("main方法也比较简单，主要产生一千万个随机数，再调用两个方法即可。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 求和的个数\nprivate static final int SUM_COUNT = 10000000;\n\npublic static void main(String[] args) throws InterruptedException {\n    Random random = new Random();\n    int[] arr = new int[SUM_COUNT];\n    for (int i = 0; i < SUM_COUNT; i++) {\n        arr[i] = random.nextInt(200);\n    }\n\n    // 多线程版本\n    concurrencySum(arr);\n    // 单线程版本\n    singleThreadSum(arr);\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("第8行代码random.nextInt(200)为什么是200？\n因为 1kw * 200 = 20 亿 < Integer.MAX_VALUE，所以累加结果不会溢出")]),n._v(" "),s("p",[n._v("终于到了测试效率的时候了，是骡子是马，拉出来溜溜。\n信心满满的我，点击了run，得到了如下结果")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("22:13:31.068 [main] INFO com.sicimike.concurrency.EfficientSum - 多线程方式计算结果：995523090, 耗时：0.133 秒\n22:13:31.079 [main] INFO com.sicimike.concurrency.EfficientSum - 单线程方式计算结果：995523090, 耗时：0.006 秒\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("可能是我打开的方式不对…")]),n._v(" "),s("p",[n._v("但是")]),n._v(" "),s("p",[n._v("经过了多次运行，以及调整线程池参数之后的多次运行，总是得出不忍直视的运行结果。\n多线程方式运行时间稳定在0.130秒左右，单线程运行方式稳定在0.006秒左右。")]),n._v(" "),s("h3",{attrs:{id:"多线程改进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程改进"}},[n._v("#")]),n._v(" 多线程改进")]),n._v(" "),s("p",[n._v("前文多线程的版本中使用了LongAdder类，由于LongAdder类在底层使用了大量的cas操作，线程竞争非常激烈时，效率会有不同程度的降低。所以在改进本例中多线程的版本时，不使用LongAdder类，而是更适合当前场景的方式。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * 多线程的方式累加（改进版）\n *\n * @param arr 一千万个随机数\n * @throws InterruptedException\n */\npublic static int concurrencySum(int[] arr) throws InterruptedException {\n    long start = System.currentTimeMillis();\n    int sum = 0;\n    // 拆分任务\n    List<List<int[]>> taskList = Lists.partition(Arrays.asList(arr), SIZE_PER_TASK);\n    // 任务总数\n    final int taskSize = taskList.size();\n    final CountDownLatch latch = new CountDownLatch(taskSize);\n    // 相当于LongAdder中的Cell[]\n    int[] result = new int[taskSize];\n    for (int i = 0; i < taskSize; i++) {\n        int[] task = taskList.get(i).get(0);\n        final int index = i;\n        executor.submit(() -> {\n            try {\n                for (int num : task) {\n                \t// 各个子线程分别执行累加操作\n                \t// result每一个单元就是一个task的累加结果\n                    result[index] += num;\n                }\n            } finally {\n                latch.countDown();\n            }\n        });\n    }\n    // 等待所有子线程执行完成\n    latch.await();\n    for (int i : result) {\n    \t// 把子线程执行的结果累加起来就是最终的结果\n        sum += i;\n    }\n    long end = System.currentTimeMillis();\n    log.info("多线程方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n    // 关闭线程池\n    executor.shutdown();\n    return sum;\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br")])]),s("p",[n._v("执行改进后的方法，得到如下结果：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("22:46:05.085 [main] INFO com.sicimike.concurrency.EfficientSum - 多线程方式计算结果：994958790, 耗时：0.049 秒\n22:46:05.094 [main] INFO com.sicimike.concurrency.EfficientSum - 单线程方式计算结果：994958790, 耗时：0.006 秒\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("多次运行，以及调整线程池参数之后的多次运行，结果也趋于稳定。\n多线程方式运行时间稳定在0.049秒左右，单线程运行方式稳定在0.006秒左右")]),n._v(" "),s("p",[n._v("多线程版本改进前后，运行时间从0.133秒降到0.049秒，效率大概提升了170%\n思考")]),n._v(" "),s("p",[n._v("改进后的代码不仅没有解决单线程为什么比多线程快的问题，反而还多了一个问题：")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("为什么随随便便引入一个数组，竟然比Doug Lea写的LongAdder还快？\n")])])]),s("p",[n._v("因为LongAdder是一个通用的工具类，很好的平衡了时间和空间的关系，所以在各种场景下都能有较好的效率。而本例中的result数组，一千万个数被分成了多少个task，数组的长度就是多少，每个task的结果都存在独立的数组项，不存在竞争，但是占用了更多的空间，所以时间效率更高，也就是拿空间换时间的思想。")]),n._v(" "),s("p",[n._v("至于为什么单线程比多线程快，这其实并不难理解。因为单线程没有上下文切换，加上累加场景比较简单，每个task执行时间很短，所以单线程更快很正常。")]),n._v(" "),s("h3",{attrs:{id:"stream方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stream方式"}},[n._v("#")]),n._v(" stream方式")]),n._v(" "),s("p",[n._v("stream是JDK1.8提供的语法糖，也是单线程的。关于stream的用法，大家自行了解即可。主要用来和后文的parallel stream进行对比。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static int streamSum(List<Integer> list) {\n    long start = System.currentTimeMillis();\n    int sum = list.stream().mapToInt(num -> num).sum();\n    long end = System.currentTimeMillis();\n    log.info("stream方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n    return sum;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("h3",{attrs:{id:"parallelstream方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallelstream方式"}},[n._v("#")]),n._v(" parallelStream方式")]),n._v(" "),s("p",[n._v("parallelStream见名知意，就是并行的stream。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static int parallelStreamSum(List<Integer> list) {\n    long start = System.currentTimeMillis();\n    int sum = list.parallelStream().mapToInt(num -> num).sum();\n    long end = System.currentTimeMillis();\n    log.info("parallel stream方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n    return sum;\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("h3",{attrs:{id:"forkjoin方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#forkjoin方式"}},[n._v("#")]),n._v(" ForkJoin方式")]),n._v(" "),s("p",[n._v("ForkJoin框架是JDK1.7提出的，用于拆分任务计算再合并计算结果的框架。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("当我们需要执行大量的小任务时，有经验的Java开发人员都会采用线程池来高效执行这些小任务。然而，有一种任务，例如，对超过1000万个元素的数组进行排序，这种任务本身可以并发执行，但如何拆解成小任务需要在任务执行的过程中动态拆分。这样，大任务可以拆成小任务，小任务还可以继续拆成更小的任务，最后把任务的结果汇总合并，得到最终结果，这种模型就是Fork/Join模型。\n")])])]),s("p",[n._v("ForkJoin框架的使用大致分为两个部分：实现ForkJoin任务、执行任务\n实现ForkJoin任务")]),n._v(" "),s("p",[n._v("自定义类继承RecursiveTask（有返回值）或者RecursiveAction（无返回值），实现compute方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * 静态内部类的方式实现\n * forkjoin任务\n */\nstatic class SicForkJoinTask extends RecursiveTask<Integer> {\n    // 子任务计算区间开始\n    private Integer left;\n    // 子任务计算区间结束\n    private Integer right;\n    private int[] arr;\n\n    @Override\n    protected Integer compute() {\n        if (right - left < SIZE_PER_TASK) {\n        \t// 任务足够小时，直接计算\n            int sum = 0;\n            for (int i = left; i < right; i++) {\n                sum += arr[i];\n            }\n            return sum;\n        }\n        // 继续拆分任务\n        int middle = left + (right - left) / 2;\n        SicForkJoinTask leftTask = new SicForkJoinTask(arr, left, middle);\n        SicForkJoinTask rightTask = new SicForkJoinTask(arr, middle, right);\n        invokeAll(leftTask, rightTask);\n        Integer leftResult = leftTask.join();\n        Integer rightResult = rightTask.join();\n        return leftResult + rightResult;\n    }\n\n    public SicForkJoinTask(int[] arr, Integer left, Integer right) {\n        this.arr = arr;\n        this.left = left;\n        this.right = right;\n    }\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br")])]),s("p",[n._v("执行任务")]),n._v(" "),s("p",[n._v("通过ForkJoinPool的invoke方法执行ForkJoin任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// ForkJoin线程池\nprivate static final ForkJoinPool forkJoinPool = new ForkJoinPool();\n\npublic static int forkJoinSum(int[] arr) {\n    long start = System.currentTimeMillis();\n    // 执行ForkJoin任务\n    Integer sum = forkJoinPool.invoke(new SicForkJoinTask(arr, 0, SUM_COUNT));\n    long end = System.currentTimeMillis();\n    log.info("forkjoin方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n    return sum;\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h3",{attrs:{id:"main方法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#main方法-2"}},[n._v("#")]),n._v(" main方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public static void main(String[] args) throws InterruptedException {\n    Random random = new Random();\n    int[] arr = new int[SUM_COUNT];\n    List<Integer> list = new ArrayList<>(SUM_COUNT);\n    int currNum = 0;\n    for (int i = 0; i < SUM_COUNT; i++) {\n        currNum = random.nextInt(200);\n        arr[i] = currNum;\n        list.add(currNum);\n    }\n\n    // 单线程执行\n    singleThreadSum(arr);\n    \n    // Executor线程池执行\n    concurrencySum(arr);\n    \n    // stream执行\n    streamSum(list);\n    \n    // 并行stream执行\n    parallelStreamSum(list);\n    \n    // forkjoin线程池执行\n    forkJoinSum(arr);\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br")])]),s("p",[n._v("执行结果")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("23:19:21.207 [main] INFO com.sicimike.concurrency.EfficientSum - 单线程方式计算结果：994917205, 耗时：0.006 秒\n23:19:21.274 [main] INFO com.sicimike.concurrency.EfficientSum - 多线程方式计算结果：994917205, 耗时：0.062 秒\n23:19:21.292 [main] INFO com.sicimike.concurrency.EfficientSum - stream方式计算结果：994917205, 耗时：0.018 秒\n23:19:21.309 [main] INFO com.sicimike.concurrency.EfficientSum - parallel stream方式计算结果：994917205, 耗时：0.017 秒\n23:19:21.321 [main] INFO com.sicimike.concurrency.EfficientSum - forkjoin方式计算结果：994917205, 耗时：0.012 秒\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("h2",{attrs:{id:"源代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源代码"}},[n._v("#")]),n._v(" 源代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.*;\n\n/**\n * 一千万个数高效求和\n *\n * @author sicimike\n */\n@Slf4j\npublic class EfficientSum {\n\n    // 求和的个数\n    private static final int SUM_COUNT = 10000000;\n    // 每个task求和的规模\n    private static final int SIZE_PER_TASK = 5000000;\n    // ForkJoin线程池\n    private static final ForkJoinPool forkJoinPool = new ForkJoinPool();\n    // Executor线程池\n    private static ThreadPoolExecutor executor = null;\n\n    static {\n        // 核心线程数 CPU数量 + 1\n        int corePoolSize = Runtime.getRuntime().availableProcessors() + 1;\n        executor = new ThreadPoolExecutor(corePoolSize, corePoolSize, 3, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Random random = new Random();\n        int[] arr = new int[SUM_COUNT];\n        List<Integer> list = new ArrayList<>(SUM_COUNT);\n        int currNum = 0;\n        for (int i = 0; i < SUM_COUNT; i++) {\n            currNum = random.nextInt(200);\n            arr[i] = currNum;\n            list.add(currNum);\n        }\n\n        // 单线程执行\n        singleThreadSum(arr);\n        // Executor线程池执行\n        concurrencySum(arr);\n        // stream执行\n        streamSum(list);\n        // 并行stream执行\n        parallelStreamSum(list);\n        // forkjoin线程池执行\n        forkJoinSum(arr);\n\n    }\n\n    /**\n     * 多线程的方式累加（改进版）\n     *\n     * @param arr 一千万个随机数\n     * @throws InterruptedException\n     */\n    public static int concurrencySum(int[] arr) throws InterruptedException {\n        long start = System.currentTimeMillis();\n        int sum = 0;\n        // 拆分任务\n        List<List<int[]>> taskList = Lists.partition(Arrays.asList(arr), SIZE_PER_TASK);\n        // 任务总数\n        final int taskSize = taskList.size();\n        final CountDownLatch latch = new CountDownLatch(taskSize);\n        // 相当于LongAdder中的Cell[]\n        int[] result = new int[taskSize];\n        for (int i = 0; i < taskSize; i++) {\n            int[] task = taskList.get(i).get(0);\n            final int index = i;\n            executor.submit(() -> {\n                try {\n                    for (int num : task) {\n                        result[index] += num;\n                    }\n                } finally {\n                    latch.countDown();\n                }\n            });\n        }\n        // 等待所以子线程执行完成\n        latch.await();\n        for (int i : result) {\n            sum += i;\n        }\n        long end = System.currentTimeMillis();\n        log.info("多线程方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n        // 关闭线程池\n        executor.shutdown();\n        return sum;\n    }\n\n    /**\n     * 单线程的方式累加\n     *\n     * @param arr 一千万个随机数\n     */\n    public static int singleThreadSum(int[] arr) {\n        long start = System.currentTimeMillis();\n        int sum = 0;\n        int length = arr.length;\n        for (int i = 0; i < length; i++) {\n            sum += arr[i];\n        }\n        long end = System.currentTimeMillis();\n        log.info("单线程方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n        return sum;\n    }\n\n    public static int streamSum(List<Integer> list) {\n        long start = System.currentTimeMillis();\n        int sum = list.stream().mapToInt(num -> num).sum();\n        long end = System.currentTimeMillis();\n        log.info("stream方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n        return sum;\n    }\n\n    public static int parallelStreamSum(List<Integer> list) {\n        long start = System.currentTimeMillis();\n        int sum = list.parallelStream().mapToInt(num -> num).sum();\n        long end = System.currentTimeMillis();\n        log.info("parallel stream方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n        return sum;\n    }\n\n    public static int forkJoinSum(int[] arr) {\n        long start = System.currentTimeMillis();\n        Integer sum = forkJoinPool.invoke(new SicForkJoinTask(arr, 0, SUM_COUNT));\n        long end = System.currentTimeMillis();\n        log.info("forkjoin方式计算结果：{}, 耗时：{} 秒", sum, (end - start) / 1000.0);\n        return sum;\n    }\n\n    /**\n     * forkjoin任务\n     */\n    static class SicForkJoinTask extends RecursiveTask<Integer> {\n        // 子任务计算区间开始\n        private Integer left;\n        // 子任务计算区间结束\n        private Integer right;\n        private int[] arr;\n\n        @Override\n        protected Integer compute() {\n            if (right - left < SIZE_PER_TASK) {\n                int sum = 0;\n                for (int i = left; i < right; i++) {\n                    sum += arr[i];\n                }\n                return sum;\n            }\n            int middle = left + (right - left) / 2;\n            SicForkJoinTask leftTask = new SicForkJoinTask(arr, left, middle);\n            SicForkJoinTask rightTask = new SicForkJoinTask(arr, middle, right);\n            invokeAll(leftTask, rightTask);\n            Integer leftResult = leftTask.join();\n            Integer rightResult = rightTask.join();\n            return leftResult + rightResult;\n        }\n\n        public SicForkJoinTask(int[] arr, Integer left, Integer right) {\n            this.arr = arr;\n            this.left = left;\n            this.right = right;\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br")])]),s("p",[n._v("有兴趣的同学可以自己下载源代码后，调整各个参数运行，得到的结果不一定和博主一样。")]),n._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),s("p",[n._v("代码写了一大版，结果最初的问题还是没解决。有人可能会说：博主你这不是坑人吗\n确实，我没有想到更好的办法，但是把文中的几个问题想清楚，应该会比一道面试题更有价值。")]),n._v(" "),s("p",[n._v("如果哪位同学有更好的优化方式，还请不吝赐教。")]),n._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[n._v("#")]),n._v(" 参考：")])])}),[],!1,null,null,null);s.default=e.exports}}]);