(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{562:function(n,s,a){"use strict";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"spring-是如何解决循环依赖的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-是如何解决循环依赖的"}},[n._v("#")]),n._v(" Spring 是如何解决循环依赖的")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("U2FsdGVkX1/pKZfI/UG/xpPzPlsDXSmh8h2UdXfmu2ViU598TXC6FTnEZ7OlhOwZ\nW9+3cF0NWofTfRcrKUsKL/TBx8eWzsZDB2ZuKtW1RF6qUnDNKec+serRWs3NtIsX\nTg==\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E8%AF%BE%E4%B8%8A%E5%9B%BE.png",alt:""}})]),n._v(" "),s("h3",{attrs:{id:"什么是循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是循环依赖"}},[n._v("#")]),n._v(" 什么是循环依赖?")]),n._v(" "),s("p",[n._v("所谓的循环依赖是指，A 依赖 B，B 又依赖 A，它们之间形成了循环依赖。或者是 A 依赖 B，B 依赖 C，C 又依赖 A。它们之间的依赖关系如下：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/5231.png",alt:"https://note.youdao.com/yws/public/resource/01ec86d7955e2c9cd45c1c0e22f07535/xmlnote/B5E75D5152934447A40CC9DF4D7D338F/5231"}})]),n._v(" "),s("p",[n._v("DEMO:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(' 手写代码助你理解Spring循环依赖:\n/***\n * @Author 徐庶   QQ:1092002729\n * @Slogan 致敬大师，致敬未来的你\n * \n * Spring --循环依赖实例DEMO  :\n * 帮助您更有效的理解Spring循环依赖源码\n */\npublic class MainStart {\n \n    private static Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);\n \n    /**\n     * 读取bean定义，当然在spring中肯定是根据配置 动态扫描注册\n     */\n    public static void loadBeanDefinitions() {\n        RootBeanDefinition aBeanDefinition=new RootBeanDefinition(InstanceA.class);\n        RootBeanDefinition bBeanDefinition=new RootBeanDefinition(InstanceB.class);\n        beanDefinitionMap.put("instanceA",aBeanDefinition);\n        beanDefinitionMap.put("instanceB",bBeanDefinition);\n    }\n \n    public static void main(String[] args) throws Exception {\n        // 加载了BeanDefinition\n        loadBeanDefinitions();\n        // 注册Bean的后置处理器\n \n        // 循环创建Bean\n        for (String key : beanDefinitionMap.keySet()){\n            // 先创建A\n            getBean(key);\n        }\n        InstanceA instanceA = (InstanceA) getBean("instanceA");\n        instanceA.say();\n    }\n \n    // 一级缓存\n    public static Map<String,Object> singletonObjects=new ConcurrentHashMap<>();\n \n \n    // 二级缓存： 为了将 成熟Bean和纯净Bean分离，避免读取到不完整得Bean\n    public static Map<String,Object> earlySingletonObjects=new ConcurrentHashMap<>();\n \n    // 三级缓存\n    public static Map<String,ObjectFactory> singletonFactories=new ConcurrentHashMap<>();\n \n    // 循环依赖标识\n    public  static  Set<String> singletonsCurrennlyInCreation=new HashSet<>();\n \n \n    // 假设A 使用了Aop @PointCut("execution(* *..InstanceA.*(..))")   要给A创建动态代理\n    // 获取Bean\n    public  static Object getBean(String beanName) throws Exception {\n        Object singleton = getSingleton(beanName);\n        if(singleton!=null){\n            return singleton;\n        }\n \n        // 正在创建\n        if(!singletonsCurrennlyInCreation.contains(beanName)){\n            singletonsCurrennlyInCreation.add(beanName);\n        }\n        // createBean\n \n \n        // 实例化\n        RootBeanDefinition beanDefinition = (RootBeanDefinition) beanDefinitionMap.get(beanName);\n        Class<?> beanClass = beanDefinition.getBeanClass();\n        Object instanceBean = beanClass.newInstance();  // 通过无参构造函数\n \n        // 创建动态代理  （耦合 、BeanPostProcessor)    Spring还是希望正常的Bean 还是再初始化后创建\n        // 只在循环依赖的情况下在实例化后创建proxy   判断当前是不是循环依赖\n        singletonFactories.put(beanName, () -> new JdkProxyBeanPostProcessor().getEarlyBeanReference(earlySingletonObjects.get(beanName),beanName));\n \n        // 添加到二级缓存\n        // earlySingletonObjects.put(beanName,instanceBean);\n \n        // 属性赋值\n        Field[] declaredFields = beanClass.getDeclaredFields();\n        for (Field declaredField : declaredFields) {\n            Autowired annotation = declaredField.getAnnotation(Autowired.class);\n            // 说明属性上面有Autowired\n            if(annotation!=null){\n                 declaredField.setAccessible(true);\n                 // byname  bytype  byconstrator\n                // instanceB\n                String name = declaredField.getName();\n                Object fileObject= getBean(name);   //拿到B得Bean\n                declaredField.set(instanceBean,fileObject);\n            }\n \n        }\n \n \n        // 初始化   init-mthod\n        // 放在这里创建已经完了  B里面的A 不是proxy\n        // 正常情况下会再 初始化之后创建proxy\n \n \n \n        // 由于递归完后A 还是原实例，， 所以要从二级缓存中拿到proxy 。\n        if(earlySingletonObjects.containsKey(beanName)){\n            instanceBean=earlySingletonObjects.get(beanName);\n        }\n \n        // 添加到一级缓存   A\n        singletonObjects.put(beanName,instanceBean);\n \n \n        // remove 二级缓存和三级缓存\n        return instanceBean;\n    }\n \n \n    public  static Object getSingleton(String beanName){\n        // 先从一级缓存中拿\n        Object bean = singletonObjects.get(beanName);\n \n        // 说明是循环依赖\n        if(bean==null && singletonsCurrennlyInCreation.contains(beanName)){\n            bean=earlySingletonObjects.get(beanName);\n            // 如果二级缓存没有就从三级缓存中拿\n            if(bean==null) {\n                // 从三级缓存中拿\n                ObjectFactory factory = singletonFactories.get(beanName);\n                if (factory != null) {\n                    bean=factory.getObject(); // 拿到动态代理\n                    earlySingletonObjects.put(beanName, bean);\n                }\n            }\n \n \n        }\n \n        return bean;\n \n    }\n \n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br")])]),s("h3",{attrs:{id:"为什么需要二级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要二级缓存"}},[n._v("#")]),n._v(" 为什么需要二级缓存？")]),n._v(" "),s("ul",[s("li",[n._v("一级缓存和二级缓存相比：")])]),n._v(" "),s("p",[n._v("二级缓存只要是为了分离成熟Bean和纯净Bean(未注入属性)的存放， 防止多线程中在Bean还未创建完成时读取到的Bean时不完整的。所以也是为了保证我们getBean是完整最终的Bean，不会出现不完整的情况。")]),n._v(" "),s("ul",[s("li",[n._v("一二三级缓存下二级缓存的意义：")])]),n._v(" "),s("p",[n._v("二级缓存为了存储 三级缓存的创建出来的早期Bean， 为了避免三级缓存重复执行。")]),n._v(" "),s("h3",{attrs:{id:"为什么需要三级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要三级缓存"}},[n._v("#")]),n._v(" 为什么需要三级缓存？")]),n._v(" "),s("p",[n._v("我们都知道Bean的aop动态代理创建时在初始化之后，但是循环依赖的Bean如果使用了AOP。 那无法等到解决完循环依赖再创建动态代理，  因为这个时候已经注入属性。   所以如果循环依赖的Bean使用了aop.   需要提前创建aop。")]),n._v(" "),s("p",[n._v("但是需要思考的是动态代理在哪创建？？    在实例化后直接创建？  但是我们正常的Bean是在初始化创建啊。  所以可以加个判断如果是循环依赖就实例化后调用，没有循环依赖就正常在初始化后调用。")]),n._v(" "),s("p",[n._v("怎么判断当前创建的bean是不是循环依赖？  根据二级缓存判断？有就是循环依赖？")]),n._v(" "),s("p",[n._v("那这个判断怎么加？加载实例化后面行吗？ 且看：")]),n._v(" "),s("p",[n._v("​")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("实例化后.省略code....\n \nif(二级缓存有说明是循环依赖？){\n        \n 二级缓存=创建动态代理覆盖（判断当前bean是否被二级缓存命中）；\n}\n \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("这样写可以吗？ 肯定不行啊，  因为实例化后始终会放入二级缓存中。   所以这样写不管是不是循环依赖都会在实例化后创建动态代理。")]),n._v(" "),s("p",[n._v("创建本身的时候没法判断自己是不是循环依赖，， 只有在B 引用A （不同bean的引用直接）下才能判断是不是循环依赖（比如B引用A,A正在创建，那说明是循环依赖），  所以判断要卸载getSingleton中。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('假如A是proxy:\n    \nA创建Bean --\x3e注入属性B--\x3egetBean(B)--\x3e创建B--\x3e注入属性A----\x3egetSingleton("a")之后写如下代码\n==================================================================================================\npublic object getSingleton(beanName){\n    先从一级缓存拿 省略code...\n \n    if(二级缓存有说明是循环依赖？){  \n         二级缓存=调用创建动态代BeanPostProcessor（判断是否使用aop，没有依然返回原实例）；\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("在这里创建行吗？   行！     所以说二级缓存确实完全可以解决循环依赖的任何情况：包括扩展能力（因为也可以在这里调用BeanPostProcessor,   当然AOP也是基于BeanPostProcessor,虽然也当然可以解决）   。   "),s("strong",[n._v("那要三级缓存干嘛？")]),n._v("   我们只能这样解释：  Spring的方法职责都比较单例，一个方法通常只做一件事，    getBean就是获取bean   但是调用创建动态代BeanPostProcessor  是属于create的过程中的， 如果在这里明显代码比较耦合，阅读性也不太好。  所以为了解耦、方法职责单一、方便后期维护，  将调用创建动态代BeanPostProcessor 放在createBean中是最合适不过了， 但是我们判断当前是否循环依赖还是要写在getSingleton里面啊，这怎么办：")]),n._v(" "),s("p",[s("strong",[n._v("三级缓存 存一个****函数接口")]),n._v("，  函数接口实现 创建动态代理调用BeanPostProcessor   。   为了避免重复创建，  调用把返回的动态代理对象或者原实例存储在"),s("strong",[n._v("二级缓存，     三个缓存")]),n._v("完美解决解耦、扩展、性能、代码阅读性。")]),n._v(" "),s("h3",{attrs:{id:"为什么spring不能解决构造器的循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么spring不能解决构造器的循环依赖"}},[n._v("#")]),n._v(" 为什么Spring不能解决构造器的循环依赖？")]),n._v(" "),s("p",[n._v("从流程图应该不难看出来，在Bean调用构造器实例化之前，一二三级缓存并没有Bean的任何相关信息，在实例化之后才放入三级缓存中，因此当getBean的时候缓存并没有命中，这样就抛出了循环依赖的异常了。")]),n._v(" "),s("h3",{attrs:{id:"为什么多例bean不能解决循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么多例bean不能解决循环依赖"}},[n._v("#")]),n._v(" 为什么多例Bean不能解决循环依赖？")]),n._v(" "),s("p",[n._v("我们自己手写了解决循环依赖的代码，可以看到，核心是利用一个map，来解决这个问题的，这个map就相当于缓存。")]),n._v(" "),s("p",[n._v("为什么可以这么做，因为我们的bean是单例的，而且是字段注入（setter注入）的，单例意味着只需要创建一次对象，后面就可以从缓存中取出来，字段注入，意味着我们无需调用构造方法进行注入。")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("如果是原型bean，那么就意味着每次都要去创建对象，无法利用缓存；")])]),n._v(" "),s("li",[s("p",[n._v("如果是构造方法注入，那么就意味着需要调用构造方法注入，也无法利用缓存。")])])]),n._v(" "),s("h3",{attrs:{id:"循环依赖可以关闭吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖可以关闭吗"}},[n._v("#")]),n._v(" 循环依赖可以关闭吗")]),n._v(" "),s("p",[n._v("可以，Spring提供了这个功能，我们需要这么写：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext();\n        applicationContext.setAllowCircularReferences(false);\n        applicationContext.register(AppConfig.class);\n        applicationContext.refresh();\n    }\n}\n \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("h3",{attrs:{id:"源码-如何解决循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码-如何解决循环依赖"}},[n._v("#")]),n._v(" 源码：如何解决循环依赖？")]),n._v(" "),s("p",[n._v("2.2 哪三级缓存？")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("DefaultSingletonBeanRegistry类的三个成员变量命名如下：\n/** 一级缓存 这个就是我们大名鼎鼎的单例缓存池 用于保存我们所有的单实例bean */\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);\n \n/** 三级缓存 该map用户缓存 key为 beanName  value 为ObjectFactory(包装为早期对象) */\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);\n \n/** 二级缓存 ，用户缓存我们的key为beanName value是我们的早期对象(对象属性还没有来得及进行赋值) */\nprivate final Map<String, Object> earlySingletonObjects = new HashMap<>(16);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("以 BeanA 和 BeanB 两个类相互依赖为例")]),n._v(" "),s("p",[s("strong",[n._v("2.1. 创建原始 bean 对象")])]),n._v(" "),s("p",[n._v("也就是老师所说的纯洁态Bean")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("instanceWrapper = createBeanInstance(beanName, mbd, args);\nfinal Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("假设 beanA 先被创建，创建后的原始对象为BeanA@1234，上面代码中的 bean 变量指向就是这个对象。")]),n._v(" "),s("p",[s("strong",[n._v("2.2. 暴露早期引用")])]),n._v(" "),s("p",[n._v("该方法用于把早期对象包装成一个ObjectFactory 暴露到三级缓存中 用于将解决循环依赖...")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(" \nprotected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) { \n...\n         //加入到三级缓存中，，，，，暴露早期对象用于解决循环依赖\n         this.singletonFactories.put(beanName, singletonFactory);\n ...\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("beanA 指向的原始对象创建好后，就开始把指向原始对象的引用通过 ObjectFactory 暴露出去。getEarlyBeanReference 方法的第三个参数 bean 指向的正是 createBeanInstance 方法创建出原始 bean 对象 BeanA@1234。")]),n._v(" "),s("p",[s("strong",[n._v("2.3. 解析依赖")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("populateBean(beanName, mbd, instanceWrapper);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("还没有进行属性装配，自动注入的属性都是null")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/70245.png",alt:"https://note.youdao.com/yws/public/resource/01ec86d7955e2c9cd45c1c0e22f07535/xmlnote/62DB082FEA99444CBBD46913AE3949C5/7025"}})]),n._v(" "),s("p",[n._v("初始化好的Bean")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/7026.png",alt:"https://note.youdao.com/yws/public/resource/01ec86d7955e2c9cd45c1c0e22f07535/xmlnote/FC719ADC69724CC38BA22835594FD02D/7026"}})]),n._v(" "),s("p",[n._v("populateBean 用于向 beanA 这个原始对象中填充属性，当它检测到 beanA 依赖于 beanB 时，会首先去实例化 beanB。")]),n._v(" "),s("p",[n._v('beanB 在此方法处也会解析自己的依赖，当它检测到 beanA 这个依赖，于是调用 BeanFactroy.getBean("beanA") 这个方法，从容器中获取 beanA。')]),n._v(" "),s("p",[s("strong",[n._v("2.4. 获取早期引用")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("protected Object getSingleton(String beanName, boolean allowEarlyReference) {\n   /**\n    * 第一步:我们尝试去一级缓存(单例缓存池中去获取对象,一般情况从该map中获取的对象是直接可以使用的)\n    * IOC容器初始化加载单实例bean的时候第一次进来的时候 该map中一般返回空\n    */\n   Object singletonObject = this.singletonObjects.get(beanName);\n   /**\n    * 若在第一级缓存中没有获取到对象,并且singletonsCurrentlyInCreation这个list包含该beanName\n    * IOC容器初始化加载单实例bean的时候第一次进来的时候 该list中一般返回空,但是循环依赖的时候可以满足该条件\n    */\n   if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n      synchronized (this.singletonObjects) {\n         /**\n          * 尝试去二级缓存中获取对象(二级缓存中的对象是一个早期对象)\n          * 何为早期对象:就是bean刚刚调用了构造方法，还来不及给bean的属性进行赋值的对象(纯净态)\n          * 就是早期对象\n          */\n         singletonObject = this.earlySingletonObjects.get(beanName);\n         /**\n          * 二级缓存中也没有获取到对象,allowEarlyReference为true(参数是有上一个方法传递进来的true)\n          */\n         if (singletonObject == null && allowEarlyReference) {\n            /**\n             * 直接从三级缓存中获取 ObjectFactory对象 这个对接就是用来解决循环依赖的关键所在\n             * 在ioc后期的过程中,当bean调用了构造方法的时候,把早期对象包裹成一个ObjectFactory\n             * 暴露到三级缓存中\n             */\n            ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n            //从三级缓存中获取到对象不为空\n            if (singletonFactory != null) {\n               /**\n                * 在这里通过暴露的ObjectFactory 包装对象中,通过调用他的getObject()来获取我们的早期对象\n                * 在这个环节中会调用到 getEarlyBeanReference()来进行后置处理\n                */\n               singletonObject = singletonFactory.getObject();\n               //把早期对象放置在二级缓存,\n               this.earlySingletonObjects.put(beanName, singletonObject);\n               //ObjectFactory 包装对象从三级缓存中删除掉\n               this.singletonFactories.remove(beanName);\n            }\n         }\n      }\n   }\n   return singletonObject;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br")])]),s("p",[n._v("接着上面的步骤讲:")]),n._v(" "),s("p",[n._v('1.populateBean 调用 BeanFactroy.getBean("beanA") 以获取 beanB 的依赖。')]),n._v(" "),s("p",[n._v('2.getBean("beanB") 会先调用 getSingleton("beanA")，尝试从缓存中获取 beanA。此时由于 beanA 还没完全实例化好')]),n._v(" "),s("p",[n._v('3.于是 this.singletonObjects.get("beanA") 返回 null。')]),n._v(" "),s("p",[n._v('4.接着 this.earlySingletonObjects.get("beanA") 也返回空，因为 beanA 早期引用还没放入到这个缓存中。')]),n._v(" "),s("p",[n._v("5.最后调用 singletonFactory.getObject() 返回 singletonObject，此时 singletonObject != null。singletonObject 指向 BeanA@1234，也就是 createBeanInstance 创建的原始对象。此时 beanB 获取到了这个原始对象的引用，beanB 就能顺利完成实例化。beanB 完成实例化后，beanA 就能获取到 beanB 所指向的实例，beanA 随之也完成了实例化工作。由于 beanB.beanA 和 beanA 指向的是同一个对象 BeanA@1234，所以 beanB 中的 beanA 此时也处于可用状态了。")]),n._v(" "),s("p",[n._v("以上的过程对应下面的流程图：")]),n._v(" "),s("p",[n._v("https://www.processon.com/view/link/5f1fb2cf1e08533a628a7b4c")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/8125.png",alt:""}})]),n._v(" "),s("h3",{attrs:{id:"如何进行拓展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何进行拓展"}},[n._v("#")]),n._v(" 如何进行拓展？")]),n._v(" "),s("p",[n._v("bean可以通过实现SmartInstantiationAwareBeanPostProcessor接口（一般这个接口供spring内部使用）的getEarlyBeanReference方法进行拓展")]),n._v(" "),s("p",[n._v("4.2 何时进行拓展？（进行bean的实例化时）")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)throws BeanCreationException {\n//省略其他代码，只保留了关键代码\n//...\n// Eagerly cache singletons to be able to resolve circular references\n// even when triggered by lifecycle interfaces like BeanFactoryAware.\nboolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n         isSingletonCurrentlyInCreation(beanName));\n        if (earlySingletonExposure) {\n            if (logger.isDebugEnabled()) {\n                 logger.debug("Eagerly caching bean \'" + beanName +\n                            "\' to allow for resolving potential circular references");\n           }\n          //将刚实例化好的bean添加到一级缓存中  \n          addSingletonFactory(beanName, new ObjectFactory\n                @Override\n                public Object getObject()throws BeansException {\n                        //执行拓展的后置处理器\n                        return getEarlyBeanReference(beanName, mbd, bean);\n                 }\n          });\n       }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("p",[n._v("4.3 getEarlyBeanReference方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("protected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) {\n   Object exposedObject = bean;\n   //判读我们容器中是否有InstantiationAwareBeanPostProcessors类型的后置处理器\n   if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {\n      //获取我们所有的后置处理器\n      for (BeanPostProcessor bp : getBeanPostProcessors()) {\n         //判断我们的后置处理器是不是实现了SmartInstantiationAwareBeanPostProcessor接口\n         if (bp instanceof SmartInstantiationAwareBeanPostProcessor) {\n            //进行强制转换\n            SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;\n            //挨个调用SmartInstantiationAwareBeanPostProcessor的getEarlyBeanReference\n            exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);\n         }\n      }\n   }\n   return exposedObject;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("p",[n._v("扩展示例：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Component\npublic class TulingBPP implements SmartInstantiationAwareBeanPostProcessor {\n \n   public Object getEarlyBeanReference(Object bean, String beanName) throws BeansException {\n      if(beanName.equals("instanceA") || beanName.equals("instanceB")) {\n         JdkDynimcProxy jdkDynimcProxy = new JdkDynimcProxy(bean);\n         return  jdkDynimcProxy.getProxy();\n      }\n      return bean;\n   }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);