(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{513:function(a,s,n){"use strict";n.r(s);var t=n(5),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("@"),s("a",{attrs:{href:"%E7%9B%AE%E5%BD%95"}},[a._v("TOC")])]),a._v(" "),s("h1",{attrs:{id:"图示思维导图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图示思维导图"}},[a._v("#")]),a._v(" 图示思维导图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101204347947.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101204419491.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101204430924.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101210539538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),a._v(" "),s("h1",{attrs:{id:"并发和高并发基础概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发和高并发基础概念"}},[a._v("#")]),a._v(" 并发和高并发基础概念")]),a._v(" "),s("blockquote",[s("p",[a._v("并发\n同时拥有两个或多个线程，如果程序在单核处理器上运行，多个线程将交替的换入或者换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态，如果运行在多核处理器上，此时，程序中的每个线程都将分配到一个处理器核上，因此可以同时运行。")])]),a._v(" "),s("blockquote",[s("p",[a._v("高并发\n高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。")])]),a._v(" "),s("p",[a._v("总结：")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("并发")]),a._v("：多个线程操作相同的资源，保证线程安全，合理使用资源\n"),s("strong",[a._v("高并发")]),a._v("：服务能同时处理很多请求，提高程序性能（更多的考虑技术手段）")])]),a._v(" "),s("h1",{attrs:{id:"并发基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发基础"}},[a._v("#")]),a._v(" 并发基础")]),a._v(" "),s("h2",{attrs:{id:"_1-cpu多级缓存-缓存一致性-乱序执行优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-cpu多级缓存-缓存一致性-乱序执行优化"}},[a._v("#")]),a._v(" 1.CPU多级缓存（缓存一致性，乱序执行优化）")]),a._v(" "),s("h2",{attrs:{id:"_2-java内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-java内存模型"}},[a._v("#")]),a._v(" 2.Java内存模型")]),a._v(" "),s("h2",{attrs:{id:"_3-并发的优势和风险"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-并发的优势和风险"}},[a._v("#")]),a._v(" 3.并发的优势和风险")]),a._v(" "),s("h3",{attrs:{id:"cpu多级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu多级缓存"}},[a._v("#")]),a._v(" CPU多级缓存")]),a._v(" "),s("p",[a._v("CPU 多级缓存：")]),a._v(" "),s("blockquote",[s("p",[a._v("主存和cpu通过主线连接，CPU缓存在主存和CPU之间，缓存的出现可以减少CPU读取共享主存的次数")])]),a._v(" "),s("p",[a._v("为什么需要CPU cache：")]),a._v(" "),s("blockquote",[s("p",[a._v("CPU的频率太快了，快到主存跟不上，这样在处理器时钟周期内，CPU常常需要等待主存，浪费资源。所以cache的出现，是为了缓解CPU和内存之间速度不匹配问题（结构：cpu -> cache -> memery）.")])]),a._v(" "),s("p",[a._v("CPU cache有什么意义：")]),a._v(" "),s("blockquote",[s("p",[a._v("1）时间局部性：如果某个数据被访问，name在不久的将来它很可能被再次访问。\n2）空间局部性：如果某个数据被访问，那么与它相邻的数据很快也可能被访问")])]),a._v(" "),s("p",[a._v("CPU多级缓存-缓存一致性（MESI）")]),a._v(" "),s("blockquote",[s("p",[a._v("MESI分别代表cache数据的四种状态，这四种状态可以相互转换\n缓存四种操作：local read、local write、remote read、remote write")])]),a._v(" "),s("h3",{attrs:{id:"cpu多级缓存-乱序执行优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu多级缓存-乱序执行优化"}},[a._v("#")]),a._v(" CPU多级缓存-乱序执行优化")]),a._v(" "),s("p",[a._v("乱序执行优化")]),a._v(" "),s("blockquote",[s("p",[a._v("处理器为提高运算速度而做出违背代码原有顺序的优化")])]),a._v(" "),s("h3",{attrs:{id:"java内存模型-java-memory-model-jmm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型-java-memory-model-jmm"}},[a._v("#")]),a._v(" java内存模型（java memory model，JMM）")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101210850129.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101210923517.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v("\nJava内存模型抽象结构图\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101211038504.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),a._v(" "),s("p",[a._v("java内存模型-同步八种操作")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("lock")]),a._v("（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态\n"),s("strong",[a._v("unlock")]),a._v("（解锁）：作用于主内存变脸个，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定\n"),s("strong",[a._v("read")]),a._v("（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用\n"),s("strong",[a._v("load")]),a._v("（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中\n"),s("strong",[a._v("use")]),a._v("（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎\n"),s("strong",[a._v("assign")]),a._v("（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量\n"),s("strong",[a._v("store")]),a._v("（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以遍随后的write的操作\n"),s("strong",[a._v("write")]),a._v("（写入）：作用于主内存的变量，它把store操作从工作内存中的一个变量的值传送到主内存的变量中")])]),a._v(" "),s("p",[a._v("java内存模型-同步规则")]),a._v(" "),s("blockquote",[s("p",[a._v("1,如果要把一个变量从主内存中复制到工作内存，就需要按顺序的执行read和load操作，如果把变量从工作内存中同步回主内存，就需要按顺序的执行store和write操作。但java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行")])]),a._v(" "),s("blockquote",[s("p",[a._v("2,不允许read和load、store和write操作之一单独出现")])]),a._v(" "),s("blockquote",[s("p",[a._v("3,不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。")])]),a._v(" "),s("blockquote",[s("p",[a._v("4,不允许一个线程无原因的（没发生过任何assign操作）把数据从工作内存同步回主内存中")])]),a._v(" "),s("blockquote",[s("p",[a._v("5,一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作")])]),a._v(" "),s("blockquote",[s("p",[a._v("6,一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现")])]),a._v(" "),s("blockquote",[s("p",[a._v("7,如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量之前需要重新执行load或assign操作初始化变量的值")])]),a._v(" "),s("blockquote",[s("p",[a._v("8,如果一个变量实现没有被lock操作锁定，怎不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量")])]),a._v(" "),s("blockquote",[s("p",[a._v("9,对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）")])]),a._v(" "),s("p",[a._v("Java内存模型-同步操作与规则\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101212321638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),a._v(" "),s("h3",{attrs:{id:"并发的优势与风险"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发的优势与风险"}},[a._v("#")]),a._v(" 并发的优势与风险")]),a._v(" "),s("blockquote",[s("p",[a._v("优势")]),a._v(" "),s("blockquote",[s("p",[a._v("1,速度：同时处理多个请求，响应更快；复杂的操作可以分成多个进程同时进行\n2,设计：程序设计在某些情况下更简单，也可以更多的选择\n3,资源利用：CPU能够在等待IO的时候做一些其他的事情")])])]),a._v(" "),s("blockquote",[s("p",[a._v("风险")]),a._v(" "),s("blockquote",[s("p",[a._v("1,安全性：多个线程共享数据时可能会产生于期望不相符的结果\n2,活跃性：某个操作无法继续进行下去时，就会发生活跃性问题。比如死锁、饥饿等问题\n3,性能：线程过多时会使得CPU频繁切换，调度时间增多；同步机制；消耗过多内存")])])]),a._v(" "),s("h1",{attrs:{id:"线程安全性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全性"}},[a._v("#")]),a._v(" 线程安全性")]),a._v(" "),s("h2",{attrs:{id:"_1-线程安全性概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程安全性概念"}},[a._v("#")]),a._v(" 1.线程安全性概念")]),a._v(" "),s("h2",{attrs:{id:"_2-线程安全性体现的三个方面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程安全性体现的三个方面"}},[a._v("#")]),a._v(" 2.线程安全性体现的三个方面")]),a._v(" "),s("h3",{attrs:{id:"线程安全性-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全性-2"}},[a._v("#")]),a._v(" 线程安全性")]),a._v(" "),s("blockquote",[s("p",[a._v("当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类时线程安全的。")])]),a._v(" "),s("h3",{attrs:{id:"线程安全体现在以下三个方面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全体现在以下三个方面"}},[a._v("#")]),a._v(" 线程安全体现在以下三个方面")]),a._v(" "),s("blockquote",[s("p",[a._v("1,原子性：提供了互斥访问，同一时刻只能有一个线程来对他进行操作\n2,可见性：一个线程对主内存的修改可以及时的被其他线程观察到\n3,有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序的存在，该观察结果一般杂乱无序")])]),a._v(" "),s("h4",{attrs:{id:"原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[a._v("#")]),a._v(" 原子性")]),a._v(" "),s("h5",{attrs:{id:"原子性-atomic包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomic包"}},[a._v("#")]),a._v(" 原子性——Atomic包")]),a._v(" "),s("blockquote",[s("p",[a._v("1,AtomicXxxx：CAS、Unsafe.compareAndSwapInt\n2,AtomicLong，LongAdder\n3.AtomicReference，AtomicReferenceFieldUpdater")])]),a._v(" "),s("p",[a._v("理解：")]),a._v(" "),s("blockquote",[s("p",[a._v("AtomicXxxx类中方法incrementAndGet()是重点，\nincrementAndGet方法中调用unsafe.getAndAddInt()，\ngetAndAddInt方法中主题是do-while语句，while语句中调用"),s("strong",[a._v("compareAndSwapInt")]),a._v("(var1, var2, var5, var5 + var4),\ncompareAndSwapInt方法就是"),s("strong",[a._v("CAS")]),a._v("核心:")]),a._v(" "),s("blockquote",[s("p",[a._v("在死循环内，不断尝试修改目标值，直到修改成功，如果竞争不激烈，修改成功率很高，否则失败概率很高，性能会受到影响")])])]),a._v(" "),s("blockquote",[s("p",[a._v("jdk8中新增LongAdder，它和AtomicLong比较\n优点：性能好，在处理高并发情况下统计优先使用LongAdder\n"),s("strong",[a._v("LongAddr原理？")])])]),a._v(" "),s("blockquote",[s("p",[a._v("AtomicReference、AtomicReferenceFieldUpdater原子性更新字段（字段要求volatile修饰，并且是非static）")])]),a._v(" "),s("blockquote",[s("p",[a._v("AtomicStampReference：CAS的ABA问题\nABA问题：变量已经被修改了，但是最终的值和原来的一样，那么如何区分是否被修改过呢，用版本号解决")])]),a._v(" "),s("blockquote",[s("p",[a._v("AtomicBoolean可以让某些代码只执行一次")])]),a._v(" "),s("h5",{attrs:{id:"原子性-锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性-锁"}},[a._v("#")]),a._v(" 原子性——锁")]),a._v(" "),s("blockquote",[s("p",[a._v("synchronized：依赖JVM，作用对象的作用范围内\nLock：依赖特殊的CPU指令，代码实现，ReentrantLock")])]),a._v(" "),s("blockquote",[s("p",[a._v("synchronized")]),a._v(" "),s("blockquote",[s("p",[a._v("1,修饰代码块：同步代码块，大括号括起来的代码，作用于调用的对象\n2,修饰方法：同步方法，整个方法，作用于调用的对象\n3,修饰静态方法：整个静态方法，作用于所有对象\n4,修饰类：括号括起来的部分，作用于所有对象")])])]),a._v(" "),s("blockquote",[s("p",[a._v("Lock")]),a._v(" "),s("blockquote",[s("p",[a._v("依赖特殊的CPU指令，代码实现，ReentrantLock")])])]),a._v(" "),s("h5",{attrs:{id:"原子性-对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性-对比"}},[a._v("#")]),a._v(" 原子性——对比")]),a._v(" "),s("blockquote",[s("p",[a._v("synchronized：不可中断锁，适合竞争不激烈，可读性好\nLock：可中断锁，多样化同步，竞争激烈时能维持常态\nAtomic：竞争激烈时能维持常态，比Lock性能好，只能同步一个值")])]),a._v(" "),s("h4",{attrs:{id:"可见性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[a._v("#")]),a._v(" 可见性")]),a._v(" "),s("blockquote",[s("p",[a._v("导致共享变量在线程间不可见的原因：")]),a._v(" "),s("blockquote",[s("p",[a._v("1 线程交叉执行\n2 重排序结合线程交叉执行\n3 共享变量更新后的值没有在工作内存与主内存间及时更新")])])]),a._v(" "),s("h5",{attrs:{id:"可见性-synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可见性-synchronized"}},[a._v("#")]),a._v(" 可见性——synchronized")]),a._v(" "),s("blockquote",[s("p",[a._v("JMM关于synchronized的两条规定：\n1,线程解锁前，必须把共享变量的最新值刷新到主内存\n2,线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意，加锁和解锁是同一把锁）")])]),a._v(" "),s("h5",{attrs:{id:"可见性-volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可见性-volatile"}},[a._v("#")]),a._v(" 可见性——volatile")]),a._v(" "),s("blockquote",[s("p",[a._v("通过加入内存屏障和禁止重排序优化来实现")]),a._v(" "),s("blockquote",[s("p",[a._v("1 对volatile变量写操作时，会在写操作后加入一条store屏障指令，将本地内存中的共享变量值刷新到主内存\n2 随volatile变量度操作时，会在读操作前加入一条load屏障指令，从主内存中读取共享变量\n图示：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101222034299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101222056432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])])]),a._v(" "),s("blockquote",[s("p",[a._v("使用volatile修饰变量，无法保证线程安全")])]),a._v(" "),s("blockquote",[s("p",[a._v("volatile适合修饰状态标识量\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201101222129700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("h4",{attrs:{id:"有序性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有序性"}},[a._v("#")]),a._v(" 有序性")]),a._v(" "),s("blockquote",[s("p",[a._v("java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性")])]),a._v(" "),s("h5",{attrs:{id:"有序性-happens-before原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有序性-happens-before原则"}},[a._v("#")]),a._v(" 有序性——happens-before原则")]),a._v(" "),s("blockquote",[s("p",[a._v("1 程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作\n注：在单线程中，看起来是这样的，虚拟机可能会对代码进行指令重排序，虽然重排序了，但是运行结果在单线程中和指令书写顺序是一致的，事实上，这条规则是用来保证程序单在单线程中执行结果的正确性，无法保证程序在多线程中的正确性.\n2 锁定规则：一个unlock操作先行发生于后面对同一个锁的lock操作\n3 volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作\n4 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C\n前四条规则比较重要\n5 线程启动规则：Thread对象的start()方法先行发生于次线程的每一个动作\n6 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码监测到中断事件的发生\n7 线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行\n8 对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始")])]),a._v(" "),s("blockquote",[s("p",[a._v("理解：")]),a._v(" "),s("blockquote",[s("p",[a._v("一个线程观察其他线程指令执行顺序，由于重排序的存在，观察结果一般是无序的，如果两个操作执行顺序无法从happens-before原则推导出来，那么他们就不能保证有序性，虚拟机可以随意的对他们重排序")])])]),a._v(" "),s("h1",{attrs:{id:"安全发布对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全发布对象"}},[a._v("#")]),a._v(" 安全发布对象")]),a._v(" "),s("h2",{attrs:{id:"_1-发布与逸出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-发布与逸出"}},[a._v("#")]),a._v(" 1.发布与逸出")]),a._v(" "),s("h2",{attrs:{id:"_2-四种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-四种方法"}},[a._v("#")]),a._v(" 2.四种方法")]),a._v(" "),s("h3",{attrs:{id:"发布与逸出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发布与逸出"}},[a._v("#")]),a._v(" 发布与逸出")]),a._v(" "),s("blockquote",[s("p",[a._v("发布对象")]),a._v(" "),s("blockquote",[s("p",[a._v("使一个对象能够被当前范围之外的代码所使用")])])]),a._v(" "),s("blockquote",[s("p",[a._v("对象逸出")]),a._v(" "),s("blockquote",[s("p",[a._v("一种错误的发布。当一个对象还没有构造完成时，就使它被其他线程所见")])])]),a._v(" "),s("h3",{attrs:{id:"安全发布对象四种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全发布对象四种方法"}},[a._v("#")]),a._v(" 安全发布对象四种方法")]),a._v(" "),s("blockquote",[s("p",[a._v("1 在静态初始化函数中初始化一个对象引用\n2 将对象的引用保存到volatile类型域或者AtomicReference对象中\n3 将对象的引用保存到某个正确构造对象的final类型域中\n4 将对象的引用保存到一个由锁保护的域中")])]),a._v(" "),s("blockquote",[s("p",[a._v("理解")]),a._v(" "),s("blockquote",[s("p",[a._v("私有构造函数，单例对象，静态工厂方法获取对象")])])]),a._v(" "),s("p",[a._v("以单例模式为例")]),a._v(" "),s("p",[a._v("懒汉模式：单例实例在第一次使用时进行创建（线程不安全）")]),a._v(" "),s("p",[a._v("懒汉模式也可以实现线程安全，给getInstance方法添加synchronized关键字（不推荐，因为性能不好）")]),a._v(" "),s("p",[a._v("双重同步锁单例模式：双重监测机制，在方法内部加synchronized关键字（不是线程安全的）")]),a._v(" "),s("p",[a._v("原因是，创建对象是，分为以下三个步骤：")]),a._v(" "),s("p",[a._v("1） memory = allocate() 分配对象的内存空间")]),a._v(" "),s("p",[a._v("2）ctorInstance() 初始化对象")]),a._v(" "),s("p",[a._v("3）instance = memory() 设置instance指向刚分配的内存")]),a._v(" "),s("p",[a._v("由于JVM和cpu优化，可能会发生指令重排：")]),a._v(" "),s("p",[a._v("1） memory = allocate() 分配对象的内存空间")]),a._v(" "),s("p",[a._v("3） instance = memory() 设置instance指向刚分配的内存")]),a._v(" "),s("p",[a._v("2） ctorInstance() 初始化对象")]),a._v(" "),s("p",[a._v("当以上面这种指令执行时，线程A执行到3 instance = memory() 设置instance指向刚分配的内存 这一步时，线程B执行if(instance == null)这段代码，此时instance ！= null，线程B直接return instance，导致对象没有初始化完毕就返回")]),a._v(" "),s("p",[a._v("解决办法就是限制对象创建时进行指令重排，volatile+双重监测机制->禁止指令重排引起非线程安全")]),a._v(" "),s("p",[a._v("饿汉模式：单例实例在类装载时进行创建（线程安全）")]),a._v(" "),s("p",[a._v("枚举模式：线程安全")]),a._v(" "),s("h1",{attrs:{id:"线程安全策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全策略"}},[a._v("#")]),a._v(" 线程安全策略")]),a._v(" "),s("h2",{attrs:{id:"_1-不可变对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-不可变对象"}},[a._v("#")]),a._v(" 1.不可变对象")]),a._v(" "),s("h2",{attrs:{id:"_2-线程封闭"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程封闭"}},[a._v("#")]),a._v(" 2.线程封闭")]),a._v(" "),s("h2",{attrs:{id:"_3-线程不安全类与写法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-线程不安全类与写法"}},[a._v("#")]),a._v(" 3.线程不安全类与写法")]),a._v(" "),s("h2",{attrs:{id:"_4-同步容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-同步容器"}},[a._v("#")]),a._v(" 4.同步容器")]),a._v(" "),s("h2",{attrs:{id:"_5-并发容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-并发容器"}},[a._v("#")]),a._v(" 5.并发容器")]),a._v(" "),s("h2",{attrs:{id:"_6-安全共享策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-安全共享策略"}},[a._v("#")]),a._v(" 6.安全共享策略")]),a._v(" "),s("h3",{attrs:{id:"不可变对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不可变对象"}},[a._v("#")]),a._v(" 不可变对象")]),a._v(" "),s("blockquote",[s("p",[a._v("不可变对象需要满足的条件：")]),a._v(" "),s("blockquote",[s("p",[a._v("对象创建以后其状态就不能修改\n对象所有域都是final类型\n对象是正确创建的（在对象创建期间，this引用没有逸出）")])])]),a._v(" "),s("blockquote",[s("p",[a._v("final关键字定义不可变对象")]),a._v(" "),s("blockquote",[s("p",[a._v("修饰类、方法、变量\n修饰类：不能被继承\n修饰方法：1.锁定方法不被继承类修改 2.效率\n修饰变量：基本数据类型，数值不可变；引用类型变量，不能再指向另外一个对象，因此容易引起线程安全问题")])])]),a._v(" "),s("blockquote",[s("p",[a._v("其他实现不可变对象")]),a._v(" "),s("blockquote",[s("p",[a._v("Collections.unmodifiableXXX：Collection、List、Set、Map（线程安全）\nGuava：ImmutableXXX：Collection、List、Set、Map")])])]),a._v(" "),s("h3",{attrs:{id:"线程封闭性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程封闭性"}},[a._v("#")]),a._v(" 线程封闭性")]),a._v(" "),s("blockquote",[s("p",[a._v("线程封闭")]),a._v(" "),s("blockquote",[s("p",[a._v("把对象封装到一个线程里，只有这个线程可以看到该对象，那么就算该对象不是线程安全的，也不会出现任何线程安全方面的问题。实现线程封闭的方法：")])])]),a._v(" "),s("blockquote",[s("p",[a._v("线程封闭方法")]),a._v(" "),s("blockquote",[s("p",[a._v("1 Ad-hoc线程封闭：程序控制实现，最糟糕，忽略\n2 堆栈封闭：局部变量，无并发问题\n3 threadLocal是线程安全的，做到了线程封闭")]),a._v(" "),s("blockquote",[s("p",[a._v("ThreadLocal内部维护了一个map，map的key是每个线程的名称，map的值是要封闭的对象，每一个线程中的对象都对应者一个map中的值")])])])]),a._v(" "),s("blockquote",[s("p",[a._v("线程封闭的应用场景：\n数据库连接jdbc的Connection对象")])]),a._v(" "),s("h3",{attrs:{id:"线程不安全类与写法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程不安全类与写法"}},[a._v("#")]),a._v(" 线程不安全类与写法")]),a._v(" "),s("blockquote",[s("p",[a._v("字符串")]),a._v(" "),s("blockquote",[s("p",[a._v("StringBuilder：线程不安全"),s("br"),a._v("\nStringBuffer：线程安全")])])]),a._v(" "),s("blockquote",[s("p",[a._v("时间转换")]),a._v(" "),s("blockquote",[s("p",[a._v("SimpleDateFormat：线程不安全\nJodaTime：线程安全")])])]),a._v(" "),s("blockquote",[s("p",[a._v("集合")]),a._v(" "),s("blockquote",[s("p",[a._v("ArrayList,HashSet,HashMap等Collections：线程不安全")])])]),a._v(" "),s("blockquote",[s("p",[a._v("编程注意：")]),a._v(" "),s("blockquote",[s("p",[a._v("if(condition(a)){handle(a)}; 不是线程安全的，因为这条判断语句不是原子性的，如果有线程共享这条代码，则会出现并发问题，解决方案是想办法这这段代码是原子性的（加锁）")])])]),a._v(" "),s("h3",{attrs:{id:"线程安全-同步容器-在多线程环境下不推荐使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全-同步容器-在多线程环境下不推荐使用"}},[a._v("#")]),a._v(" 线程安全——同步容器（在多线程环境下不推荐使用）")]),a._v(" "),s("blockquote",[s("p",[a._v("ArrayList -> Vector, Stack（Vector中的方法使用synchronized修饰过，Stack继承Vector）\nHashMap -> HashTable(key、value不能为null，HashTable使用synchronized修饰方法）\nCollections.synchronizedXXX（List、Set、Map）")])]),a._v(" "),s("blockquote",[s("p",[a._v("同步容器不完全是线程安全的\n编程注意：如果使用foreach或者iterator遍历集合时，尽量不要对集合进行修改操作")])]),a._v(" "),s("h3",{attrs:{id:"线程安全-并发容器j-u-c-java-util-concurrent-在多线程环境下推荐使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全-并发容器j-u-c-java-util-concurrent-在多线程环境下推荐使用"}},[a._v("#")]),a._v(" 线程安全——并发容器J.U.C（java.util.concurrent）（在多线程环境下推荐使用）")]),a._v(" "),s("blockquote",[s("p",[a._v("ArrayList -> CopyOnWriteArrayList：")]),a._v(" "),s("blockquote",[s("p",[a._v("相比ArrayList，CopyOnWriteArrayList是线程安全的，写操作时复制，即当有新元素添加到CopyOnWriteArrayList时，先从原有的数组里拷贝一份出来，然后在新的数组上写操作，写完之后再将原来的数组指向新的数组，CopyOnWriteArrayList整个操作都是在锁（ReentrantLock锁）的保护下进行的，这么做主要是避免在多线程并发做add操作时复制出多个副本出来，把数据搞乱了。第一个缺点是做写操作时，需要拷贝数组，就会消耗内存，如果元素内容比较多会导致youngGC或者是fullGc；第二个缺点是不能用于实时读的场景，比如拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到的数据可能还是旧的，虽然CopyOnWriteArrayList能够做到最终的一致性，但是没法满足实时性要求，因此CopyOnWriteArrayList更适合读多写少的场景\nCopyOnWriteArrayList设计思想：1读写分离 2最终一致性 3使用时另外开辟空间解决并发冲突")])])]),a._v(" "),s("blockquote",[s("p",[a._v("HashSet -> CopyOnWriteArraySet")]),a._v(" "),s("blockquote",[s("p",[a._v("CopyOnWriteArraySet：底层实现是CopyOnWriteArrayList")])])]),a._v(" "),s("blockquote",[s("p",[a._v("TreeSet -> ConcurrentSkipListSet\nConcurrentSkipListSet：和TreeSet 一样支持自然排序，基于map集合，但是批量操作不是线程安全的")])]),a._v(" "),s("blockquote",[s("p",[a._v("HashMap -> ConcurrentHashMap ：不允许空值，针对读操作做了大量的优化，具有特别高的并发性")])]),a._v(" "),s("blockquote",[s("p",[a._v("TreeMap  -> ConcurrentSkipListMap ：内部使用SkipList跳表结构实现的，key是有序的，支持更高的并发")])]),a._v(" "),s("h3",{attrs:{id:"安全共享对象策略-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全共享对象策略-总结"}},[a._v("#")]),a._v(" 安全共享对象策略——总结")]),a._v(" "),s("blockquote",[s("p",[a._v("1 线程限制：一个呗线程限制的对象，由线程独占，并且只能被占有它的线程修改\n2 共享只读：一个共享只读的对象，在没有额外的同步情况下，可以被多个线程并发访问，但是任何线程都不能修改它\n3 线程安全对象：一个线程安全的对象或容器，在内部通过同步机制来保证线程安全，所以其他线程无序额外的同步就可以通过公共接口随意访问它\n4 被守护对象：被守护对象只能通过获取特定的锁来访问")])]),a._v(" "),s("h1",{attrs:{id:"j-u-c之aqs-abstractqueuedsynchronizer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#j-u-c之aqs-abstractqueuedsynchronizer"}},[a._v("#")]),a._v(" J.U.C之AQS（AbstractQueuedSynchronizer）")]),a._v(" "),s("h2",{attrs:{id:"_1-aqs介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-aqs介绍"}},[a._v("#")]),a._v(" 1.AQS介绍")]),a._v(" "),s("h2",{attrs:{id:"_2-aqs-countdownlatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-aqs-countdownlatch"}},[a._v("#")]),a._v(" 2.AQS-CountDownLatch")]),a._v(" "),s("h2",{attrs:{id:"_3-aqs-semaphore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-aqs-semaphore"}},[a._v("#")]),a._v(" 3.AQS-Semaphore")]),a._v(" "),s("h2",{attrs:{id:"_4-aqs-cyclicbarrier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-aqs-cyclicbarrier"}},[a._v("#")]),a._v(" 4.AQS-CyclicBarrier")]),a._v(" "),s("h2",{attrs:{id:"_5-aqs-reentrantlock与锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-aqs-reentrantlock与锁"}},[a._v("#")]),a._v(" 5.AQS-ReentrantLock与锁")]),a._v(" "),s("h3",{attrs:{id:"aqs介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs介绍"}},[a._v("#")]),a._v(" AQS介绍")]),a._v(" "),s("blockquote",[s("p",[a._v("1 使用Node实现FIFO队列，可以用于构建锁或者其他同步装置的基础框架\n2 利用了int类型表示状态\n3 使用方法是继承\n4 子类通过继承并通过实现它的方法管理器状态{acquire和release}的方法操纵状态\n5 可以同时实现排它锁和共享锁模式（独占、共享）")])]),a._v(" "),s("blockquote",[s("p",[a._v("AQS实现原理")]),a._v(" "),s("blockquote",[s("p",[a._v("?")])])]),a._v(" "),s("blockquote",[s("p",[a._v("AQS同步组件\n1 CountDownLatch：闭锁，通过计数来保证线程是否需要一直阻塞\n2 Semaphore：控制同一时间并发线程的数目\n3 CyclicBarrier：和CountDownLatch相似，都能阻阻塞线程\n4 ReentrantLock\n5 Condition\n6 FutureTask")])]),a._v(" "),s("h3",{attrs:{id:"countdownlatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[a._v("#")]),a._v(" CountDownLatch")]),a._v(" "),s("blockquote",[s("p",[a._v("CountDownLatch是一个同步辅助类，应用场景：并行运算，所有线程执行完毕才可执行")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020110210193350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v("\n代码示例1：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\nclass Scratch{\n    private final static int threadCount = 50;\n    public static void main(String[] args) throws Exception{\n\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final CountDownLatch countDownLatch = new CountDownLatch(threadCount);\n\n        for (int i=0;i<threadCount;i++){\n            final int threadNum = i;\n            executorService.execute(()->{\n                try {\n                    test(threadNum);\n                } catch (Exception e) {\n                    System.out.println("exception:"+e);\n                }finally {\n                    countDownLatch.countDown();\n                }\n            });\n        }\n\n        countDownLatch.await();// countDownLatch减为0时才会继续下面流程\n        System.out.println("run finish");\n        executorService.shutdown();\n    }\n\n    private static void test(int threadNum) throws Exception{\n        Thread.sleep(100);\n        System.out.println("run:"+threadNum);\n        Thread.sleep(100);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br")])]),s("p",[a._v("代码示例2：\nawait方法可以设定指定等待时间，超过这个时间久不再等待")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public static void main(String[] args) throws Exception{\n\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final CountDownLatch countDownLatch = new CountDownLatch(threadCount);\n\n        for (int i=0;i<threadCount;i++){\n            final int threadNum = i;\n            executorService.execute(()->{\n                try {\n                    test(threadNum);\n                } catch (Exception e) {\n                    System.out.println("exception:"+e);\n                }finally {\n                    countDownLatch.countDown();\n                }\n            });\n        }\n\n        countDownLatch.await(10, TimeUnit.MILLISECONDS);//超过这个时间久不再等待\n        System.out.println("run finish");\n        executorService.shutdown();\n    }\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br")])]),s("h3",{attrs:{id:"semaphore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[a._v("#")]),a._v(" Semaphore")]),a._v(" "),s("blockquote",[s("p",[a._v("Semaphore可以很容易控制某个资源可同时访问的线程个数，\n和CountDownLatch使用有些类似，提供acquire和release两个方法，\nacquire是获取一个许可，如果没有就等待，\nrelease是在操作完成后释放许可出来。\nSemaphore维护了当前访问的线程的个数，提供同步机制来控制同时访问的个数，Semaphore可以实现有限大小的链表，重入锁（如ReentrantLock）也可以实现这个功能，但是实现上比较复杂。")])]),a._v(" "),s("blockquote",[s("p",[a._v("Semaphore使用场景：适用于仅能提供有限资源，如数据库连接数")])]),a._v(" "),s("p",[a._v("代码示例1：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.time.LocalDate;\nimport java.util.concurrent.*;\n\nclass Scratch{\n    private final static int threadCount = 20;\n    public static void main(String[] args) throws Exception{\n\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final Semaphore semaphore = new Semaphore(3);\n\n        for (int i=0;i<threadCount;i++){\n            final int threadNum = i;\n            executorService.execute(()->{\n                try {\n                    semaphore.acquire();\n                    test(threadNum);\n                    semaphore.release();\n                } catch (Exception e) {\n                    System.out.println("exception:"+e);\n                }\n            });\n        }\n        executorService.shutdown();\n    }\n\n    private static void test(int threadNum) throws Exception{\n        System.out.println("time:"+ LocalDate.now() +"-"+threadNum);\n        Thread.sleep(1000);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br")])]),s("p",[a._v("代码示例2：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public static void main(String[] args) throws Exception{\n\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final Semaphore semaphore = new Semaphore(3);\n\n        for (int i=0;i<threadCount;i++){\n            final int threadNum = i;\n            executorService.execute(()->{\n                try {\n                    if (semaphore.tryAcquire()){ //尝试获取一个许可\n                        test(threadNum);\n                        semaphore.release(); // 释放一个许可\n                    }\n                } catch (Exception e) {\n                    System.out.println("exception:"+e);\n                }\n            });\n        }\n        executorService.shutdown();\n    }\n\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br")])]),s("p",[a._v("代码示例3")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public static void main(String[] args) throws Exception{\n\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final Semaphore semaphore = new Semaphore(3);\n\n        for (int i=0;i<threadCount;i++){\n            final int threadNum = i;\n            executorService.execute(()->{\n                try {\n                    if (semaphore.tryAcquire(1,5000,TimeUnit.MICROSECONDS)){\n                        test(threadNum);\n                        semaphore.release();\n                    }\n                } catch (Exception e) {\n                    System.out.println("exception:"+e);\n                }\n            });\n        }\n        executorService.shutdown();\n    }\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("h3",{attrs:{id:"cyclicbarrier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[a._v("#")]),a._v(" CyclicBarrier")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102121422555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),a._v(" "),s("blockquote",[s("p",[a._v("与CountDownLatch相似，都是通过计数器实现，当某个线程调用await方法，该线程就进入等待状态，且计数器进行加1操作，当计数器的值达到设置的初始值，进入await等待的线程会被唤醒，继续执行他们后续的操作。由于CyclicBarrier在释放等待线程后可以重用，所以又称循环屏障。使用场景和CountDownLatch相似，可用于并发运算。")])]),a._v(" "),s("blockquote",[s("p",[a._v("CyclicBarrier和CountDownLatch区别：")]),a._v(" "),s("blockquote",[s("p",[a._v("1 CountDownLatch计数器只能使用一次，CyclicBarrier的计数器可以使用reset方法重置循环使用\n2 CountDownLatch主要是视线1个或n个线程需要等待其他线程完成某项操作才能继续往下执行，"),s("strong",[a._v("CyclicBarrier主要是实现多个线程之间相互等待知道所有线程都满足了条件之后才能继续执行后续的操作，CyclicBarrier能处理更复杂的场")]),a._v("景")])])]),a._v(" "),s("p",[a._v("代码示例：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.util.concurrent.*;\n\nclass Scratch{\n    private final static int threadCount = 10;\n    private static CyclicBarrier barrier = new CyclicBarrier(5);\n    public static void main(String[] args) throws Exception{\n\n        ExecutorService executorService = Executors.newCachedThreadPool();\n\n        for (int i=0;i<threadCount;i++){\n            final int threadNum = i;\n            Thread.sleep(1000);\n            executorService.execute(()->{\n                try {\n                   test(threadNum);\n                } catch (Exception e) {\n                    System.out.println("exception:"+e);\n                }\n            });\n        }\n        executorService.shutdown();\n    }\n\n    private static void test(int threadNum) throws Exception{\n        Thread.sleep(1000);\n        System.out.println(threadNum+" is ready");\n        barrier.await();\n        System.out.println(threadNum+" continue");\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br")])]),s("h3",{attrs:{id:"reentrantlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock"}},[a._v("#")]),a._v(" ReentrantLock")]),a._v(" "),s("blockquote",[s("p",[a._v("reentrantLock（可重入锁）和synchronized区别")]),a._v(" "),s("blockquote",[s("p",[a._v("1 可重入性：同一线程可以重入获得相同的锁，计数器加1，释放锁计数器减1\nsynchronized也是可重入锁\n2 锁的实现：synchronized依赖jvm实现（操作系统级别的实现），reentrantLock是jdk实现的（用户自己编程实现）\n3 性能区别：synchronized在优化前性能比reentrantLock差，优化后性能有了恨到提升，相同条件下优先使用synchronized\n4 功能区别：1）便利性方面，synchronized使用简单，reentrantLock需要手工加锁和释放锁2）锁的细粒度和灵活度方面，reentrantLock优于synchronized\n5 reentrantlock独有的功能：1）可指定是公平锁还是非公平锁，synchronized只能是非公平锁 2）提供了一个Condition类，可以分组唤醒需要唤醒的线程 3）能够提供中断等待锁的线程机制，lock.lockInterruptibly()")])])]),a._v(" "),s("p",[a._v("代码示例：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.util.concurrent.*;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\nclass Scratch{\n    private final static int threadCount = 10;\n    private static CyclicBarrier barrier = new CyclicBarrier(5);\n    // 请求总数\n    public static int clientTotal = 5000;\n\n    // 同时并发执行的线程数\n    public static int threadTotal = 200;\n\n    public static int count = 0;\n\n    private final static Lock lock = new ReentrantLock();\n\n    public static void main(String[] args) throws Exception {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final Semaphore semaphore = new Semaphore(threadTotal);\n        final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);\n        for (int i = 0; i < clientTotal ; i++) {\n            executorService.execute(() -> {\n                try {\n                    semaphore.acquire();\n                    add();\n                    semaphore.release();\n                } catch (Exception e) {\n                    System.out.println(e);\n                }\n                countDownLatch.countDown();\n            });\n        }\n        countDownLatch.await();\n        executorService.shutdown();\n        System.out.println("count:"+count);\n    }\n\n    private static void add() {\n        lock.lock();\n        try {\n            count++;\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br")])]),s("h3",{attrs:{id:"reentrantreadwritelock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantreadwritelock"}},[a._v("#")]),a._v(" ReentrantReadWriteLock")]),a._v(" "),s("blockquote",[s("p",[a._v("在没有任何读写锁时，才可以取得写入锁\n悲观写锁，即当所有读锁释放之后，才能加写锁，对于读多写少的程序，会引起堵塞或者死锁")])]),a._v(" "),s("p",[a._v("代码示例：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("import java.util.Map;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\nclass Scratch{\n    private final Map<String, Data> map = new TreeMap<>();\n\n    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n    private final Lock readLock = lock.readLock();\n\n    private final Lock writeLock = lock.writeLock();\n\n    public Scratch.Data get(String key) {\n        readLock.lock();\n        try {\n            return map.get(key);\n        } finally {\n            readLock.unlock();\n        }\n    }\n\n    public Set<String> getAllKeys() {\n        readLock.lock();\n        try {\n            return map.keySet();\n        } finally {\n            readLock.unlock();\n        }\n    }\n\n    public Scratch.Data put(String key, Scratch.Data value) {\n        writeLock.lock();\n        try {\n            return map.put(key, value);\n        } finally {\n            readLock.unlock();\n        }\n    }\n\n    class Data {\n\n    }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br")])]),s("h3",{attrs:{id:"stampedlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock"}},[a._v("#")]),a._v(" StampedLock")]),a._v(" "),s("blockquote",[s("p",[a._v("StampedLock")]),a._v(" "),s("blockquote",[s("p",[a._v("?")])])]),a._v(" "),s("p",[a._v("示例代码1")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("import java.util.concurrent.locks.StampedLock;\n\nclass Scratch{\n\n    class Point {\n        private double x, y;\n        private final StampedLock sl = new StampedLock();\n\n        void move(double deltaX, double deltaY) { // an exclusively locked method\n            long stamp = sl.writeLock();\n            try {\n                x += deltaX;\n                y += deltaY;\n            } finally {\n                sl.unlockWrite(stamp);\n            }\n        }\n\n        //下面看看乐观读锁案例\n        double distanceFromOrigin() { // A read-only method\n            long stamp = sl.tryOptimisticRead(); //获得一个乐观读锁\n            double currentX = x, currentY = y;  //将两个字段读入本地局部变量\n            if (!sl.validate(stamp)) { //检查发出乐观读锁后同时是否有其他写锁发生？\n                stamp = sl.readLock();  //如果没有，我们再次获得一个读悲观锁\n                try {\n                    currentX = x; // 将两个字段读入本地局部变量\n                    currentY = y; // 将两个字段读入本地局部变量\n                } finally {\n                    sl.unlockRead(stamp);\n                }\n            }\n            return Math.sqrt(currentX * currentX + currentY * currentY);\n        }\n\n        //下面是悲观读锁案例\n        void moveIfAtOrigin(double newX, double newY) { // upgrade\n            // Could instead start with optimistic, not read mode\n            long stamp = sl.readLock();\n            try {\n                while (x == 0.0 && y == 0.0) { //循环，检查当前状态是否符合\n                    long ws = sl.tryConvertToWriteLock(stamp); //将读锁转为写锁\n                    if (ws != 0L) { //这是确认转为写锁是否成功\n                        stamp = ws; //如果成功 替换票据\n                        x = newX; //进行状态改变\n                        y = newY;  //进行状态改变\n                        break;\n                    } else { //如果不能成功转换为写锁\n                        sl.unlockRead(stamp);  //我们显式释放读锁\n                        stamp = sl.writeLock();  //显式直接进行写锁 然后再通过循环再试\n                    }\n                }\n            } finally {\n                sl.unlock(stamp); //释放读锁或写锁\n            }\n        }\n    }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br")])]),s("p",[a._v("代码示例2")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.locks.StampedLock;\n\nclass Scratch{\n    // 请求总数\n    public static int clientTotal = 5000;\n    // 同时并发执行的线程数\n    public static int threadTotal = 200;\n\n    public static int count = 0;\n\n    private final static StampedLock lock = new StampedLock();\n\n    public static void main(String[] args) throws Exception {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final Semaphore semaphore = new Semaphore(threadTotal);\n        final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);\n        for (int i = 0; i < clientTotal ; i++) {\n            executorService.execute(() -> {\n                try {\n                    semaphore.acquire();\n                    add();\n                    semaphore.release();\n                } catch (Exception e) {\n                    log.error("exception", e);\n                }\n                countDownLatch.countDown();\n            });\n        }\n        countDownLatch.await();\n        executorService.shutdown();\n        log.info("count:{}", count);\n    }\n\n    private static void add() {\n        long stamp = lock.writeLock();\n        try {\n            count++;\n        } finally {\n            lock.unlock(stamp);\n        }\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br")])]),s("h3",{attrs:{id:"condition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#condition"}},[a._v("#")]),a._v(" Condition")]),a._v(" "),s("blockquote",[s("p",[a._v("多线程建协调通信的工具类")])]),a._v(" "),s("p",[a._v("代码示例：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\nclass Scratch{\n    public static void main(String[] args) {\n        ReentrantLock reentrantLock = new ReentrantLock();\n        Condition condition = reentrantLock.newCondition();\n\n        new Thread(() -> {\n            try {\n                reentrantLock.lock();\n                log.info("wait signal"); // 1\n                condition.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.info("get signal"); // 4\n            reentrantLock.unlock();\n        }).start();\n\n        new Thread(() -> {\n            reentrantLock.lock();\n            log.info("get lock"); // 2\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            condition.signalAll();\n            log.info("send signal ~ "); // 3\n            reentrantLock.unlock();\n        }).start();\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br")])]),s("h1",{attrs:{id:"j-u-c组件扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#j-u-c组件扩展"}},[a._v("#")]),a._v(" J.U.C组件扩展")]),a._v(" "),s("h2",{attrs:{id:"_1-futuretask"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-futuretask"}},[a._v("#")]),a._v(" 1.FutureTask")]),a._v(" "),s("h2",{attrs:{id:"_2-fork-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-fork-join"}},[a._v("#")]),a._v(" 2.Fork/Join")]),a._v(" "),s("h2",{attrs:{id:"_3-blockingqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-blockingqueue"}},[a._v("#")]),a._v(" 3.BlockingQueue")]),a._v(" "),s("h3",{attrs:{id:"futuretask"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#futuretask"}},[a._v("#")]),a._v(" FutureTask")]),a._v(" "),s("blockquote",[s("p",[a._v("Callable与Runnable接口对比\nFuture接口，可以得到任务的返回值\nFutureTask父类是RunnableFuture，RunnableFuture继承了Runnable和Future两个接口")])]),a._v(" "),s("blockquote",[s("p",[a._v("使用场景")]),a._v(" "),s("blockquote",[s("p",[a._v("假设又一个很费事逻辑，需要计算，并且返回这个值，同时这个值又不是马上需要，\n那么就可以使用这个组合，用另外一个线程去计算返回值，\n而当前线程在使用这个返回值之前可以做其他操作，等到需要这个返回值时，再通过Future得到")])])]),a._v(" "),s("p",[a._v("Future代码示例1：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\n@Slf4j\npublic class FutureExample {\n\n    static class MyCallable implements Callable<String> {\n\n        @Override\n        public String call() throws Exception {\n            log.info("do something in callable");\n            Thread.sleep(5000);\n            return "Done";\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        Future<String> future = executorService.submit(new MyCallable());\n        log.info("do something in main");\n        Thread.sleep(1000);\n        String result = future.get();\n        log.info("result：{}", result);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br")])]),s("p",[a._v("FutureTask示例代码2：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Slf4j\npublic class FutureTaskExample {\n\n    public static void main(String[] args) throws Exception {\n        FutureTask<String> futureTask = new FutureTask<String>(new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                log.info("do something in callable");\n                Thread.sleep(5000);\n                return "Done";\n            }\n        });\n\n        new Thread(futureTask).start();\n        log.info("do something in main");\n        Thread.sleep(1000);\n        String result = futureTask.get();\n        log.info("result：{}", result);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("h3",{attrs:{id:"fork-join框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fork-join框架"}},[a._v("#")]),a._v(" Fork/Join框架")]),a._v(" "),s("blockquote",[s("p",[a._v("将大人物切分成多个小任务并行执行，最后将结果汇总，思想和mapreduce类似。采用工作窃取算法，充分利用线程并行计算\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102134647914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("p",[a._v("代码示例")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class ForkJoinTaskExample extends RecursiveTask<Integer> {\n\n    public static final int threshold = 2;\n    private int start;\n    private int end;\n\n    public ForkJoinTaskExample(int start, int end) {\n        this.start = start;\n        this.end = end;\n    }\n\n    @Override\n    protected Integer compute() {\n        int sum = 0;\n\n        //如果任务足够小就计算任务\n        boolean canCompute = (end - start) <= threshold;\n        if (canCompute) {\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n        } else {\n            // 如果任务大于阈值，就分裂成两个子任务计算\n            int middle = (start + end) / 2;\n            ForkJoinTaskExample leftTask = new ForkJoinTaskExample(start, middle);\n            ForkJoinTaskExample rightTask = new ForkJoinTaskExample(middle + 1, end);\n\n            // 执行子任务\n            leftTask.fork();\n            rightTask.fork();\n\n            // 等待任务执行结束合并其结果\n            int leftResult = leftTask.join();\n            int rightResult = rightTask.join();\n\n            // 合并子任务\n            sum = leftResult + rightResult;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ForkJoinPool forkjoinPool = new ForkJoinPool();\n\n        //生成一个计算任务，计算1+2+3+4\n        ForkJoinTaskExample task = new ForkJoinTaskExample(1, 100);\n\n        //执行一个任务\n        Future<Integer> result = forkjoinPool.submit(task);\n\n        try {\n            log.info("result:{}", result.get());\n        } catch (Exception e) {\n            log.error("exception", e);\n        }\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br")])]),s("h3",{attrs:{id:"blockingqueue-阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue-阻塞队列"}},[a._v("#")]),a._v(" BlockingQueue——阻塞队列")]),a._v(" "),s("blockquote",[s("p",[a._v("当队列满进行入队操作，线程阻塞，\n当队列空时进行出队操作，将会阻塞"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020110213492915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("blockquote",[s("p",[a._v("方法\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102135448651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("blockquote",[s("p",[a._v("实现类")]),a._v(" "),s("blockquote",[s("p",[a._v("ArrayBlockingQueue\nDelayQueue\nLinkedBlockingQueue\nPriorityBlockingQueue\nSynchronousQueue")])])]),a._v(" "),s("blockquote",[s("p",[a._v("应用场景")]),a._v(" "),s("blockquote",[s("p",[a._v("生产者、消费者")])])]),a._v(" "),s("h1",{attrs:{id:"线程调度-线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程调度-线程池"}},[a._v("#")]),a._v(" 线程调度-线程池")]),a._v(" "),s("h2",{attrs:{id:"_1-线程池概念和特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程池概念和特点"}},[a._v("#")]),a._v(" 1.线程池概念和特点")]),a._v(" "),s("h2",{attrs:{id:"_2-线程池状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程池状态"}},[a._v("#")]),a._v(" 2.线程池状态")]),a._v(" "),s("h2",{attrs:{id:"_3-线程池-相关类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-线程池-相关类"}},[a._v("#")]),a._v(" 3.线程池-相关类")]),a._v(" "),s("h2",{attrs:{id:"_4-线程池-相关方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-线程池-相关方法"}},[a._v("#")]),a._v(" 4.线程池-相关方法")]),a._v(" "),s("h2",{attrs:{id:"_5-线程池合理配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程池合理配置"}},[a._v("#")]),a._v(" 5.线程池合理配置")]),a._v(" "),s("h3",{attrs:{id:"线程池概念和特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池概念和特点"}},[a._v("#")]),a._v(" 线程池概念和特点")]),a._v(" "),s("blockquote",[s("p",[a._v("new Thread弊端：")]),a._v(" "),s("blockquote",[s("p",[a._v("1 每次new Thread新建对象，性能差\n2 线程缺乏统一的管理，可能无限制的新建线程，相互竞争，有可能占用过多系统资源导致死机或者OOM\n3 缺少更多功能，如更多执行、定期执行、线程中断")])])]),a._v(" "),s("blockquote",[s("p",[a._v("线程池的好处：")]),a._v(" "),s("blockquote",[s("p",[a._v("1 重用存在的线程，减少对象创建、消亡的开销，性能佳\n2 可有效控制最大并发的线程数，提高系统资源利用率，同时可以避免过多资源竞争，避免阻塞\n3 提供定时执行、定期执行、单线程、并发数控制等功能")])])]),a._v(" "),s("h3",{attrs:{id:"线程池状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池状态"}},[a._v("#")]),a._v(" 线程池状态")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102140507871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),a._v(" "),s("h3",{attrs:{id:"线程池-相关类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池-相关类"}},[a._v("#")]),a._v(" 线程池-相关类")]),a._v(" "),s("blockquote",[s("p",[a._v("ThreadPoolExecutor\nThreadPoolExecutor参数：")]),a._v(" "),s("blockquote",[s("p",[a._v("1 corePoolSize：核心线程数\n2 maximumPoolSize：最大线程数\n3 workQueue：阻塞队列，存储等待执行的任务，很重要，会对线程池运行过程产生重大影响\n4 keepAliveTime：线程没有任务执行时最多保持多久的时间终止\n5 unit：keepAliveTime的时间单位\n6 threadFactory：线程工厂，用来创建线程\n7 rejectHandler：当拒绝处理任务时的策略")])]),a._v(" "),s("blockquote",[s("blockquote",[s("p",[a._v("如果当前系统运行的线程数量小于corePoolSize，直接新建线程执行处理任务，即使线程池中的其他线程是空闲的。\n如果当前系统运行的线程数量大于或等于corePoolSize，且小于maximumPoolSize，只有当workQueue满的时候才创建新的线程去处理任务，\n如果设置corePoolSize和maximumPoolSize相同的话，那么创建的线程池大小是固定的，这时如果有新任务提交，当workQueue没满时，把请求放进workQueue中，等待有空闲的线程从workQueue中取出任务去处理。\n如果运行的线程数量大于maximumPoolSize，这时如果workQueue满，根据拒绝策略去处理。")])])])]),a._v(" "),s("h3",{attrs:{id:"线程池-相关方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池-相关方法"}},[a._v("#")]),a._v(" 线程池-相关方法")]),a._v(" "),s("blockquote",[s("p",[a._v("ThreadPoolExecutor")]),a._v(" "),s("blockquote",[s("p",[a._v("execute()：提交任务，交给线程池执行\nsubmit()：提交任务，能够返回执行结果\nshutdown()：关闭线程池，等待任务都执行完\nshutdownNow()：关闭线程池，不等待任务执行完\ngetTaskCount()：线程池已执行和未执行的任务总数\ngetCompletedTaskCount()：已完成的任务数量\ngetPoolSize()：线程池当前的线程数量\ngetActiveCount()：当前线程池中正在执行任务的线程数量")])])]),a._v(" "),s("blockquote",[s("p",[a._v("Executor框架接口")]),a._v(" "),s("blockquote",[s("p",[a._v("Executors.newCachedThreadPool\nExecutors.newFixedThreadPool\nExecutors.newScheduledThreadPool\nExecutors.newSingleThreadExecutor")])])]),a._v(" "),s("p",[a._v("代码示例")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nclass Scratch{\n    public static void main(String[] args) {\n\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n\n        for (int i = 0; i < 10; i++) {\n            final int index = i;\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println("task:"+index);\n                }\n            });\n        }\n        executorService.shutdown();\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("h3",{attrs:{id:"线程池合理配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池合理配置"}},[a._v("#")]),a._v(" 线程池合理配置")]),a._v(" "),s("blockquote",[s("p",[a._v("CPU密集型任务，就需要尽量压榨CPU，参考值可以设为NCPU+1\nIO密集型任务，参考值可以设置为2*NCPU")])]),a._v(" "),s("h1",{attrs:{id:"多线程并发扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程并发扩展"}},[a._v("#")]),a._v(" 多线程并发扩展")]),a._v(" "),s("h2",{attrs:{id:"_1-死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-死锁"}},[a._v("#")]),a._v(" 1.死锁")]),a._v(" "),s("h2",{attrs:{id:"_2-并发最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-并发最佳实践"}},[a._v("#")]),a._v(" 2.并发最佳实践")]),a._v(" "),s("h2",{attrs:{id:"_3-spring与线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring与线程安全"}},[a._v("#")]),a._v(" 3.Spring与线程安全")]),a._v(" "),s("h2",{attrs:{id:"_4-hashmap与concurrenthashmap解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-hashmap与concurrenthashmap解析"}},[a._v("#")]),a._v(" 4.HashMap与ConcurrentHashMap解析")]),a._v(" "),s("h2",{attrs:{id:"_5-多线程并发与线程安全总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-多线程并发与线程安全总结"}},[a._v("#")]),a._v(" 5.多线程并发与线程安全总结")]),a._v(" "),s("h3",{attrs:{id:"死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[a._v("#")]),a._v(" 死锁")]),a._v(" "),s("blockquote",[s("p",[a._v("线程（进程）互相等待对方释放资源产生死锁")])]),a._v(" "),s("blockquote",[s("p",[a._v("死锁条件")]),a._v(" "),s("blockquote",[s("p",[a._v("互斥条件\n请求和保持条件\n不剥夺条件\n环路等待条件")])])]),a._v(" "),s("h3",{attrs:{id:"并发最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发最佳实践"}},[a._v("#")]),a._v(" 并发最佳实践")]),a._v(" "),s("blockquote",[s("p",[a._v("使用本地变量\n使用不可变类\n最小化锁的作用锁范围 ：S=1/（1-a+a/n）\n使用线程池的Executor，而不是直接new Thread执行\n宁可使用同步也不要使用线程的wait和notify\n使用BlockingQueue实现生产-消费模式\n使用并发集合而不是加了锁的同步集合\n使用Semaphore创建有界的访问\n宁可使用同步代码块，也不使用同步的方法\n避免使用静态变量")])]),a._v(" "),s("h3",{attrs:{id:"spring与线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring与线程安全"}},[a._v("#")]),a._v(" Spring与线程安全")]),a._v(" "),s("blockquote",[s("p",[a._v("SpringBean：Singleton，Prototype\n无状态变量")])]),a._v(" "),s("h3",{attrs:{id:"hashmap与concurrenthashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap与concurrenthashmap"}},[a._v("#")]),a._v(" HashMap与ConcurrentHashMap")]),a._v(" "),s("blockquote",[s("p",[a._v("HashMap与ConcurrentHashMap\nHashMap在多线程环境中做rehash时容易产生死循环")])]),a._v(" "),s("blockquote",[s("p",[a._v("Guava Cache是谷歌开源的java工具库，借鉴ConcurrentHashMap的设计思想")])]),a._v(" "),s("h1",{attrs:{id:"高并发之扩容思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之扩容思路"}},[a._v("#")]),a._v(" 高并发之扩容思路")]),a._v(" "),s("blockquote",[s("p",[a._v("挫直扩容（纵向扩展）：提供系统部件能力\n水平扩容（横向扩展）：增加更多系统成员来实现")])]),a._v(" "),s("blockquote",[s("p",[a._v("扩容-数据库")]),a._v(" "),s("blockquote",[s("p",[a._v("读操作扩展：memcache，redis，CDN等缓存\n写操作扩展：Cassandra，Hbase等")])])]),a._v(" "),s("h1",{attrs:{id:"高并发之缓存思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之缓存思路"}},[a._v("#")]),a._v(" 高并发之缓存思路")]),a._v(" "),s("h2",{attrs:{id:"_1-缓存-特征-场景及组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存-特征-场景及组件"}},[a._v("#")]),a._v(" 1.缓存-特征，场景及组件")]),a._v(" "),s("h2",{attrs:{id:"_2-缓存-redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存-redis"}},[a._v("#")]),a._v(" 2.缓存-Redis")]),a._v(" "),s("h2",{attrs:{id:"_3-高并发场景下缓存常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-高并发场景下缓存常见问题"}},[a._v("#")]),a._v(" 3.高并发场景下缓存常见问题")]),a._v(" "),s("h3",{attrs:{id:"缓存-特征-场景及组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存-特征-场景及组件"}},[a._v("#")]),a._v(" 缓存-特征，场景及组件")]),a._v(" "),s("blockquote",[s("p",[a._v("图片中的1，2，3，4都可以缓存\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102182326124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("blockquote",[s("p",[a._v("命中率：命中数/（命中数+没有命中数）\n最大元素（空间）\n清空策略：FIFO，LFU，LRU，过期时间，随机等")])]),a._v(" "),s("blockquote",[s("p",[a._v("缓存命中率影响因素")]),a._v(" "),s("blockquote",[s("p",[a._v("业务场景和业务需求\n缓存的设计（粒度和策略）\n缓存容量和基础设施")])])]),a._v(" "),s("blockquote",[s("p",[a._v("缓存分类和应用场景")]),a._v(" "),s("blockquote",[s("p",[a._v("本地缓存：编码实现（成员变量，局部变量，静态变量），Guava Cache\n分布式缓存：Memcache，Redis")])])]),a._v(" "),s("h3",{attrs:{id:"高并发场景下缓存常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发场景下缓存常见问题"}},[a._v("#")]),a._v(" 高并发场景下缓存常见问题")]),a._v(" "),s("blockquote",[s("p",[a._v("缓存一致性\n缓存并发问题\n缓存穿透问题\n缓存的雪崩现象")])]),a._v(" "),s("blockquote",[s("p",[a._v("缓存一致性\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020110218330043.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("blockquote",[s("p",[a._v("缓存并发问题\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102183330842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("blockquote",[s("p",[a._v("缓存穿透问题\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102183356510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("blockquote",[s("p",[a._v("缓存雪崩现象\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102183438540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("h1",{attrs:{id:"高并发之消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之消息队列"}},[a._v("#")]),a._v(" 高并发之消息队列")]),a._v(" "),s("h2",{attrs:{id:"_1-消息队列特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-消息队列特性"}},[a._v("#")]),a._v(" 1.消息队列特性")]),a._v(" "),s("h2",{attrs:{id:"_2-为什么需要消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么需要消息队列"}},[a._v("#")]),a._v(" 2.为什么需要消息队列")]),a._v(" "),s("h2",{attrs:{id:"_3-消息队列技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-消息队列技术"}},[a._v("#")]),a._v(" 3.消息队列技术")]),a._v(" "),s("blockquote",[s("p",[a._v("消息队列特性")]),a._v(" "),s("blockquote",[s("p",[a._v("业务无关：只做消息分发\nFIFO：先投递先到达\n容灾：节点的动态增删和消息的持久化\n性能：吞吐量提升，系统内部通信效率提高")])])]),a._v(" "),s("blockquote",[s("p",[a._v("为什么需要消息队列")]),a._v(" "),s("blockquote",[s("p",[a._v("生产和消费的速度或稳定性等因素不一致")])])]),a._v(" "),s("blockquote",[s("p",[a._v("消息队列好处")]),a._v(" "),s("blockquote",[s("p",[a._v("业务结偶\n最终一致性\n广播\n错峰与流控")])])]),a._v(" "),s("blockquote",[s("p",[a._v("消息队列技术")]),a._v(" "),s("blockquote",[s("p",[a._v("kafka，RabbitMQ")])])]),a._v(" "),s("h1",{attrs:{id:"高并发之应用拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之应用拆分"}},[a._v("#")]),a._v(" 高并发之应用拆分")]),a._v(" "),s("h2",{attrs:{id:"_1-拆分原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-拆分原则"}},[a._v("#")]),a._v(" 1.拆分原则")]),a._v(" "),s("h2",{attrs:{id:"_2-拆分思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-拆分思考"}},[a._v("#")]),a._v(" 2.拆分思考")]),a._v(" "),s("h3",{attrs:{id:"拆分原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拆分原则"}},[a._v("#")]),a._v(" 拆分原则")]),a._v(" "),s("blockquote",[s("p",[a._v("业务优先\n循序渐进\n兼顾技术：重构，分层\n可靠测试")])]),a._v(" "),s("h3",{attrs:{id:"拆分思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拆分思考"}},[a._v("#")]),a._v(" 拆分思考")]),a._v(" "),s("blockquote",[s("p",[a._v("应用之间通信：RPC（dubbo等），消息队列等\n应用之间数据库设计：每个应用都有独立的数据库\n避免事务操作跨应用")])]),a._v(" "),s("h1",{attrs:{id:"高并发之应用限流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之应用限流"}},[a._v("#")]),a._v(" 高并发之应用限流")]),a._v(" "),s("h2",{attrs:{id:"_1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[a._v("#")]),a._v(" 1.概念")]),a._v(" "),s("h2",{attrs:{id:"_2-限流算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-限流算法"}},[a._v("#")]),a._v(" 2.限流算法")]),a._v(" "),s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102185130990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),a._v(" "),s("h3",{attrs:{id:"限流算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#限流算法"}},[a._v("#")]),a._v(" 限流算法")]),a._v(" "),s("blockquote",[s("p",[a._v("限流算法")]),a._v(" "),s("blockquote",[s("p",[a._v("计数算法\n滑动窗口\n漏桶算法\n令牌桶算法")])])]),a._v(" "),s("blockquote",[s("p",[a._v("计数算法"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102185434583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v("\n滑动窗口\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102185508653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v("\n漏桶算法\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102185532854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),a._v("\n令牌桶算法\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201102185554385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),a._v(" "),s("h1",{attrs:{id:"高并发之服务降级与服务熔断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之服务降级与服务熔断"}},[a._v("#")]),a._v(" 高并发之服务降级与服务熔断")]),a._v(" "),s("blockquote",[s("p",[a._v("服务降级分类")]),a._v(" "),s("blockquote",[s("p",[a._v("自动降级：超时，失败次数，故障，限流\n人工降级：秒杀，双11大促等")])])]),a._v(" "),s("blockquote",[s("p",[a._v("服务降级与服务熔断")]),a._v(" "),s("blockquote",[s("p",[a._v("共性：目的，最终表现，粒度，自治\n区别：触发原因，管理目标层次，实现方式")])])]),a._v(" "),s("blockquote",[s("p",[a._v("服务降级要考虑的问题")]),a._v(" "),s("blockquote",[s("p",[a._v("核心服务，非核心服务\n是否支持降级，降级策略\n业务放通场景，策略")])])]),a._v(" "),s("blockquote",[s("p",[a._v("技术实现")]),a._v(" "),s("blockquote",[s("p",[a._v("Hystrix")])])]),a._v(" "),s("h1",{attrs:{id:"高并发之数据库切库分库分表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之数据库切库分库分表"}},[a._v("#")]),a._v(" 高并发之数据库切库分库分表")]),a._v(" "),s("blockquote",[s("p",[a._v("数据库瓶颈")]),a._v(" "),s("blockquote",[s("p",[a._v("单个库数据量太大（1T-2T）：多个库\n单个数据库服务器压力过大，读写瓶颈：多个库\n单个表数据量过大：分表")])])]),a._v(" "),s("blockquote",[s("p",[a._v("数据库切库，分库分表：切库、分表、多数据源")])]),a._v(" "),s("h1",{attrs:{id:"高并发之高可用手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发之高可用手段"}},[a._v("#")]),a._v(" 高并发之高可用手段")]),a._v(" "),s("blockquote",[s("p",[a._v("高可用的一些手段")]),a._v(" "),s("blockquote",[s("p",[a._v("任务调度分布式elastic-job + zookeeper\n主备切换：Apache curator+zookeeper 分布式锁实现\n监控报警机制")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);