(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{646:function(n,s,a){"use strict";a.r(s);var t=a(5),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[n._v("#")]),n._v(" 简介")]),n._v(" "),s("p",[s("strong",[n._v("说明")])]),n._v(" "),s("p",[n._v("本文用示例介绍Java的单例模式的写法。有如下六种写法：懒汉式，饿汉式，静态内部类，双重校验锁，枚举，非synchronized的加锁。")]),n._v(" "),s("p",[n._v("本文所述的单例模式都是线程安全的。线程不安全的单例模式，不是合格的单例模式。")]),n._v(" "),s("p",[n._v("在下边的单例模式中，我比较喜欢"),s("strong",[n._v("静态内部类")]),n._v("。如果涉及到反序列化创建对象我会使用枚举的方式。我永远不会使用饿汉式，如果有其他特殊的需求，我可能会使用双重校验锁。")]),n._v(" "),s("h1",{attrs:{id:"第一种-懒汉"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一种-懒汉"}},[n._v("#")]),n._v(" "),s("strong",[n._v("第一种 懒汉")])]),n._v(" "),s("p",[s("strong",[n._v("简介")])]),n._v(" "),s("p",[n._v("懒汉模式就是，它很懒，直到用到的时候才会去创建对象，而不是一开始就创建对象。")]),n._v(" "),s("p",[s("strong",[n._v("特点")])]),n._v(" "),s("ol",[s("li",[n._v("支持多线程")]),n._v(" "),s("li",[n._v("支持懒加载")]),n._v(" "),s("li",[n._v("性能很低\n"),s("ol",[s("li",[n._v("因为是加锁同步。")])])])]),n._v(" "),s("p",[s("strong",[n._v("实例")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Singleton")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("private")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("static")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Singleton")]),n._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("private")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("static")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("synchronized")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Singleton")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("==")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("h1",{attrs:{id:"第二种-饿汉"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二种-饿汉"}},[n._v("#")]),n._v(" "),s("strong",[n._v("第二种 饿汉")])]),n._v(" "),s("p",[s("strong",[n._v("简介")])]),n._v(" "),s("p",[n._v("饿汉模式就是，它很饿，想快点创建对象，此模式在类加载时就立即创建对象。")]),n._v(" "),s("p",[s("strong",[n._v("特点")])]),n._v(" "),s("ul",[s("li",[n._v("支持多线程\n"),s("ul",[s("li",[n._v("这种方式基于classloder机制保证初始化instance时只有一个线程。")])])]),n._v(" "),s("li",[n._v("不完全支持懒加载\n"),s("ul",[s("li",[n._v("instance在类装载时就实例化，大多数都是调用getInstance方法。但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance显然没有达到lazy loading的效果。")])])]),n._v(" "),s("li",[n._v("性能很高（因为使用时不需要加锁同步）。")])]),n._v(" "),s("p",[s("strong",[n._v("法1")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        return instance;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[s("strong",[n._v("法2")])]),n._v(" "),s("p",[n._v("​    表面上看起来差别挺大，其实跟法1差不多，都是在类初始化即实例化instance。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Singleton {\n    private static Singleton instance = null;\n    static {\n        instance = new Singleton();\n    }\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        return instance;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("h1",{attrs:{id:"第三种-静态内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三种-静态内部类"}},[n._v("#")]),n._v(" "),s("strong",[n._v("第三种 静态内部类")])]),n._v(" "),s("p",[s("strong",[n._v("简介")])]),n._v(" "),s("p",[n._v("静态内部类的单例写法是：在类内部有一个静态内部类，它持有外部类的实例。")]),n._v(" "),s("p",[s("strong",[n._v("特点")])]),n._v(" "),s("ul",[s("li",[n._v("支持多线程\n"),s("ul",[s("li",[n._v("同样基于classloder机制保证初始化instance时只有一个线程。")])])]),n._v(" "),s("li",[n._v("支持懒加载\n"),s("ul",[s("li",[n._v("Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显式装载SingletonHolder类，从而实例化instance。")]),n._v(" "),s("li",[n._v("它跟懒汉式不同的是（很细微的差别）：懒汉式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果）。")]),n._v(" "),s("li",[n._v("一方面：如果实例化instance很耗资源，我想让他延迟加载；另一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在其他的地方被主动使用从而被加载，那么这时实例化instance是不合适的。这时，这种方式相比第二种方式（饿汉）就更合理。")])])]),n._v(" "),s("li",[n._v("性能很高\n"),s("ul",[s("li",[n._v("因为使用时不需要加锁同步。")])])])]),n._v(" "),s("p",[s("strong",[n._v("实例")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Singleton {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("h1",{attrs:{id:"第四种-双重校验锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四种-双重校验锁"}},[n._v("#")]),n._v(" "),s("strong",[n._v("第四种 双重校验锁")])]),n._v(" "),s("h2",{attrs:{id:"简介-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介-2"}},[n._v("#")]),n._v(" "),s("strong",[n._v("简介")])]),n._v(" "),s("p",[s("strong",[n._v("说明")])]),n._v(" "),s("p",[n._v("此模式用了两次if判断。")]),n._v(" "),s("p",[s("strong",[n._v("特点")])]),n._v(" "),s("ul",[s("li",[n._v("是懒汉模式的升级版。")]),n._v(" "),s("li",[n._v("在JDK1.5之后，双重检查锁定才能够正常达到单例效果。\n"),s("ul",[s("li",[n._v("原因： Java 5 以前的 JMM （Java 内存模型）存在缺陷，即使将变量声明成 volatile 也不能完全避免重排序。")])])])]),n._v(" "),s("p",[s("strong",[n._v("实例")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Singleton {\n    private static volatile Singleton singleton;\n    private Singleton() {\n    }\n    public static Singleton getSingleton() {\n        if (singleton == null) {\n            synchronized (Singleton.class) {\n                if (singleton == null) {\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h2",{attrs:{id:"为什么加volatile关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么加volatile关键字"}},[n._v("#")]),n._v(" "),s("strong",[n._v("为什么加volatile关键字？")])]),n._v(" "),s("p",[n._v("volatile作用：保证有序性、可见性。")]),n._v(" "),s("p",[s("strong",[n._v("有序性")])]),n._v(" "),s("p",[n._v("Singleton singleton = new Singleton() 这句话可以分为三步：")]),n._v(" "),s("ol",[s("li",[n._v("为 Singleton 分配内存空间（加载、链接）；")]),n._v(" "),s("li",[n._v("初始化 singleton；")]),n._v(" "),s("li",[n._v("将 singleton 指向分配的内存空间。")])]),n._v(" "),s("p",[n._v("但是由于JVM具有指令重排的特性，执行顺序有可能变成 1-3-2。  指令重排在单线程下不会出现问题，但是在多线程下会导致一个线程获得一个未初始化的实例。例如：线程T1执行了1和3，此时T2调用  getInstance() 后发现 singleton 不为空，因此返回 singleton， 但是此时的 singleton  还没有被初始化。所以，使用 volatile 会禁止JVM指令重排，从而保证在多线程下也能正常执行。")]),n._v(" "),s("p",[s("strong",[n._v("可见性")])]),n._v(" "),s("p",[n._v("把变量声明为 volatile，就指示 JVM，修改的值立即被更新到主存。")]),n._v(" "),s("p",[n._v("普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。")]),n._v(" "),s("h2",{attrs:{id:"为什么有两次校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么有两次校验"}},[n._v("#")]),n._v(" "),s("strong",[n._v("为什么有两次校验？")])]),n._v(" "),s("p",[s("strong",[n._v("第一次校验：也就是第一个if（singleton == null）")])]),n._v(" "),s("p",[n._v("这个是为了代码提高代码执行效率。由于单例模式只要一次创建实例即可，所以当创建了一个实例之后，再次调用getInstance方法就不必要进入同步代码块，不用竞争锁。直接返回前面创建的实例即可。")]),n._v(" "),s("p",[s("strong",[n._v("第二次校验：也就是第二个if（singleton == null）")])]),n._v(" "),s("p",[n._v("这个校验是防止二次创建实例。假如有一种情况，当singleton还未被创建时，线程t1调用getInstance方法，由于第一次判断singleton  ==null，此时线程t1准备继续执行，但是由于资源被线程t2抢占了，此时t2页调用getInstance方法，同样的，由于singleton并没有实例化，t2同样可以通过第一个if，然后继续往下执行，同步代码块，第二个if也通过，然后t2线程创建了一个实例singleton。此时t2线程完成任务，资源又回到t1线程，t1此时也进入同步代码块，如果没有这个第二个if，那么，t1就也会创建一个singleton实例，那么，就会出现创建多个实例的情况，但是加上第二个if，就可以完全避免这个多线程导致多次创建实例的问题。")]),n._v(" "),s("p",[n._v("所以说：两次校验都必不可少。")]),n._v(" "),s("h1",{attrs:{id:"第五种-枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五种-枚举"}},[n._v("#")]),n._v(" "),s("strong",[n._v("第五种 枚举")])]),n._v(" "),s("p",[s("strong",[n._v("简介")])]),n._v(" "),s("p",[s("strong",[n._v("Effective Java作者Josh Bloch 提倡的方式。")])]),n._v(" "),s("ul",[s("li",[n._v("支持多线程\n"),s("ul",[s("li",[n._v("可保证只有一个实例。这与枚举类的实现有关。")])])]),n._v(" "),s("li",[n._v("支持防止反序列化和防止反射破坏单例。见："),s("a",{attrs:{href:"https://learn.skyofit.com/archives/279",target:"_blank",rel:"noopener noreferrer"}},[n._v("Java单例模式–枚举类防止破坏单例 – 自学精灵"),s("OutboundLink")],1)])]),n._v(" "),s("p",[n._v("关于破坏单例，见："),s("a",{attrs:{href:"https://learn.skyofit.com/archives/281",target:"_blank",rel:"noopener noreferrer"}},[n._v("Java单例模式–破坏单例的方法 – 自学精灵"),s("OutboundLink")],1)]),n._v(" "),s("p",[s("strong",[n._v("实例")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public enum Singleton {\n    INSTANCE;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[s("strong",[n._v("简单示例")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package org.example.a;\nenum MyEnum{\n    FIRST("第一个"),\n    SECOND("第二个");\n    private String desc;\n    private MyEnum(String desc) {\n        this.desc = desc;\n    }\n    public String getDesc() {\n        return desc;\n    }\n    private String lastName;\n    public String getLastName() {\n        return lastName;\n    }\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\npublic class Demo {\n    public static void main(String[] args) {\n        MyEnum.FIRST.setLastName("Tony");\n        System.out.println(MyEnum.FIRST.getLastName());\n        System.out.println(MyEnum.FIRST.getDesc());\n        MyEnum myEnum = MyEnum.FIRST;\n        MyEnum myEnum1 = MyEnum.FIRST;\n        System.out.println(myEnum == myEnum1);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br")])]),s("p",[n._v("执行结果")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Tony\n第一个\ntrue\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("h1",{attrs:{id:"第六种-非synchronized-不常用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第六种-非synchronized-不常用"}},[n._v("#")]),n._v(" 第六种 非synchronized (不常用)")]),n._v(" "),s("h2",{attrs:{id:"cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[n._v("#")]),n._v(" CAS")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package org.example.a;\nimport java.util.concurrent.atomic.AtomicReference;\npublic class Singleton {\n    private static final AtomicReference<Singleton> INSTANCE =\n            new AtomicReference<Singleton>();\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        for (; ; ) {\n            Singleton singleton = INSTANCE.get();\n            if (null != singleton) {\n                return singleton;\n            }\n            singleton = new Singleton();\n            if (INSTANCE.compareAndSet(null, singleton)) {\n                return singleton;\n            }\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("h2",{attrs:{id:"threadlocal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[n._v("#")]),n._v(" ThreadLocal")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package org.example.a;\npublic class Singleton {\n    private static final ThreadLocal<Singleton> singleton =\n            new ThreadLocal<Singleton>() {\n                @Override\n                protected Singleton initialValue() {\n                    return new Singleton();\n                }\n            };\n    public static Singleton getInstance() {\n        return singleton.get();\n    }\n    private Singleton() {\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);