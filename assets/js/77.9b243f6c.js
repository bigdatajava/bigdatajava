(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{425:function(s,a,n){"use strict";n.r(a);var e=n(1),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("strong",[s._v("回顾：")])]),s._v(" "),a("p",[a("strong",[s._v("1、通过term 和 match查询数据时细节点以及数据类型keyword与text区别")])]),s._v(" "),a("p",[a("strong",[s._v("1.1 term查询")])]),s._v(" "),a("p",[s._v("1.1.1 term查询keyword字段。")]),s._v(" "),a("p",[s._v("term不会分词。而keyword字段也不分词。需要完全匹配才可。")]),s._v(" "),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("hello world  ===  hello       world")]),s._v(" "),a("p",[s._v("hello world")]),s._v(" "),a("p",[s._v("1.1.2 term查询text字段。")]),s._v(" "),a("p",[s._v("因为text字段会分词，而term不分词，所以term查询的条件必须是text字段分词后的某一个。")]),s._v(" "),a("p",[a("strong",[s._v("1.2.match查询")])]),s._v(" "),a("p",[s._v("1.2.1 match查询keyword字段")]),s._v(" "),a("p",[s._v("match会被分词，而keyword不会被分词，match的需要跟keyword的完全匹配可以。")]),s._v(" "),a("p",[s._v("1.2.2 match查询text字段")]),s._v(" "),a("p",[s._v("match分词，text也分词，只要match的分词结果和text的分词结果有相同的就匹配。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /es_db_test\n{\n"mappings":{\n"properties":{\n"name":{"type":"keyword","index":true,"store":true},\n"sex":{"type":"integer","index":true,"store":true},\n"age":{"type":"integer","index":true,"store":true},\n"book":{"type":"text","index":true,"store":true},\n"address":{"type":"keyword","index":true,"store":true}\n}\n}\n}\n\n\nPUT /es_db_test/_doc/1\n{\n"name": "Jack",\n"sex": 1,\n"age": 25,\n"book": "elasticSearch入门至精通",\n"address": "广州车陂"\n}\n\n\nPOST /es_db_test/_doc/_search\n{\n"query": {\n"term": {\n"address": "广州车陂"\n}\n}\n}\n\nPOST /es_db_test/_doc/_search\n{\n"query": {\n"match": {\n"address": "广州车陂"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("p",[s._v("**2、**"),a("strong",[s._v("乐观锁并发控制 if_seq_no 和 if_primary_term意义")])]),s._v(" "),a("p",[a("strong",[s._v("if_seq_no 和 if_primary_term 是用来并发控制，他们和version不同，version属于当个文档，而seq_no属于整个index。")])]),s._v(" "),a("p",[s._v("_primary_term表示文档所在主分片的编号")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db_tem/_doc/1\n\nDELETE /es_db_tem/_doc/1\n\n\nPUT /es_db_tem/_doc/1\n{\n  "name": "Jack",\n  "sex": 1,\n  "age": 25,\n  "book": "elasticSearch入门至精通",\n  "address": "广州车陂"\n}\nPUT /es_db_tem/_doc/2\n{\n  "name": "Jack",\n  "sex": 1,\n  "age": 25,\n  "book": "elasticSearch入门至精通",\n  "address": "广州车陂"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[a("strong",[s._v("_primary_term：_primary_term也和_seq_no一样都是整数，每当Primary Shard发生重新分配时，比如重启，Primary选举等，_primary_term会递增1。")])]),s._v(" "),a("p",[s._v("_primary_term主要是用来恢复数据时处理当多个文档的_seq_no一样时的冲突，比如当一个shard宕机了，raplica需要用到最新的数据，就会根据_primary_term和_seq_no这两个值来拿到最新的document")]),s._v(" "),a("p",[a("strong",[s._v("3、对已存在的mapping映射进行修改")])]),s._v(" "),a("p",[s._v("具体方法")]),s._v(" "),a("p",[s._v("1）如果要推倒现有的映射, 你得重新建立一个静态索引")]),s._v(" "),a("p",[s._v("2）然后把之前索引里的数据导入到新的索引里")]),s._v(" "),a("p",[s._v("3）删除原创建的索引")]),s._v(" "),a("p",[s._v("4）为新索引起个别名, 为原索引名")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("DELETE /myes_db       \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("PUT /myes_db     \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /myes_db/_doc/1\n{\n"name": "Jack",\n"sex": 1,\n"age": 25,\n"book": "java入门至精通",\n"address": "广州小蛮腰"\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("GET /myes_db/_mapping           \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /myes_db2\n{\n"mappings":{\n"properties":{\n"name":{"type":"keyword","index":true,"store":true},\n"sex":{"type":"integer","index":true,"store":true},\n"age":{"type":"integer","index":true,"store":true},\n"book":{"type":"text","index":true,"store":true},\n"address":{"type":"text","index":true,"store":true}\n}\n}\n}\t\t\t\t\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('POST _reindex\n{\n"source": {\n"index": "myes_db"\n},\n"dest": {\n"index": "myes_db2"\n}\n}\n\nDELETE /myes_db\n\nPUT /myes_db2/_alias/myes_db\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"一-elasticsearch架构原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-elasticsearch架构原理"}},[s._v("#")]),s._v(" 一.Elasticsearch架构原理")]),s._v(" "),a("h3",{attrs:{id:"_1、elasticsearch的节点类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、elasticsearch的节点类型"}},[s._v("#")]),s._v(" 1、Elasticsearch的节点类型")]),s._v(" "),a("p",[s._v("在Elasticsearch主要分成两类节点，一类是Master，一类是DataNode。")]),s._v(" "),a("p",[a("strong",[s._v("1.1  Master节点")])]),s._v(" "),a("p",[s._v("在Elasticsearch启动时，会选举出来一个Master节点。当某个节点启动后，然后使用Zen Discovery机制找到集群中的其他节点，并建立连接。")]),s._v(" "),a("p",[s._v('discovery.seed_hosts: ["192.168.21.130", "192.168.21.131", "192.168.21.132"]')]),s._v(" "),a("p",[s._v("并从候选主节点中选举出一个主节点。")]),s._v(" "),a("p",[s._v('cluster.initial_master_nodes: ["node1", "node2","node3"]')]),s._v(" "),a("p",[s._v("Master节点主要负责：")]),s._v(" "),a("p",[s._v("管理索引（创建索引、删除索引）、分配分片")]),s._v(" "),a("p",[s._v("维护元数据")]),s._v(" "),a("p",[s._v("管理集群节点状态")]),s._v(" "),a("p",[s._v("不负责数据写入和查询，比较轻量级")]),s._v(" "),a("p",[s._v("一个Elasticsearch集群中，只有一个Master节点。在生产环境中，内存可以相对小一点，但机器要稳定。")]),s._v(" "),a("p",[a("strong",[s._v("1.2  DataNode节点")])]),s._v(" "),a("p",[s._v("在Elasticsearch集群中，会有N个DataNode节点。DataNode节点主要负责：")]),s._v(" "),a("p",[s._v("数据写入、数据检索，大部分Elasticsearch的压力都在DataNode节点上")]),s._v(" "),a("p",[s._v("在生产环境中，内存最好配置大一些")]),s._v(" "),a("p",[a("strong",[s._v("二 、分片和副本机制")])]),s._v(" "),a("p",[a("strong",[s._v("2.1  分片（Shard）")])]),s._v(" "),a("p",[a("strong",[s._v("Elasticsearch是一个分布式的搜索引擎，索引的数据也是分成若干部分，分布在不同的服务器节点中")])]),s._v(" "),a("p",[s._v("分布在不同服务器节点中的索引数据，就是分片（Shard）。Elasticsearch会自动管理分片，如果发现分片分布不均衡，就会自动迁移")]),s._v(" "),a("p",[s._v("一个索引（index）由多个shard（分片）组成，而分片是分布在不同的服务器上的")]),s._v(" "),a("p",[a("strong",[s._v("2.2  副本")])]),s._v(" "),a("p",[s._v("为了对Elasticsearch的分片进行容错，假设某个节点不可用，会导致整个索引库都将不可用。所以，需要对分片进行副本容错。每一个分片都会有对应的副本。")]),s._v(" "),a("p",[s._v("在Elasticsearch中，默认创建的索引为1个分片、每个分片有1个主分片和1个副本分片。")]),s._v(" "),a("p",[s._v("每个分片都会有一个Primary Shard（主分片），也会有若干个Replica Shard（副本分片）")]),s._v(" "),a("p",[s._v("Primary Shard和Replica Shard不在同一个节点上")]),s._v(" "),a("p",[a("strong",[s._v("2.3  指定分片、副本数量")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 创建指定分片数量、副本数量的索引\nPUT /job_idx_shard_temp\n{\n"mappings":{\n"properties":{\n"id":{"type":"long","store":true},\n"area":{"type":"keyword","store":true},\n"exp":{"type":"keyword","store":true},\n"edu":{"type":"keyword","store":true},\n"salary":{"type":"keyword","store":true},\n"job_type":{"type":"keyword","store":true},\n"cmp":{"type":"keyword","store":true},\n"pv":{"type":"keyword","store":true},\n"title":{"type":"text","store":true},\n"jd":{"type":"text"}\n\n}\n},\n"settings":{\n"number_of_shards":3,\n"number_of_replicas":2\n}\n}\n\n// 查看分片、主分片、副本分片\nGET /_cat/indices?v\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("h2",{attrs:{id:"三-elasticsearch重要工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-elasticsearch重要工作流程"}},[s._v("#")]),s._v(" 三.Elasticsearch重要工作流程")]),s._v(" "),a("h3",{attrs:{id:"_3-1-elasticsearch文档写入原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-elasticsearch文档写入原理"}},[s._v("#")]),s._v(" 3.1  Elasticsearch文档写入原理")]),s._v(" "),a("p",[s._v("​    "),a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/es/31.jpg",alt:""}})]),s._v(" "),a("p",[s._v("1.选择任意一个DataNode发送请求，例如：node2。此时，node2就成为一个coordinating node（协调节点）")]),s._v(" "),a("p",[s._v("2.计算得到文档要写入的分片")]),s._v(" "),a("p",[a("code",[s._v("shard = hash(routing) % number_of_primary_shards")])]),s._v(" "),a("p",[s._v("routing 是一个可变值，默认是文档的 _id")]),s._v(" "),a("p",[s._v("3.coordinating node会进行路由，将请求转发给对应的primary shard所在的DataNode（假设primary shard在node1、replica shard在node2）")]),s._v(" "),a("p",[s._v("4.node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到Replica shard")]),s._v(" "),a("p",[s._v("5.Primary Shard和Replica Shard都保存好了文档，返回client")]),s._v(" "),a("h3",{attrs:{id:"_3-2-elasticsearch检索原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-elasticsearch检索原理"}},[s._v("#")]),s._v(" 3.2  Elasticsearch检索原理")]),s._v(" "),a("p",[s._v("​    "),a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/es/32.jpg",alt:""}})]),s._v(" "),a("p",[s._v("client发起查询请求，某个DataNode接收到请求，该DataNode就会成为协调节点（Coordinating Node）")]),s._v(" "),a("p",[s._v("协调节点（Coordinating Node）将查询请求广播到每一个数据节点，这些数据节点的分片会处理该查询请求")]),s._v(" "),a("p",[s._v("每个分片进行数据查询，将符合条件的数据放在一个优先队列中，并将这些数据的文档ID、节点信息、分片信息返回给协调节点")]),s._v(" "),a("p",[s._v("协调节点将所有的结果进行汇总，并进行全局排序")]),s._v(" "),a("p",[s._v("协调节点向包含这些文档ID的分片发送get请求，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端")]),s._v(" "),a("h2",{attrs:{id:"四-elasticsearch准实时索引实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-elasticsearch准实时索引实现"}},[s._v("#")]),s._v(" 四.Elasticsearch准实时索引实现")]),s._v(" "),a("p",[a("strong",[s._v("4.1  溢写到文件系统缓存")])]),s._v(" "),a("p",[s._v("当数据写入到ES分片时，会首先写入到内存中，然后通过内存的buffer生成一个segment，并刷到"),a("strong",[s._v("文件系统缓存")]),s._v("中，数据可以被检索（注意不是直接刷到磁盘）")]),s._v(" "),a("p",[s._v("ES中默认1秒，refresh一次")]),s._v(" "),a("p",[a("strong",[s._v("4.2  写translog保障容错")])]),s._v(" "),a("p",[s._v("在写入到内存中的同时，也会记录translog日志，在refresh期间出现异常，会根据translog来进行数据恢复")]),s._v(" "),a("p",[s._v("等到文件系统缓存中的segment数据都刷到磁盘中，清空translog文件")]),s._v(" "),a("p",[a("strong",[s._v("4.3  flush到磁盘")])]),s._v(" "),a("p",[s._v("ES默认每隔30分钟会将文件系统缓存的数据刷入到磁盘")]),s._v(" "),a("p",[a("strong",[s._v("4.4  segment合并")])]),s._v(" "),a("p",[s._v("Segment太多时，ES定期会将多个segment合并成为大的segment，减少索引查询时IO开销，此阶段ES会真正的物理删除（之前执行过的delete的数据）")]),s._v(" "),a("p",[s._v("​    "),a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/es/33.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("五.手工控制搜索结果精准度")])]),s._v(" "),a("p",[s._v("5.1、下述搜索中，如果document中的remark字段包含java或developer词组，都符合搜索条件。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"match": {\n"remark": "java developer"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("如果需要搜索的document中的remark字段，包含java和developer词组，则需要使用下述语法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"match": {\n"remark": {\n"query": "java developer",\n"operator": "and"\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("上述语法中，如果将operator的值改为or。则与第一个案例搜索语法效果一致。默认的ES执行搜索的时候，operator就是or。")]),s._v(" "),a("p",[s._v("如果在搜索的结果document中，需要remark字段中包含多个搜索词条中的一定比例，可以使用下述语法实现搜索。其中minimum_should_match可以使用百分比或固定数字。百分比代表query搜索条件中词条百分比，如果无法整除，向下匹配（如，query条件有3个单词，如果使用百分比提供精准度计算，那么是无法除尽的，如果需要至少匹配两个单词，则需要用67%来进行描述。如果使用66%描述，ES则认为匹配一个单词即可。）。固定数字代表query搜索条件中的词条，至少需要匹配多少个。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"match": {\n"remark": {\n"query": "java architect assistant",\n"minimum_should_match": "68%"\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("如果使用should+bool搜索的话，也可以控制搜索条件的匹配度。具体如下：下述案例代表搜索的document中的remark字段中，必须匹配java、developer、assistant三个词条中的至少2个。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"bool": {\n"should": [\n{ \n"match": {\n"remark": "java"\n} \n},\n{\n"match": {\n"remark": "developer"\n}\n},\n{\n"match": {\n"remark": "assistant"\n}\n}\n],\n"minimum_should_match": 2\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[a("strong",[s._v("5.2、match 的底层转换")])]),s._v(" "),a("p",[s._v("其实在ES中，执行match搜索的时候，ES底层通常都会对搜索条件进行底层转换，来实现最终的搜索结果。如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"match": {\n"remark": "java developer"\n}\n}\n}\n\n转换后是：\nGET /es_db/_search\n{\n"query": {\n"bool": {\n"should": [\n{\n"term": {\n"remark": "java"\n}\n},\n{\n"term": {\n"remark": {\n"value": "developer"\n}\n}\n}\n]\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"match": {\n"remark": {\n"query": "java developer",\n"operator": "and"\n}\n}\n}\n}\n\n转换后是：\nGET /es_db/_search\n{\n"query": {\n"bool": {\n"must": [\n{\n"term": {\n"remark": "java"\n}\n},\n{\n"term": {\n"remark": {\n"value": "developer"\n}\n}\n}\n]\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"match": {\n"remark": {\n"query": "java architect assistant",\n"minimum_should_match": "68%"\n}\n}\n}\n}\n\n转换后为：\nGET /es_db/_search\n{\n"query": {\n"bool": {\n"should": [\n{\n"term": {\n"remark": "java"\n}\n},\n{\n"term": {\n"remark": "architect"\n}\n},\n{\n"term": {\n"remark": "assistant"\n}\n}\n],\n"minimum_should_match": 2\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("建议，如果不怕麻烦，尽量使用转换后的语法执行搜索，效率更高。")]),s._v(" "),a("p",[s._v("如果开发周期短，工作量大，使用简化的写法。")]),s._v(" "),a("p",[a("strong",[s._v("5.3、boost权重控制")])]),s._v(" "),a("p",[s._v("搜索document中remark字段中包含java的数据，如果remark中包含developer或architect，则包含architect的document优先显示。（就是将architect数据匹配时的相关度分数增加）。")]),s._v(" "),a("p",[s._v("一般用于搜索时相关度排序使用。如：电商中的综合排序。将一个商品的销量，广告投放，评价值，库存，单价比较综合排序。在上述的排序元素中，广告投放权重最高，库存权重最低。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"bool": {\n"must": [\n{\n"match": {\n"remark": "java"\n}\n}\n],\n"should": [\n{\n"match": {\n"remark": {\n"query": "developer",\n"boost" : 1\n}\n}\n},\n{\n"match": {\n"remark": {\n"query": "architect",\n"boost" : 3\n}\n}\n}\n]\n}\n}\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("p",[a("strong",[s._v("5.4、基于dis_max实现best fields策略进行多字段搜索")])]),s._v(" "),a("p",[s._v("best fields策略： 搜索的document中的某一个field，尽可能多的匹配搜索条件。与之相反的是，尽可能多的字段匹配到搜索条件（most fields策略）。如百度搜索使用这种策略。")]),s._v(" "),a("p",[a("strong",[s._v("优点：精确匹配的数据可以尽可能的排列在最前端，且可以通过minimum_should_match来去除长尾数据，避免长尾数据字段对排序结果的影响。")])]),s._v(" "),a("p",[s._v("​              长尾数据比如说我们搜索4个关键词，但很多文档只匹配1个，也显示出来了，这些文档其实不是我们想要的")]),s._v(" "),a("p",[a("strong",[s._v("缺点：相对排序不均匀。")])]),s._v(" "),a("p",[a("strong",[s._v("dis_max语法： 直接获取搜索的多条件中的，单条件query相关度分数最高的数据，以这个数据做相关度排序。")])]),s._v(" "),a("p",[s._v("下述的案例中，就是找name字段中rod匹配相关度分数或remark字段中java developer匹配相关度分数，哪个高，就使用哪一个相关度分数进行结果排序。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"dis_max": {\n"queries": [\n{\n"match": {\n"name": "rod"\n}\n},\n{\n"match": {\n"remark": "java developer"\n}\n}\n]\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[a("strong",[s._v("5.5、基于tie_breaker参数优化dis_max搜索效果")])]),s._v(" "),a("p",[s._v("dis_max是将多个搜索query条件中相关度分数最高的用于结果排序，忽略其他query分数，在某些情况下，可能还需要其他query条件中的相关度介入最终的结果排序，这个时候可以使用tie_breaker参数来优化dis_max搜索。tie_breaker参数代表的含义是：将其他query搜索条件的相关度分数乘以参数值，再参与到结果排序中。如果不定义此参数，相当于参数值为0。所以其他query条件的相关度分数被忽略。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"dis_max": {\n"queries": [\n{\n"match": {\n"name": "rod"\n}\n},\n{\n"match": {\n"remark": "java developer"\n}\n}\n],\n"tie_breaker":0.5\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[a("strong",[s._v("5.6、使用multi_match简化dis_max+tie_breaker")])]),s._v(" "),a("p",[s._v("ES中相同结果的搜索也可以使用不同的语法语句来实现。不需要特别关注，只要能够实现搜索，就是完成任务！")]),s._v(" "),a("p",[s._v("如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"dis_max": {\n"queries": [\n{\n"match": {\n"name": "rod"\n}\n},\n{\n"match": {\n"remark": {\n"query": "java developer",\n"boost" : 2,\n"minimum_should_match": 2\n}\n}\n}\n],\n"tie_breaker": 0.5\n}\n}\n}\n\n#使用multi_match语法为：其中type常用的有best_fields和most_fields。^n代表权重，相当于"boost":n。\nGET /es_db/_search\n{\n"query": {\n"multi_match": {\n"query": "rod java developer",\n"fields": ["name", "remark^2"],\n"type": "best_fields",\n"tie_breaker": 0.5,\n"minimum_should_match" : "50%"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("p",[a("strong",[s._v("5.7、cross fields搜索")])]),s._v(" "),a("p",[s._v("cross fields ： 一个唯一的标识，分部在多个fields中，使用这种唯一标识搜索数据就称为cross fields搜索。如：人名可以分为姓和名，地址可以分为省、市、区县、街道等。那么使用人名或地址来搜索document，就称为cross fields搜索。")]),s._v(" "),a("p",[s._v("实现这种搜索，一般都是使用most fields搜索策略。因为这就不是一个field的问题。")]),s._v(" "),a("p",[s._v("Cross fields搜索策略，是从多个字段中搜索条件数据。默认情况下，和most fields搜索的逻辑是一致的，计算相关度分数是和best fields策略一致的。一般来说，如果使用cross fields搜索策略，那么都会携带一个额外的参数operator。用来标记搜索条件如何在多个字段中匹配。")]),s._v(" "),a("p",[s._v("当然，在ES中也有cross fields搜索策略。具体语法如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_search\n{\n"query": {\n"multi_match": {\n"query": "java developer",\n"fields": ["name", "remark"],\n"type": "cross_fields",\n"operator" : "and"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上述语法代表的是，搜索条件中的java必须在name或remark字段中匹配，developer也必须在name或remark字段中匹配。")]),s._v(" "),a("p",[a("strong",[s._v("most field策略问题：most fields策略是尽可能匹配更多的字段，所以会导致精确搜索结果排序问题。又因为cross fields搜索，不能使用minimum_should_match来去除长尾数据。")])]),s._v(" "),a("p",[a("strong",[s._v("所以在使用most fields和cross fields策略搜索数据的时候，都有不同的缺陷。所以商业项目开发中，都推荐使用best fields策略实现搜索。")])]),s._v(" "),a("p",[a("strong",[s._v("5.8、copy_to组合fields")])]),s._v(" "),a("p",[s._v("京东中，如果在搜索框中输入“手机”，点击搜索，那么是在商品的类型名称、商品的名称、商品的卖点、商品的描述等字段中，哪一个字段内进行数据的匹配？如果使用某一个字段做搜索不合适，那么使用_all做搜索是否合适？也不合适，因为_all字段中可能包含图片，价格等字段。")]),s._v(" "),a("p",[s._v("假设，有一个字段，其中的内容包括(但不限于)：商品类型名称、商品名称、商品卖点等字段的数据内容。是否可以在这个特殊的字段上进行数据搜索匹配？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "category_name" : "手机",\n  "product_name" : "一加6T手机",\n  "price" : 568800,\n  "sell_point" : "国产最好的Android手机",\n  "tags": ["8G+128G", "256G可扩展"],\n  "color" : "红色",\n  "keyword" : "手机 一加6T手机 国产最好的Android手机"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("copy_to : 就是将多个字段，复制到一个字段中，实现一个多字段组合。copy_to可以解决cross fields搜索问题，在商业项目中，也用于解决搜索条件默认字段问题。")]),s._v(" "),a("p",[s._v("如果需要使用copy_to语法，则需要在定义index的时候，手工指定mapping映射策略。")]),s._v(" "),a("p",[s._v("copy_to语法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /es_db/_mapping\n{\n"properties": {\n"provice" : {\n"type": "text",\n"analyzer": "standard",\n"copy_to": "address"\n},\n"city" : {\n"type": "text",\n"analyzer": "standard",\n"copy_to": "address"\n},\n"street" : {\n"type": "text",\n"analyzer": "standard",\n"copy_to": "address"\n},\n"address" : {\n"type": "text",\n"analyzer": "standard"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("上述的mapping定义中，是新增了4个字段，分别是provice、city、street、address，其中provice、city、street三个字段的值，会自动复制到address字段中，实现一个字段的组合。那么在搜索地址的时候，就可以在address字段中做条件匹配，从而避免most fields策略导致的问题。在维护数据的时候，不需对address字段特殊的维护。因为address字段是一个组合字段，是由ES自动维护的。类似java代码中的推导属性。在存储的时候，未必存在，但是在逻辑上是一定存在的，因为address是由3个物理存在的属性province、city、street组成的。")]),s._v(" "),a("p",[a("strong",[s._v("5.9、近似匹配")])]),s._v(" "),a("p",[s._v("前文都是精确匹配。如doc中有数据java assistant，那么搜索jave是搜索不到数据的。因为jave单词在doc中是不存在的。")]),s._v(" "),a("p",[s._v("如果搜索的语法是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET _search\n{\n"query" : {\n"match" : {\n"name" : "jave"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("如果需要的结果是有特殊要求，如：hello world必须是一个完整的短语，不可分割；或document中的field内，包含的hello和world单词，且两个单词之间离的越近，相关度分数越高。那么这种特殊要求的搜索就是近似搜索。包括hell搜索条件在hello world数据中搜索，包括h搜索提示等都数据近似搜索的一部分。")]),s._v(" "),a("p",[s._v("如何上述特殊要求的搜索，使用match搜索语法就无法实现了。")]),s._v(" "),a("p",[a("strong",[s._v("5.10、match phrase")])]),s._v(" "),a("p",[s._v("短语搜索。就是搜索条件不分词。代表搜索条件不可分割。")]),s._v(" "),a("p",[s._v("如果hello world是一个不可分割的短语，我们可以使用前文学过的短语搜索match phrase来实现。语法如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET _search\n{\n"query": {\n"match_phrase": {\n"remark": "java assistant"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("-1)、 match phrase原理 -- term position")])]),s._v(" "),a("p",[s._v("ES是如何实现match phrase短语搜索的？其实在ES中，使用match phrase做搜索的时候，也是和match类似，首先对搜索条件进行分词-analyze。将搜索条件拆分成hello和world。既然是分词后再搜索，ES是如何实现短语搜索的？")]),s._v(" "),a("p",[s._v("这里涉及到了倒排索引的建立过程。在倒排索引建立的时候，ES会先对document数据进行分词，如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET _analyze\n{\n"text": "hello world, java spark",\n"analyzer": "standard"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("分词的结果是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n"tokens": [\n    {\n      "token": "hello",\n      "start_offset": 0,\n      "end_offset": 5,\n      "type": "<ALPHANUM>",\n      "position": 0\n    },\n    {\n      "token": "world",\n      "start_offset": 6,\n      "end_offset": 11,\n      "type": "<ALPHANUM>",\n      "position": 1\n    },\n    {\n      "token": "java",\n      "start_offset": 13,\n      "end_offset": 17,\n      "type": "<ALPHANUM>",\n      "position": 2\n    },\n    {\n      "token": "spark",\n      "start_offset": 18,\n      "end_offset": 23,\n      "type": "<ALPHANUM>",\n      "position": 3\n    }\n  ]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("从上述结果中，可以看到。ES在做分词的时候，除了将数据切分外，还会保留一个position。position代表的是这个词在整个数据中的下标。当ES执行match phrase搜索的时候，首先将搜索条件hello world分词为hello和world。然后在倒排索引中检索数据，如果hello和world都在某个document的某个field出现时，那么检查这两个匹配到的单词的position是否是连续的，如果是连续的，代表匹配成功，如果是不连续的，则匹配失败。")]),s._v(" "),a("p",[a("strong",[s._v("-2). match phrase搜索参数 -- slop")])]),s._v(" "),a("p",[s._v("在做搜索操作的是，如果搜索参数是hello spark。而ES中存储的数据是hello world, java spark。那么使用match phrase则无法搜索到。在这个时候，可以使用match来解决这个问题。但是，当我们需要在搜索的结果中，做一个特殊的要求：hello和spark两个单词距离越近，document在结果集合中排序越靠前，这个时候再使用match则未必能得到想要的结果。")]),s._v(" "),a("p",[s._v("ES的搜索中，对match phrase提供了参数slop。slop代表match phrase短语搜索的时候，单词最多移动多少次，可以实现数据匹配。在所有匹配结果中，多个单词距离越近，相关度评分越高，排序越靠前。")]),s._v(" "),a("p",[s._v("这种使用slop参数的match phrase搜索，就称为近似匹配（proximity search）")]),s._v(" "),a("p",[s._v("如：")]),s._v(" "),a("p",[s._v("数据为： hello world, java spark")]),s._v(" "),a("p",[s._v("搜索为： match phrase : hello spark。")]),s._v(" "),a("p",[s._v("slop为： 3  （代表单词最多移动3次。）")]),s._v(" "),a("p",[s._v("执行短语搜索的时候，将条件hello spark分词为hello和spark两个单词。并且连续。")]),s._v(" "),a("p",[s._v("hello  spark")]),s._v(" "),a("p",[s._v("接下来，可以根据slop参数执行单词的移动。")]),s._v(" "),a("p",[s._v("下标 ：\t0\t\t1\t\t2\t\t3")]),s._v(" "),a("p",[s._v("doc  ：\thello\t        world\t      java\t\tspark")]),s._v(" "),a("p",[s._v("搜索 ：     hello\t        spark")]),s._v(" "),a("p",[s._v("移动1：\thello\t\t\t      spark")]),s._v(" "),a("p",[s._v("移动2：\thello\t\t\t\t\t       spark")]),s._v(" "),a("p",[s._v("匹配成功，不需要移动第三次即可匹配。")]),s._v(" "),a("p",[s._v("如果：")]),s._v(" "),a("p",[s._v("数据为： hello world, java spark")]),s._v(" "),a("p",[s._v("搜索为： match phrase : spark hello。")]),s._v(" "),a("p",[s._v("slop为： 5  （代表单词最多移动5次。）")]),s._v(" "),a("p",[s._v("执行短语搜索的时候，将条件hello spark分词为hello和spark两个单词。并且连续。")]),s._v(" "),a("p",[s._v("spark   hello")]),s._v(" "),a("p",[s._v("接下来，可以根据slop参数执行单词的移动。")]),s._v(" "),a("p",[s._v("下标 ：\t0\t\t1\t\t2\t\t3")]),s._v(" "),a("p",[s._v("doc  ：\thello\t        world\t       java\t      spark")]),s._v(" "),a("p",[s._v("搜索 ：     spark\t        hello")]),s._v(" "),a("p",[s._v("移动1：\t\t\tspark/hello")]),s._v(" "),a("p",[s._v("移动2：\thello\t        spark")]),s._v(" "),a("p",[s._v("移动3：\thello\t\t\t        spark")]),s._v(" "),a("p",[s._v("移动4：\thello\t\t\t\t\t      spark")]),s._v(" "),a("p",[s._v("匹配成功，不需要移动第五次即可匹配。")]),s._v(" "),a("p",[s._v("如果当slop移动次数使用完毕，还没有匹配成功，则无搜索结果。如果使用中文分词，则移动次数更加复杂，因为中文词语有重叠情况，很难计算具体次数，需要多次尝试才行。")]),s._v(" "),a("p",[s._v("测试案例：")]),s._v(" "),a("p",[s._v("英文：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET _analyze\n{\n"text": "hello world, java spark",\n"analyzer": "standard"\n}\n\nPOST /test_a/_doc/3\n{\n"f" : "hello world, java spark"\n}\n\nGET /test_a/_search\n{\n"query": {\n"match_phrase": {\n"f" : {\n"query": "hello spark",\n"slop" : 2\n}\n}\n}\n}\n\nGET /test_a/_search\n{\n"query": {\n"match_phrase": {\n"f" : {\n"query": "spark hello",\n"slop" : 4\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[s._v("中文：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET _analyze\n{\n"text": "中国，一个世界上最强的国家",\n"analyzer": "ik_max_word"\n}\n\nPOST /test_a/_doc/1\n{\n"f" : "中国，一个世界上最强的国家"\n}\n\nGET /test_a/_search\n{\n"query": {\n"match_phrase": {\n"f" : {\n"query": "中国最强",\n"slop" : 5\n}\n}\n}\n}\n\nGET /test_a/_search\n{\n"query": {\n"match_phrase": {\n"f" : {\n"query": "最强中国",\n"slop" : 9\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("## 五.版本控制")]),s._v(" "),a("p",[a("strong",[s._v("在数据库领域中，有两种方法来确保并发更新，不会丢失数据：")])]),s._v(" "),a("p",[s._v("1、悲观并发控制")]),s._v(" "),a("p",[s._v("这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。 一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。")]),s._v(" "),a("p",[s._v("2、乐观并发控制")]),s._v(" "),a("p",[s._v("Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。 然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。 例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。")]),s._v(" "),a("p",[s._v("3、再以创建一个文档为例    ES老版本")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /db_index/_doc/1\n{\n"name": "Jack",\n"sex": 1,\n"age": 25,\n"book": "Spring Boot 入门到精通",\n"remark": "hello world"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("4、实现_version乐观锁更新文档")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /db_index/_doc/1?version=1\n{\n"name": "Jack",\n"sex": 1,\n"age": 25,\n"book": "Spring Boot 入门到精通",\n"remark": "hello world"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("5、ES新版本(7.x)不使用version进行并发版本控制  if_seq_no=版本值&if_primary_term=文档位置")]),s._v(" "),a("p",[s._v("_seq_no：文档版本号，作用同_version")]),s._v(" "),a("p",[s._v("_primary_term：文档所在位置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('POST /es_sc/_search\n\nDELETE /es_sc\n\nPOST /es_sc/_doc/1\n{\n"id": 1,\n"name": "图灵学院",\n"desc": "图灵学院白起老师",\n"create_date": "2021-02-24"\n}\n\nPOST /es_sc/_update/1\n{\n"doc": {\n"name": "图灵教育666"\n}\n}\n\n\nPOST /es_sc/_update/1/?if_seq_no=1&if_primary_term=1\n{\n"doc": {\n"name": "图灵学院1"\n}    \n}\n\nPOST /es_sc/_update/1/?if_seq_no=1&if_primary_term=1\n{\n"doc": {\n"name": "图灵学院2"\n}    \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("​\tElasticSearch采用了乐观锁来保证数据的一致性，也就是说，当用户对document进行操作时，并不需要对该document作加锁和解锁的操作，只需要指定要操作的版本即可。当版本号一致时，ElasticSearch会允许该操作顺利执行，而当版本号存在冲突时，ElasticSearch会提示冲突并抛出异常（VersionConflictEngineException异常）。")]),s._v(" "),a("p",[s._v("ElasticSearch的版本号的取值范围为1到2^63-1。")]),s._v(" "),a("p",[s._v("内部版本控制：使用的是_version")]),s._v(" "),a("p",[s._v("外部版本控制：elasticsearch在处理外部版本号时会与对内部版本号的处理有些不同。它不再是检查_version是否与请求中指定的数值_相同_,而是检查当前的_version是否比指定的数值小。如果请求成功，那么外部的版本号就会被存储到文档中的_version中。")]),s._v(" "),a("p",[s._v("为了保持_version与外部版本控制的数据一致")]),s._v(" "),a("p",[s._v("使用version_type=external")]),s._v(" "),a("h2",{attrs:{id:"六-经验分享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-经验分享"}},[s._v("#")]),s._v(" 六.经验分享")]),s._v(" "),a("p",[s._v("使用match和proximity search实现召回率和精准度平衡。")]),s._v(" "),a("p",[s._v("召回率：召回率就是搜索结果比率，如：索引A中有100个document，搜索时返回多少个document，就是召回率（recall）。")]),s._v(" "),a("p",[s._v("精准度：就是搜索结果的准确率，如：搜索条件为hello java，在搜索结果中尽可能让短语匹配和hello java离的近的结果排序靠前，就是精准度（precision）。")]),s._v(" "),a("p",[s._v("如果在搜索的时候，只使用match phrase语法，会导致召回率底下，因为搜索结果中必须包含短语（包括proximity search）。")]),s._v(" "),a("p",[s._v("如果在搜索的时候，只使用match语法，会导致精准度底下，因为搜索结果排序是根据相关度分数算法计算得到。")]),s._v(" "),a("p",[s._v("那么如果需要在结果中兼顾召回率和精准度的时候，就需要将match和proximity search混合使用，来得到搜索结果。")]),s._v(" "),a("p",[s._v("测试案例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('POST /test_a/_doc/3\n{\n"f" : "hello, java is very good, spark is also very good"\n}\n\nPOST /test_a/_doc/4\n{\n"f" : "java and spark, development language "\n}\n\nPOST /test_a/_doc/5\n{\n"f" : "Java Spark is a fast and general-purpose cluster computing system. It provides high-level APIs in Java, Scala, Python and R, and an optimized engine that supports general execution graphs."\n}\n\nPOST /test_a/_doc/6\n{\n"f" : "java spark and, development language "\n}\n\nGET /test_a/_search\n{\n"query": {\n"match": {\n"f": "java spark"\n}\n}\n}\n\nGET /test_a/_search\n{\n"query": {\n"bool": {\n"must": [\n{\n"match": {\n"f": "java spark"\n}\n}\n],\n"should": [\n{\n"match_phrase": {\n"f": {\n"query": "java spark",\n"slop" : 50\n}\n}\n}\n]\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])]),a("p",[s._v("七、前缀搜索 prefix search")]),s._v(" "),a("p",[s._v("使用前缀匹配实现搜索能力。通常针对keyword类型字段，也就是不分词的字段。")]),s._v(" "),a("p",[s._v("语法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /test_a/_search\n{\n"query": {\n"prefix": {\n"f.keyword": {\n"value": "J"\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("注意：针对前缀搜索，是对keyword类型字段而言。而keyword类型字段数据大小写敏感。")])]),s._v(" "),a("p",[s._v("前缀搜索效率比较低。前缀搜索不会计算相关度分数。前缀越短，效率越低。如果使用前缀搜索，建议使用长前缀。因为前缀搜索需要扫描完整的索引内容，所以前缀越长，相对效率越高。")]),s._v(" "),a("p",[a("strong",[s._v("八、通配符搜索")])]),s._v(" "),a("p",[s._v("ES中也有通配符。但是和java还有数据库不太一样。通配符可以在倒排索引中使用，也可以在keyword类型字段中使用。")]),s._v(" "),a("p",[s._v("常用通配符：")]),s._v(" "),a("p",[s._v("? - 一个任意字符")]),s._v(" "),a("p",[s._v("* - 0~n个任意字符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /test_a/_search\n{\n"query": {\n"wildcard": {\n"f.keyword": {\n"value": "?e*o*"\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("性能也很低，也是需要扫描完整的索引。不推荐使用。")]),s._v(" "),a("p",[a("strong",[s._v("九、正则搜索")])]),s._v(" "),a("p",[s._v("ES支持正则表达式。可以在倒排索引或keyword类型字段中使用。")]),s._v(" "),a("p",[s._v("常用符号：")]),s._v(" "),a("p",[s._v("[] - 范围，如： [0-9]是0~9的范围数字")]),s._v(" "),a("p",[s._v(". - 一个字符")]),s._v(" "),a("p",[s._v("+ - 前面的表达式可以出现多次。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /test_a/_search\n{\n"query": {\n"regexp" : {\n"f.keyword" : "[A-z].+"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("性能也很低，需要扫描完整索引。")]),s._v(" "),a("p",[a("strong",[s._v("十、搜索推荐")])]),s._v(" "),a("p",[s._v("搜索推荐： search as your type， 搜索提示。如：索引中有若干数据以“hello”开头，那么在输入hello的时候，推荐相关信息。（类似百度输入框）")]),s._v(" "),a("p",[s._v("语法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /test_a/_search\n{\n"query": {\n"match_phrase_prefix": {\n"f": {\n"query": "java s",\n"slop" : 10,\n"max_expansions": 10\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("其原理和match phrase类似，是先使用match匹配term数据（java），然后在指定的slop移动次数范围内，前缀匹配（s），max_expansions是用于指定prefix最多匹配多少个term（单词），超过这个数量就不再匹配了。")]),s._v(" "),a("p",[s._v("这种语法的限制是，只有最后一个term会执行前缀搜索。")]),s._v(" "),a("p",[s._v("执行性能很差，毕竟最后一个term是需要扫描所有符合slop要求的倒排索引的term。")]),s._v(" "),a("p",[s._v("因为效率较低，如果必须使用，则一定要使用参数max_expansions。")]),s._v(" "),a("p",[a("strong",[s._v("十一、fuzzy模糊搜索技术")])]),s._v(" "),a("p",[s._v("搜索的时候，可能搜索条件文本输入错误，如：hello world -> hello word。这种拼写错误还是很常见的。fuzzy技术就是用于解决错误拼写的（在英文中很有效，在中文中几乎无效。）。其中fuzziness代表value的值word可以修改多少个字母来进行拼写错误的纠正（修改字母的数量包含字母变更，增加或减少字母。）。f代表要搜索的字段名称。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /test_a/_search\n{\n"query": {\n"fuzzy": {\n"f" : {\n"value" : "word",\n"fuzziness": 2\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")])]),s._v(" "),a("p",[a("strong",[s._v("回顾:")])]),s._v(" "),a("p",[s._v("1）集群状态")]),s._v(" "),a("p",[a("strong",[s._v("如何快速了解集群的健康状况？green、yellow、red？")])]),s._v(" "),a("p",[s._v("green：每个索引的primary shard和replica shard都是active状态的")]),s._v(" "),a("p",[s._v("yellow：每个索引的primary shard都是active状态的，但是部分replica shard不是active状态，处于不可用的状态")]),s._v(" "),a("p",[s._v("red：不是所有索引的primary shard都是active状态的，部分索引有数据丢失了")]),s._v(" "),a("p",[s._v("集群什么情况会处于一个yellow状态？")]),s._v(" "),a("p",[s._v("假设现在就一台linux服务器，就启动了一个es进程，相当于就只有一个node。现在es中有一个index，就是kibana自己内置建立的index。由于默认的配置是给每个index分配1个primary shard和1个replica shard，而且primary shard和replica shard不能在同一台机器上（为了容错）。现在kibana自己建立的index是1个primary shard和1个replica shard。当前就一个node，所以只有1个primary shard被分配了和启动了，但是一个replica shard没有第二台机器去启动。")]),s._v(" "),a("p",[s._v("测试：启动第二个es进程，就会在es集群中有2个node，然后那1个replica shard就会自动分配过去，然后cluster status就会变成green状态。")]),s._v(" "),a("p",[a("strong",[s._v("2）不同节点介绍")])]),s._v(" "),a("p",[s._v("主节点：node.master：true")]),s._v(" "),a("p",[s._v("数据节点: node.data: true")]),s._v(" "),a("p",[s._v("-1. 客户端节点")]),s._v(" "),a("p",[s._v("当主节点和数据节点配置都设置为false的时候，该节点只能处理路由请求，处理搜索，分发索引操作等，从本质上来说该客户节点表现为智能负载平衡器。")]),s._v(" "),a("p",[s._v("​    独立的客户端节点在一个比较大的集群中是非常有用的，他协调主节点和数据节点，客户端节点加入集群可以得到集群的状态，根据集群的状态可以直接路由请求。")]),s._v(" "),a("p",[s._v("-2. 数据节点")]),s._v(" "),a("p",[s._v("数据节点主要是存储索引数据的节点，主要对文档进行增删改查操作，聚合操作等。数据节点对cpu，内存，io要求较高， 在优化的时候需要监控数据节点的状态，当资源不够的时候，需要在集群中添加新的节点。")]),s._v(" "),a("p",[s._v("-3. 主节点")]),s._v(" "),a("p",[s._v("主资格节点的主要职责是和集群操作相关的内容，如创建或删除索引，跟踪哪些节点是群集的一部分，并决定哪些分片分配给相关的节点。稳定的主节点对集群的健康是非常重要的，默认情况下任何一个集群中的节点都有可能被选为主节点，索引数据和搜索查询等操作会占用大量的cpu，内存，io资源，为了确保一个集群的稳定，分离主节点和数据节点是一个比较好的选择。")]),s._v(" "),a("p",[s._v("在一个生产集群中我们可以对这些节点的职责进行划分，建议集群中设置3台以上的节点作为master节点，这些节点只负责成为主节点，维护整个集群的状态。再根据数据量设置一批data节点，这些节点只负责存储数据，后期提供建立索引和查询索引的服务，这样的话如果用户请求比较频繁，这些节点的压力也会比较大，所以在集群中建议再设置一批client节点(node.master: false node.data: false)，这些节点只负责处理用户请求，实现请求转发，负载均衡等功能")]),s._v(" "),a("p",[a("strong",[s._v("一、ElasticSearch文档分值_score计算")]),s._v("底层原理")]),s._v(" "),a("p",[s._v("1）boolean model")]),s._v(" "),a("p",[s._v("根据用户的query条件，先过滤出包含指定term的doc")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('query "hello world" --\x3e  hello / world / hello & world\n\nbool --\x3e must/must not/should --\x3e 过滤 --\x3e 包含 / 不包含 / 可能包含\n\ndoc --\x3e 不打分数 --\x3e 正或反 true or false --\x3e 为了减少后续要计算的doc的数量，提升性能\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("2)relevance score算法，简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度")]),s._v(" "),a("p",[s._v("Elasticsearch使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法")]),s._v(" "),a("p",[a("strong",[s._v("Term frequency")]),s._v("：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("搜索请求：hello world\n\n\n\ndoc1：hello you, and world is very good\n\ndoc2：hello, how are you\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("Inverse document frequency")]),s._v("：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("搜索请求：hello world\n\n\n\ndoc1：hello, tuling is very good\n\ndoc2：hi world, how are you\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("比如说，在index中有1万条document，hello这个单词在所有的document中，一共出现了1000次；world这个单词在所有的document中，一共出现了100次")]),s._v(" "),a("p",[s._v("Field-length norm：field长度，field越长，相关度越弱")]),s._v(" "),a("p",[s._v("搜索请求：hello world")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('doc1：{ "title": "hello article", "content": "...... N个单词" }\n\ndoc2：{ "title": "my article", "content": "...... N个单词，hi world" }\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("hello world在整个index中出现的次数是一样多的")]),s._v(" "),a("p",[s._v("doc1更相关，title field更短")]),s._v(" "),a("p",[s._v("2、分析一个document上的_score是如何被计算出来的")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /es_db/_doc/1/_explain\n{\n  "query": {\n    "match": {\n      "remark": "java developer"\n    }\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("二、分词器工作流程")]),s._v(" "),a("p",[s._v("切分词语，normalization")]),s._v(" "),a("p",[s._v("给你一段句子，然后将这段句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换），分词器")]),s._v(" "),a("p",[s._v("recall，召回率：搜索的时候，增加能够搜索到的结果的数量")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<span>hello<span> --\x3e hello），& --\x3e and（I&you --\x3e I and you）\n\ntokenizer：分词，hello you and me --\x3e hello, you, and, me\n\ntoken filter：lowercase，stop word，synonymom，liked --\x3e like，Tom --\x3e tom，a/the/an --\x3e 干掉，small --\x3e little\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("一个分词器，很重要，将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引")]),s._v(" "),a("p",[s._v("2、内置分词器的介绍")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Set the shape to semi-transparent by calling set_trans(5)\n\nstandard analyzer：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）\n\nsimple analyzer：set, the, shape, to, semi, transparent, by, calling, set, trans\n\nwhitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)\n\nstop analyzer:移除停用词，比如a the it等等\n\n测试：\nPOST _analyze\n{\n"analyzer":"standard",\n"text":"Set the shape to semi-transparent by calling set_trans(5)"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("3、定制分词器")]),s._v(" "),a("p",[s._v("1）默认的分词器")]),s._v(" "),a("p",[s._v("standard")]),s._v(" "),a("p",[s._v("standard tokenizer：以单词边界进行切分")]),s._v(" "),a("p",[s._v("standard token filter：什么都不做")]),s._v(" "),a("p",[s._v("lowercase token filter：将所有字母转换为小写")]),s._v(" "),a("p",[s._v("stop token filer（默认被禁用）：移除停用词，比如a the it等等")]),s._v(" "),a("p",[s._v("2）修改分词器的设置")]),s._v(" "),a("p",[s._v("启用english停用词token filter")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /my_index\n{\n  "settings": {\n    "analysis": {\n      "analyzer": {\n        "es_std": {\n          "type": "standard",\n          "stopwords": "_english_"\n        }\n      }\n    }\n  }\n}\n\nGET /my_index/_analyze\n{\n  "analyzer": "standard", \n  "text": "a dog is in the house"\n}\n\nGET /my_index/_analyze\n{\n  "analyzer": "es_std",\n  "text":"a dog is in the house"\n}\n\n3、定制化自己的分词器\n\nPUT /my_index\n{\n"settings": {\n"analysis": {\n"char_filter": {\n"&_to_and": {\n"type": "mapping",\n"mappings": ["&=> and"]\n}\n},\n"filter": {\n"my_stopwords": {\n"type": "stop",\n"stopwords": ["the", "a"]\n}\n},\n"analyzer": {\n"my_analyzer": {\n"type": "custom",\n"char_filter": ["html_strip", "&_to_and"],\n"tokenizer": "standard",\n"filter": ["lowercase", "my_stopwords"]\n}\n}\n}\n}\n}\n\nGET /my_index/_analyze\n{\n"text": "tom&jerry are a friend in the house, <a>, HAHA!!",\n"analyzer": "my_analyzer"\n}\n\nPUT /my_index/_mapping/my_type\n{\n"properties": {\n"content": {\n"type": "text",\n"analyzer": "my_analyzer"\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("3）ik分词器详解")]),s._v(" "),a("p",[s._v("ik配置文件地址：es/plugins/ik/config目录")]),s._v(" "),a("p",[s._v("IKAnalyzer.cfg.xml：用来配置自定义词库")]),s._v(" "),a("p",[s._v("main.dic：ik原生内置的中文词库，总共有27万多条，只要是这些单词，都会被分在一起")]),s._v(" "),a("p",[s._v("quantifier.dic：放了一些单位相关的词")]),s._v(" "),a("p",[s._v("suffix.dic：放了一些后缀")]),s._v(" "),a("p",[s._v("surname.dic：中国的姓氏")]),s._v(" "),a("p",[s._v("stopword.dic：英文停用词")]),s._v(" "),a("p",[s._v("ik原生最重要的两个配置文件")]),s._v(" "),a("p",[s._v("main.dic：包含了原生的中文词语，会按照这个里面的词语去分词")]),s._v(" "),a("p",[s._v("stopword.dic：包含了英文的停用词")]),s._v(" "),a("p",[s._v("停用词，stopword")]),s._v(" "),a("p",[s._v("a the and at but")]),s._v(" "),a("p",[s._v("一般，像停用词，会在分词的时候，直接被干掉，不会建立在倒排索引中")]),s._v(" "),a("p",[s._v("4）IK分词器自定义词库")]),s._v(" "),a("p",[s._v("（1）自己建立词库：每年都会涌现一些特殊的流行词，网红，蓝瘦香菇，喊麦，鬼畜，一般不会在ik的原生词典里")]),s._v(" "),a("p",[s._v("自己补充自己的最新的词语，到ik的词库里面去")]),s._v(" "),a("p",[s._v("IKAnalyzer.cfg.xml：ext_dict，custom/mydict.dic")]),s._v(" "),a("p",[s._v("补充自己的词语，然后需要重启es，才能生效")]),s._v(" "),a("p",[s._v("（2）自己建立停用词库：比如了，的，啥，么，我们可能并不想去建立索引，让人家搜索")]),s._v(" "),a("p",[s._v("custom/ext_stopword.dic，已经有了常用的中文停用词，可以补充自己的停用词，然后重启es")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("IK分词器源码下载：https://github.com/medcl/elasticsearch-analysis-ik/tree\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("5）IK热更新")]),s._v(" "),a("p",[s._v("每次都是在es的扩展词典中，手动添加新词语，很坑")]),s._v(" "),a("p",[s._v("（1）每次添加完，都要重启es才能生效，非常麻烦")]),s._v(" "),a("p",[s._v("（2）es是分布式的，可能有数百个节点，你不能每次都一个一个节点上面去修改")]),s._v(" "),a("p",[s._v("es不停机，直接我们在外部某个地方添加新的词语，es中立即热加载到这些新词语")]),s._v(" "),a("p",[s._v("IKAnalyzer.cfg.xml")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<properties>\n\t<comment>IK Analyzer 扩展配置</comment>\n\t\x3c!--用户可以在这里配置自己的扩展字典 --\x3e\n\t<entry key="ext_dict">location</entry>\n\t \x3c!--用户可以在这里配置自己的扩展停止词字典--\x3e\n\t<entry key="ext_stopwords">location</entry>\n\t\x3c!--用户可以在这里配置远程扩展字典 --\x3e\n\t<entry key="remote_ext_dict">words_location</entry> \n\t\x3c!--用户可以在这里配置远程扩展停止词字典--\x3e\n\t<entry key="remote_ext_stopwords">words_location</entry>\n</properties>\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("三. 高亮显示")])]),s._v(" "),a("p",[s._v("在搜索中，经常需要对搜索关键字做高亮显示，高亮显示也有其常用的参数，在这个案例中做一些常用参数的介绍。")]),s._v(" "),a("p",[s._v("现在搜索cars索引中remark字段中包含“大众”的document。并对“XX关键字”做高亮显示，高亮效果使用html标签，并设定字体为红色。如果remark数据过长，则只显示前20个字符。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /news_website\n{\n  "mappings": {\n\n      "properties": {\n        "title": {\n          "type": "text",\n          "analyzer": "ik_max_word"\n        },\n        "content": {\n          "type": "text",\n          "analyzer": "ik_max_word"\n        }\n      }\n    }\n  \n}\n\n\nPUT /news_website\n{\n    "settings" : {\n        "index" : {\n            "analysis.analyzer.default.type": "ik_max_word"\n        }\n    }\n}\n\n\n\n\nPUT /news_website/_doc/1\n{\n  "title": "这是我写的第一篇文章",\n  "content": "大家好，这是我写的第一篇文章，特别喜欢这个文章门户网站！！！"\n}\n\nGET /news_website/_doc/_search \n{\n  "query": {\n    "match": {\n      "title": "文章"\n    }\n  },\n  "highlight": {\n    "fields": {\n      "title": {}\n    }\n  }\n}\n\n{\n  "took" : 458,\n  "timed_out" : false,\n  "_shards" : {\n    "total" : 1,\n    "successful" : 1,\n    "skipped" : 0,\n    "failed" : 0\n  },\n  "hits" : {\n    "total" : {\n      "value" : 1,\n      "relation" : "eq"\n    },\n    "max_score" : 0.2876821,\n    "hits" : [\n      {\n        "_index" : "news_website",\n        "_type" : "_doc",\n        "_id" : "1",\n        "_score" : 0.2876821,\n        "_source" : {\n          "title" : "我的第一篇文章",\n          "content" : "大家好，这是我写的第一篇文章，特别喜欢这个文章门户网站！！！"\n        },\n        "highlight" : {\n          "title" : [\n            "我的第一篇<em>文章</em>"\n          ]\n        }\n      }\n    ]\n  }\n}\n\n<em></em>表现，会变成红色，所以说你的指定的field中，如果包含了那个搜索词的话，就会在那个field的文本中，对搜索词进行红色的高亮显示\n\nGET /news_website/_doc/_search \n{\n  "query": {\n    "bool": {\n      "should": [\n        {\n          "match": {\n            "title": "文章"\n          }\n        },\n        {\n          "match": {\n            "content": "文章"\n          }\n        }\n      ]\n    }\n  },\n  "highlight": {\n    "fields": {\n      "title": {},\n      "content": {}\n    }\n  }\n}\n\nhighlight中的field，必须跟query中的field一一对齐的\n\n2、常用的highlight介绍\n\nplain highlight，lucene highlight，默认\n\nposting highlight，index_options=offsets\n\n（1）性能比plain highlight要高，因为不需要重新对高亮文本进行分词\n（2）对磁盘的消耗更少\n\n\nDELETE news_website\nPUT /news_website\n{\n  "mappings": {\n      "properties": {\n        "title": {\n          "type": "text",\n          "analyzer": "ik_max_word"\n        },\n        "content": {\n          "type": "text",\n          "analyzer": "ik_max_word",\n          "index_options": "offsets"\n        }\n      }\n  }\n}\n\nPUT /news_website/_doc/1\n{\n  "title": "我的第一篇文章",\n  "content": "大家好，这是我写的第一篇文章，特别喜欢这个文章门户网站！！！"\n}\n\nGET /news_website/_doc/_search \n{\n  "query": {\n    "match": {\n      "content": "文章"\n    }\n  },\n  "highlight": {\n    "fields": {\n      "content": {}\n    }\n  }\n}\n\nfast vector highlight\n\nindex-time term vector设置在mapping中，就会用fast verctor highlight\n\n（1）对大field而言（大于1mb），性能更高\n\ndelete  /news_website\n\nPUT /news_website\n{\n  "mappings": {\n      "properties": {\n        "title": {\n          "type": "text",\n          "analyzer": "ik_max_word"\n        },\n        "content": {\n          "type": "text",\n          "analyzer": "ik_max_word",\n          "term_vector" : "with_positions_offsets"\n        }\n      }\n  }\n}\n\n强制使用某种highlighter，比如对于开启了term vector的field而言，可以强制使用plain highlight\n\nGET /news_website/_doc/_search \n{\n  "query": {\n    "match": {\n      "content": "文章"\n    }\n  },\n  "highlight": {\n    "fields": {\n      "content": {\n        "type": "plain"\n      }\n    }\n  }\n}\n\n总结一下，其实可以根据你的实际情况去考虑，一般情况下，用plain highlight也就足够了，不需要做其他额外的设置\n如果对高亮的性能要求很高，可以尝试启用posting highlight\n如果field的值特别大，超过了1M，那么可以用fast vector highlight\n\n3、设置高亮html标签，默认是<em>标签\n\nGET /news_website/_doc/_search \n{\n  "query": {\n    "match": {\n      "content": "文章"\n    }\n  },\n  "highlight": {\n    "pre_tags": ["<span color=\'red\'>"],\n    "post_tags": ["</span>"], \n    "fields": {\n      "content": {\n        "type": "plain"\n      }\n    }\n  }\n}\n\n4、高亮片段fragment的设置\n\nGET /_search\n{\n    "query" : {\n        "match": { "content": "文章" }\n    },\n    "highlight" : {\n        "fields" : {\n            "content" : {"fragment_size" : 150, "number_of_fragments" : 3 }\n        }\n    }\n}\n\nfragment_size: 你一个Field的值，比如有长度是1万，但是你不可能在页面上显示这么长啊。。。设置要显示出来的fragment文本判断的长度，默认是100\nnumber_of_fragments：你可能你的高亮的fragment文本片段有多个片段，你可以指定就显示几个片段\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br"),a("span",{staticClass:"line-number"},[s._v("168")]),a("br"),a("span",{staticClass:"line-number"},[s._v("169")]),a("br"),a("span",{staticClass:"line-number"},[s._v("170")]),a("br"),a("span",{staticClass:"line-number"},[s._v("171")]),a("br"),a("span",{staticClass:"line-number"},[s._v("172")]),a("br"),a("span",{staticClass:"line-number"},[s._v("173")]),a("br"),a("span",{staticClass:"line-number"},[s._v("174")]),a("br"),a("span",{staticClass:"line-number"},[s._v("175")]),a("br"),a("span",{staticClass:"line-number"},[s._v("176")]),a("br"),a("span",{staticClass:"line-number"},[s._v("177")]),a("br"),a("span",{staticClass:"line-number"},[s._v("178")]),a("br"),a("span",{staticClass:"line-number"},[s._v("179")]),a("br"),a("span",{staticClass:"line-number"},[s._v("180")]),a("br"),a("span",{staticClass:"line-number"},[s._v("181")]),a("br"),a("span",{staticClass:"line-number"},[s._v("182")]),a("br"),a("span",{staticClass:"line-number"},[s._v("183")]),a("br"),a("span",{staticClass:"line-number"},[s._v("184")]),a("br"),a("span",{staticClass:"line-number"},[s._v("185")]),a("br"),a("span",{staticClass:"line-number"},[s._v("186")]),a("br"),a("span",{staticClass:"line-number"},[s._v("187")]),a("br"),a("span",{staticClass:"line-number"},[s._v("188")]),a("br"),a("span",{staticClass:"line-number"},[s._v("189")]),a("br"),a("span",{staticClass:"line-number"},[s._v("190")]),a("br"),a("span",{staticClass:"line-number"},[s._v("191")]),a("br"),a("span",{staticClass:"line-number"},[s._v("192")]),a("br"),a("span",{staticClass:"line-number"},[s._v("193")]),a("br"),a("span",{staticClass:"line-number"},[s._v("194")]),a("br"),a("span",{staticClass:"line-number"},[s._v("195")]),a("br"),a("span",{staticClass:"line-number"},[s._v("196")]),a("br"),a("span",{staticClass:"line-number"},[s._v("197")]),a("br"),a("span",{staticClass:"line-number"},[s._v("198")]),a("br"),a("span",{staticClass:"line-number"},[s._v("199")]),a("br"),a("span",{staticClass:"line-number"},[s._v("200")]),a("br"),a("span",{staticClass:"line-number"},[s._v("201")]),a("br"),a("span",{staticClass:"line-number"},[s._v("202")]),a("br"),a("span",{staticClass:"line-number"},[s._v("203")]),a("br"),a("span",{staticClass:"line-number"},[s._v("204")]),a("br"),a("span",{staticClass:"line-number"},[s._v("205")]),a("br"),a("span",{staticClass:"line-number"},[s._v("206")]),a("br"),a("span",{staticClass:"line-number"},[s._v("207")]),a("br"),a("span",{staticClass:"line-number"},[s._v("208")]),a("br"),a("span",{staticClass:"line-number"},[s._v("209")]),a("br"),a("span",{staticClass:"line-number"},[s._v("210")]),a("br"),a("span",{staticClass:"line-number"},[s._v("211")]),a("br"),a("span",{staticClass:"line-number"},[s._v("212")]),a("br"),a("span",{staticClass:"line-number"},[s._v("213")]),a("br"),a("span",{staticClass:"line-number"},[s._v("214")]),a("br"),a("span",{staticClass:"line-number"},[s._v("215")]),a("br"),a("span",{staticClass:"line-number"},[s._v("216")]),a("br"),a("span",{staticClass:"line-number"},[s._v("217")]),a("br"),a("span",{staticClass:"line-number"},[s._v("218")]),a("br"),a("span",{staticClass:"line-number"},[s._v("219")]),a("br"),a("span",{staticClass:"line-number"},[s._v("220")]),a("br"),a("span",{staticClass:"line-number"},[s._v("221")]),a("br"),a("span",{staticClass:"line-number"},[s._v("222")]),a("br"),a("span",{staticClass:"line-number"},[s._v("223")]),a("br"),a("span",{staticClass:"line-number"},[s._v("224")]),a("br"),a("span",{staticClass:"line-number"},[s._v("225")]),a("br"),a("span",{staticClass:"line-number"},[s._v("226")]),a("br"),a("span",{staticClass:"line-number"},[s._v("227")]),a("br"),a("span",{staticClass:"line-number"},[s._v("228")]),a("br"),a("span",{staticClass:"line-number"},[s._v("229")]),a("br"),a("span",{staticClass:"line-number"},[s._v("230")]),a("br"),a("span",{staticClass:"line-number"},[s._v("231")]),a("br"),a("span",{staticClass:"line-number"},[s._v("232")]),a("br"),a("span",{staticClass:"line-number"},[s._v("233")]),a("br"),a("span",{staticClass:"line-number"},[s._v("234")]),a("br"),a("span",{staticClass:"line-number"},[s._v("235")]),a("br"),a("span",{staticClass:"line-number"},[s._v("236")]),a("br"),a("span",{staticClass:"line-number"},[s._v("237")]),a("br"),a("span",{staticClass:"line-number"},[s._v("238")]),a("br"),a("span",{staticClass:"line-number"},[s._v("239")]),a("br"),a("span",{staticClass:"line-number"},[s._v("240")]),a("br"),a("span",{staticClass:"line-number"},[s._v("241")]),a("br"),a("span",{staticClass:"line-number"},[s._v("242")]),a("br"),a("span",{staticClass:"line-number"},[s._v("243")]),a("br"),a("span",{staticClass:"line-number"},[s._v("244")]),a("br"),a("span",{staticClass:"line-number"},[s._v("245")]),a("br"),a("span",{staticClass:"line-number"},[s._v("246")]),a("br"),a("span",{staticClass:"line-number"},[s._v("247")]),a("br"),a("span",{staticClass:"line-number"},[s._v("248")]),a("br")])]),a("p",[a("strong",[s._v("四、 聚合搜索技术深入")])]),s._v(" "),a("p",[a("strong",[s._v("1.bucket和metric概念简介")])]),s._v(" "),a("p",[s._v("bucket就是一个聚合搜索时的数据分组。如：销售部门有员工张三和李四，开发部门有员工王五和赵六。那么根据部门分组聚合得到结果就是两个bucket。销售部门bucket中有张三和李四，")]),s._v(" "),a("p",[s._v("开发部门 bucket中有王五和赵六。")]),s._v(" "),a("p",[s._v("metric就是对一个bucket数据执行的统计分析。如上述案例中，开发部门有2个员工，销售部门有2个员工，这就是metric。")]),s._v(" "),a("p",[s._v("metric有多种统计，如：求和，最大值，最小值，平均值等。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("用一个大家容易理解的SQL语法来解释，如：select count(*) from table group by column。那么group by column分组后的每组数据就是bucket。对每个分组执行的count(*)就是metric。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("2.准备案例数据")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT /cars\n{\n"mappings": {\n"properties": {\n"price": {\n"type": "long"\n},\n"color": {\n"type": "keyword"\n},\n"brand": {\n"type": "keyword"\n},\n"model": {\n"type": "keyword"\n},\n"sold_date": {\n"type": "date"\n},\n"remark" : {\n"type" : "text",\n"analyzer" : "ik_max_word"\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('POST /cars/_bulk\n{ "index": {}}\n{ "price" : 258000, "color" : "金色", "brand":"大众", "model" : "大众迈腾", "sold_date" : "2021-10-28","remark" : "大众中档车" }\n{ "index": {}}\n{ "price" : 123000, "color" : "金色", "brand":"大众", "model" : "大众速腾", "sold_date" : "2021-11-05","remark" : "大众神车" }\n{ "index": {}}\n{ "price" : 239800, "color" : "白色", "brand":"标志", "model" : "标志508", "sold_date" : "2021-05-18","remark" : "标志品牌全球上市车型" }\n{ "index": {}}\n{ "price" : 148800, "color" : "白色", "brand":"标志", "model" : "标志408", "sold_date" : "2021-07-02","remark" : "比较大的紧凑型车" }\n{ "index": {}}\n{ "price" : 1998000, "color" : "黑色", "brand":"大众", "model" : "大众辉腾", "sold_date" : "2021-08-19","remark" : "大众最让人肝疼的车" }\n{ "index": {}}\n{ "price" : 218000, "color" : "红色", "brand":"奥迪", "model" : "奥迪A4", "sold_date" : "2021-11-05","remark" : "小资车型" }\n{ "index": {}}\n{ "price" : 489000, "color" : "黑色", "brand":"奥迪", "model" : "奥迪A6", "sold_date" : "2022-01-01","remark" : "政府专用？" }\n{ "index": {}}\n{ "price" : 1899000, "color" : "黑色", "brand":"奥迪", "model" : "奥迪A 8", "sold_date" : "2022-02-12","remark" : "很贵的大A6。。。" }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v("五.聚合操作案例")])]),s._v(" "),a("p",[s._v("1、根据color分组统计销售数量")]),s._v(" "),a("p",[s._v("只执行聚合分组，不做复杂的聚合统计。在ES中最基础的聚合为terms，相当于SQL中的count。")]),s._v(" "),a("p",[s._v("在ES中默认为分组数据做排序，使用的是doc_count数据执行降序排列。可以使用_key元数据，根据分组后的字段数据执行不同的排序方案，也可以根据_count元数据，根据分组后的统计值执行不同的排序方案。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"aggs": {\n"group_by_color": {\n"terms": {\n"field": "color",\n"order": {\n"_count": "desc"\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("strong",[s._v("2、统计不同color车辆的平均价格")])]),s._v(" "),a("p",[s._v("本案例先根据color执行聚合分组，在此分组的基础上，对组内数据执行聚合统计，这个组内数据的聚合统计就是metric。同样可以执行排序，因为组内有聚合统计，且对统计数据给予了命名avg_by_price，所以可以根据这个聚合统计数据字段名执行排序逻辑。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"aggs": {\n"group_by_color": {\n"terms": {\n"field": "color",\n"order": {\n"avg_by_price": "asc"\n}\n},\n"aggs": {\n"avg_by_price": {\n"avg": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("size可以设置为0，表示不返回ES中的文档，只返回ES聚合之后的数据，提高查询速度，当然如果你需要这些文档的话，也可以按照实际情况进行设置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"size" : 0,\n"aggs": {\n"group_by_color": {\n"terms": {\n"field": "color"\n},\n"aggs": {\n"group_by_brand" : {\n"terms": {\n"field": "brand",\n"order": {\n"avg_by_price": "desc"\n}\n},\n"aggs": {\n"avg_by_price": {\n"avg": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[a("strong",[s._v("3、统计不同color不同brand中车辆的平均价格")])]),s._v(" "),a("p",[s._v("先根据color聚合分组，在组内根据brand再次聚合分组，这种操作可以称为下钻分析。")]),s._v(" "),a("p",[s._v("Aggs如果定义比较多，则会感觉语法格式混乱，aggs语法格式，有一个相对固定的结构，简单定义：aggs可以嵌套定义，可以水平定义。")]),s._v(" "),a("p",[s._v("嵌套定义称为下钻分析。水平定义就是平铺多个分组方式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /index_name/type_name/_search\n{\n"aggs" : {\n"定义分组名称（最外层）": {\n"分组策略如：terms、avg、sum" : {\n"field" : "根据哪一个字段分组",\n"其他参数" : ""\n},\n"aggs" : {\n"分组名称1" : {},\n"分组名称2" : {}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"aggs": {\n"group_by_color": {\n"terms": {\n"field": "color",\n"order": {\n"avg_by_price_color": "asc"\n}\n},\n"aggs": {\n"avg_by_price_color" : {\n"avg": {\n"field": "price"\n}\n},\n"group_by_brand" : {\n"terms": {\n"field": "brand",\n"order": {\n"avg_by_price_brand": "desc"\n}\n},\n"aggs": {\n"avg_by_price_brand": {\n"avg": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[a("strong",[s._v("4、统计不同color中的最大和最小价格、总价")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"aggs": {\n"group_by_color": {\n"terms": {\n"field": "color"\n},\n"aggs": {\n"max_price": {\n"max": {\n"field": "price"\n}\n},\n"min_price" : {\n"min": {\n"field": "price"\n}\n},\n"sum_price" : {\n"sum": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("在常见的业务常见中，聚合分析，最常用的种类就是统计数量，最大，最小，平均，总计等。通常占有聚合业务中的60%以上的比例，小型项目中，甚至占比85%以上。")]),s._v(" "),a("p",[a("strong",[s._v("5、统计不同品牌汽车中价格排名最高的车型")])]),s._v(" "),a("p",[s._v("在分组后，可能需要对组内的数据进行排序，并选择其中排名高的数据。那么可以使用s来实现：top_top_hithits中的属性size代表取组内多少条数据（默认为10）；sort代表组内使用什么字段什么规则排序（默认使用_doc的asc规则排序）；_source代表结果中包含document中的那些字段（默认包含全部字段）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET cars/_search\n{\n"size" : 0,\n"aggs": {\n"group_by_brand": {\n"terms": {\n"field": "brand"\n},\n"aggs": {\n"top_car": {\n"top_hits": {\n"size": 1,\n"sort": [\n{\n"price": {\n"order": "desc"\n}\n}\n],\n"_source": {\n"includes": ["model", "price"]\n}\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[a("strong",[s._v("6、histogram 区间统计")])]),s._v(" "),a("p",[s._v("histogram类似terms，也是进行bucket分组操作的，是根据一个field，实现数据区间分组。")]),s._v(" "),a("p",[s._v("如：以100万为一个范围，统计不同范围内车辆的销售量和平均价格。那么使用histogram的聚合的时候，field指定价格字段price。区间范围是100万-interval ： 1000000。这个时候ES会将price价格区间划分为： [0, 1000000), [1000000, 2000000), [2000000, 3000000)等，依次类推。在划分区间的同时，histogram会类似terms进行数据数量的统计（count），可以通过嵌套aggs对聚合分组后的组内数据做再次聚合分析。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"aggs": {\n"histogram_by_price": {\n"histogram": {\n"field": "price",\n"interval": 1000000\n},\n"aggs": {\n"avg_by_price": {\n"avg": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[a("strong",[s._v("7、date_histogram区间分组")])]),s._v(" "),a("p",[s._v("date_histogram可以对date类型的field执行区间聚合分组，如每月销量，每年销量等。")]),s._v(" "),a("p",[s._v("如：以月为单位，统计不同月份汽车的销售数量及销售总金额。这个时候可以使用date_histogram实现聚合分组，其中field来指定用于聚合分组的字段，interval指定区间范围（可选值有：year、quarter、month、week、day、hour、minute、second），format指定日期格式化，min_doc_count指定每个区间的最少document（如果不指定，默认为0，当区间范围内没有document时，也会显示bucket分组），extended_bounds指定起始时间和结束时间（如果不指定，默认使用字段中日期最小值所在范围和最大值所在范围为起始和结束时间）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('ES7.x之前的语法\nGET /cars/_search\n{\n"aggs": {\n"histogram_by_date" : {\n"date_histogram": {\n"field": "sold_date",\n"interval": "month",\n"format": "yyyy-MM-dd",\n"min_doc_count": 1,\n"extended_bounds": {\n"min": "2021-01-01",\n"max": "2022-12-31"\n}\n},\n"aggs": {\n"sum_by_price": {\n"sum": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n执行后出现\n#! Deprecation: [interval] on [date_histogram] is deprecated, use [fixed_interval] or [calendar_interval] in the future.\n\n7.X之后\nGET /cars/_search\n{\n"aggs": {\n"histogram_by_date" : {\n"date_histogram": {\n"field": "sold_date",\n"calendar_interval": "month",\n"format": "yyyy-MM-dd",\n"min_doc_count": 1,\n"extended_bounds": {\n"min": "2021-01-01",\n"max": "2022-12-31"\n}\n},\n"aggs": {\n"sum_by_price": {\n"sum": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])]),a("p",[a("strong",[s._v("8、_global bucket")])]),s._v(" "),a("p",[s._v("在聚合统计数据的时候，有些时候需要对比部分数据和总体数据。")]),s._v(" "),a("p",[s._v("如：统计某品牌车辆平均价格和所有车辆平均价格。global是用于定义一个全局bucket，这个bucket会忽略query的条件，检索所有document进行对应的聚合统计。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"size" : 0,\n"query": {\n"match": {\n"brand": "大众"\n}\n},\n"aggs": {\n"volkswagen_of_avg_price": {\n"avg": {\n"field": "price"\n}\n},\n"all_avg_price" : {\n"global": {},\n"aggs": {\n"all_of_price": {\n"avg": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[a("strong",[s._v("9、aggs+order")])]),s._v(" "),a("p",[s._v("对聚合统计数据进行排序。")]),s._v(" "),a("p",[s._v("如：统计每个品牌的汽车销量和销售总额，按照销售总额的降序排列。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"aggs": {\n"group_of_brand": {\n"terms": {\n"field": "brand",\n"order": {\n"sum_of_price": "desc"\n}\n},\n"aggs": {\n"sum_of_price": {\n"sum": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("如果有多层aggs，执行下钻聚合的时候，也可以根据最内层聚合数据执行排序。")]),s._v(" "),a("p",[s._v("如：统计每个品牌中每种颜色车辆的销售总额，并根据销售总额降序排列。"),a("strong",[s._v("这就像SQL中的分组排序一样，只能组内数据排序，而不能跨组实现排序。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"aggs": {\n"group_by_brand": {\n"terms": {\n"field": "brand"\n},\n"aggs": {\n"group_by_color": {\n"terms": {\n"field": "color",\n"order": {\n"sum_of_price": "desc"\n}\n},\n"aggs": {\n"sum_of_price": {\n"sum": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[a("strong",[s._v("10、search+aggs")])]),s._v(" "),a("p",[s._v("聚合类似SQL中的group by子句，search类似SQL中的where子句。在ES中是完全可以将search和aggregations整合起来，执行相对更复杂的搜索统计。")]),s._v(" "),a("p",[s._v("如：统计某品牌车辆每个季度的销量和销售额。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"query": {\n"match": {\n"brand": "大众"\n}\n},\n"aggs": {\n"histogram_by_date": {\n"date_histogram": {\n"field": "sold_date",\n"calendar_interval": "quarter",\n"min_doc_count": 1\n},\n"aggs": {\n"sum_by_price": {\n"sum": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("​")]),s._v(" "),a("p",[a("strong",[s._v("11、filter+aggs")])]),s._v(" "),a("p",[s._v("在ES中，filter也可以和aggs组合使用，实现相对复杂的过滤聚合分析。")]),s._v(" "),a("p",[s._v("如：统计10万~50万之间的车辆的平均价格。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"query": {\n"constant_score": {\n"filter": {\n"range": {\n"price": {\n"gte": 100000,\n"lte": 500000\n}\n}\n}\n}\n},\n"aggs": {\n"avg_by_price": {\n"avg": {\n"field": "price"\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[a("strong",[s._v("12、聚合中使用filter")])]),s._v(" "),a("p",[s._v("filter也可以使用在aggs句法中，filter的范围决定了其过滤的范围。")]),s._v(" "),a("p",[s._v("如：统计某品牌汽车最近一年的销售总额。将filter放在aggs内部，代表这个过滤器只对query搜索得到的结果执行filter过滤。如果filter放在aggs外部，过滤器则会过滤所有的数据。")]),s._v(" "),a("ul",[a("li",[s._v("12M/M 表示 12 个月。")]),s._v(" "),a("li",[s._v("1y/y 表示 1年。")]),s._v(" "),a("li",[s._v("d 表示天")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('GET /cars/_search\n{\n"query": {\n"match": {\n"brand": "大众"\n}\n},\n"aggs": {\n"count_last_year": {\n"filter": {\n"range": {\n"sold_date": {\n"gte": "now-12M"\n}\n}\n},\n"aggs": {\n"sum_of_price_last_year": {\n"sum": {\n"field": "price"\n}\n}\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h2",{attrs:{id:"master选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master选举"}},[s._v("#")]),s._v(" master选举")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/elastic/1.png",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"附录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[s._v("#")]),s._v(" 附录")]),s._v(" "),a("h3",{attrs:{id:"cat命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cat命令"}},[s._v("#")]),s._v(" Cat命令")]),s._v(" "),a("p",[s._v("/_cat/allocation    #查看单节点的shard分配整体情况")]),s._v(" "),a("p",[s._v("/_cat/shards     #查看各shard的详细情况")]),s._v(" "),a("p",[s._v("/_cat/shards/{index}   #查看指定分片的详细情况")]),s._v(" "),a("p",[s._v("/_cat/master     #查看master节点信息")]),s._v(" "),a("p",[s._v("/_cat/nodes      #查看所有节点信息")]),s._v(" "),a("p",[s._v("/_cat/indices     #查看集群中所有index的详细信息")]),s._v(" "),a("p",[s._v("/_cat/indices/{index}   #查看集群中指定index的详细信息")]),s._v(" "),a("p",[s._v("/_cat/segments    #查看各index的segment详细信息,包括segment名, 所属shard, 内存(磁盘)占用大小, 是否刷盘")]),s._v(" "),a("p",[s._v("/_cat/segments/{index}#查看指定index的segment详细信息")]),s._v(" "),a("p",[s._v("/_cat/count      #查看当前集群的doc数量")]),s._v(" "),a("p",[s._v("/_cat/count/{index}  #查看指定索引的doc数量")]),s._v(" "),a("p",[s._v("/_cat/recovery     #查看集群内每个shard的recovery过程.调整replica。")]),s._v(" "),a("p",[s._v("/_cat/recovery/{index}#查看指定索引shard的recovery过程")]),s._v(" "),a("p",[s._v("/_cat/health     #查看集群当前状态：红、黄、绿")]),s._v(" "),a("p",[s._v("/_cat/pending_tasks  #查看当前集群的pending task")]),s._v(" "),a("p",[s._v("/_cat/aliases     #查看集群中所有alias信息,路由配置等")]),s._v(" "),a("p",[s._v("/_cat/aliases/{alias} #查看指定索引的alias信息")]),s._v(" "),a("p",[s._v("/_cat/thread_pool   #查看集群各节点内部不同类型的threadpool的统计信息,")]),s._v(" "),a("p",[s._v("/_cat/plugins     #查看集群各个节点上的plugin信息")]),s._v(" "),a("p",[s._v("/_cat/fielddata    #查看当前集群各个节点的fielddata内存使用情况")]),s._v(" "),a("p",[s._v("/_cat/fielddata/{fields}   #查看指定field的内存使用情况,里面传field属性对应的值")]),s._v(" "),a("p",[s._v("/_cat/nodeattrs       #查看单节点的自定义属性")]),s._v(" "),a("p",[s._v("/_cat/repositories      #输出集群中注册快照存储库")]),s._v(" "),a("p",[s._v("/_cat/templates       #输出当前正在存在的模板信息")]),s._v(" "),a("h2",{attrs:{id:"第三节-elasticsearch原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三节-elasticsearch原理"}},[s._v("#")]),s._v(" 第三节 ElasticSearch原理")]),s._v(" "),a("h3",{attrs:{id:"_3-1-解析es的分布式架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-解析es的分布式架构"}},[s._v("#")]),s._v(" 3.1 解析es的分布式架构")]),s._v(" "),a("h4",{attrs:{id:"_3-1-1-分布式架构的透明隐藏特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-分布式架构的透明隐藏特性"}},[s._v("#")]),s._v(" 3.1.1 分布式架构的透明隐藏特性")]),s._v(" "),a("p",[s._v("ElasticSearch是一个分布式系统，隐藏了复杂的处理机制")]),s._v(" "),a("p",[s._v("分片机制：我们不用关心数据是按照什么机制分片的、最后放入到哪个分片中")]),s._v(" "),a("p",[s._v("分片的副本：")]),s._v(" "),a("p",[s._v("集群发现机制(cluster discovery)：比如当前我们启动了一个es进程，当启动了第二个es进程时，这个进程作为一个node自动就发现了集群，并且加入了进去")]),s._v(" "),a("p",[s._v("shard负载均衡：比如现在有10shard，集群中有3个节点，es会进行均衡的进行分配，以保持每个节点均衡的负载请求")]),s._v(" "),a("p",[s._v("请求路由")]),s._v(" "),a("h4",{attrs:{id:"_3-1-2-扩容机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-扩容机制"}},[s._v("#")]),s._v(" 3.1.2 扩容机制")]),s._v(" "),a("p",[s._v("垂直扩容：购置新的机器，替换已有的机器")]),s._v(" "),a("p",[s._v("水平扩容：直接增加机器")]),s._v(" "),a("h4",{attrs:{id:"_3-1-3-rebalance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-rebalance"}},[s._v("#")]),s._v(" 3.1.3 rebalance")]),s._v(" "),a("p",[s._v("增加或减少节点时会自动均衡")]),s._v(" "),a("h4",{attrs:{id:"_3-1-4-master节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-master节点"}},[s._v("#")]),s._v(" 3.1.4 master节点")]),s._v(" "),a("p",[s._v("主节点的主要职责是和集群操作相关的内容，如创建或删除索引，跟踪哪些节点是群集的一部分，并决定哪些分片分配给相关的节点。稳定的主节点对集群的健康是非常重要的。")]),s._v(" "),a("h4",{attrs:{id:"_3-1-5-节点对等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-节点对等"}},[s._v("#")]),s._v(" 3.1.5 节点对等")]),s._v(" "),a("p",[s._v("每个节点都能接收请求")]),s._v(" "),a("p",[s._v("每个节点接收到请求后都能把该请求路由到有相关数据的其它节点上")]),s._v(" "),a("p",[s._v("接收原始请求的节点负责采集数据并返回给客户端")]),s._v(" "),a("h3",{attrs:{id:"_3-2-分片和副本机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-分片和副本机制"}},[s._v("#")]),s._v(" 3.2 分片和副本机制")]),s._v(" "),a("p",[s._v("1.index包含多个shard")]),s._v(" "),a("p",[s._v("2.每个shard都是一个最小工作单元，承载部分数据；每个shard都是一个lucene实例，有完整的建立索引和处理请求的能力")]),s._v(" "),a("p",[s._v("3.增减节点时，shard会自动在nodes中负载均衡")]),s._v(" "),a("p",[s._v("4.primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard")]),s._v(" "),a("p",[s._v("5.replica shard是primary shard的副本，负责容错，以及承担读请求负载")]),s._v(" "),a("p",[s._v("6.primary shard的数量在创建索引的时候就固定了，replica shard的数量可以随时修改")]),s._v(" "),a("p",[s._v("7.primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard")]),s._v(" "),a("p",[s._v("8.primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上")]),s._v(" "),a("h3",{attrs:{id:"_3-3-单节点环境下创建索引分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-单节点环境下创建索引分析"}},[s._v("#")]),s._v(" 3.3 单节点环境下创建索引分析")]),s._v(" "),a("p",[s._v("PUT /myindex")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"settings" : {')]),s._v(" "),a("p",[s._v('​      "number_of_shards" : 3,')]),s._v(" "),a("p",[s._v('​      "number_of_replicas" : 1')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的（一个shard的副本replica，他们两个是不能在同一个节点的）。集群可以正常工作，但是一旦出现节点宕机，数据全部丢失，而且集群不可用，无法接收任何请求。")]),s._v(" "),a("h3",{attrs:{id:"_3-4-两个节点环境下创建索引分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-两个节点环境下创建索引分析"}},[s._v("#")]),s._v(" 3.4 两个节点环境下创建索引分析")]),s._v(" "),a("p",[s._v("将3个primary shard分配到一个node上去，另外3个replica shard分配到另一个节点上")]),s._v(" "),a("p",[s._v("primary shard 和replica shard 保持同步")]),s._v(" "),a("p",[s._v("primary shard 和replica shard 都可以处理客户端的读请求")]),s._v(" "),a("h3",{attrs:{id:"_3-5-水平扩容的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-水平扩容的过程"}},[s._v("#")]),s._v(" 3.5 水平扩容的过程")]),s._v(" "),a("p",[s._v("1.扩容后primary shard和replica shard会自动的负载均衡")]),s._v(" "),a("p",[s._v("2.扩容后每个节点上的shard会减少，那么分配给每个shard的CPU，内存，IO资源会更多，性能提高")]),s._v(" "),a("p",[s._v("3.扩容的极限，如果有6个shard，扩容的极限就是6个节点，每个节点上一个shard，如果想超出扩容的极限，比如说扩容到9个节点，那么可以增加replica shard的个数")]),s._v(" "),a("p",[s._v("4.6个shard，3个节点，最多能承受几个节点所在的服务器宕机？(容错性)")]),s._v(" "),a("p",[s._v("任何一台服务器宕机都会丢失部分数据")]),s._v(" "),a("p",[s._v("为了提高容错性，增加shard的个数：")]),s._v(" "),a("p",[s._v("9个shard，(3个primary shard，6个replicashard)，这样就能容忍最多两台服务器宕机了")]),s._v(" "),a("p",[s._v("总结：扩容是为了提高系统的吞吐量，同时也要考虑容错性，也就是让尽可能多的服务器宕机还能保证数据不丢失")]),s._v(" "),a("h3",{attrs:{id:"_3-6elasticsearch的容错机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6elasticsearch的容错机制"}},[s._v("#")]),s._v(" 3.6ElasticSearch的容错机制")]),s._v(" "),a("p",[s._v("以9个shard，3个节点为例：")]),s._v(" "),a("p",[s._v("1.如果master node 宕机，此时不是所有的primary shard都是Active status，所以此时的集群状态是red。")]),s._v(" "),a("p",[s._v("容错处理的第一步:是选举一台服务器作为master")]),s._v(" "),a("p",[s._v("容错处理的第二步:新选举出的master会把挂掉的primary shard的某个replica shard 提升为primary shard,此时集群的状态为yellow，因为少了一个replica shard，并不是所有的replica shard都是active status")]),s._v(" "),a("p",[s._v("容错处理的第三步：重启故障机，新master会把所有的副本都复制一份到该节点上，（同步一下宕机后发生的修改），此时集群的状态为green，因为所有的primary shard和replica shard都是Active status")]),s._v(" "),a("h3",{attrs:{id:"_3-7文档的核心元数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7文档的核心元数据"}},[s._v("#")]),s._v(" 3.7文档的核心元数据")]),s._v(" "),a("p",[s._v("1._index:")]),s._v(" "),a("p",[s._v("说明了一个文档存储在哪个索引中")]),s._v(" "),a("p",[s._v("同一个索引下存放的是相似的文档(文档的field多数是相同的)")]),s._v(" "),a("p",[s._v("索引名必须是小写的，不能以下划线开头，不能包括逗号")]),s._v(" "),a("p",[s._v("2._type:")]),s._v(" "),a("p",[s._v("表示文档属于索引中的哪个类型")]),s._v(" "),a("p",[s._v("一个索引下只能有一个type")]),s._v(" "),a("p",[s._v("类型名可以是大写也可以是小写的，不能以下划线开头，不能包括逗号")]),s._v(" "),a("p",[s._v("3._id:")]),s._v(" "),a("p",[s._v("文档的唯一标识，和索引，类型组合在一起唯一标识了一个文档")]),s._v(" "),a("p",[s._v("可以手动指定值，也可以由es来生成这个值")]),s._v(" "),a("h3",{attrs:{id:"_3-8-文档id生成方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-文档id生成方式"}},[s._v("#")]),s._v(" 3.8 文档id生成方式")]),s._v(" "),a("p",[s._v("1.手动指定")]),s._v(" "),a("p",[s._v("put /index/type/66")]),s._v(" "),a("p",[s._v("通常是把其它系统的已有数据导入到es时")]),s._v(" "),a("p",[s._v("2.由es生成id值")]),s._v(" "),a("p",[s._v("post /index/type")]),s._v(" "),a("p",[s._v("es生成的id长度为20个字符，使用的是base64编码，URL安全，使用的是GUID算法，分布式下并发生成id值时不会冲突")]),s._v(" "),a("h3",{attrs:{id:"_3-9-source元数据分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-source元数据分析"}},[s._v("#")]),s._v(" 3.9 _source元数据分析")]),s._v(" "),a("p",[s._v("其实就是我们在添加文档时request body中的内容")]),s._v(" "),a("p",[s._v("指定返回的结果中含有哪些字段：")]),s._v(" "),a("p",[s._v("get /index/type/1?_source=name")]),s._v(" "),a("h3",{attrs:{id:"_3-10-改变文档内容原理解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-改变文档内容原理解析"}},[s._v("#")]),s._v(" 3.10 改变文档内容原理解析")]),s._v(" "),a("p",[s._v("替换方式：")]),s._v(" "),a("p",[s._v("PUT /lib/user/4")]),s._v(" "),a("p",[s._v('{ "first_name" : "Jane",')]),s._v(" "),a("p",[s._v('"last_name" :   "Lucy",')]),s._v(" "),a("p",[s._v('"age" :         24,')]),s._v(" "),a("p",[s._v('"about" :       "I like to collect rock albums",')]),s._v(" "),a("p",[s._v('"interests":  [ "music" ]')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("修改方式(partial update)：")]),s._v(" "),a("p",[s._v("POST /lib/user/2/_update")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "doc":{')]),s._v(" "),a("p",[s._v('​       "age":26')]),s._v(" "),a("p",[s._v("​     }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("删除文档：标记为deleted，随着数据量的增加，es会选择合适的时间删除掉")]),s._v(" "),a("h3",{attrs:{id:"_3-11-基于groovy脚本执行partial-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-基于groovy脚本执行partial-update"}},[s._v("#")]),s._v(" 3.11 基于groovy脚本执行partial update")]),s._v(" "),a("p",[s._v("es有内置的脚本支持，可以基于groovy脚本实现复杂的操作")]),s._v(" "),a("p",[s._v("1.修改年龄")]),s._v(" "),a("p",[s._v("POST /lib/user/4/_update")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"script": "ctx._source.age+=1"')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("2.修改名字")]),s._v(" "),a("p",[s._v("POST /lib/user/4/_update")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"script": "ctx._source.last_name+=\'hehe\'"')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("3.添加爱好")]),s._v(" "),a("p",[s._v("POST /lib/user/4/_update")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"script": {')]),s._v(" "),a("p",[s._v('​    "source": "ctx._source.interests.add(params.tag)",')]),s._v(" "),a("p",[s._v('​    "params": {')]),s._v(" "),a("p",[s._v('​      "tag":"picture"')]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("4.删除爱好")]),s._v(" "),a("p",[s._v("POST /lib/user/4/_update")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"script": {')]),s._v(" "),a("p",[s._v('​    "source": "ctx._source.interests.remove(ctx._source.interests.indexOf(params.tag))",')]),s._v(" "),a("p",[s._v('​    "params": {')]),s._v(" "),a("p",[s._v('​      "tag":"picture"')]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("5.删除文档")]),s._v(" "),a("p",[s._v("POST /lib/user/4/_update")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"script": {')]),s._v(" "),a("p",[s._v("​    \"source\": \"ctx.op=ctx._source.age==params.count?'delete':'none'\",")]),s._v(" "),a("p",[s._v('​    "params": {')]),s._v(" "),a("p",[s._v('​        "count":29')]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("6.upsert")]),s._v(" "),a("p",[s._v("POST /lib/user/4/_update")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"script": "ctx._source.age += 1",')]),s._v(" "),a("p",[s._v('"upsert": {')]),s._v(" "),a("p",[s._v('​     "first_name" : "Jane",')]),s._v(" "),a("p",[s._v('​     "last_name" :   "Lucy",')]),s._v(" "),a("p",[s._v('​     "age" :  20,')]),s._v(" "),a("p",[s._v('​     "about" :       "I like to collect rock albums",')]),s._v(" "),a("p",[s._v('​     "interests":  [ "music" ]')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("h3",{attrs:{id:"_3-12-partial-update-处理并发冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-partial-update-处理并发冲突"}},[s._v("#")]),s._v(" 3.12 partial update 处理并发冲突")]),s._v(" "),a("p",[s._v("使用的是乐观锁:_version")]),s._v(" "),a("p",[s._v("retry_on_conflict:")]),s._v(" "),a("p",[s._v("POST /lib/user/4/_update?retry_on_conflict=3")]),s._v(" "),a("p",[s._v("重新获取文档数据和版本信息进行更新，不断的操作，最多操作的次数就是retry_on_conflict的值")]),s._v(" "),a("h3",{attrs:{id:"_3-13-文档数据路由原理解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-13-文档数据路由原理解析"}},[s._v("#")]),s._v(" 3.13 文档数据路由原理解析")]),s._v(" "),a("p",[s._v("1.文档路由到分片上：")]),s._v(" "),a("p",[s._v("一个索引由多个分片构成，当添加(删除，修改)一个文档时，es就需要决定这个文档存储在哪个分片上，这个过程就称为数据路由(routing)")]),s._v(" "),a("p",[s._v("2.路由算法：")]),s._v(" "),a("p",[s._v("​     shard=hash(routing) % number_of_pirmary_shards")]),s._v(" "),a("p",[s._v("示例：一个索引，3个primary shard")]),s._v(" "),a("p",[s._v("(1)每次增删改查时，都有一个routing值，默认是文档的_id的值")]),s._v(" "),a("p",[s._v("(2)对这个routing值使用哈希函数进行计算")]),s._v(" "),a("p",[s._v("(3)计算出的值再和主分片个数取余数")]),s._v(" "),a("p",[s._v("余数肯定在0---（number_of_pirmary_shards-1）之间，文档就在对应的shard上")]),s._v(" "),a("p",[s._v("routing值默认是文档的_id的值，也可以手动指定一个值，手动指定对于负载均衡以及提高批量读取的性能都有帮助")]),s._v(" "),a("p",[s._v("3.primary shard个数一旦确定就不能修改了")]),s._v(" "),a("h3",{attrs:{id:"_3-14-文档增删改内部原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-14-文档增删改内部原理"}},[s._v("#")]),s._v(" 3.14 文档增删改内部原理")]),s._v(" "),a("p",[s._v("1:发送增删改请求时，可以选择任意一个节点，该节点就成了协调节点(coordinating node)")]),s._v(" "),a("p",[s._v("2.协调节点使用路由算法进行路由，然后将请求转到primary shard所在节点，该节点处理请求，并把数据同步到它的replica shard")]),s._v(" "),a("p",[s._v("3.协调节点对客户端做出响应")]),s._v(" "),a("h3",{attrs:{id:"_3-15-写一致性原理和quorum机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-15-写一致性原理和quorum机制"}},[s._v("#")]),s._v(" 3.15 写一致性原理和quorum机制")]),s._v(" "),a("p",[s._v("1.任何一个增删改操作都可以跟上一个参数")]),s._v(" "),a("p",[s._v("consistency")]),s._v(" "),a("p",[s._v("可以给该参数指定的值：")]),s._v(" "),a("p",[s._v("one: (primary shard)只要有一个primary shard是活跃的就可以执行")]),s._v(" "),a("p",[s._v("all: (all shard)所有的primary shard和replica shard都是活跃的才能执行")]),s._v(" "),a("p",[s._v("quorum: (default) 默认值，大部分shard是活跃的才能执行 （例如共有6个shard，至少有3个shard是活跃的才能执行写操作）")]),s._v(" "),a("p",[s._v("2.quorum机制：多数shard都是可用的，")]),s._v(" "),a("p",[s._v("int((primary+number_of_replica)/2)+1")]),s._v(" "),a("p",[s._v("例如：3个primary shard，1个replica")]),s._v(" "),a("p",[s._v("int((3+1)/2)+1=3")]),s._v(" "),a("p",[s._v("至少3个shard是活跃的")]),s._v(" "),a("p",[s._v("注意：可能出现shard不能分配齐全的情况")]),s._v(" "),a("p",[s._v("比如：1个primary shard,1个replica")]),s._v(" "),a("p",[s._v("int((1+1)/2)+1=2")]),s._v(" "),a("p",[s._v("但是如果只有一个节点，因为primary shard和replica shard不能在同一个节点上，所以仍然不能执行写操作")]),s._v(" "),a("p",[s._v("再举例：1个primary shard,3个replica,2个节点")]),s._v(" "),a("p",[s._v("int((1+3)/2)+1=3")]),s._v(" "),a("p",[s._v("最后:当活跃的shard的个数没有达到要求时，")]),s._v(" "),a("p",[s._v("es默认会等待一分钟，如果在等待的期间活跃的shard的个数没有增加，则显示timeout")]),s._v(" "),a("p",[s._v("put /index/type/id?timeout=60s")]),s._v(" "),a("h3",{attrs:{id:"_3-16-文档查询内部原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-16-文档查询内部原理"}},[s._v("#")]),s._v(" 3.16 文档查询内部原理")]),s._v(" "),a("p",[s._v("第一步：查询请求发给任意一个节点，该节点就成了coordinating node，该节点使用路由算法算出文档所在的primary shard")]),s._v(" "),a("p",[s._v("第二步：协调节点把请求转发给primary shard也可以转发给replica shard(使用轮询调度算法(Round-Robin Scheduling，把请求平均分配至primary shard 和replica shard)")]),s._v(" "),a("p",[s._v("第三步：处理请求的节点把结果返回给协调节点，协调节点再返回给应用程序")]),s._v(" "),a("p",[s._v("特殊情况：请求的文档还在建立索引的过程中，primary shard上存在，但replica shar上不存在，但是请求被转发到了replica shard上，这时就会提示找不到文档")]),s._v(" "),a("h3",{attrs:{id:"_3-17-bulk批量操作的json格式解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-17-bulk批量操作的json格式解析"}},[s._v("#")]),s._v(" 3.17 bulk批量操作的json格式解析")]),s._v(" "),a("p",[s._v("bulk的格式：")]),s._v(" "),a("p",[s._v("{action:{metadata}}n")]),s._v(" "),a("p",[s._v("{requstbody}\\n")]),s._v(" "),a("p",[s._v("为什么不使用如下格式：")]),s._v(" "),a("p",[s._v("[{")]),s._v(" "),a("p",[s._v('"action": {')]),s._v(" "),a("p",[s._v("},")]),s._v(" "),a("p",[s._v('"data": {')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}]")]),s._v(" "),a("p",[s._v("这种方式可读性好，但是内部处理就麻烦了：")]),s._v(" "),a("p",[s._v("1.将json数组解析为JSONArray对象，在内存中就需要有一份json文本的拷贝，另外还有一个JSONArray对象。")]),s._v(" "),a("p",[s._v("2.解析json数组里的每个json，对每个请求中的document进行路由")]),s._v(" "),a("p",[s._v("3.为路由到同一个shard上的多个请求，创建一个请求数组")]),s._v(" "),a("p",[s._v("4.将这个请求数组序列化")]),s._v(" "),a("p",[s._v("5.将序列化后的请求数组发送到对应的节点上去")]),s._v(" "),a("p",[s._v("耗费更多内存，增加java虚拟机开销")]),s._v(" "),a("p",[s._v("1.不用将其转换为json对象，直接按照换行符切割json，内存中不需要json文本的拷贝")]),s._v(" "),a("p",[s._v("2.对每两个一组的json，读取meta，进行document路由")]),s._v(" "),a("p",[s._v("3.直接将对应的json发送到node上去")]),s._v(" "),a("h3",{attrs:{id:"_3-18-查询结果分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-18-查询结果分析"}},[s._v("#")]),s._v(" 3.18 查询结果分析")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"took": 419,')]),s._v(" "),a("p",[s._v('"timed_out": false,')]),s._v(" "),a("p",[s._v('"_shards": {')]),s._v(" "),a("p",[s._v('​    "total": 3,')]),s._v(" "),a("p",[s._v('​    "successful": 3,')]),s._v(" "),a("p",[s._v('​    "skipped": 0,')]),s._v(" "),a("p",[s._v('​    "failed": 0')]),s._v(" "),a("p",[s._v("},")]),s._v(" "),a("p",[s._v('"hits": {')]),s._v(" "),a("p",[s._v('​    "total": 3,')]),s._v(" "),a("p",[s._v('​    "max_score": 0.6931472,')]),s._v(" "),a("p",[s._v('​    "hits": [')]),s._v(" "),a("p",[s._v("​      {")]),s._v(" "),a("p",[s._v('​        "_index": "lib3",')]),s._v(" "),a("p",[s._v('​        "_type": "user",')]),s._v(" "),a("p",[s._v('​        "_id": "3",')]),s._v(" "),a("p",[s._v('​        "_score": 0.6931472,')]),s._v(" "),a("p",[s._v('​        "_source": {')]),s._v(" "),a("p",[s._v('​          "address": "bei jing hai dian qu qing he zhen",')]),s._v(" "),a("p",[s._v('​          "name": "lisi"')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​      },")]),s._v(" "),a("p",[s._v("​      {")]),s._v(" "),a("p",[s._v('​        "_index": "lib3",')]),s._v(" "),a("p",[s._v('​        "_type": "user",')]),s._v(" "),a("p",[s._v('​        "_id": "2",')]),s._v(" "),a("p",[s._v('​        "_score": 0.47000363,')]),s._v(" "),a("p",[s._v('​        "_source": {')]),s._v(" "),a("p",[s._v('​          "address": "bei jing hai dian qu qing he zhen",')]),s._v(" "),a("p",[s._v('​          "name": "zhaoming"')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​      }")]),s._v(" "),a("p",[s._v("​")]),s._v(" "),a("p",[s._v("took：查询耗费的时间，单位是毫秒")]),s._v(" "),a("p",[s._v("_shards：共请求了多少个shard")]),s._v(" "),a("p",[s._v("total：查询出的文档总个数")]),s._v(" "),a("p",[s._v("max_score： 本次查询中，相关度分数的最大值，文档和此次查询的匹配度越高，_score的值越大，排位越靠前")]),s._v(" "),a("p",[s._v("hits：默认查询前10个文档")]),s._v(" "),a("p",[s._v("timed_out：")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search?timeout=10ms")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "_source": ["address","name"],')]),s._v(" "),a("p",[s._v('​    "query": {')]),s._v(" "),a("p",[s._v('​        "match": {')]),s._v(" "),a("p",[s._v('​            "interests": "changge"')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("h3",{attrs:{id:"_3-19-多index-多type查询模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-19-多index-多type查询模式"}},[s._v("#")]),s._v(" 3.19 多index，多type查询模式")]),s._v(" "),a("p",[s._v("GET _search")]),s._v(" "),a("p",[s._v("GET /lib/_search")]),s._v(" "),a("p",[s._v("GET /lib,lib3/_search")]),s._v(" "),a("p",[s._v("GET /*3,*4/_search")]),s._v(" "),a("p",[s._v("GET /lib/user/_search")]),s._v(" "),a("p",[s._v("GET /lib,lib4/user,items/_search")]),s._v(" "),a("p",[s._v("GET /_all/_search")]),s._v(" "),a("p",[s._v("GET /_all/user,items/_search")]),s._v(" "),a("h3",{attrs:{id:"_3-20-分页查询中的deep-paging问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-20-分页查询中的deep-paging问题"}},[s._v("#")]),s._v(" 3.20 分页查询中的deep paging问题")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "from":0,')]),s._v(" "),a("p",[s._v('​    "size":2,')]),s._v(" "),a("p",[s._v('​    "query":{')]),s._v(" "),a("p",[s._v('​        "terms":{')]),s._v(" "),a("p",[s._v('​            "interests": ["hejiu","changge"]')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("GET /_search?from=0&size=3")]),s._v(" "),a("p",[s._v("deep paging:查询的很深，比如一个索引有三个primary shard，分别存储了6000条数据，我们要得到第100页的数据(每页10条)，类似这种情况就叫deep paging")]),s._v(" "),a("p",[s._v("如何得到第100页的10条数据？")]),s._v(" "),a("p",[s._v("在每个shard中搜索990到999这10条数据，然后用这30条数据排序，排序之后取10条数据就是要搜索的数据，这种做法是错的，因为3个shard中的数据的_score分数不一样，可能这某一个shard中第一条数据的_score分数比另一个shard中第1000条都要高，所以在每个shard中搜索990到999这10条数据然后排序的做法是不正确的。")]),s._v(" "),a("p",[s._v("正确的做法是每个shard把0到999条数据全部搜索出来（按排序顺序），然后全部返回给coordinate node，由coordinate node按_score分数排序后，取出第100页的10条数据，然后返回给客户端。")]),s._v(" "),a("p",[s._v("deep paging性能问题")]),s._v(" "),a("p",[s._v("1.耗费网络带宽，因为搜索过深的话，各shard要把数据传送给coordinate node，这个过程是有大量数据传递的，消耗网络，")]),s._v(" "),a("p",[s._v("2.消耗内存，各shard要把数据传送给coordinate node，这个传递回来的数据，是被coordinate node保存在内存中的，这样会大量消耗内存。")]),s._v(" "),a("p",[s._v("3.消耗cpu coordinate node要把传回来的数据进行排序，这个排序过程很消耗cpu.")]),s._v(" "),a("p",[s._v("鉴于deep paging的性能问题，所以应尽量减少使用。")]),s._v(" "),a("h3",{attrs:{id:"_3-21-query-string查询及copy-to解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-21-query-string查询及copy-to解析"}},[s._v("#")]),s._v(" 3.21 query string查询及copy_to解析")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search?q=interests:changge")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search?q=+interests:changge")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search?q=-interests:changge")]),s._v(" "),a("p",[s._v("copy_to字段是把其它字段中的值，以空格为分隔符组成一个大字符串，然后被分析和索引，但是不存储，也就是说它能被查询，但不能被取回显示。")]),s._v(" "),a("p",[s._v("注意:copy_to指向的字段字段类型要为：text")]),s._v(" "),a("p",[s._v("当没有指定field时，就会从copy_to字段中查询")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search?q=changge")]),s._v(" "),a("h3",{attrs:{id:"_3-22字符串排序问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-22字符串排序问题"}},[s._v("#")]),s._v(" 3.22字符串排序问题")]),s._v(" "),a("p",[s._v("对一个字符串类型的字段进行排序通常不准确，因为已经被分词成多个词条了")]),s._v(" "),a("p",[s._v("解决方式：对字段索引两次，一次索引分词（用于搜索），一次索引不分词(用于排序)")]),s._v(" "),a("p",[s._v("GET /lib3/_search")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"query": {')]),s._v(" "),a("p",[s._v('​    "match_all": {}')]),s._v(" "),a("p",[s._v("},")]),s._v(" "),a("p",[s._v('"sort": [')]),s._v(" "),a("p",[s._v("​    {")]),s._v(" "),a("p",[s._v('​      "interests": {')]),s._v(" "),a("p",[s._v('​        "order": "desc"')]),s._v(" "),a("p",[s._v("​      }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("]")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"query": {')]),s._v(" "),a("p",[s._v('​    "match_all": {}')]),s._v(" "),a("p",[s._v("},")]),s._v(" "),a("p",[s._v('"sort": [')]),s._v(" "),a("p",[s._v("​    {")]),s._v(" "),a("p",[s._v('​      "interests.raw": {')]),s._v(" "),a("p",[s._v('​        "order": "asc"')]),s._v(" "),a("p",[s._v("​      }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("]")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("DELETE lib3")]),s._v(" "),a("p",[s._v("PUT /lib3")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "settings":{')]),s._v(" "),a("p",[s._v('​        "number_of_shards" : 3,')]),s._v(" "),a("p",[s._v('​        "number_of_replicas" : 0')]),s._v(" "),a("p",[s._v("​      },")]),s._v(" "),a("p",[s._v('​     "mappings":{')]),s._v(" "),a("p",[s._v('​      "user":{')]),s._v(" "),a("p",[s._v('​        "properties":{')]),s._v(" "),a("p",[s._v('​            "name": {"type":"text"},')]),s._v(" "),a("p",[s._v('​            "address": {"type":"text"},')]),s._v(" "),a("p",[s._v('​            "age": {"type":"integer"},')]),s._v(" "),a("p",[s._v('​            "birthday": {"type":"date"},')]),s._v(" "),a("p",[s._v('​            "interests": {')]),s._v(" "),a("p",[s._v('​                "type":"text",')]),s._v(" "),a("p",[s._v('​                "fields": {')]),s._v(" "),a("p",[s._v('​                  "raw":{')]),s._v(" "),a("p",[s._v('​                     "type": "keyword"')]),s._v(" "),a("p",[s._v("​                   }")]),s._v(" "),a("p",[s._v("​                },")]),s._v(" "),a("p",[s._v('​                "fielddata": true')]),s._v(" "),a("p",[s._v("​             }")]),s._v(" "),a("p",[s._v("​          }")]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​     }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("h3",{attrs:{id:"_3-23-如何计算相关度分数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-23-如何计算相关度分数"}},[s._v("#")]),s._v(" 3.23 如何计算相关度分数")]),s._v(" "),a("p",[s._v("使用的是TF/IDF算法(Term Frequency&Inverse Document Frequency)")]),s._v(" "),a("p",[s._v("1.Term Frequency:我们查询的文本中的词条在document本中出现了多少次，出现次数越多，相关度越高")]),s._v(" "),a("p",[s._v("搜索内容： hello world")]),s._v(" "),a("p",[s._v("Hello，I love china.")]),s._v(" "),a("p",[s._v("Hello world,how are you!")]),s._v(" "),a("p",[s._v("2.Inverse Document Frequency：我们查询的文本中的词条在索引的所有文档中出现了多少次，出现的次数越多，相关度越低")]),s._v(" "),a("p",[s._v("搜索内容：hello world")]),s._v(" "),a("p",[s._v("hello，what are you doing?")]),s._v(" "),a("p",[s._v("I like the world.")]),s._v(" "),a("p",[s._v("hello 在索引的所有文档中出现了500次，world出现了100次")]),s._v(" "),a("p",[s._v("3.Field-length(字段长度归约) norm:field越长，相关度越低")]),s._v(" "),a("p",[s._v("搜索内容：hello world")]),s._v(" "),a("p",[s._v('{"title":"hello,what\'s your name?","content":{"owieurowieuolsdjflk"}}')]),s._v(" "),a("p",[s._v('{"title":"hi,good morning","content":{"lkjkljkj.......world"}}')]),s._v(" "),a("p",[s._v("查看分数是如何计算的：")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search?explain=true")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "query":{')]),s._v(" "),a("p",[s._v('​        "match":{')]),s._v(" "),a("p",[s._v('​            "interests": "duanlian,changge"')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("查看一个文档能否匹配上某个查询：")]),s._v(" "),a("p",[s._v("GET /lib3/user/2/_explain")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "query":{')]),s._v(" "),a("p",[s._v('​        "match":{')]),s._v(" "),a("p",[s._v('​            "interests": "duanlian,changge"')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("h3",{attrs:{id:"_3-24-doc-values-解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-24-doc-values-解析"}},[s._v("#")]),s._v(" 3.24 Doc Values 解析")]),s._v(" "),a("p",[s._v("DocValues其实是Lucene在构建倒排索引时，会额外建立一个有序的正排索引(基于document => field value的映射列表)")]),s._v(" "),a("p",[s._v('{"birthday":"1985-11-11",age:23}')]),s._v(" "),a("p",[s._v('{"birthday":"1989-11-11",age:29}')]),s._v(" "),a("p",[s._v("document     age       birthday")]),s._v(" "),a("p",[s._v("doc1         23         1985-11-11")]),s._v(" "),a("p",[s._v("doc2         29         1989-11-11")]),s._v(" "),a("p",[s._v("存储在磁盘上，节省内存")]),s._v(" "),a("p",[s._v("对排序，分组和一些聚合操作能够大大提升性能")]),s._v(" "),a("p",[s._v("注意：默认对不分词的字段是开启的，对分词字段无效（需要把fielddata设置为true）")]),s._v(" "),a("p",[s._v("PUT /lib3")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "settings":{')]),s._v(" "),a("p",[s._v('​    "number_of_shards" : 3,')]),s._v(" "),a("p",[s._v('​    "number_of_replicas" : 0')]),s._v(" "),a("p",[s._v("​    },")]),s._v(" "),a("p",[s._v('​     "mappings":{')]),s._v(" "),a("p",[s._v('​      "user":{')]),s._v(" "),a("p",[s._v('​        "properties":{')]),s._v(" "),a("p",[s._v('​            "name": {"type":"text"},')]),s._v(" "),a("p",[s._v('​            "address": {"type":"text"},')]),s._v(" "),a("p",[s._v('​            "age": {')]),s._v(" "),a("p",[s._v('​              "type":"integer",')]),s._v(" "),a("p",[s._v('​              "doc_values":false')]),s._v(" "),a("p",[s._v("​            },")]),s._v(" "),a("p",[s._v('​            "interests": {"type":"text"},')]),s._v(" "),a("p",[s._v('​            "birthday": {"type":"date"}')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​      }")]),s._v(" "),a("p",[s._v("​     }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("h3",{attrs:{id:"_3-25-基于scroll技术滚动搜索大量数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-25-基于scroll技术滚动搜索大量数据"}},[s._v("#")]),s._v(" 3.25 基于scroll技术滚动搜索大量数据")]),s._v(" "),a("p",[s._v("如果一次性要查出来比如10万条数据，那么性能会很差，此时一般会采取用scoll滚动查询，一批一批的查，直到所有数据都查询完为止。")]),s._v(" "),a("p",[s._v("1.scoll搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的")]),s._v(" "),a("p",[s._v("2.采用基于_doc(不使用_score)进行排序的方式，性能较高")]),s._v(" "),a("p",[s._v("3.每次发送scroll请求，我们还需要指定一个scoll参数，指定一个时间窗口，每次搜索请求只要在这个时间窗口内能完成就可以了")]),s._v(" "),a("p",[s._v("GET /lib3/user/_search?scroll=1m")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"query": {')]),s._v(" "),a("p",[s._v('​    "match_all": {}')]),s._v(" "),a("p",[s._v("},")]),s._v(" "),a("p",[s._v('"sort":["_doc"],')]),s._v(" "),a("p",[s._v('"size":3')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("GET /_search/scroll")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"scroll": "1m",')]),s._v(" "),a("p",[s._v('"scroll_id": "DnF1ZXJ5VGhlbkZldGNoAwAAAAAAAAAdFkEwRENOVTdnUUJPWVZUd1p2WE5hV2cAAAAAAAAAHhZBMERDTlU3Z1FCT1lWVHdadlhOYVdnAAAAAAAAAB8WQTBEQ05VN2dRQk9ZVlR3WnZYTmFXZw=="')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("h3",{attrs:{id:"_3-26-dynamic-mapping策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-26-dynamic-mapping策略"}},[s._v("#")]),s._v(" 3.26 dynamic mapping策略")]),s._v(" "),a("p",[a("strong",[s._v("dynamic")]),s._v(":")]),s._v(" "),a("p",[s._v("1.true:遇到陌生字段就 dynamic mapping")]),s._v(" "),a("p",[s._v("2.false:遇到陌生字段就忽略")]),s._v(" "),a("p",[s._v("3.strict:约到陌生字段就报错")]),s._v(" "),a("p",[s._v("PUT /lib8")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "settings":{')]),s._v(" "),a("p",[s._v('​    "number_of_shards" : 3,')]),s._v(" "),a("p",[s._v('​    "number_of_replicas" : 0')]),s._v(" "),a("p",[s._v("​    },")]),s._v(" "),a("p",[s._v('​     "mappings":{')]),s._v(" "),a("p",[s._v('​      "user":{')]),s._v(" "),a("p",[s._v('​        "dynamic":strict,')]),s._v(" "),a("p",[s._v('​        "properties":{')]),s._v(" "),a("p",[s._v('​            "name": {"type":"text"},')]),s._v(" "),a("p",[s._v('​            "address":{')]),s._v(" "),a("p",[s._v('​                "type":"object",')]),s._v(" "),a("p",[s._v('​                "dynamic":true')]),s._v(" "),a("p",[s._v("​            },")]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​      }")]),s._v(" "),a("p",[s._v("​     }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("#会报错")]),s._v(" "),a("p",[s._v("PUT  /lib8/user/1")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"name":"lisi",')]),s._v(" "),a("p",[s._v('"age":20,')]),s._v(" "),a("p",[s._v('"address":{')]),s._v(" "),a("p",[s._v('​    "province":"beijing",')]),s._v(" "),a("p",[s._v('​    "city":"beijing"')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[a("strong",[s._v("date_detection")]),s._v(":默认会按照一定格式识别date，比如yyyy-MM-dd")]),s._v(" "),a("p",[s._v("可以手动关闭某个type的date_detection")]),s._v(" "),a("p",[s._v("PUT /lib8")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('​    "settings":{')]),s._v(" "),a("p",[s._v('​    "number_of_shards" : 3,')]),s._v(" "),a("p",[s._v('​    "number_of_replicas" : 0')]),s._v(" "),a("p",[s._v("​    },")]),s._v(" "),a("p",[s._v('​     "mappings":{')]),s._v(" "),a("p",[s._v('​      "user":{')]),s._v(" "),a("p",[s._v('​        "date_detection": false,')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[a("strong",[s._v("定制 dynamic mapping template(type)")])]),s._v(" "),a("p",[s._v("PUT /my_index")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"mappings": {')]),s._v(" "),a("p",[s._v('​    "my_type": {')]),s._v(" "),a("p",[s._v('​      "dynamic_templates": [')]),s._v(" "),a("p",[s._v("​        {")]),s._v(" "),a("p",[s._v('​          "en": {')]),s._v(" "),a("p",[s._v('​            "match": "*_en",')]),s._v(" "),a("p",[s._v('​            "match_mapping_type": "string",')]),s._v(" "),a("p",[s._v('​            "mapping": {')]),s._v(" "),a("p",[s._v('​              "type": "text",')]),s._v(" "),a("p",[s._v('​              "analyzer": "english"')]),s._v(" "),a("p",[s._v("​            }")]),s._v(" "),a("p",[s._v("​          }")]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​      ]")]),s._v(" "),a("p",[s._v("​     }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("#使用了模板")]),s._v(" "),a("p",[s._v("PUT /my_index/my_type/3")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"title_en": "this is my dog"')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("#没有使用模板")]),s._v(" "),a("p",[s._v("PUT /my_index/my_type/5")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"title": "this is my cat"')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("GET my_index/my_type/_search")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"query": {')]),s._v(" "),a("p",[s._v('​    "match": {')]),s._v(" "),a("p",[s._v('​      "title": "is"')]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("h3",{attrs:{id:"_3-27重建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-27重建索引"}},[s._v("#")]),s._v(" 3.27重建索引")]),s._v(" "),a("p",[s._v("一个field的设置是不能修改的，如果要修改一个field，那么应该重新按照新的mapping，建立一个index，然后将数据批量查询出来，重新用bulk api写入到index中。")]),s._v(" "),a("p",[s._v("批量查询的时候，建议采用scroll api，并且采用多线程并发的方式来reindex数据，每次scroll就查询指定日期的一段数据，交给一个线程即可。")]),s._v(" "),a("p",[s._v("PUT /index1/type1/4")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"content":"1990-12-12"')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("GET /index1/type1/_search")]),s._v(" "),a("p",[s._v("GET /index1/type1/_mapping")]),s._v(" "),a("p",[s._v("#报错")]),s._v(" "),a("p",[s._v("PUT /index1/type1/4")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"content":"I am very happy."')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("#修改content的类型为string类型,报错，不允许修改")]),s._v(" "),a("p",[s._v("PUT /index1/_mapping/type1")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"properties": {')]),s._v(" "),a("p",[s._v('​    "content":{')]),s._v(" "),a("p",[s._v('​      "type": "text"')]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("#创建一个新的索引，把index1索引中的数据查询出来导入到新的索引中")]),s._v(" "),a("p",[s._v("#但是应用程序使用的是之前的索引，为了不用重启应用程序，给index1这个索引起个#别名")]),s._v(" "),a("p",[s._v("PUT /index1/_alias/index2")]),s._v(" "),a("p",[s._v("#创建新的索引，把content的类型改为字符串")]),s._v(" "),a("p",[s._v("PUT /newindex")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"mappings": {')]),s._v(" "),a("p",[s._v('​    "type1":{')]),s._v(" "),a("p",[s._v('​      "properties": {')]),s._v(" "),a("p",[s._v('​        "content":{')]),s._v(" "),a("p",[s._v('​          "type": "text"')]),s._v(" "),a("p",[s._v("​        }")]),s._v(" "),a("p",[s._v("​      }")]),s._v(" "),a("p",[s._v("​    }")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("#使用scroll批量查询")]),s._v(" "),a("p",[s._v("GET /index1/type1/_search?scroll=1m")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"query": {')]),s._v(" "),a("p",[s._v('​    "match_all": {}')]),s._v(" "),a("p",[s._v("},")]),s._v(" "),a("p",[s._v('"sort": ["_doc"],')]),s._v(" "),a("p",[s._v('"size": 2')]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("#使用bulk批量写入新的索引")]),s._v(" "),a("p",[s._v("POST /_bulk")]),s._v(" "),a("p",[s._v('{"index":{"_index":"newindex","_type":"type1","_id":1}}')]),s._v(" "),a("p",[s._v('{"content":"1982-12-12"}')]),s._v(" "),a("p",[s._v("#将别名index2和新的索引关联，应用程序不用重启")]),s._v(" "),a("p",[s._v("POST /_aliases")]),s._v(" "),a("p",[s._v("{")]),s._v(" "),a("p",[s._v('"actions": [')]),s._v(" "),a("p",[s._v('​    {"remove": {"index":"index1","alias":"index2"}},')]),s._v(" "),a("p",[s._v('​    {"add": {"index": "newindex","alias": "index2"}}')]),s._v(" "),a("p",[s._v("]")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("GET index2/type1/_search")]),s._v(" "),a("h3",{attrs:{id:"_3-28-索引不可变的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-28-索引不可变的原因"}},[s._v("#")]),s._v(" 3.28 索引不可变的原因")]),s._v(" "),a("p",[s._v("倒排索引包括：")]),s._v(" "),a("p",[s._v("文档的列表，文档的数量，词条在每个文档中出现的次数，出现的位置，每个文档的长度，所有文档的平均长度")]),s._v(" "),a("p",[s._v("索引不变的原因：")]),s._v(" "),a("p",[s._v("不需要锁，提升了并发性能")]),s._v(" "),a("p",[s._v("可以一直保存在缓存中（filter）")]),s._v(" "),a("p",[s._v("节省cpu和io开销")]),s._v(" "),a("h2",{attrs:{id:"elasticsearch分布式原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch分布式原理"}},[s._v("#")]),s._v(" Elasticsearch分布式原理")]),s._v(" "),a("h3",{attrs:{id:"_1、单机服务有哪些问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、单机服务有哪些问题"}},[s._v("#")]),s._v(" 1、单机服务有哪些问题")]),s._v(" "),a("p",[s._v("单机服务性能有限")]),s._v(" "),a("p",[s._v("可用性差")]),s._v(" "),a("p",[s._v("维护不便")]),s._v(" "),a("h3",{attrs:{id:"_2、分布式的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、分布式的好处"}},[s._v("#")]),s._v(" 2、分布式的好处")]),s._v(" "),a("p",[s._v("高可用性：集群可容忍部分节点宕机而保持服务的可用性和数据的完整性")]),s._v(" "),a("p",[s._v("易扩展：当集群的性能不满足业务要求时，可以方便快速的扩容集群，而无需停止服务。")]),s._v(" "),a("p",[s._v("高性能：集群通过负载均衡器分摊并发请求压力，可以大大提高集群的吞吐能力和并发能力。-")]),s._v(" "),a("h3",{attrs:{id:"_3、集群环境选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、集群环境选择"}},[s._v("#")]),s._v(" 3、集群环境选择")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/elastic/%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.png",alt:""}})]),s._v(" "),a("p",[s._v("集群理论知识学习，侧重原理，因此选择本地多节点部署，根据自己情况可选择单项目启动或者多项目启动，区别在基础课程中已经讲解，不再赘述。")]),s._v(" "),a("h4",{attrs:{id:"核心配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心配置"}},[s._v("#")]),s._v(" 核心配置")]),s._v(" "),a("ul",[a("li",[s._v("cluster.name: 集群名称，唯一确定一个集群。")]),s._v(" "),a("li",[s._v("node.name：节点名称，一个集群中的节点名称是唯一固定的，不同节点不能同名。")]),s._v(" "),a("li",[s._v("node.master: 主节点属性值")]),s._v(" "),a("li",[s._v("node.data: 数据节点属性值")]),s._v(" "),a("li",[s._v("network.host： 本节点的绑定ip，及提供服务的ip地址")]),s._v(" "),a("li",[s._v("http.port: 本节点的http端口")]),s._v(" "),a("li",[s._v("transport.port：9300——集群之间通信的端口，若不指定默认：9300")]),s._v(" "),a("li",[s._v("discovery.seed_hosts: 节点发现需要配置一些种子节点，与7.X之前老版本：disvoery.zen.ping.unicast.hosts类似，一般配置集群中的全部节点")]),s._v(" "),a("li",[s._v("cluster.initial_master_nodes：指定集群初次选举中用到的具有主节点资格的节点，称为集群引导，只在第一次形成集群时需要。")])]),s._v(" "),a("h4",{attrs:{id:"可执行以下命令启动一个9节点集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可执行以下命令启动一个9节点集群"}},[s._v("#")]),s._v(" 可执行以下命令启动一个9节点集群")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node1 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("master "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node1/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node1/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9201")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9301")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.initial_master_nodes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node1,node2,node3\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node2 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("master "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node2/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node2/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9202")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9302")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.initial_master_nodes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node1,node2,node3\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("master "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node3/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node3/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9203")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9303")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.initial_master_nodes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node1,node2,node3\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node4 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node4/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node4/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9204")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9304")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node5 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node5/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node5/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9205")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9305")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node6 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node6/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node6/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9206")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9306")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node7 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node7/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node7/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9207")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9307")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node8 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node8/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node8/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9208")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9308")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309\n./elasticsearch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ecluster.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msb_cluster "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("node9 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Enode.roles")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node9/data "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Epath.logs")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/node9/logs "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ehttp.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9209")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Etransport.port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9309")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Ediscovery.seed_hosts")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost:9301,localhost:9302,localhost:9303,localhost:9304,localhost:9305,localhost:9306,localhost:9307,localhost:9308,localhost:9309\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"开发模式和生产模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发模式和生产模式"}},[s._v("#")]),s._v(" 开发模式和生产模式")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("开发模式")]),s._v("：开发模式是默认配置（未配置集群发现设置），如果用户只是出于学习目的，而引导检查会把很多用户挡在门外，所以ES提供了一个设置项discovery.type=single-node。此项配置为指定节点为单节点发现以绕过引导检查。")]),s._v(" "),a("li",[a("strong",[s._v("生产模式")]),s._v("：当用户修改了有关集群的相关配置会触发生产模式，在生产模式下，服务启动会触发ES的引导检查或者叫启动检查（bootstrap checks）（或者叫启动检查），所谓引导检查就是在服务启动之前对一些重要的配置项进行检查，检查其配置值是否是合理的。引导检查包括对JVM大小、内存锁、虚拟内存、最大线程数、集群发现相关配置等相关的检查，如果某一项或者几项的配置不合理，ES会拒绝启动服务，并且在开发模式下的某些警告信息会升级成错误信息输出。引导检查十分严格，之所以宁可拒绝服务也要阻止用户启动服务是为了防止用户在对ES的基本使用不了解的前提下启动服务而导致的后期性能问题无法解决或者解决起来很麻烦。因为一旦服务以某种不合理的配置启动，时间久了之后可能会产生较大的性能问题，但此时集群已经变得难以维护，ES为了避免这种情况而做出了引导检查的设置。这种设定虽然增加了用户的使用门槛，但是避免了日后产生更大的问题")])]),s._v(" "),a("h4",{attrs:{id:"单节点模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单节点模式"}},[s._v("#")]),s._v(" 单节点模式")]),s._v(" "),a("p",[s._v("单节点启动，节点会选举自己成为active master节点，会绕过引导检查。")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("discovery.type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" single"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("node\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"引导检查-bootstrap-checks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引导检查-bootstrap-checks"}},[s._v("#")]),s._v(" 引导检查—Bootstrap Checks")]),s._v(" "),a("p",[s._v("在启用生产模式时，节点启动之前ES会自动对节点的相关配置逐项检查，目的是避免开发者在对其配置项不了解的前提下做出不合理的配置。如果配置不符合性能或者兼容性要求，ES会阻止服务启动以保证服务的性能和可用性。")]),s._v(" "),a("p",[s._v("检查项：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("堆大小检查")])]),s._v(" "),a("li",[a("strong",[s._v("文件描述符检查")])]),s._v(" "),a("li",[a("strong",[s._v("内存锁检查")])]),s._v(" "),a("li",[a("strong",[s._v("最大线程数检查")])]),s._v(" "),a("li",[a("strong",[s._v("最大文件大小检查")])]),s._v(" "),a("li",[s._v("虚拟内存检查")]),s._v(" "),a("li",[s._v("文件系统映射数检查")]),s._v(" "),a("li",[s._v("客户端JVM检查")]),s._v(" "),a("li",[s._v("串行收集器检查")]),s._v(" "),a("li",[s._v("系统调用过滤器检查")]),s._v(" "),a("li",[s._v("OnError和OnOOMError检查")]),s._v(" "),a("li",[s._v("早期访问检查")]),s._v(" "),a("li",[s._v("所有权限检查")]),s._v(" "),a("li",[a("strong",[s._v("发现配置检查")])])]),s._v(" "),a("h3",{attrs:{id:"_4、主从模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、主从模式"}},[s._v("#")]),s._v(" 4、主从模式")]),s._v(" "),a("p",[s._v("Elasticsearch为什么使用主从模式（Leader/Follower）？Elasticsearch使用的主从架构模式，其实除此之外，还可以使用分布式哈希表（DHT），其区别在于：")]),s._v(" "),a("ul",[a("li",[s._v("主从模式适合节点数量不多，并且节点的状态改变（加入集群或者离开集群）不频繁的情况。")]),s._v(" "),a("li",[s._v("分布式哈希表支持每小时数千个节点的加入或离开，响应约为4-10跳。")])]),s._v(" "),a("p",[s._v("ES的应用场景一般来说单个集群中一般不会有太多节点（一般来说不超过一千个），节点的数量远远小于单个节点（只的是主节点）所能维护的连接数。并且通常主节点不必经常处理节点的加入和离开，处于相对稳定的对等网络中，因此使用主从模式。")]),s._v(" "),a("h3",{attrs:{id:"_5、节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、节点"}},[s._v("#")]),s._v(" 5、节点")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/elastic/Master%E9%80%89%E4%B8%BE.jpg",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"候选节点-投票节点-master-eligible-有时候也叫master节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#候选节点-投票节点-master-eligible-有时候也叫master节点"}},[s._v("#")]),s._v(" 候选节点/投票节点（master-eligible，有时候也叫master节点）")]),s._v(" "),a("p",[s._v("默认情况下，master-eligible节点是那些在集群状态发布期间参与选举并执行某些任务的节点，配置了master角色的节点都是有效的投票节点，可以参与选举也可以投票")]),s._v(" "),a("p",[s._v("硬件要求：")]),s._v(" "),a("p",[s._v("CPU：高")]),s._v(" "),a("p",[s._v("内存：高")]),s._v(" "),a("p",[s._v("网络：高")]),s._v(" "),a("p",[s._v("存储：高")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"仅投票节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#仅投票节点"}},[s._v("#")]),s._v(" 仅投票节点")]),s._v(" "),a("p",[s._v("配置了master和voting_only角色的节点将成为仅投票节点，仅投票节点虽然也是候选节点，但是在选举过程中仅可以投票而不参与竞选。不过仅投票节点可以同时也是数据节点，这样的话，其不具备被选举为Master的资格，但是参与投票，可以在选举过程中发挥关键票的作用。")]),s._v(" "),a("p",[s._v("硬件要求：")]),s._v(" "),a("p",[s._v("CPU：高")]),s._v(" "),a("p",[s._v("内存：低")]),s._v(" "),a("p",[s._v("网络：高")]),s._v(" "),a("p",[s._v("存储：高")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"主节点-active-master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主节点-active-master"}},[s._v("#")]),s._v(" 主节点（active master）")]),s._v(" "),a("ul",[a("li",[s._v("避免重负载：主节点负责轻量级集群范围的操作，例如创建或删除索引、跟踪哪些节点是集群的一部分以及决定将哪些分片分配给哪些节点。拥有一个稳定的主节点对于集群健康很重要。当选的主节点拥有履行其职责所需的资源，这对于集群的健康非常重要。如果所选的主节点承载了其他任务，那么集群将不能很好地运行。避免 master 被其他任务超载的最可靠方法是将所有符合 master 的节点配置为仅具有 master 角色的专用 master 节点，使它们能够专注于管理集群。专用master节点仍将充当协调节点，将请求从客户端路由到集群中的其他节点，但是不要以负载均衡器的目的而设置候选节点。")]),s._v(" "),a("li",[s._v("一般来说，如果小型或轻负载集群的主节点具有其他角色和职责，则其可能运行良好，但是一旦您的集群包含多个节点，使用专用的主节点通常是有意义的。")]),s._v(" "),a("li",[s._v("任何不是"),a("code",[s._v("voting-only")]),s._v("的"),a("code",[s._v("master-eligible")]),s._v("节点都可以被选举为"),a("code",[s._v("active master")]),s._v("。")]),s._v(" "),a("li",[s._v("主节点必须有一个"),a("code",[s._v("path.data")]),s._v("目录，其内容在重启后仍然存在，就像数据节点一样，因为这是存储集群元数据的地方。集群元数据描述了如何读取存储在数据节点上的数据，因此如果丢失，则无法读取存储在数据节点上的数据。")]),s._v(" "),a("li",[s._v("高可用性 (HA) 集群需要至少三个候选节点，其中至少两个不是仅投票节点。这样即使其中一个节点发生故障，也可以保证剩下的节点能够选举出一个主节点。")])]),s._v(" "),a("p",[s._v("硬件要求：")]),s._v(" "),a("p",[s._v("CPU：高")]),s._v(" "),a("p",[s._v("内存：高")]),s._v(" "),a("p",[s._v("网络：高")]),s._v(" "),a("p",[s._v("存储：高 但是无需 大")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"数据节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据节点"}},[s._v("#")]),s._v(" 数据节点")]),s._v(" "),a("p",[s._v("数据节点保存包含已编入索引的文档的分片。数据节点处理数据相关操作，如 CRUD、搜索和聚合。这些操作是 I/O 密集型、内存密集型和 CPU 密集型的。监控这些资源并在它们过载时添加更多数据节点非常重要。")]),s._v(" "),a("p",[s._v("硬件要求：")]),s._v(" "),a("p",[s._v("CPU：高")]),s._v(" "),a("p",[s._v("内存：高")]),s._v(" "),a("p",[s._v("网络：高")]),s._v(" "),a("p",[s._v("存储：速度快、容量大")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"协调节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协调节点"}},[s._v("#")]),s._v(" 协调节点")]),s._v(" "),a("ul",[a("li",[s._v("如果主动关闭了master、data和ingest的角色配置，当前节点就剩下一个只能路由请求、处理搜索减少阶段和分发批量索引功能的"),a("strong",[s._v("仅协调节点")]),s._v("。本质上，仅协调节点的就相当于一个智能负载均衡器。换句话说，你是没有办法配置一个不具备协调转发能力的节点的。")]),s._v(" "),a("li",[s._v("仅协调节点过多会增加集群负担，因为主节更新集群状态必须等待每个节点的确认，而仅协调节点从这个角度上讲纯粹是一种负担。数据节点可以愉快地完成转发任务。")])]),s._v(" "),a("h3",{attrs:{id:"_6、es常见模块-mudules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、es常见模块-mudules"}},[s._v("#")]),s._v(" 6、ES常见模块：Mudules")]),s._v(" "),a("h4",{attrs:{id:"cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cluster"}},[s._v("#")]),s._v(" Cluster")]),s._v(" "),a("p",[s._v("Cluster模块是Master节点执行集群管理的封装实现，管理集群状态，维护集群级（除了集群级，还有索引级分片级等级别）的配置信息。其主要功能包括：")]),s._v(" "),a("ul",[a("li",[s._v("管理集群状态，将新生成的集群状态发布到集群的所有节点")]),s._v(" "),a("li",[s._v("调用allocation模块执行分片分配感知，决策分片分配行为")]),s._v(" "),a("li",[s._v("在集群各个节点直接迁移分片，保证数据平衡，shard rebalance")])]),s._v(" "),a("h4",{attrs:{id:"allocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#allocation"}},[s._v("#")]),s._v(" Allocation")]),s._v(" "),a("p",[s._v("此模块是实现了对节点分片的分配感知策略，新节点加入离开、动态扩容都需要分片分配感知，此模块由主节点调用，常见的使用场景如：跨机架强制感知实现高可用，冷热集群架构设计等。")]),s._v(" "),a("h4",{attrs:{id:"bootstrap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap"}},[s._v("#")]),s._v(" Bootstrap")]),s._v(" "),a("p",[s._v("引导检查模块，不再赘述")]),s._v(" "),a("h4",{attrs:{id:"ingest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ingest"}},[s._v("#")]),s._v(" Ingest")]),s._v(" "),a("p",[s._v("预处理模块负责数据索引之前的一些预操作，比如数据类型处理、数据的结构转换等，很多场景下课替代logstash处理管道消息，Elastic认证考试考点之一。")]),s._v(" "),a("h4",{attrs:{id:"monitor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitor"}},[s._v("#")]),s._v(" Monitor")]),s._v(" "),a("p",[s._v("监控功能提供了一种方式来了解 Elasticsearch 集群的运行状况和性能")]),s._v(" "),a("h4",{attrs:{id:"discovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#discovery"}},[s._v("#")]),s._v(" Discovery")]),s._v(" "),a("p",[s._v("发现模块负责管理如发现集群中新加入的节点，或者节点退出之后将状态信息移除，起作用类似于ZooKeeper。发现木块是用于elasticsearch和的内置发现模块 默认值。它提供单播发现，但可以扩展到 支持云环境和其他形式的发现")]),s._v(" "),a("h4",{attrs:{id:"gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway"}},[s._v("#")]),s._v(" Gateway")]),s._v(" "),a("p",[s._v("负责说对收到Master广播下来的集群状态数据的持久化存储，并在集群完全重启时恢复他们")]),s._v(" "),a("h4",{attrs:{id:"indices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indices"}},[s._v("#")]),s._v(" Indices")]),s._v(" "),a("p",[s._v("索引模块管理全局级索引配置，不包括索引级及索引以下级。集群启动阶段需要主副本分片恢复就是在这个模块完成的")]),s._v(" "),a("h4",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[s._v("#")]),s._v(" HTTP")]),s._v(" "),a("p",[s._v("HTTP模块允许通过JSON over HTTP的方式访问ES的API，HTTP模块本质上是完全异步的，这一位置没有阻塞线程等待响应。使用异步通信进行HTTP的好处是解决了C10k的问题。")]),s._v(" "),a("h4",{attrs:{id:"transport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transport"}},[s._v("#")]),s._v(" Transport")]),s._v(" "),a("p",[s._v("传输模块用于集群内部节点通信。传输模块使用TCP协议，每个节点都与其他节点维持若干个TCP长连接，通信本质也是完全异步的。")]),s._v(" "),a("h3",{attrs:{id:"_7、分片-shard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、分片-shard"}},[s._v("#")]),s._v(" 7、分片：Shard")]),s._v(" "),a("p",[s._v("Shard即数据分片，是ES的数据载体。在ES中数据分为primary shard（主分片）和replica shard（副本分片），每一个primary承载单个索引的一部分数据，分布于各个节点，replica为某个primary的副本，即备份。分片分配的原则是尽量均匀的分配在集群中的各个节点，以最大程度降低部分shard在出现意外时对整个集群乃至服务造成的影响。")]),s._v(" "),a("p",[s._v("每个分片就是一个Lucene的实例，具有完整的功能。")]),s._v(" "),a("h4",{attrs:{id:"_7-1-分片创建策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-分片创建策略"}},[s._v("#")]),s._v(" 7.1 分片创建策略")]),s._v(" "),a("p",[s._v("分片产生的目的是为了实现分布式，而分布式的好处之一就是实现“高可用性”（还包括高性能如提高吞吐量等会再后面内容展开讲），分片的分配策略极大程度上都是围绕如何提高可用性而来的，如"),a("strong",[s._v("分片分配感知")]),s._v("、"),a("strong",[s._v("强制感知")]),s._v("等。")]),s._v(" "),a("p",[s._v("互联网开发没有“银弹”，分片的数量分配也没有适用于所有场景的最佳值，创建分片策略的最佳方法是使用您在生产中看到的相同查询和索引负载在生产硬件上对生产数据进行基准测试。分片的分配策略主要从两个指标来衡量：即数量和单个分片的大小。")]),s._v(" "),a("h5",{attrs:{id:"_7-1-1-分片分配策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-分片分配策略"}},[s._v("#")]),s._v(" 7.1.1 分片分配策略")]),s._v(" "),a("ul",[a("li",[s._v("ES使用数据分片（shard）来提高服务的可用性，将数据分散保存在不同的节点上以降低当单个节点发生故障时对数据完整性的影响，同时使用副本（repiica）来保证数据的完整性。关于分片的默认分配策略，在7.x之前，默认5个primary shard，每个primary shard默认分配一个replica，即5主1副，而7.x之后，默认1主1副")]),s._v(" "),a("li",[s._v("ES在分配单个索引的分片时会将每个分片尽可能分配到更多的节点上。但是，实际情况取决于集群拥有的分片和索引的数量以及它们的大小，不一定总是能均匀地分布。")]),s._v(" "),a("li",[s._v("Paimary只能在索引创建时配置数量，而replica可以在任何时间分配，并且primary支持读和写操作，而replica只支持客户端的读取操作，数据由es自动管理，从primary同步。")]),s._v(" "),a("li",[s._v("ES不允许Primary和它的Replica放在同一个节点中，并且同一个节点不接受完全相同的两个Replica")]),s._v(" "),a("li",[s._v("同一个节点允许多个索引的分片同时存在。")])]),s._v(" "),a("h5",{attrs:{id:"_7-1-2-分片的数量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-分片的数量"}},[s._v("#")]),s._v(" 7.1.2 分片的数量")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("避免分片过多")]),s._v("：大多数搜索会命中多个分片。每个分片在单个 CPU 线程上运行搜索。虽然分片可以运行多个并发搜索，但跨大量分片的"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-threadpool.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("搜索"),a("OutboundLink")],1),s._v("会耗尽节点的"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-threadpool.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("搜索线程池"),a("OutboundLink")],1),s._v("。这会导致低吞吐量和缓慢的搜索速度。")]),s._v(" "),a("li",[a("strong",[s._v("分片越少越好")]),s._v("：每个分片都使用内存和 CPU 资源。在大多数情况下，一小组大分片比许多小分片使用更少的资源。")])]),s._v(" "),a("h5",{attrs:{id:"_7-1-3-分片的大小决策"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-3-分片的大小决策"}},[s._v("#")]),s._v(" 7.1.3 分片的大小决策")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("分片的合理容量")]),s._v("：10GB-50GB。虽然不是硬性限制，但 10GB 到 50GB 之间的分片往往效果很好。根据网络和用例，也许可以使用更大的分片。在索引的生命周期管理中，一般设置50GB为单个索引的最大阈值。")]),s._v(" "),a("li",[a("strong",[s._v("堆内存容量和分片数量的关联")]),s._v("：小于20分片/每GB堆内存，一个节点可以容纳的分片数量与节点的堆内存成正比。例如，一个拥有 30GB 堆内存的节点最多应该有 600 个分片。如果节点超过每 GB 20 个分片，考虑添加另一个节点。")])]),s._v(" "),a("p",[s._v("查询当前节点堆内存大小：")]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[s._v("GET _cat/nodes?v="),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("&h=heap.current\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("避免重负载节点：如果分配给特定节点的分片过多，会造成当前节点为"),a("strong",[s._v("重负载节点")])])]),s._v(" "),a("h4",{attrs:{id:"_7-2-重要的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-重要的配置"}},[s._v("#")]),s._v(" 7.2 重要的配置")]),s._v(" "),a("h5",{attrs:{id:"_7-2-1-自定义属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1-自定义属性"}},[s._v("#")]),s._v(" 7.2.1 自定义属性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("node.attr.{attribute}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如何查看节点属性？")]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[s._v("GET _cat/nodeattrs?v\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_7-2-2-索引级配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-2-索引级配置"}},[s._v("#")]),s._v(" 7.2.2 索引级配置")]),s._v(" "),a("ul",[a("li",[s._v("index.routing.allocation.include.{attribute}：表示索引可以分配在包含多个值中其中一个的节点上。")]),s._v(" "),a("li",[s._v("index.routing.allocation.require.{attribute}：表示索引要分配在包含索引指定值的节点上（通常一般设置一个值）。")]),s._v(" "),a("li",[s._v("index.routing.allocation.exclude.{attribute}：表示索引只能分配在不包含所有指定值的节点上。")])]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//索引创建之前执行")]),s._v("\nPUT <index_name>\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"settings"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"number_of_shards"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"number_of_replicas"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"index.routing.allocation.include._name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node1"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h5",{attrs:{id:"_7-2-3-集群级配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-3-集群级配置"}},[s._v("#")]),s._v(" 7.2.3 集群级配置")]),s._v(" "),a("p",[s._v("elasticsearch修改集群范围设置提供两种方式，")]),s._v(" "),a("ul",[a("li",[s._v("persistent：永久性修改，persistent相关的修改保存在了"),a("code",[s._v("/path.data/cluster.name/nodes/0/_state/global-n.st")]),s._v("，如果想删除设置，删除此文件即可。")]),s._v(" "),a("li",[s._v("transient：集群重启后失效。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('PUT _cluster/settings\n{\n  "persistent": {\n    "cluster.routing.allocation.awareness.attributes": "rack_id"\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"_7-3-索引分片分配-index-shard-allocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-索引分片分配-index-shard-allocation"}},[s._v("#")]),s._v(" 7.3 索引分片分配：Index Shard Allocation")]),s._v(" "),a("h5",{attrs:{id:"_7-2-1-分片均衡策略-shard-rebalance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1-分片均衡策略-shard-rebalance"}},[s._v("#")]),s._v(" 7.2.1 分片均衡策略：shard rebalance")]),s._v(" "),a("p",[s._v("当集群在每个节点上具有相同数量的分片而没有集中在任何节点上的任何索引的分片时，集群是平衡的。Elasticsearch 运行一个称为"),a("strong",[s._v("rebalancing")]),s._v(" 的自动过程，它在集群中的节点之间移动分片以改善其平衡。重新平衡遵循所有其他分片分配规则，例如"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-cluster.html#cluster-shard-allocation-filtering",target:"_blank",rel:"noopener noreferrer"}},[s._v("分配过滤"),a("OutboundLink")],1),s._v("和"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-cluster.html#forced-awareness",target:"_blank",rel:"noopener noreferrer"}},[s._v("强制意识"),a("OutboundLink")],1),s._v("，这可能会阻止它完全平衡集群。在这种情况下，重新平衡会努力在您配置的规则内实现最平衡的集群。如果您使用"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/data-tiers.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("数据层"),a("OutboundLink")],1),s._v("然后 Elasticsearch 会自动应用分配过滤规则将每个分片放置在适当的层中。这些规则意味着平衡器在每一层内独立工作。")]),s._v(" "),a("p",[a("strong",[s._v("cluster.routing.rebalance.enable")])]),s._v(" "),a("p",[s._v("("),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/settings.html#dynamic-cluster-setting",target:"_blank",rel:"noopener noreferrer"}},[s._v("动态"),a("OutboundLink")],1),s._v(") 为特定类型的分片启用或禁用重新平衡：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("all")]),s._v(" -（默认）允许对所有类型的分片进行分片平衡。")]),s._v(" "),a("li",[a("code",[s._v("primaries")]),s._v(" - 只允许主分片的分片平衡。")]),s._v(" "),a("li",[a("code",[s._v("replicas")]),s._v(" - 仅允许对副本分片进行分片平衡。")]),s._v(" "),a("li",[a("code",[s._v("none")]),s._v(" - 任何索引都不允许进行任何类型的分片平衡。")])]),s._v(" "),a("p",[a("strong",[s._v("cluster.routing.allocation.allow_rebalance")])]),s._v(" "),a("p",[s._v("("),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/settings.html#dynamic-cluster-setting",target:"_blank",rel:"noopener noreferrer"}},[s._v("动态"),a("OutboundLink")],1),s._v(") 指定何时允许分片重新平衡：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("always")]),s._v(" - 始终允许重新平衡。")]),s._v(" "),a("li",[a("code",[s._v("indices_primaries_active")]),s._v(" - 仅当集群中的所有主节点都已分配时。")]),s._v(" "),a("li",[a("code",[s._v("indices_all_active")]),s._v(" -（默认）仅当集群中的所有分片（主分片和副本）都被分配时。")])]),s._v(" "),a("h5",{attrs:{id:"_7-2-2-延迟分配策略-默认1m"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-2-延迟分配策略-默认1m"}},[s._v("#")]),s._v(" 7.2.2 延迟分配策略（默认1m）：")]),s._v(" "),a("p",[s._v("当节点出于任何原因（有意或无意）离开集群时，主节点会做出以下反应")]),s._v(" "),a("ul",[a("li",[s._v("将副本分片提升为主分片以替换节点上的任何主分片。")]),s._v(" "),a("li",[s._v("分配副本分片以替换丢失的副本（假设有足够的节点）。")]),s._v(" "),a("li",[s._v("在其余节点之间均匀地重新平衡分片。")])]),s._v(" "),a("p",[s._v("这些操作旨在通过确保尽快完全复制每个分片来保护集群免受数据丢失。即使我们在"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/recovery.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("节点级别"),a("OutboundLink")],1),s._v("和"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/shards-allocation.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("集群级别"),a("OutboundLink")],1),s._v("限制并发恢复 ，这种“分片洗牌”仍然会给集群带来很多额外的负载，如果丢失的节点可能很快就会返回，这可能是不必要的")]),s._v(" "),a("h5",{attrs:{id:"_7-2-3-分片过滤-即-shard-allocation-filtering-控制那个分片分配给哪个节点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-3-分片过滤-即-shard-allocation-filtering-控制那个分片分配给哪个节点。"}},[s._v("#")]),s._v(" 7.2.3 分片过滤：即（"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/shard-allocation-filtering.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Shard allocation filtering"),a("OutboundLink")],1),s._v("），控制那个分片分配给哪个节点。")]),s._v(" "),a("ul",[a("li",[s._v("index.routing.allocation.include.{attribute}：表示索引可以分配在包含多个值中其中一个的至少节点上。")]),s._v(" "),a("li",[s._v("index.routing.allocation.require.{attribute}：表示索引要分配在包含索引指定值的节点上（通常一般设置一个值）。")]),s._v(" "),a("li",[s._v("index.routing.allocation.exclude.{attribute}：表示索引只能分配在不包含所有指定值的节点上。")])]),s._v(" "),a("h4",{attrs:{id:"_7-4-分片分配感知-shard-allocation-awareness"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-分片分配感知-shard-allocation-awareness"}},[s._v("#")]),s._v(" 7.4 分片分配感知：Shard Allocation Awareness")]),s._v(" "),a("p",[s._v("Shard Allocation Awareness的设计初衷是为了提高服务的可用性，通过自定义节点属性作为感知属性，让 Elasticsearch 在分配分片时将物理硬件配置考虑在内。如果 Elasticsearch 知道哪些节点位于同一物理服务器上、同一机架中或同一区域中，则它可以分离主副本分片，以最大程度地降低在发生故障时丢失数据的风险。")]),s._v(" "),a("h5",{attrs:{id:"_7-4-1-启用分片感知策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-1-启用分片感知策略"}},[s._v("#")]),s._v(" 7.4.1 启用分片感知策略")]),s._v(" "),a("p",[s._v("配置节点属性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("node.attr.rack_id: rack1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("通过以下设置告诉主节点在分配分片的时候需要考虑哪些属性。这些信息会保存在每个候选节点的集群状态信息中")]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[s._v("PUT _cluster/settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"persistent"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cluster.routing.allocation.awareness.attributes"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rack_id"')]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"_7-5-强制感知策略-forced-awareness"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-强制感知策略-forced-awareness"}},[s._v("#")]),s._v(" 7.5 强制感知策略：Forced awareness")]),s._v(" "),a("p",[s._v("默认情况下，如果一个区域发生故障，Elasticsearch 会将所有故障的副本分片分配给其他区域。但是剩余区域可能没有足够的性能冗余来承载这些分片。")]),s._v(" "),a("p",[s._v("为了防止在发生故障时单个位置过载，您可以设置为"),a("code",[s._v("cluster.routing.allocation.awareness.force")]),s._v("不分配副本，直到另一个位置的节点可用。")]),s._v(" "),a("h5",{attrs:{id:"_7-5-1-部署强制感知策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1-部署强制感知策略"}},[s._v("#")]),s._v(" 7.5.1 部署强制感知策略")]),s._v(" "),a("p",[s._v("设置强制感知策略，告诉主节点当前通过某个属性来划分区域，并且告知区域有哪些值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("cluster.routing.allocation.awareness.attributes: zonecluster.routing.allocation.awareness.force.zone.values: zone1,zone2 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_8、高可用性-★★★"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、高可用性-★★★"}},[s._v("#")]),s._v(" 8、高可用性 ★★★")]),s._v(" "),a("p",[s._v("高可用性即：High Availability（HA），高可用性是分布式系统架构设计的重要因素之一，简单来说，可用性越高的集群在发生意外情况（如断电、节点宕机）的时候，服务发生故障而不可用的可能性越低，也就是降低了意外情况而对整体服务产生的影响的可能性。")]),s._v(" "),a("h4",{attrs:{id:"_8-1-高可用性原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-高可用性原理"}},[s._v("#")]),s._v(" 8.1 高可用性原理")]),s._v(" "),a("ul",[a("li",[s._v("通过“分布式”的概念实现多个节点的负载均衡，并且使服务具备可扩展能力。")]),s._v(" "),a("li",[s._v("通过针对分片、节点的一列策略降低单个故障点对整体服务产生的影响。")]),s._v(" "),a("li",[s._v("通过"),a("strong",[s._v("容灾机制")]),s._v("，尽可能把故障点还原，以恢复服务的最大可用性。")])]),s._v(" "),a("h4",{attrs:{id:"_8-2-es的容灾机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-es的容灾机制"}},[s._v("#")]),s._v(" 8.2 ES的容灾机制")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/elastic/ES%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6.jpg",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("容错性")]),s._v("可以理解系统容忍的局部发生异常情况的比率和当异常发生时自行恢复的能力。在"),a("code",[s._v("ES")]),s._v("中表现为对节点宕机的处理机制。")]),s._v(" "),a("p",[s._v("步骤：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("Master选举")]),s._v("：选出集群中的Leader。")]),s._v(" "),a("li",[s._v("Replica容错：新的"),a("code",[s._v("Active Master")]),s._v("会将丢失的Primary的某个Replica提升为Primary。")]),s._v(" "),a("li",[s._v("尝试恢复故障节点：Master尝试恢复故障节点。")]),s._v(" "),a("li",[s._v("数据同步：Master将宕机期间丢失的数据同步到重启节点对应的分片上去，从而使服务恢复正常。")])]),s._v(" "),a("h4",{attrs:{id:"_8-3-master节点和投票节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-master节点和投票节点"}},[s._v("#")]),s._v(" 8.3  Master节点和投票节点")]),s._v(" "),a("h5",{attrs:{id:"_8-3-1-主节点职责"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-1-主节点职责"}},[s._v("#")]),s._v(" 8.3.1 主节点职责")]),s._v(" "),a("p",[s._v("负责轻量级集群范围的操作，比如：")]),s._v(" "),a("ul",[a("li",[s._v("创建或删除索引")]),s._v(" "),a("li",[s._v("规划和执行分片策略")]),s._v(" "),a("li",[s._v("发布、修改集群状态")])]),s._v(" "),a("p",[s._v("选择的主节点拥有履行其职责所需的资源，这对于集群的健康非常重要。如果选择的主节点被其他任务重载，那么集群将无法正常运行。避免主机因其他任务而过载的最可靠方法是将所有符合主机条件的节点配置为"),a("code",[s._v("dedicated master")])]),s._v(" "),a("h5",{attrs:{id:"_8-3-2-如何设置dedicated-master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-2-如何设置dedicated-master"}},[s._v("#")]),s._v(" 8.3.2 如何设置"),a("code",[s._v("dedicated master")])]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("node.roles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" master "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_8-3-3-投票节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-3-投票节点"}},[s._v("#")]),s._v(" 8.3.3 投票节点")]),s._v(" "),a("p",[s._v("每个候选节点默认有"),a("strong",[s._v("选举权")]),s._v("和"),a("strong",[s._v("被选举权")]),s._v("，称之为投票节点。投票节点可以参加Master竞选，同时也可以参加投票。")]),s._v(" "),a("p",[s._v("但是有一种投票节点比较特殊，其只具备选举权而不具备被选举权，也就是“仅投票”节点，仅投票节点只能在Master选举过程中参与投票，而不能参加竞选。仅投票在某些场景下发挥着极其重要的作用：")]),s._v(" "),a("ul",[a("li",[s._v("当现有票数不足以选出Master的时候，充当决胜票。")]),s._v(" "),a("li",[s._v("在小型集群中仅投票节点可同时作为数据节点避免资源浪费")])]),s._v(" "),a("h5",{attrs:{id:"_8-3-4-如何配置仅投票节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-4-如何配置仅投票节点"}},[s._v("#")]),s._v(" 8.3.4 如何配置仅投票节点")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("node.roles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" voting_only "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"_8-4-高可用性集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-高可用性集群"}},[s._v("#")]),s._v(" 8.4 高可用性集群：")]),s._v(" "),a("p",[s._v("高可用性的中心思想就是采取一切可能的策略，降低集群中任意一部分节点出现问题后导致服务整体不可用的概率。其包含数据的完整性，集群的存活概率以及选主等。")]),s._v(" "),a("h5",{attrs:{id:"_8-4-1-小规模集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-1-小规模集群"}},[s._v("#")]),s._v(" 8.4.1 小规模集群")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("单节点集群：")]),s._v(" "),a("p",[s._v("一般用于学习或者开发、测试环境，不推荐在生产环境中使用单节点集群。由于集群只有单个节点，为了适应这一点，ES默认会给集群分配所有角色。单节点角色不具备高可用性，并且无法分配副本分片。为了使集群保持健康，单节点模式下创建索引，需要使用"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/index-modules.html#dynamic-index-settings",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("index.number_of_replicas")]),a("OutboundLink")],1),s._v("设置副本数量为0。")])]),s._v(" "),a("li",[a("p",[s._v("两节点集群：")]),s._v(" "),a("ul",[a("li",[s._v("如果出于硬件成本考虑，集群中只允许有两个节点，那么一般来说最好把两个节点都设置成数据节点。您还应该通过设置索引确保每个分片都在两个节点上冗余存储。每个非可搜索快照索引上的"),a("code",[s._v("Number_of_replicas")]),s._v("为1。这是默认行为，但可能会被"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/index-templates.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("索引模板"),a("OutboundLink")],1),s._v("覆盖。"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/index-modules.html#dynamic-index-settings",target:"_blank",rel:"noopener noreferrer"}},[s._v("Auto-expand replicas"),a("OutboundLink")],1),s._v("也可以达到同样的效果，但是在这么小的集群中没有必要使用这个功能。")]),s._v(" "),a("li",[s._v("推荐在两个节点之一设置"),a("code",[s._v("node.master: false")]),s._v("明确告知其不具备候选节点资格。目的是为了确定哪个节点是主节点。集群可以容忍另一个不具备候选资格的节点的丢失。如果不做此设置，这时两个节点都会具有候选资格，但是其中一个节点如果宕机，由于选主需要票数过半（票数>N/2+1），也就是票数必须是两票才能选出active master，所以会导致无法选主。此时集群无法容忍任何一个节点宕机")]),s._v(" "),a("li",[s._v("默认情况下，ES会为每个节点分配所有角色，如果手动分配角色，一般建议为每个节点分配所有角色，如果其中一个节点宕机，另一个节点可以取而代之。")]),s._v(" "),a("li",[s._v("两个节点的集群，只允许其中一个固定的节点宕机，而不是任意一个节点。因为如果允许两个节点可以独立选举，那么如果集群由于网络或者其他原因导致节点连接断开，那么两个节点没办法确定另一个节点是否是宕机了，也就是会产生所谓的”脑裂“问题，而产生多主的情况。Elasticsearch 避免了这种情况并通过不选择任何一个节点作为主节点来保护数据，直到该节点可以确保它具有最新的集群状态并且集群中没有其他主节点。这可能导致集群在连接恢复之前没有主节点。")])])]),s._v(" "),a("li",[a("p",[s._v("三节点集群 <HA的最低配置>：")]),s._v(" "),a("ul",[a("li",[s._v("三节点部署：如果整个集群中所有节点一共只有三个，建议把三个节点全部部署为数据节点和候选节点。虽然active master节点一般只负责轻量级任务不做数据节点。但是通常来说三节点集群一般不会承载很大的业务量，也就不必考虑那么多了。这也是处于成本考虑不得已而为之。三节点集群的容错能力是1，即允许一台节点故障。")]),s._v(" "),a("li",[s._v("二加一部署：即两个候选节点，一个仅投票节点，若干数据节点。这种配置的最大好处就是在保证高可用的前提下性价比更高，适用于小规模集群。由于在避免脑裂的前提下，要选举出主节点的最小节点数量是3，也就是选主的必要条件是票数过半也就是2票。而候选节点一般是不负责其他的任务的，也就不会为其分配data角色，那么集群通常会出现三个节点不存放数据的局面。此时会产生造成资源浪费。因为"),a("code",[s._v("active master")]),s._v("只存在一个，另外两个master作为候选节点，在及群众仅仅是充当了负载均衡器。为了避免这种资源浪费，通常的做法是把其中一个候选节点设置为仅投票节点，即"),a("code",[s._v("node.roles: [ data, master, voting_only ]")]),s._v("，此时，当前节点在选举过程中，仅有选举权而没有被选举权，这样就可以同时给他分配数据节点的角色，因为其不会被选举为"),a("code",[s._v("active master")]),s._v("。三节点集群中，三个节点必须都具有"),a("code",[s._v("master")]),s._v("角色，并且仅投票节点最多只能有一个。仅投票节点由叫"),a("code",[s._v("仲裁节点")]),s._v("起着"),a("code",[s._v("决胜票")]),s._v("的作用。")])])]),s._v(" "),a("li",[a("p",[s._v("多节点集群")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("一旦集群增长到三个以上的节点，可以开始根据它们的职责对这些节点做职责专一化。主要根据需要配置尽可能多的"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-node.html#data-node",target:"_blank",rel:"noopener noreferrer"}},[s._v("数据节点"),a("OutboundLink")],1),s._v("、"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/ingest.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("预处理节点"),a("OutboundLink")],1),s._v("、"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-node.html#ml-node",target:"_blank",rel:"noopener noreferrer"}},[s._v("机器学习节点"),a("OutboundLink")],1),s._v("等来均衡工作负载。随着集群变大，一般建议给每个角色使用专用节点，以便为每个任务独立扩展资源。")]),s._v(" "),a("p",[s._v("但是，最好将集群中候选节点数量限制为三个。主节点不像其他节点类型那样扩展，因为集群总是只选择其中之一作为集群的主节点。如果有太多候选节点，那么主选举可能需要更长的时间才能完成。在较大的集群中，一般建议把候选节点设置为专用候选节点，即不分配其他角色，并避免向这些专用节点发送任何客户端请求。以免候选节点被不必要的额外工作所拖累导致集群服务不稳定。")]),s._v(" "),a("p",[s._v("但是可以把候选节点之一配置为"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-node.html#voting-only-node",target:"_blank",rel:"noopener noreferrer"}},[s._v("仅投票节点"),a("OutboundLink")],1),s._v("以便它永远不会被选为主节点。例如，集群可能有两个专用的候选节点和一个既是数据节点又是仅投票的候选节点的第三个节点。这第三个仅投票节点将在Master选举中投出决胜票，但是自己永远不会被选举为active master。")])])])])]),s._v(" "),a("h5",{attrs:{id:"_8-4-2-大规模集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-2-大规模集群"}},[s._v("#")]),s._v(" 8.4.2 大规模集群")]),s._v(" "),a("ul",[a("li",[s._v("单集群\n"),a("ul",[a("li",[s._v("避免跨数据中心：ES对网络和宽带要求较高，并且一般来说要尽量避免服务跨多个数据中心。因为一旦遇到分区恢复问题，它必须重新同步任何丢失的数据并重新平衡集群。如果一定要跨多个数据中心，建议在每个数据中心部署独立集群，然后配置"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/modules-cross-cluster-search.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("跨集群搜索"),a("OutboundLink")],1),s._v("或"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/xpack-ccr.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("跨集群复制"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("li",[s._v("部署分片分配感知：为了降低当集群出现单个或区域节点（比如一个机架）宕机对整个服务造成的影响，一般策略是通过"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/allocation-awareness.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("分配感知来实现"),a("OutboundLink")],1),s._v("。")])])]),s._v(" "),a("li",[s._v("双区集群：\n"),a("ul",[a("li",[s._v("如果集群部署在两个区域比如两个机房内，应该在每个区域中拥有不同数量的候选节点，这样在其中一个区域出现问题的时候，会增加另一个区域的存活概率。比如两个机房部署同一个集群，那么两个机房的候选节点避免相等，因为此时如果一个机房意外断电，两个机房的服务都会停止。配置单数投票节点可避免此问题。此时其中一个机房断电，服务可用的概率为50%。")]),s._v(" "),a("li",[s._v("双区集群理论上能容忍一个区域的数据丢失，但不是任意一个区域，打个比方：服务部署在两个机房，机房A和机房B，要么是仅允许A机房出现故障而不允许B机房出现故障，也就是A机房断电服务可用，但是B机房断电服务中断；要么是仅允许B机房出现故障而不允许A机房出现故障，也就是B机房断电服务可用，但是A机房断电服务中断。从高可用的角度想，我们更希望任意一个机房断电，另一个机房的服务都不受影响，但是这是不可能的。因为没有断电的机房不知道出现故障的机房是断网了还是断电了，也就不知道应该是发起独立选举还是等待下去。如果两个机房都可以独立选主，那么就无法避免脑裂，可能会产生两个机房选出active master。解决办法是在两个区域中都配置一个仅投票节点并在独立的第三个区域添加一个额外的候选节点。这样两个区域其中之一断电，额外的投票节点就可以投出关键票。这个额外的节点也叫"),a("code",[s._v("专用tiebreaker")]),s._v("节点，此节点可以用低配服务器。")])])]),s._v(" "),a("li",[s._v("多区集群\n"),a("ul",[a("li",[s._v("如果集群中有三个区域，那么每个区域中应该有一个候选节点。如果集群包含三个以上的区域，那么应该选择其中的三个区域，并在这三个区域中的每一个区域中放置一个候选节点。这意味着即使其中一个区域发生故障，集群仍然可以选举主节点。")])])]),s._v(" "),a("li",[s._v("多集群\n"),a("ul",[a("li",[s._v("Elasticsearch是主从结构，主节点能管理的节点上线一般不超过一千个，如果继续增加节点，可能会导致active master不稳定，如果集群想突破集群规模带来的性能瓶颈，一般可配置多集群，利用跨集群搜索单个超大集群拆分成多个小集群（相对小，千节点级别）来完成对集群的性能扩展。")])])])]),s._v(" "),a("h5",{attrs:{id:"_8-4-3-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-3-总结"}},[s._v("#")]),s._v(" 8.4.3 总结")]),s._v(" "),a("ul",[a("li",[s._v("集群应该至少有两个区域包含数据节点。")]),s._v(" "),a("li",[s._v("除了主分片之外，每个 不是"),a("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.13/searchable-snapshots.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("可搜索快照索引的索引"),a("OutboundLink")],1),s._v("都应该有每个主分片的至少一个副本。")]),s._v(" "),a("li",[s._v("分片分配感知配置为避免将分片的所有副本集中在单个区域内。")]),s._v(" "),a("li",[s._v("集群至少有三个候选节点。这些节点中至少有两个不是仅投票节点，均衡分配在至少三个区域中。")]),s._v(" "),a("li",[s._v("客户端被配置为将其请求发送到多个区域中的节点，或者被配置为使用负载平衡器来平衡一组适当的节点之间的请求。")])]),s._v(" "),a("h3",{attrs:{id:"_9、master选举-★★★★"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、master选举-★★★★"}},[s._v("#")]),s._v(" 9、Master选举 ★★★★")]),s._v(" "),a("h4",{attrs:{id:"_9-1-设计思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-设计思路"}},[s._v("#")]),s._v(" 9.1 设计思路")]),s._v(" "),a("p",[s._v("所有分布式系统都需要解决数据的一致性问题，处理这类问题一般采取两种策略：")]),s._v(" "),a("ul",[a("li",[s._v("避免数据不一致情况的发生")]),s._v(" "),a("li",[s._v("定义数据不一致后的处理策略")])]),s._v(" "),a("p",[s._v("分布式一致性解读：")]),s._v(" "),a("p",[s._v("我们可以通过一个简单的例子解释：\n假设我们有一个单节点系统，对于此示例，你可以认为我们的节点是一个只存储一个值的数据库服务器。我们还有一个客户端去向服务器发送存储的值，在单节点的时候，存的这个值很容易达成一致或者共识。但是，如果我们有多个节点，那么怎么达成共识呢？这就是分布式一致性的问题。")]),s._v(" "),a("h4",{attrs:{id:"_9-2-es的选举算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-es的选举算法"}},[s._v("#")]),s._v(" 9.2 ES的选举算法")]),s._v(" "),a("p",[s._v("ES基于Bully和Paxos两种算法实现，而并非就是两种算法或之一。 ES 7.x 基于以上算法，加入了基于Raft的优化。")]),s._v(" "),a("ul",[a("li",[s._v("Bully：Bully是Leader选举的基本算法之一，基本原理就是按照节点ID进行排序，任何时候当前Leader的节点ID都是集群中最高节点ID。该算法非常易于实现但是当Leader处于不稳定状态的时候，如因负载过重而假死，此时可能会触发选主，选出第二大ID的节点为新的Leader。ES通过推迟选举直到Master失效（Master放弃Active Master资格触发选举）来解决问题，但是会产生双主或多主（也就是脑裂）问题。")]),s._v(" "),a("li",[s._v("Paxos：Paxos非常强大，在选举方面的灵活性比Bully算法有很大的优势，但是其原理非常复杂。")]),s._v(" "),a("li",[s._v("Raft：Raft是一种使用较为广泛的分布式一致性的协议，在Raft中，节点可能的状态有三种：\n"),a("ul",[a("li",[s._v("Leader：主节点")]),s._v(" "),a("li",[s._v("Candidate：候选节点")]),s._v(" "),a("li",[s._v("Follower：跟随节点")])])])]),s._v(" "),a("p",[s._v("所有的节点开始都是跟随节点。如果跟随节点收不89到领导节点的信号，则他们可以成为候选节点候选节点接着请求其他节点投票节点将以他们的投票回复候选节点如果候选节点获取到大多数节点的投票，则他将会成为领导节点此过程称为Leader选举。此时，所有对系统的修改将通过Leader节点进行。任意改变将以entry的形式添加到节点的日志中。这个日志的entry此时是没有提交的，所以，它不会更新节点的值。为了提交entry，节点首先会备份至跟随节点，然后leader等待，知直到多数节点将entry写入（自己的日志），此时Leader节点将提交entry，并且节点的数据被修改，接着Leader通知其他跟随者entry已经被提交了。此时集群的系统状态称为一致的。这个过程称为日志复制")]),s._v(" "),a("p",[s._v("在Raft中有两个设置超时时间的地方去控制选举\n"),a("strong",[s._v("选举超时")]),s._v("：\n此时间就是跟随节点等待Leader信号直到成为候选节点的时间。选举超时时间随机设置在150ms到300ms之间。当选举超时以后，跟随节点成为候选节点，然后为自己发起一轮新的选举，并且向其他节点发起投票请求。如果收到请求的节点本轮没有发出投票，则候选节点的投票。并且节点重置选举超时时间\n一旦候选节点收到大多数投票，那么他将成为Leader。Leader开始对其他跟随节点发送追加entry的消息。这些消息按心跳超时指定的时间间隔发送。跟随节点接着响应每一个追加entry的消息。在选举任期持续直到跟随节点停止接收到心跳消息，并成为候选节点。\n"),a("strong",[s._v("重新选举")]),s._v("：\n和Leader选举一样。要求大多数投票，保证了本期选举只能有一个Leader被选中。如果两个节点同时成为候选节点，则会发送分裂投票。\n"),a("strong",[s._v("分裂投票")]),s._v("：\n两个节点在同一期间都开始选举，并且每个都在其他节点之前到达一个单一节点。此时，每个候选节点都有两票，并且本次投票无法再收到更多投票，则节点将等待新的选举并重试。")]),s._v(" "),a("h4",{attrs:{id:"_9-3-几个重要概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-几个重要概念"}},[s._v("#")]),s._v(" 9.3 几个重要概念")]),s._v(" "),a("h5",{attrs:{id:"_9-3-1-候选节点与投票节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-1-候选节点与投票节点"}},[s._v("#")]),s._v(" 9.3.1 候选节点与投票节点")]),s._v(" "),a("ul",[a("li",[s._v("**候选节点：**具备"),a("code",[s._v("master")]),s._v("角色的节点默认都有“被选举权”，即是一个候选节点。候选节点可以参与Master选举过程")]),s._v(" "),a("li",[s._v("**投票节点：**每个候选节点默认都有投票权，即每个候选节点默认都是一个投票节点，但如果配置了“voting_only ”的候选节点将只有选举权而没有被选举权，即仅投票节点。")])]),s._v(" "),a("h5",{attrs:{id:"_9-3-2-有效选票与法定票数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-2-有效选票与法定票数"}},[s._v("#")]),s._v(" 9.3.2 有效选票与法定票数")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("有效选票")]),s._v("：包括非候选节点的所有节点都会参与选举并参与投票，但是只有投票节点的投票才是有效投票。")]),s._v(" "),a("li",[a("strong",[s._v("法定票数")]),s._v("：即当选Master所需的最小票数，可通过：discovery.zen.minimum_master_nodes配置，通常情况下法定票数为投票数过半（不包含一半）。为了避免平票而导致脑裂，一般候选节点数量一般设置为奇数，即便是偶数，系统默认也会阉割掉其中一个节点的投票权，以保证不出选平票或多主。")])]),s._v(" "),a("h4",{attrs:{id:"_9-4-选举过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-选举过程"}},[s._v("#")]),s._v(" 9.4 选举过程")]),s._v(" "),a("h5",{attrs:{id:"_9-4-1-节点失效监测-faultdetection类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-1-节点失效监测-faultdetection类"}},[s._v("#")]),s._v(" 9.4.1 节点失效监测：FaultDetection类")]),s._v(" "),a("p",[s._v("在源码的描述文件中有这样一段描述：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("There are two fault detection processes running. The first is by themaster, to ping all the other nodes in the cluster and verify that theyare alive. And on the other end, each node pings to master to verify ifits still alive or an election process needs to be initiated\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",[a("li",[s._v("NodesFaultDetection：即NodesFD，用于定期检查集群中的节点是否存活。")]),s._v(" "),a("li",[s._v("MasterFaultDetection：即MasterFD，作用是定期检查Master节点是否存活。")])]),s._v(" "),a("h4",{attrs:{id:"_9-5-脑裂问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-脑裂问题"}},[s._v("#")]),s._v(" 9.5 脑裂问题：")]),s._v(" "),a("ul",[a("li",[s._v("何为脑裂：双主或多主")]),s._v(" "),a("li",[s._v("解决办法：discovery.zen.minimum_master_nodes=N/2+1，N为有效投票节点数。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/elastic/%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98.jpg",alt:""}})])])}),[],!1,null,null,null);a.default=t.exports}}]);