(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{595:function(n,a,s){"use strict";s.r(a);var e=s(5),t=Object(e.a)({},(function(){var n=this,a=n._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("U2FsdGVkX1/e4DDH0ARdesnRN9Ig4VW33M7e5trSvPqtqGiD+1tQjRVmW+wWJ14e\n70RGmfkzm8F6Sa2QKi3h1RPB/q9AY1U39ReLiyyRtlawf8jCNOWFNyKTDLSQ7HZC\nSg==\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("SpringBoot启动流程：SpringApplication.run 脑图：https://www.processon.com/view/link/60d865e85653bb049a4b77ff")]),n._v(" "),a("h2",{attrs:{id:"springboot-是如何通过jar包启动的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot-是如何通过jar包启动的"}},[n._v("#")]),n._v(" SpringBoot 是如何通过jar包启动的")]),n._v(" "),a("p",[n._v("得益于SpringBoot的封装，我们可以只通过jar -jar一行命令便启动一个web项目。再也不用操心搭建tomcat等相关web容器。那么，你是否探究过SpringBoot是如何达到这一操作的呢？只有了解了底层实现原理，才能更好的掌握该项技术带来的好处以及性能调优。本篇文章带大家聊一探究竟。")]),n._v(" "),a("p",[a("strong",[n._v("java -jar做了什么")])]),n._v(" "),a("p",[n._v("先要弄清楚java -jar命令做了什么，在oracle"),a("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("官网"),a("OutboundLink")],1),n._v("找到了该命令的描述：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("If the -jar option is specified, its argument is the name of the JAR file containing class and resource files for the application. The startup class must be indicated by the Main-Class manifest header in its source code.\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("再次秀出我蹩脚的英文翻译：")]),n._v(" "),a("p",[n._v("使用-jar参数时，后面的参数是的jar文件名(本例中是springbootstarterdemo-0.0.1-SNAPSHOT.jar)；")]),n._v(" "),a("p",[n._v("该jar文件中包含的是class和资源文件；")]),n._v(" "),a("p",[n._v("在manifest文件中有Main-Class的定义；")]),n._v(" "),a("p",[n._v("Main-Class的源码中指定了整个应用的启动类；(in its source code)")]),n._v(" "),a("p",[n._v("小结一下：")]),n._v(" "),a("p",[n._v("java -jar会去找jar中的manifest文件，在那里面找到真正的启动类；")]),n._v(" "),a("p",[a("strong",[n._v("疑惑出现")])]),n._v(" "),a("p",[n._v("在MANIFEST.MF文件中有这么一行内容：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Start-Class: com.tulingxueyuan.Application\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("前面的java官方文档中，只提到过Main-Class ，并没有提到Start-Class；")]),n._v(" "),a("p",[n._v("Start-Class的值是com.tulingxueyuan.Application，这是我们的java代码中的唯一类，也只真正的应用启动类；")]),n._v(" "),a("p",[n._v("所以问题就来了：理论上看，执行java -jar命令时JarLauncher类会被执行，但实际上是com.tulingxueyuan.Application被执行了，这其中发生了什么呢？为什么要这么做呢？")]),n._v(" "),a("ul",[a("li",[n._v("Java没有提供任何标准的方式来加载嵌套的jar文件（即，它们本身包含在jar中的jar文件）。")])]),n._v(" "),a("p",[a("strong",[n._v("Jar包的打包插件及核心方法")])]),n._v(" "),a("p",[n._v("Spring Boot项目的pom.xml文件中默认使用如下插件进行打包：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("执行maven clean package之后，会生成两个文件：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("spring-learn-0.0.1-SNAPSHOT.jar\nspring-learn-0.0.1-SNAPSHOT.jar.original\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("spring-boot-maven-plugin项目存在于spring-boot-tools目录中。spring-boot-maven-plugin默认有5个goals：repackage、run、start、stop、build-info。在打包的时候默认使用的是repackage。")]),n._v(" "),a("p",[n._v("spring-boot-maven-plugin的repackage能够将mvn package生成的软件包，再次打包为可执行的软件包，并将mvn package生成的软件包重命名为*.original。")]),n._v(" "),a("p",[n._v("spring-boot-maven-plugin的repackage在代码层面调用了RepackageMojo的execute方法，而在该方法中又调用了repackage方法。repackage方法代码及操作解析如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("private void repackage() throws MojoExecutionException {\n   // maven生成的jar，最终的命名将加上.original后缀\n   Artifact source = getSourceArtifact();\n   // 最终为可执行jar，即fat jar\n   File target = getTargetFile();\n   // 获取重新打包器，将maven生成的jar重新打包成可执行jar\n   Repackager repackager = getRepackager(source.getFile());\n   // 查找并过滤项目运行时依赖的jar\n   Set<Artifact> artifacts = filterDependencies(this.project.getArtifacts(),\n         getFilters(getAdditionalFilters()));\n   // 将artifacts转换成libraries\n   Libraries libraries = new ArtifactsLibraries(artifacts, this.requiresUnpack,\n         getLog());\n   try {\n      // 获得Spring Boot启动脚本\n      LaunchScript launchScript = getLaunchScript();\n      // 执行重新打包，生成fat jar\n      repackager.repackage(target, libraries, launchScript);\n   }catch (IOException ex) {\n      throw new MojoExecutionException(ex.getMessage(), ex);\n   }\n   // 将maven生成的jar更新成.original文件\n   updateArtifact(source, target, repackager.getBackupFile());\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br")])]),a("p",[n._v("执行以上命令之后，便生成了打包结果对应的两个文件。下面针对文件的内容和结构进行一探究竟。")]),n._v(" "),a("p",[a("strong",[n._v("jar包目录结构")])]),n._v(" "),a("p",[n._v("首先来看看jar的目录结构，都包含哪些目录和文件，解压jar包可以看到如下结构：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("spring-boot-learn-0.0.1-SNAPSHOT\n├── META-INF\n│   └── MANIFEST.MF\n├── BOOT-INF\n│   ├── classes\n│   │   └── 应用程序类\n│   └── lib\n│       └── 第三方依赖jar\n└── org\n    └── springframework\n        └── boot\n            └── loader\n                └── springboot启动程序\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[a("strong",[n._v("META-INF内容")])]),n._v(" "),a("p",[n._v("在上述目录结构中，META-INF记录了相关jar包的基础信息，包括入口程序等。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Manifest-Version: 1.0\nImplementation-Title: spring-learn\nImplementation-Version: 0.0.1-SNAPSHOT\nStart-Class: com.tulingxueyuan.Application\nSpring-Boot-Classes: BOOT-INF/classes/\nSpring-Boot-Lib: BOOT-INF/lib/\nBuild-Jdk-Spec: 1.8\nSpring-Boot-Version: 2.1.5.RELEASE\nCreated-By: Maven Archiver 3.4.0\nMain-Class: org.springframework.boot.loader.JarLauncher\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("可以看到有Main-Class是org.springframework.boot.loader.JarLauncher ，这个是jar启动的Main函数。")]),n._v(" "),a("p",[n._v("还有一个Start-Class是com.tulingxueyuan.Application，这个是我们应用自己的Main函数。")]),n._v(" "),a("p",[a("strong",[n._v("Archive的概念")])]),n._v(" "),a("p",[n._v("在继续了解底层概念和原理之前，我们先来了解一下Archive的概念：")]),n._v(" "),a("ul",[a("li",[n._v("archive即归档文件，这个概念在linux下比较常见。")]),n._v(" "),a("li",[n._v("通常就是一个tar/zip格式的压缩包。")]),n._v(" "),a("li",[n._v("jar是zip格式。")])]),n._v(" "),a("p",[n._v("SpringBoot抽象了Archive的概念，一个Archive可以是jar（JarFileArchive），可以是一个文件目录（ExplodedArchive），可以抽象为统一访问资源的逻辑层。关于Spring Boot中Archive的源码如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public interface Archive extends Iterable<Archive.Entry> {\n    // 获取该归档的url\n    URL getUrl() throws MalformedURLException;\n    // 获取jar!/META-INF/MANIFEST.MF或[ArchiveDir]/META-INF/MANIFEST.MF\n    Manifest getManifest() throws IOException;\n    // 获取jar!/BOOT-INF/lib/*.jar或[ArchiveDir]/BOOT-INF/lib/*.jar\n    List<Archive> getNestedArchives(EntryFilter filter) throws IOException;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("SpringBoot定义了一个接口用于描述资源，也就是org.springframework.boot.loader.archive.Archive。该接口有两个实现，分别是org.springframework.boot.loader.archive.ExplodedArchive和org.springframework.boot.loader.archive.JarFileArchive。前者用于在文件夹目录下寻找资源，后者用于在jar包环境下寻找资源。而在SpringBoot打包的fatJar中，则是使用后者。")]),n._v(" "),a("p",[n._v("JarFile：对jar包的封装，每个JarFileArchive都会对应一个JarFile。JarFile被构造的时候会解析内部结构，去获取jar包里的各个文件或文件夹，这些文件或文件夹会被封装到Entry中，也存储在JarFileArchive中。如果Entry是个jar，会解析成JarFileArchive。")]),n._v(" "),a("p",[n._v("比如一个JarFileArchive对应的URL为：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("jar:file:/Users/format/Develop/gitrepository/springboot-analysis/springboot-executable-jar/target/executable-jar-1.0-SNAPSHOT.jar!/\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("它对应的JarFile为：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("/Users/format/Develop/gitrepository/springboot-analysis/springboot-executable-jar/target/executable-jar-1.0-SNAPSHOT.jar\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("这个JarFile有很多Entry，比如：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("META-INF/\nMETA-INF/MANIFEST.MF\nspring/\nspring/study/\n....\nspring/study/executablejar/ExecutableJarApplication.class\nlib/spring-boot-starter-1.3.5.RELEASE.jar\nlib/spring-boot-1.3.5.RELEASE.jar\n...\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("JarFileArchive内部的一些依赖jar对应的URL(SpringBoot使用org.springframework.boot.loader.jar.Handler处理器来处理这些URL)：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("jar:file:/Users/Format/Develop/gitrepository/springboot-analysis/springboot-executable-jar/target/executable-jar-1.0-SNAPSHOT.jar!/lib/spring-boot-starter-web-1.3.5.RELEASE.jar!/\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("jar:file:/Users/Format/Develop/gitrepository/springboot-analysis/springboot-executable-jar/target/executable-jar-1.0-SNAPSHOT.jar!/lib/spring-boot-loader-1.3.5.RELEASE.jar!/org/springframework/boot/loader/JarLauncher.class\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("我们看到如果有jar包中包含jar，或者jar包中包含jar包里面的class文件，那么会使用 "),a("strong",[n._v("!/")]),n._v(" 分隔开，这种方式只有org.springframework.boot.loader.jar.Handler能处理，它是SpringBoot内部扩展出来的一种URL协议。")]),n._v(" "),a("p",[a("strong",[n._v("JarLauncher")])]),n._v(" "),a("p",[n._v("从MANIFEST.MF可以看到Main函数是JarLauncher，下面来分析它的工作流程。JarLauncher类的继承结构是：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class JarLauncher extends ExecutableArchiveLauncher\nclass ExecutableArchiveLauncher extends Launcher\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("Launcher for JAR based archives. This launcher assumes that dependency jars are included inside a /BOOT-INF/lib directory and that application classes are included inside a /BOOT-INF/classes directory.")]),n._v(" "),a("p",[n._v("按照定义，JarLauncher可以加载内部/BOOT-INF/lib下的jar及/BOOT-INF/classes下的应用class，其实JarLauncher实现很简单：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class JarLauncher extends ExecutableArchiveLauncher {\n    public JarLauncher() {}\n    public static void main(String[] args) throws Exception {\n        new JarLauncher().launch(args);\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("其主入口新建了JarLauncher并调用父类Launcher中的launch方法启动程序。在创建JarLauncher时，父类ExecutableArchiveLauncher找到自己所在的jar，并创建archive。")]),n._v(" "),a("p",[n._v("JarLauncher继承于org.springframework.boot.loader.ExecutableArchiveLauncher。该类的无参构造方法最主要的功能就是构建了当前main方法所在的FatJar的JarFileArchive对象。下面来看launch方法。该方法主要是做了2个事情：")]),n._v(" "),a("p",[n._v("（1）以FatJar为file作为入参，构造JarFileArchive对象。获取其中所有的资源目标，取得其Url，将这些URL作为参数，构建了一个URLClassLoader。")]),n._v(" "),a("p",[n._v("（2）以第一步构建的ClassLoader加载MANIFEST.MF文件中Start-Class指向的业务类，并且执行静态方法main。进而启动整个程序。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public abstract class ExecutableArchiveLauncher extends Launcher {\n    private final Archive archive;\n    public ExecutableArchiveLauncher() {\n        try {\n            // 找到自己所在的jar，并创建Archive\n            this.archive = createArchive();\n        }\n        catch (Exception ex) {\n            throw new IllegalStateException(ex);\n        }\n    }\n}\n \n \npublic abstract class Launcher {\n    protected final Archive createArchive() throws Exception {\n        ProtectionDomain protectionDomain = getClass().getProtectionDomain();\n        CodeSource codeSource = protectionDomain.getCodeSource();\n        URI location = (codeSource == null ? null : codeSource.getLocation().toURI());\n        String path = (location == null ? null : location.getSchemeSpecificPart());\n        if (path == null) {\n            throw new IllegalStateException("Unable to determine code source archive");\n        }\n        File root = new File(path);\n        if (!root.exists()) {\n            throw new IllegalStateException(\n                    "Unable to determine code source archive from " + root);\n        }\n        return (root.isDirectory() ? new ExplodedArchive(root)\n                : new JarFileArchive(root));\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("在Launcher的launch方法中，通过以上archive的getNestedArchives方法找到/BOOT-INF/lib下所有jar及/BOOT-INF/classes目录所对应的archive，通过这些archives的url生成LaunchedURLClassLoader，并将其设置为线程上下文类加载器，启动应用。")]),n._v(" "),a("p",[n._v("至此，才执行我们应用程序主入口类的main方法，所有应用程序类文件均可通过/BOOT-INF/classes加载，所有依赖的第三方jar均可通过/BOOT-INF/lib加载。")]),n._v(" "),a("p",[a("strong",[n._v("URLStreamHandler")])]),n._v(" "),a("p",[n._v("java中描述资源常使用URL。而URL有一个方法用于打开链接java.net.URL#openConnection()。由于URL用于表达各种各样的资源，打开资源的具体动作由java.net.URLStreamHandler这个类的子类来完成。根据不同的协议，会有不同的handler实现。而JDK内置了相当多的handler实现用于应对不同的协议。比如jar、file、http等等。URL内部有一个静态HashTable属性，用于保存已经被发现的协议和handler实例的映射。")]),n._v(" "),a("p",[n._v("获得URLStreamHandler有三种方法：")]),n._v(" "),a("p",[n._v("（1）实现URLStreamHandlerFactory接口，通过方法URL.setURLStreamHandlerFactory设置。该属性是一个静态属性，且只能被设置一次。")]),n._v(" "),a("p",[n._v("（2）直接提供URLStreamHandler的子类，作为URL的构造方法的入参之一。但是在JVM中有固定的规范要求：")]),n._v(" "),a("p",[n._v("子类的类名必须是Handler，同时最后一级的包名必须是协议的名称。比如自定义了Http的协议实现，则类名必然为xx.http.Handler；")]),n._v(" "),a("p",[n._v("JVM启动的时候，需要设置java.protocol.handler.pkgs系统属性，如果有多个实现类，那么中间用|隔开。因为JVM在尝试寻找Handler时，会从这个属性中获取包名前缀，最终使用包名前缀.协议名.Handler，使用Class.forName方法尝试初始化类，如果初始化成功，则会使用该类的实现作为协议实现。")]),n._v(" "),a("p",[n._v("为了实现这个目标，SpringBoot首先从支持jar in jar中内容读取做了定制，也就是支持多个!/分隔符的url路径。SpringBoot定制了以下两个方面：")]),n._v(" "),a("p",[n._v("（1）实现了一个java.net.URLStreamHandler的子类org.springframework.boot.loader.jar.Handler。该Handler支持识别多个!/分隔符，并且正确的打开URLConnection。打开的Connection是SpringBoot定制的org.springframework.boot.loader.jar.JarURLConnection实现。")]),n._v(" "),a("p",[n._v("（2）实现了一个java.net.JarURLConnection的子类org.springframework.boot.loader.jar.JarURLConnection。该链接支持多个!/分隔符，并且自己实现了在这种情况下获取InputStream的方法。而为了能够在org.springframework.boot.loader.jar.JarURLConnection正确获取输入流，SpringBoot自定义了一套读取ZipFile的工具类和方法。这部分和ZIP压缩算法规范紧密相连，就不拓展了。")]),n._v(" "),a("h3",{attrs:{id:"spring-boot的jar应用启动流程总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot的jar应用启动流程总结"}},[n._v("#")]),n._v(" Spring Boot的Jar应用启动流程总结")]),n._v(" "),a("p",[n._v("总结一下Spring Boot应用的启动流程：")]),n._v(" "),a("p",[n._v("（1）Spring Boot应用打包之后，生成一个Fat jar，包含了应用依赖的jar包和Spring Boot loader相关的类。")]),n._v(" "),a("p",[n._v("（2）Fat jar的启动Main函数是JarLauncher，它负责创建一个LaunchedURLClassLoader来加载/lib下面的jar，并以一个新线程启动应用的Main函数。")]),n._v(" "),a("p",[n._v("那么，ClassLoader是如何读取到Resource，它又需要哪些能力？查找资源和读取资源的能力。对应的API：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public URL findResource(String name)\npublic InputStream getResourceAsStream(String name)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("SpringBoot构造LaunchedURLClassLoader时，传递了一个URL[]数组。数组里是lib目录下面的jar的URL。")]),n._v(" "),a("p",[n._v("对于一个URL，JDK或者ClassLoader如何知道怎么读取到里面的内容的？流程如下：")]),n._v(" "),a("ul",[a("li",[n._v("LaunchedURLClassLoader.loadClass")]),n._v(" "),a("li",[n._v("URL.getContent()")]),n._v(" "),a("li",[n._v("URL.openConnection()")]),n._v(" "),a("li",[n._v("Handler.openConnection(URL)")])]),n._v(" "),a("p",[n._v("最终调用的是JarURLConnection的getInputStream()函数。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('//org.springframework.boot.loader.jar.JarURLConnection\n @Override\npublic InputStream getInputStream() throws IOException {\n   connect();\n   if (this.jarEntryName.isEmpty()) {\n     throw new IOException("no entry name specified");\n   }\n   return this.jarEntryData.getInputStream();\n }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("从一个URL，到最终读取到URL里的内容，整个过程是比较复杂的，总结下：")]),n._v(" "),a("ul",[a("li",[n._v("Spring boot注册了一个Handler来处理”jar:”这种协议的URL。")]),n._v(" "),a("li",[n._v("Spring boot扩展了JarFile和JarURLConnection，内部处理jar in jar的情况。")]),n._v(" "),a("li",[n._v("在处理多重jar in jar的URL时，Spring Boot会循环处理，并缓存已经加载到的JarFile。")]),n._v(" "),a("li",[n._v("对于多重jar in jar，实际上是解压到了临时目录来处理，可以参考JarFileArchive里的代码。")]),n._v(" "),a("li",[n._v("在获取URL的InputStream时，最终获取到的是JarFile里的JarEntryData。")])]),n._v(" "),a("p",[n._v("细节很多，上面只列出比较重要的步骤。最后，URLClassLoader是如何getResource的呢？URLClassLoader在构造时，有URL[]数组参数，它内部会用这个数组来构造一个URLClassPath:")]),n._v(" "),a("p",[n._v("URLClassPath ucp = new URLClassPath(urls);")]),n._v(" "),a("p",[n._v("在URLClassPath内部会为这些URLS都构造一个Loader，然后在getResource时，会从这些Loader里一个个去尝试获取。如果获取成功的话，就像下面那样包装为一个Resource。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('Resource getResource(final String name, boolean check) {\n    final URL url;\n    try {\n        url = new URL(base, ParseUtil.encodePath(name, false));\n    } catch (MalformedURLException e) {\n        throw new IllegalArgumentException("name");\n    }\n    final URLConnection uc;\n    try {\n        if (check) {\n            URLClassPath.check(url);\n        }\n        uc = url.openConnection();\n        InputStream in = uc.getInputStream();\n        if (uc instanceof JarURLConnection) {\n            /* Need to remember the jar file so it can be closed\n             * in a hurry.\n             */\n            JarURLConnection juc = (JarURLConnection)uc;\n            jarfile = JarLoader.checkJar(juc.getJarFile());\n        }\n    } catch (Exception e) {\n        return null;\n    }\n    return new Resource() {\n        public String getName() { return name; }\n        public URL getURL() { return url; }\n        public URL getCodeSourceURL() { return base; }\n        public InputStream getInputStream() throws IOException {\n            return uc.getInputStream();\n        }\n        public int getContentLength() throws IOException {\n            return uc.getContentLength();\n        }\n    };\n}\n            JarURLConnection juc = (JarURLConnection)uc;\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br")])]),a("p",[n._v("从代码里可以看到，实际上是调用了url.openConnection()。这样完整的链条就可以连接起来了。")]),n._v(" "),a("p",[a("strong",[n._v("在IDE/开放目录启动Spring boot应用")])]),n._v(" "),a("p",[n._v("在上面只提到在一个fat jar里启动SpringBoot应用的过程，那么IDE里Spring boot是如何启动的呢？")]),n._v(" "),a("p",[n._v("在IDE里，直接运行的Main函数是应用的Main函数：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("@SpringBootApplication\npublic class SpringBootDemoApplication {\n \n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemoApplication.class, args);\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("其实在IDE里启动SpringBoot应用是最简单的一种情况，因为依赖的Jar都让IDE放到classpath里了，所以Spring boot直接启动就完事了。")]),n._v(" "),a("p",[n._v("还有一种情况是在一个开放目录下启动SpringBoot启动。所谓的开放目录就是把fat jar解压，然后直接启动应用。")]),n._v(" "),a("p",[n._v("这时，Spring boot会判断当前是否在一个目录里，如果是的，则构造一个ExplodedArchive（前面在jar里时是JarFileArchive），后面的启动流程类似fat jar的。")]),n._v(" "),a("p",[a("strong",[n._v("总结")])]),n._v(" "),a("p",[n._v("JarLauncher通过加载BOOT-INF/classes目录及BOOT-INF/lib目录下jar文件，实现了fat jar的启动。")]),n._v(" "),a("p",[n._v("SpringBoot通过扩展JarFile、JarURLConnection及URLStreamHandler，实现了jar in jar中资源的加载。")]),n._v(" "),a("p",[n._v("SpringBoot通过扩展URLClassLoader–LauncherURLClassLoader，实现了jar in jar中class文件的加载。")]),n._v(" "),a("p",[n._v("WarLauncher通过加载WEB-INF/classes目录及WEB-INF/lib和WEB-INF/lib-provided目录下的jar文件，实现了war文件的直接启动及web容器中的启动。")]),n._v(" "),a("h2",{attrs:{id:"springboot是如何启动spring容器源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot是如何启动spring容器源码"}},[n._v("#")]),n._v(" SpringBoot是如何启动Spring容器源码：")]),n._v(" "),a("p",[n._v("SpringBoot 事假监听器发布顺序：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1.ApplicationStartingEvent在运行开始时发送，但在进行任何处理之前（侦听器和初始化程序的注册除外）发送。\n2.在创建上下文之前，将发送ApplicationEnvironmentPreparedEvent。\n3.准备ApplicationContext并调用ApplicationContextInitializers之后，将发送ApplicationContextInitializedEvent。\n4.读取完配置类后发送ApplicationPreparedEvent。\n5.在刷新上下文之后但在调用任何应用程序和命令行运行程序之前，将发送ApplicationStartedEvent。\n6.紧随其后发送带有LivenessState.CORRECT的AvailabilityChangeEvent，以指示该应用程序被视为处于活动状态。\n7.在调用任何应用程序和命令行运行程序之后，将发送ApplicationReadyEvent。\n8.紧随其后发送ReadabilityState.ACCEPTING_TRAFFIC的AvailabilityChangeEvent，以指示应用程序已准备就绪，可以处理请求。\n如果启动时发生异常，则发送ApplicationFailedEvent。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("1.ApplicationStartingEvent")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621150607799.png",alt:"image-20220621150607799"}})]),n._v(" "),a("p",[n._v("2.ApplicationEnvironmentPreparedEvent")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621150703343.png",alt:"image-20220621150703343"}})]),n._v(" "),a("p",[n._v("1 调用SpringApplication.run启动springboot应用")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("SpringApplication.run(Application.class, args);\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("\\2. 使用自定义SpringApplication进行启动")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public static ConfigurableApplicationContext run(Class<?>[] primarySources, String[] args) {\n   return new SpringApplication(primarySources).run(args);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h3",{attrs:{id:"_1-创建springapplication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建springapplication"}},[n._v("#")]),n._v(" 1. 创建SpringApplication")]),n._v(" "),a("ul",[a("li",[n._v("new SpringApplication(primarySources)")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {\n   this.resourceLoader = resourceLoader;\n   Assert.notNull(primarySources, "PrimarySources must not be null");\n   // 将启动类放入primarySources \n   this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));\n   // 根据classpath 下的类，推算当前web应用类型(webFlux, servlet)\n   this.webApplicationType = WebApplicationType.deduceFromClasspath();\n   // 就是去spring.factories 中去获取所有key:org.springframework.context.ApplicationContextInitializer\n   setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));\n   //就是去spring.factories 中去获取所有key: org.springframework.context.ApplicationListener\n   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n   // 根据main方法推算出mainApplicationClass \n   this.mainApplicationClass = deduceMainApplicationClass();\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("ul",[a("li",[n._v("org.springframework.context.ApplicationContextInitializer")])]),n._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621150912832.png",alt:"image-20220621150912832"}})]),n._v(" "),a("p",[n._v("​")]),n._v(" "),a("ul",[a("li",[n._v("org.springframework.context.ApplicationListener")])]),n._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621150955088.png",alt:"image-20220621150955088"}})]),n._v(" "),a("p",[n._v("总结：")]),n._v(" "),a("p",[n._v("\\1. 获取启动类:根据启动类加载ioc容器")]),n._v(" "),a("p",[n._v("2.获取web应用类型")]),n._v(" "),a("p",[n._v("3.spring.factories读取了对外扩展的ApplicationContextInitializer   ,ApplicationListener   对外扩展， 对类解耦（比如全局配置文件、热部署插件）")]),n._v(" "),a("p",[n._v("\\4. 根据main推算出所在的类")]),n._v(" "),a("p",[n._v("就是去初始化了一些信息")]),n._v(" "),a("h3",{attrs:{id:"_2-启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动"}},[n._v("#")]),n._v(" 2.启动")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("run")])]),n._v(" "),a("li",[a("ul",[a("li",[n._v("启动springboot最核心的逻辑")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public ConfigurableApplicationContext run(String... args) {\n    // 用来记录当前springboot启动耗时\n   StopWatch stopWatch = new StopWatch();\n   // 就是记录了启动开始时间\n   stopWatch.start();\n   // 它是任何spring上下文的接口， 所以可以接收任何ApplicationContext实现\n   ConfigurableApplicationContext context = null;\n   Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n   // 开启了Headless模式：\n   configureHeadlessProperty();\n   // 去spring.factroies中读取了SpringApplicationRunListener 的组件，  就是用来发布事件或者运行监听器\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n   // 发布1.ApplicationStartingEvent事件，在运行开始时发送\n   listeners.starting();\n   try {\n       // 根据命令行参数 实例化一个ApplicationArguments \n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);\n      // 预初始化环境： 读取环境变量，读取配置文件信息（基于监听器）\n      ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);\n      // 忽略beaninfo的bean\n      configureIgnoreBeanInfo(environment);\n      // 打印Banner 横幅\n      Banner printedBanner = printBanner(environment);\n      // 根据webApplicationType创建Spring上下文  \n      context = createApplicationContext();\n      exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,\n            new Class[] { ConfigurableApplicationContext.class }, context);\n      //预初始化spring上下文\n      prepareContext(context, environment, listeners, applicationArguments, printedBanner);\n      // 加载spring ioc 容器   **相当重要   由于是使用AnnotationConfigServletWebServerApplicationContext 启动的spring容器所以springboot对它做了扩展：\n      //  加载自动配置类：invokeBeanFactoryPostProcessors ，  创建servlet容器onRefresh\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);\n      }\n      listeners.started(context);\n      callRunners(context, applicationArguments);\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, ex, exceptionReporters, listeners);\n      throw new IllegalStateException(ex);\n   }\n\n   try {\n      listeners.running(context);\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, ex, exceptionReporters, null);\n      throw new IllegalStateException(ex);\n   }\n   return context;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br")])]),a("ul",[a("li",[n._v("prepareEnvironment")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,\n      ApplicationArguments applicationArguments) {\n   // 根据webApplicationType 创建Environment  创建就会读取： java环境变量和系统环境变量\n   ConfigurableEnvironment environment = getOrCreateEnvironment();\n   // 将命令行参数读取环境变量中\n   configureEnvironment(environment, applicationArguments.getSourceArgs());\n   // 将@PropertieSource的配置信息 放在第一位， 因为读取配置文件@PropertieSource优先级是最低的\n   ConfigurationPropertySources.attach(environment);\n   // 发布了ApplicationEnvironmentPreparedEvent 的监听器  读取了全局配置文件\n   listeners.environmentPrepared(environment);\n   // 将所有spring.main 开头的配置信息绑定SpringApplication\n   bindToSpringApplication(environment);\n   if (!this.isCustomEnvironment) {\n      environment = new EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,\n            deduceEnvironmentClass());\n   }\n   //更新PropertySources\n   ConfigurationPropertySources.attach(environment);\n   return environment;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("prepareContext")])]),n._v(" "),a("li",[a("ul",[a("li",[n._v("预初始化上下文")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('private void prepareContext(ConfigurableApplicationContext context, ConfigurableEnvironment environment,\n      SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner) {\n   context.setEnvironment(environment);\n   postProcessApplicationContext(context);\n   // 拿到之前读取到所有ApplicationContextInitializer的组件， 循环调用initialize方法\n   applyInitializers(context);\n   // 发布了ApplicationContextInitializedEvent\n   listeners.contextPrepared(context);\n   if (this.logStartupInfo) {\n      logStartupInfo(context.getParent() == null);\n      logStartupProfileInfo(context);\n   }\n   // 获取当前spring上下文beanFactory (负责创建bean)\n   ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n   beanFactory.registerSingleton("springApplicationArguments", applicationArguments);\n   if (printedBanner != null) {\n      beanFactory.registerSingleton("springBootBanner", printedBanner);\n   }\n   // 在Spring下 如果出现2个重名的bean, 则后读取到的会覆盖前面\n   // 在SpringBoot 在这里设置了不允许覆盖， 当出现2个重名的bean 会抛出异常\n   if (beanFactory instanceof DefaultListableBeanFactory) {\n      ((DefaultListableBeanFactory) beanFactory)\n            .setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n   }\n   // 设置当前spring容器是不是要将所有的bean设置为懒加载\n   if (this.lazyInitialization) {\n      context.addBeanFactoryPostProcessor(new LazyInitializationBeanFactoryPostProcessor());\n   }\n   // Load the sources\n   Set<Object> sources = getAllSources();\n   Assert.notEmpty(sources, "Sources must not be empty");\n   // 读取主启动类,将它注册为BD、就像我们以前register(启动类);一个意思 （因为后续要根据配置类解析配置的所有bean)\n   load(context, sources.toArray(new Object[0]));\n   //4.读取完配置类后发送ApplicationPreparedEvent。\n   listeners.contextLoaded(context);\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br")])]),a("p",[n._v("总结：")]),n._v(" "),a("p",[n._v("\\1. 初始化SpringApplication  从spring.factories  读取 listener  ApplicationContextInitializer   。")]),n._v(" "),a("p",[n._v("2.运行run方法")]),n._v(" "),a("p",[n._v("3.读取 环境变量   配置信息.....")]),n._v(" "),a("p",[n._v("\\4. 创建springApplication上下文:"),a("strong",[n._v("ServletWebServerApplicationContext")])]),n._v(" "),a("p",[n._v("\\5. 预初始化上下文 ： 读取启动类")]),n._v(" "),a("p",[n._v("6.调用refresh 加载ioc容器")]),n._v(" "),a("p",[n._v("加载所有的自动配置类")]),n._v(" "),a("p",[n._v("创建servlet容器")]),n._v(" "),a("p",[n._v("ps.在这个过程中springboot会调用很多监听器对外进行扩展")]),n._v(" "),a("h2",{attrs:{id:"使用外部servlet容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用外部servlet容器"}},[n._v("#")]),n._v(" 使用外部Servlet容器")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("外部servlet容器")])]),n._v(" "),a("li",[a("ul",[a("li",[n._v("服务器、本机  安装tomcat  环境变量...")]),n._v(" "),a("li",[n._v("部署： war---运维---\x3etomcat webapp startup.sh   启动")]),n._v(" "),a("li",[n._v("开发： 将开发绑定本地tomcat")]),n._v(" "),a("li",[n._v("开发  、  运维   服务器配置 war")])])]),n._v(" "),a("li",[a("p",[n._v("内嵌servlet容器：")])]),n._v(" "),a("li",[a("ul",[a("li",[n._v("部署： jar---\x3e 运维---java -jar 启动")])])])]),n._v(" "),a("p",[n._v("使用：")]),n._v(" "),a("p",[n._v("\\1. 下载tomcat服务")]),n._v(" "),a("p",[n._v("2.设置当前maven项目的打包方式")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\x3c!--打包方式  默认是jar--\x3e\n<packaging>war</packaging>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("3.让tomcat相关的依赖不参与打包部署  ，因为外置tomcat服务器已经有这些jar包")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\x3c!--让它不参与打包部署--\x3e\n<dependency>\n    <artifactId>spring-boot-starter-tomcat</artifactId>\n    <groupId>org.springframework.boot</groupId>\n    <scope>provided</scope>\n</dependency>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("\\4. 为了让它支持springboot需要加上：  才能启动springboot应用")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class TomcatStartSpringBoot extends SpringBootServletInitializer {\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(Application.class);\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("\\5. 在idea中运行")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621151141707.png",alt:"image-20220621151141707"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621151202807.png",alt:"image-20220621151202807"}})]),n._v(" "),a("h2",{attrs:{id:"外部servlet容器启动springboot应用原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外部servlet容器启动springboot应用原理"}},[n._v("#")]),n._v(" 外部Servlet容器启动SpringBoot应用原理")]),n._v(" "),a("p",[a("strong",[n._v("tomcat---\x3e web.xml--filter  servlet listener   3.0+")])]),n._v(" "),a("p",[n._v("tomcat不会主动去启动springboot应用 ，， 所以tomcat启动的时候肯定调用了SpringBootServletInitializer的SpringApplicationBuilder ， 就会启动springboot")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class TomcatStartSpringBoot extends SpringBootServletInitializer {\n    @Override\n    protected SpringApplicationBuilder (SpringApplicationBuilder builder) {\n        return builder.sources(Application.class);\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("servlet3.0 规范官方文档： 8.2.4")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621151245838.png",alt:"image-20220621151245838"}})]),n._v(" "),a("h3",{attrs:{id:"什么是spi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是spi"}},[n._v("#")]),n._v(" 什么是SPI")]),n._v(" "),a("p",[n._v("SPI ，全称为 Service Provider Interface(服务提供者接口)，是一种服务发现机制。它通过在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。")]),n._v(" "),a("p",[n._v("大概：  当servlet容器启动时候  就会去META-INF/services  文件夹中找到javax.servlet.ServletContainerInitializer,      这个文件里面肯定绑定一个ServletContainerInitializer.   当servlet容器启动时候就会去该文件中找到ServletContainerInitializer的实现类，从而创建它的实例调用onstartUp")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("@HandlesTypes(WebApplicationInitializer.class).")])]),n._v(" "),a("li",[a("ul",[a("li",[n._v("@HandlesTypes传入的类为ServletContainerInitializer感兴趣的")]),n._v(" "),a("li",[n._v("容器会自动在classpath中找到 WebApplicationInitializer   会传入到onStartup方法的webAppInitializerClasses中")]),n._v(" "),a("li",[n._v("Set> webAppInitializerClasses 这里面也包括之前定义的TomcatStartSpringBoot")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("@HandlesTypes(WebApplicationInitializer.class)\npublic class SpringServletContainerInitializer implements ServletContainerInitializer {\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('@Override\npublic void onStartup(@Nullable Set<Class<?>> webAppInitializerClasses, ServletContext servletContext)\n      throws ServletException {\n\n   List<WebApplicationInitializer> initializers = new LinkedList<>();\n\n   if (webAppInitializerClasses != null) {\n      for (Class<?> waiClass : webAppInitializerClasses) {\n        // 如果不是接口 不是抽象 跟WebApplicationInitializer有关系  就会实例化\n         if (!waiClass.isInterface() && !Modifier.isAbstract(waiClass.getModifiers()) &&\n               WebApplicationInitializer.class.isAssignableFrom(waiClass)) {\n            try {\n               initializers.add((WebApplicationInitializer)\n                     ReflectionUtils.accessibleConstructor(waiClass).newInstance());\n            }\n            catch (Throwable ex) {\n               throw new ServletException("Failed to instantiate WebApplicationInitializer class", ex);\n            }\n         }\n      }\n   }\n\n   if (initializers.isEmpty()) {\n      servletContext.log("No Spring WebApplicationInitializer types detected on classpath");\n      return;\n   }\n\n   servletContext.log(initializers.size() + " Spring WebApplicationInitializers detected on classpath");\n   // 排序\n   AnnotationAwareOrderComparator.sort(initializers);\n   for (WebApplicationInitializer initializer : initializers) {\n      initializer.onStartup(servletContext);\n   }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621151502501.png",alt:"image-20220621151502501"}})]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('@Override\npublic void onStartup(ServletContext servletContext) throws ServletException {\n   // Logger initialization is deferred in case an ordered\n   // LogServletContextInitializer is being used\n   this.logger = LogFactory.getLog(getClass());\n   WebApplicationContext rootApplicationContext = createRootApplicationContext(servletContext);\n   if (rootApplicationContext != null) {\n      servletContext.addListener(new SpringBootContextLoaderListener(rootApplicationContext, servletContext));\n   }\n   else {\n      this.logger.debug("No ContextLoaderListener registered, as createRootApplicationContext() did not "\n            + "return an application context");\n   }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("SpringBootServletInitializer")])]),n._v(" "),a("li",[a("ul",[a("li",[n._v("之前定义的TomcatStartSpringBoot 就是继承它")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('protected WebApplicationContext createRootApplicationContext(ServletContext servletContext) {\n   SpringApplicationBuilder builder = createSpringApplicationBuilder();\n   builder.main(getClass());\n   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);\n   if (parent != null) {\n      this.logger.info("Root context already created (using as parent).");\n      servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);\n      builder.initializers(new ParentContextApplicationContextInitializer(parent));\n   }\n   builder.initializers(new ServletContextApplicationContextInitializer(servletContext));\n   builder.contextClass(AnnotationConfigServletWebServerApplicationContext.class);\n   // 调用configure\n   builder = configure(builder);\n   builder.listeners(new WebEnvironmentPropertySourceInitializer(servletContext));\n   SpringApplication application = builder.build();\n   if (application.getAllSources().isEmpty()\n         && MergedAnnotations.from(getClass(), SearchStrategy.TYPE_HIERARCHY).isPresent(Configuration.class)) {\n      application.addPrimarySources(Collections.singleton(getClass()));\n   }\n   Assert.state(!application.getAllSources().isEmpty(),\n         "No SpringApplication sources have been defined. Either override the "\n               + "configure method or add an @Configuration annotation");\n   // Ensure error pages are registered\n   if (this.registerErrorPageFilter) {\n      application.addPrimarySources(Collections.singleton(ErrorPageFilterConfiguration.class));\n   }\n   application.setRegisterShutdownHook(false);\n   return run(application);\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("当调用configure就会来到TomcatStartSpringBoot .configure")])]),n._v(" "),a("li",[a("ul",[a("li",[n._v("将Springboot启动类传入到builder.source")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("@Override\nprotected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n    return builder.sources(Application.class);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("// 调用SpringApplication application = builder.build();  就会根据传入的Springboot启动类来构建一个SpringApplication")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public SpringApplication build(String... args) {\n   configureAsChildIfNecessary(args);\n   this.application.addPrimarySources(this.sources);\n   return this.application;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("//   调用 return run(application);   就会帮我启动springboot应用")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("protected WebApplicationContext run(SpringApplication application) {\n   return (WebApplicationContext) application.run();\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("​")]),n._v(" "),a("p",[n._v("它就相当于我们的")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public static void main(String[] args) {\n    SpringApplication.run(Application.class, args);\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("​    "),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220621151642441.png",alt:"image-20220621151642441"}})]),n._v(" "),a("p",[n._v("其实这2个实现类就是帮我创建ContextLoaderListener  和DispatcherServlet")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("<listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n\x3c!--全局参数：spring配置文件--\x3e\n<context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring-core.xml</param-value>\n</context-param>\n\n\n\x3c!--前端调度器servlet--\x3e\n<servlet>\n    <servlet-name>dispatcherServlet</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    \x3c!--设置配置文件的路径--\x3e\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:spring-mvc.xml</param-value>\n    </init-param>\n    \x3c!--设置启动即加载--\x3e\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>dispatcherServlet</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("p",[n._v("​    "),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/spi.png",alt:""}})])])}),[],!1,null,null,null);a.default=t.exports}}]);