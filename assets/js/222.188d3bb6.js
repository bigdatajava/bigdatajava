(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{567:function(t,n,e){"use strict";e.r(n);var s=e(1),a=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("U2FsdGVkX18BUDPTUIVeZtITySu73RuoE5TBeHBDvOFN6Pu+4oJFmmdgt2KNuhvK\nYbY3sRKReHjkYjf4eBospvtNLc1RIAFMYQzh23MbwIgSS/TOhv2YALwmrHwb1VmH\nm+NSfFPbEt6OwJE=\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("h2",{attrs:{id:"简单工厂-beanfactory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂-beanfactory"}},[t._v("#")]),t._v(" 简单工厂——BeanFactory")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("p",[t._v("BeanFactory。Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定。")]),t._v(" "),n("p",[n("strong",[t._v("实质：")])]),t._v(" "),n("p",[t._v("由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类。")]),t._v(" "),n("p",[n("strong",[t._v("实现原理：")])]),t._v(" "),n("p",[n("strong",[t._v("bean容器的启动阶段：")])]),t._v(" "),n("ul",[n("li",[t._v("读取bean的配置,将bean元素分别转换成一个BeanDefinition对象。")]),t._v(" "),n("li",[t._v("然后通过BeanDefinitionRegistry将这些bean注册到beanFactory中，保存在它的一个ConcurrentHashMap中。")]),t._v(" "),n("li",[t._v("将BeanDefinition注册到了beanFactory之后，在这里Spring为我们提供了一个扩展的切口，允许我们通过实现接口BeanFactoryPostProcessor 在此处来插入我们定义的代码。")])]),t._v(" "),n("p",[t._v("典型的例子就是：PropertyPlaceholderConfigurer，我们一般在配置数据库的dataSource时使用到的占位符的值，就是它注入进去的。")]),t._v(" "),n("p",[n("strong",[t._v("容器中bean的实例化阶段：")])]),t._v(" "),n("p",[t._v("实例化阶段主要是通过反射或者CGLIB对bean进行实例化，在这个阶段Spring又给我们暴露了很多的扩展点：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("各种的Aware接口")]),t._v("，比如 BeanFactoryAware，对于实现了这些Aware接口的bean，在实例化bean时Spring会帮我们注入对应的BeanFactory的实例。")]),t._v(" "),n("li",[n("strong",[t._v("BeanPostProcessor接口")]),t._v("，实现了BeanPostProcessor接口的bean，在实例化bean时Spring会帮我们调用接口中的方法。")]),t._v(" "),n("li",[n("strong",[t._v("InitializingBean接口")]),t._v("，实现了InitializingBean接口的bean，在实例化bean时Spring会帮我们调用接口中的方法。")]),t._v(" "),n("li",[n("strong",[t._v("DisposableBean接口")]),t._v("，实现了BeanPostProcessor接口的bean，在该bean死亡时Spring会帮我们调用接口中的方法。")])]),t._v(" "),n("p",[n("strong",[t._v("设计意义：")])]),t._v(" "),n("p",[t._v("**松耦合。**可以将原来硬编码的依赖，通过Spring这个beanFactory这个工厂来注入依赖，也就是说原来只有依赖方和被依赖方，现在我们引入了第三方——spring这个beanFactory，由它来解决bean之间的依赖问题，达到了松耦合的效果.")]),t._v(" "),n("p",[t._v("**bean的额外处理。**通过Spring接口的暴露，在实例化bean的阶段我们可以进行一些额外的处理，这些额外的处理只需要让bean实现对应的接口即可，那么spring就会在bean的生命周期调用我们实现的接口来处理该bean。[非常重要]")]),t._v(" "),n("h2",{attrs:{id:"工厂方法-factorybean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法-factorybean"}},[t._v("#")]),t._v(" 工厂方法——FactoryBean")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("p",[t._v("FactoryBean接口。")]),t._v(" "),n("p",[n("strong",[t._v("实现原理：")])]),t._v(" "),n("p",[t._v("实现了FactoryBean接口的bean是一类叫做factory的bean。其特点是，spring会在使用getBean()调用获得该bean时，会自动调用该bean的getObject()方法，所以返回的不是factory这个bean，而是这个bean.getOjbect()方法的返回值。")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("p",[t._v("典型的例子有spring与mybatis的结合。")]),t._v(" "),n("p",[n("strong",[t._v("代码示例：")])]),t._v(" "),n("p",[t._v("​    "),n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/5967.png",alt:"0"}})]),t._v(" "),n("p",[n("strong",[t._v("说明：")])]),t._v(" "),n("p",[t._v("我们看上面该bean，因为实现了FactoryBean接口，所以返回的不是 SqlSessionFactoryBean 的实例，而是它的 SqlSessionFactoryBean.getObject() 的返回值。")]),t._v(" "),n("p",[t._v("扩展："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487170&idx=2&sn=34b135090c064c1ca202d629a4beab52&chksm=ebd631eedca1b8f85e444f7544c2cbe696b253fe3916f17dbcfbab49b6b74653126c230fdc39&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（工厂方法）"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"单例模式-bean实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-bean实例"}},[t._v("#")]),t._v(" 单例模式——Bean实例")]),t._v(" "),n("p",[t._v("Spring依赖注入Bean实例默认是单例的。")]),t._v(" "),n("p",[t._v("Spring的依赖注入（包括lazy-init方式）都是发生在AbstractBeanFactory的getBean里。getBean的doGetBean方法调用getSingleton进行bean的创建。")]),t._v(" "),n("p",[t._v("分析getSingleton()方法")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("protectedObjectgetSingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringbeanName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" booleanallowEarlyReference"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//检查缓存中是否存在实例")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectsingletonObject")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singletonObjects"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singletonObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSingletonCurrentlyInCreation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果为空，则锁定全局变量并进行处理。")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singletonObjects"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果此bean正在加载，则不处理")]),t._v("\n                singletonObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("earlySingletonObjects"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singletonObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" allowEarlyReference"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当某些方法需要提前初始化的时候则会调用addSingleFactory方法将对应的ObjectFactory初始化策略存储在singletonFactories")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectFactorysingletonFactory")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singletonFactories"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singletonFactory "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用预先设定的getObject方法")]),t._v("\n                        singletonObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" singletonFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//记录在缓存中，earlysingletonObjects和singletonFactories互斥")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("earlySingletonObjects"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" singletonObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("singletonFactories"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singletonObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL_OBJECT")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" singletonObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br")])]),n("p",[t._v("​")]),t._v(" "),n("p",[n("strong",[t._v("getSingleton()过程图")])]),t._v(" "),n("p",[t._v("ps：spring依赖注入时，使用了 双重判断加锁 的单例模式")]),t._v(" "),n("p",[t._v("​    "),n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/5963.png",alt:"0"}})]),t._v(" "),n("p",[n("strong",[t._v("总结")])]),t._v(" "),n("p",[t._v("单例模式定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。")]),t._v(" "),n("p",[t._v("Spring对单例的实现：spring中的单例模式完成了后半句话，即提供了全局的访问点BeanFactory。但没有从构造器级别去控制单例，这是因为spring管理的是任意的java对象。")]),t._v(" "),n("p",[t._v("扩展："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485826&idx=2&sn=e21d6188ea07a992f1eb9a6671ae7485&chksm=ebd636aedca1bfb8ff0ad69343ab40e87cd65ec41e2dfc54d761e97e9058effe6bd2eac28486&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（单例）"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"适配器模式-springmvc中的handleradatper"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式-springmvc中的handleradatper"}},[t._v("#")]),t._v(" 适配器模式——SpringMVC中的HandlerAdatper")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("p",[t._v("SpringMVC中的适配器HandlerAdatper。")]),t._v(" "),n("p",[n("strong",[t._v("实现原理：")])]),t._v(" "),n("p",[t._v("HandlerAdatper根据Handler规则执行不同的Handler。")]),t._v(" "),n("p",[n("strong",[t._v("实现过程：")])]),t._v(" "),n("p",[t._v("DispatcherServlet根据HandlerMapping返回的handler，向HandlerAdatper发起请求，处理Handler。")]),t._v(" "),n("p",[t._v("HandlerAdapter根据规则找到对应的Handler并让其执行，执行完毕后Handler会向HandlerAdapter返回一个ModelAndView，最后由HandlerAdapter向DispatchServelet返回一个ModelAndView。")]),t._v(" "),n("p",[n("strong",[t._v("实现意义：")])]),t._v(" "),n("p",[t._v("HandlerAdatper使得Handler的扩展变得容易，只需要增加一个新的Handler和一个对应的HandlerAdapter即可。")]),t._v(" "),n("p",[t._v("因此Spring定义了一个适配接口，使得每一种Controller有一种对应的适配器实现类，让适配器代替controller执行相应的方法。这样在扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展了。")]),t._v(" "),n("p",[t._v("扩展："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485849&idx=2&sn=79922e3fe8278d01e3fab1870ed824bc&chksm=ebd636b5dca1bfa3c83c3d2d740e25553bc1ba686b2ea6de46acc14d9ea547eb636e24ac7db0&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（适配器）"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"装饰器模式-beanwrapper"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式-beanwrapper"}},[t._v("#")]),t._v(" 装饰器模式——BeanWrapper")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("p",[t._v("Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。")]),t._v(" "),n("p",[n("strong",[t._v("实质：")])]),t._v(" "),n("p",[t._v("动态地给一个对象添加一些额外的职责。")]),t._v(" "),n("p",[t._v("就增加功能来说，Decorator模式相比生成子类更为灵活。")]),t._v(" "),n("p",[t._v("扩展："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486377&idx=2&sn=e88370d32c36b19ac89189341cbaf03b&chksm=ebd63485dca1bd93fd46ce901b8ed5adaa0f1f5db15b8a19902bef66a05bd38ed420e26f7f5e&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（装饰）"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"代理模式-aop底层"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代理模式-aop底层"}},[t._v("#")]),t._v(" 代理模式——AOP底层")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("p",[t._v("AOP底层，就是动态代理模式的实现。")]),t._v(" "),n("p",[n("strong",[t._v("动态代理：")])]),t._v(" "),n("p",[t._v("在内存中构建的，不需要手动编写代理类")]),t._v(" "),n("p",[n("strong",[t._v("静态代理：")])]),t._v(" "),n("p",[t._v("需要手工编写代理类，代理类引用被代理对象。")]),t._v(" "),n("p",[n("strong",[t._v("实现原理：")])]),t._v(" "),n("p",[t._v("切面在应用运行的时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象创建动态的创建一个代理对象。SpringAOP就是以这种方式织入切面的。")]),t._v(" "),n("p",[t._v("织入：把切面应用到目标对象并创建新的代理对象的过程。")]),t._v(" "),n("p",[t._v("扩展："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487054&idx=2&sn=489695986c038525e25c017c217b72fb&chksm=ebd63162dca1b874edcaa30680e1da4d3a02c9b0011cb5c60c22d2b9ebea9169022813810bd5&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（代理）"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"观察者模式-spring的事件监听"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式-spring的事件监听"}},[t._v("#")]),t._v(" 观察者模式——spring的事件监听")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("p",[t._v("spring的事件驱动模型使用的是 观察者模式 ，Spring中Observer模式常用的地方是listener的实现。")]),t._v(" "),n("p",[n("strong",[t._v("具体实现：")])]),t._v(" "),n("p",[t._v("事件机制的实现需要三个部分,事件源,事件,事件监听器")]),t._v(" "),n("p",[t._v("ApplicationEvent抽象类[事件]")]),t._v(" "),n("p",[t._v("继承自jdk的EventObject,所有的事件都需要继承ApplicationEvent,并且通过构造器参数source得到事件源.")]),t._v(" "),n("p",[t._v("该类的实现类ApplicationContextEvent表示ApplicaitonContext的容器事件.")]),t._v(" "),n("p",[t._v("代码：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventObject")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" serialVersionUID "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7099057708183571937L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timestamp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timestamp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" longget "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Timestamp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            returnthis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timestamp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("p",[t._v("ApplicationListener接口[事件监听器]")]),t._v(" "),n("p",[t._v("继承自jdk的EventListener,所有的监听器都要实现这个接口。")]),t._v(" "),n("p",[t._v("这个接口只有一个onApplicationEvent()方法,该方法接受一个ApplicationEvent或其子类对象作为参数,在方法体中,可以通过不同对Event类的判断来进行相应的处理。")]),t._v(" "),n("p",[t._v("当事件触发时所有的监听器都会收到消息。")]),t._v(" "),n("p",[t._v("代码：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public interface ApplicationListener<EextendsApplicationEvent> extends EventListener{\n    voidonApplicationEvent(E event);\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("ApplicationContext接口[事件源]")]),t._v(" "),n("p",[t._v("ApplicationContext是spring中的全局容器，翻译过来是”应用上下文”。")]),t._v(" "),n("p",[t._v("实现了ApplicationEventPublisher接口。")]),t._v(" "),n("p",[n("strong",[t._v("职责：")])]),t._v(" "),n("p",[t._v("负责读取bean的配置文档,管理bean的加载,维护bean之间的依赖关系,可以说是负责bean的整个生命周期,再通俗一点就是我们平时所说的IOC容器。")]),t._v(" "),n("p",[t._v("代码：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\npublic interface ApplicationEventPublisher {\n    voidpublishEvent(ApplicationEventevent);\n}\n\n    public voi dpublishEvent(ApplicationEventevent) {\n        Assert.notNull(event, "Eventmustnotbenull");\n        if (logger.isTraceEnabled()) {\n            logger.trace("Publishingeventin" + getDisplayName() + ":" + event);\n        }\n        getApplicationEventMulticaster().multicastEvent(event);\n        if (this.parent != null) {\n            this.parent.publishEvent(event);\n        }\n    }\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br")])]),n("p",[t._v("​")]),t._v(" "),n("p",[t._v("ApplicationEventMulticaster抽象类[事件源中publishEvent方法需要调用其方法getApplicationEventMulticaster]")]),t._v(" "),n("p",[t._v("属于事件广播器,它的作用是把Applicationcontext发布的Event广播给所有的监听器.")]),t._v(" "),n("p",[t._v("代码：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    public abstract class AbstractApplicationContext extends DefaultResourceLoader\n            implements ConfigurableApplicationContext, DisposableBean {\n        \n        private ApplicationEventMulticaster applicationEventMulticaster;\n\n        protected void registerListeners() {\n            //Register statically specified listeners first.\n            for (ApplicationListener > listener:getApplicationListeners()){\n                getApplicationEventMulticaster().addApplicationListener(listener);\n            }\n            //Do not initialize FactoryBeans here:We need to leave all regular beans\n            //uninitialized to let post-processors apply to them!\n            String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);\n            for (String lisName : listenerBeanNames) {\n                getApplicationEventMulticaster().addApplicationListenerBean(lisName);\n            }\n        }\n    }\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br")])]),n("p",[t._v("扩展："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486897&idx=2&sn=927e4dd95695163fa250447ea88e12e8&chksm=ebd6329ddca1bb8bebcd94bc31396ae55c6f28e0ec2057203605aedf9b8cb4a7243c1202e3c5&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（观察者）"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"策略模式-excludefilters、includefilters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#策略模式-excludefilters、includefilters"}},[t._v("#")]),t._v(" 策略模式——excludeFilters、includeFilters")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("p",[t._v("Spring框架的资源访问Resource接口。该接口提供了更强的资源访问能力，Spring 框架本身大量使用了 Resource 接口来访问底层资源。")]),t._v(" "),n("p",[n("strong",[t._v("Resource 接口介绍")])]),t._v(" "),n("p",[t._v("source 接口是具体资源访问策略的抽象，也是所有资源访问类所实现的接口。")]),t._v(" "),n("p",[t._v("Resource 接口主要提供了如下几个方法:")]),t._v(" "),n("ul",[n("li",[t._v("**getInputStream()：**定位并打开资源，返回资源对应的输入流。每次调用都返回新的输入流。调用者必须负责关闭输入流。")]),t._v(" "),n("li",[t._v("**exists()：**返回 Resource 所指向的资源是否存在。")]),t._v(" "),n("li",[t._v("**isOpen()：**返回资源文件是否打开，如果资源文件不能多次读取，每次读取结束应该显式关闭，以防止资源泄漏。")]),t._v(" "),n("li",[t._v("**getDescription()：**返回资源的描述信息，通常用于资源处理出错时输出该信息，通常是全限定文件名或实际 URL。")]),t._v(" "),n("li",[t._v("**getFile：**返回资源对应的 File 对象。")]),t._v(" "),n("li",[t._v("**getURL：**返回资源对应的 URL 对象。")])]),t._v(" "),n("p",[t._v("最后两个方法通常无须使用，仅在通过简单方式访问无法实现时，Resource 提供传统的资源访问的功能。")]),t._v(" "),n("p",[t._v("Resource 接口本身没有提供访问任何底层资源的实现逻辑，"),n("strong",[t._v("针对不同的底层资源，Spring 将会提供不同的 Resource 实现类，不同的实现类负责不同的资源访问逻辑。")])]),t._v(" "),n("p",[t._v("Spring 为 Resource 接口提供了如下实现类：")]),t._v(" "),n("ul",[n("li",[t._v("**UrlResource：**访问网络资源的实现类。")]),t._v(" "),n("li",[t._v("**ClassPathResource：**访问类加载路径里资源的实现类。")]),t._v(" "),n("li",[t._v("**FileSystemResource：**访问文件系统里资源的实现类。")]),t._v(" "),n("li",[t._v("**ServletContextResource：**访问相对于 ServletContext 路径里的资源的实现类.")]),t._v(" "),n("li",[t._v("**InputStreamResource：**访问输入流资源的实现类。")]),t._v(" "),n("li",[t._v("**ByteArrayResource：**访问字节数组资源的实现类。")])]),t._v(" "),n("p",[t._v("这些 Resource 实现类，针对不同的的底层资源，提供了相应的资源访问逻辑，并提供便捷的包装，以利于客户端程序的资源访问。")]),t._v(" "),n("p",[t._v("扩展："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485903&idx=1&sn=172401bccf663455fd90c55aa957db18&chksm=ebd636e3dca1bff544c671c9f8de3a6e8d40049ab7cea3d750d03ed00ef6e6c4fae376333de1&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（策略）"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"模版方法模式-spring几乎所有的外接扩展都采用这种模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模版方法模式-spring几乎所有的外接扩展都采用这种模式"}},[t._v("#")]),t._v(" 模版方法模式——Spring几乎所有的外接扩展都采用这种模式")]),t._v(" "),n("p",[n("strong",[t._v("经典模板方法定义：")])]),t._v(" "),n("p",[t._v("父类定义了骨架（调用哪些方法及顺序），某些特定方法由子类实现。")]),t._v(" "),n("p",[t._v("最大的好处：代码复用，减少重复代码。除了子类要实现的特定方法，其他方法及方法调用顺序都在父类中预先写好了。")]),t._v(" "),n("p",[n("strong",[t._v("所以父类模板方法中有两类方法：")])]),t._v(" "),n("p",[t._v("**共同的方法：**所有子类都会用到的代码")]),t._v(" "),n("p",[t._v("**不同的方法：**子类要覆盖的方法，分为两种：")]),t._v(" "),n("ul",[n("li",[t._v("抽象方法：父类中的是抽象方法，子类必须覆盖")]),t._v(" "),n("li",[t._v("钩子方法：父类中是一个空方法，子类继承了默认也是空的")])]),t._v(" "),n("p",[t._v("注：为什么叫钩子，子类可以通过这个钩子（方法），控制父类，因为这个钩子实际是父类的方法（空方法）！")]),t._v(" "),n("p",[n("strong",[t._v("Spring模板方法模式实质：")])]),t._v(" "),n("p",[t._v("是模板方法模式和回调模式的结合，是Template Method不需要继承的另一种实现方式。Spring几乎所有的外接扩展都采用这种模式。")]),t._v(" "),n("p",[t._v("推荐："),n("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486148&idx=1&sn=601fa38aee0aa27137341ce9a2624fec&chksm=ebd635e8dca1bcfe8da575478244414d13620010cd0d9823f423af8d2457ad1bb65a17d6a940&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式是什么鬼（模板方法）"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("strong",[t._v("具体实现：")])]),t._v(" "),n("p",[t._v("JDBC的抽象和对Hibernate的集成，都采用了一种理念或者处理方式，那就是模板方法模式与相应的Callback接口相结合。")]),t._v(" "),n("p",[t._v("采用模板方法模式是为了以一种统一而集中的方式来处理资源的获取和释放，以JdbcTempalte为例:")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    public abstract class JdbcTemplate {\n        public final Object execute(String sql) {\n            Connection con = null;\n            Statement stmt = null;\n            try {\n                con = getConnection（）;\n                stmt = con.createStatement（）;\n                Object retValue = executeWithStatement（stmt, sql）;\n                return retValue;\n            } catch（SQLException e）{\n             ...\n            }finally{\n                closeStatement（stmt）;\n                releaseConnection（con）;\n            }\n        }\n\n        protected abstract Object executeWithStatement(Statement stmt, String sql);\n    }\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br")])]),n("p",[t._v("​")]),t._v(" "),n("p",[n("strong",[t._v("引入回调原因：")])]),t._v(" "),n("p",[t._v("JdbcTemplate是抽象类，不能够独立使用，我们每次进行数据访问的时候都要给出一个相应的子类实现,这样肯定不方便，所以就引入了回调。")]),t._v(" "),n("p",[t._v("回调代码")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    publicinterfaceStatementCallback {\n        Object doWithStatement（Statement stmt）;\n    }      \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("利用回调方法重写JdbcTemplate方法")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    public class JdbcTemplate {\n        public final Object execute(\n                StatementCallback callback) {\n            Connection con = null;\n            Statement stmt = null;\n            try {\n                con = getConnection();\n                stmt = con.createStatement();\n                Object retValue = callback.doWithStatement(stmt);\n                return retValue;\n            } catch（SQLException e){  \n            ...\n            }finally{\n                closeStatement(stmt);\n                releaseConnection(con);\n            }\n        }  \n                    ...//其它方法定义  \n    }\n\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br")])]),n("p",[t._v("​")]),t._v(" "),n("p",[t._v("Jdbc使用方法如下：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("   JdbcTemplate jdbcTemplate =...;\n    finalString sql =...;\n    StatementCallback callback = new StatementCallback() {\n        publicObject=doWithStatement(Statement stmt) {\n            return ...;\n        }\n    }    \n    jdbcTemplate.execute(callback);\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("​")]),t._v(" "),n("p",[n("strong",[t._v("为什么JdbcTemplate没有使用继承？")])]),t._v(" "),n("p",[t._v("因为这个类的方法太多，但是我们还是想用到JdbcTemplate已有的稳定的、公用的数据库连接，那么我们怎么办呢？")]),t._v(" "),n("p",[t._v("我们可以把变化的东西抽出来作为一个参数传入JdbcTemplate的方法中。但是变化的东西是一段代码，而且这段代码会用到JdbcTemplate中的变量。怎么办？")]),t._v(" "),n("p",[t._v("那我们就用回调对象吧。在这个回调对象中定义一个操纵JdbcTemplate中变量的方法，我们去实现这个方法，就把变化的东西集中到这里了。然后我们再传入这个回调对象到JdbcTemplate，从而完成了调用。")]),t._v(" "),n("h2",{attrs:{id:"责任链模式-aop的方法调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式-aop的方法调用"}},[t._v("#")]),t._v(" 责任链模式——Aop的方法调用")]),t._v(" "),n("p",[t._v("CglibAopProxy类第688行：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("参数 chain:拦截器链，保含了目标方法的所有切面方法 ，从chain里面的数组元素的顺序来看，拦截器的顺序before不再after前面执行")]),t._v(" "),n("p",[t._v("每一个  "),n("em",[n("strong",[t._v("*Interceptor")]),t._v("有一个")]),t._v("*invoke()**方法")]),t._v(" "),n("p",[t._v("Interceptor是一个空接口  "),n("strong",[t._v("MethodInterceptor extends Interceptor")]),t._v("  ，以下是Interceptor的继承结构：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public interface Advice {\n\n}\n\npublic interface Interceptor extends Advice {\n\n}\n\npublic interface MethodInterceptor extends Interceptor {\n    Object invoke(MethodInvocation invocation) throws Throwable;\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("​")]),t._v(" "),n("p",[t._v("Object invoke(MethodInvocation invocation) throws Throwable；方法：")]),t._v(" "),n("p",[t._v("参数 ：MethodInvocation 类中有proceed()方法，以下是MethodInvocation的继承结构：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public interface Joinpoint {\n\n    Object proceed() throws Throwable;\n    Object getThis();\n    AccessibleObject getStaticPart();\n}\n\npublic interface Invocation extends Joinpoint {\n    Object[] getArguments();\n}\n\npublic interface MethodInvocation extends Invocation {\n    Method getMethod();\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[t._v("MethodInvocation extends Invocation extends JoinPoint ,proceed()方法时JoinPoint接口声明的")]),t._v(" "),n("p",[t._v("然后")]),t._v(" "),n("p",[t._v("ReflectiveMethodInvocation implements ProxyMethodInvocation ,ProxyMethodInvocation extends MethodInvocation")]),t._v(" "),n("p",[t._v("spring的拦截器 xxxInterceptor都实现了自己的 Object invoke(MethodInvocation invocation)方法")]),t._v(" "),n("p",[t._v("ReflectiveMethodInvocation类中的 proceed()方法会遍历拦截器链，调用每个拦截器的invoke方法，传入ReflectiveMethodInvocation自身作为参数，")]),t._v(" "),n("p",[t._v("每个拦截器的invoke方法做两件事(这两件事的执行顺序因拦截器的功能而异)：1.执行自己的业务逻辑 2.执行ReflectiveMethodInvocation的proceed()：这样就实现了链式调用")]),t._v(" "),n("p",[t._v("这就是责任链模式：")]),t._v(" "),n("ul",[n("li",[t._v("统一的业务接口：Handler接口 中的方法invoke(),即业务方法")]),t._v(" "),n("li",[t._v("责任链相当于一个负责人集合，每一个负责人都实现了自己的invoke()方法来处理传进来的数据或对象或对象的指定方法")]),t._v(" "),n("li",[t._v("如何通知下一个负责人处理业务：")])]),t._v(" "),n("p",[t._v("​      "),n("strong",[t._v("方法1")]),t._v("：设计一个责任链执行器，包含责任链集合。责任链执行器中有一个proceed(),方法内遍历执行负责人的invoke()方法，invoke方法以执行器作为参数：")]),t._v(" "),n("p",[t._v("​            invoke(执行器)，invoke(执行器)处理完业务后，执行器又调用proceed()方法，将索引移到下一个负责人位置。")]),t._v(" "),n("p",[t._v("​            这样：执行器和负责人的方法相互调用，而执行器通过移动索引通知下一个负责人处理业务。")]),t._v(" "),n("p",[t._v("​      "),n("strong",[t._v("方法2")]),t._v("：基于链表的责任链，每一个负责人是一个责任节点Node，包含指向下一个负责人的next引用")]),t._v(" "),n("p",[t._v("​            负责人的处理业务的方法 invoke()这时不带参数，invoke()方法里面递归调用invoke()方法，并设置出口条件。")]),t._v(" "),n("p",[t._v("​            如何通知下一个负责人处理业务：invoke()方法：1.处理业务，2.next.invoke()，3.出口条件可以是next!=null")])])}),[],!1,null,null,null);n.default=a.exports}}]);