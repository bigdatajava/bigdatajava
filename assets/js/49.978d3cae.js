(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{392:function(s,n,e){"use strict";e.r(n);var a=e(1),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"多级缓存架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多级缓存架构"}},[s._v("#")]),s._v(" 多级缓存架构")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/redis/60.png",alt:""}})]),s._v(" "),n("h2",{attrs:{id:"缓存设计问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存设计问题"}},[s._v("#")]),s._v(" 缓存设计问题")]),s._v(" "),n("h3",{attrs:{id:"缓存穿透"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),n("p",[s._v("缓存穿透是指查询一个根本不存在的数据， 缓存层和存储层都不会命中， 通常出于容错的考虑， 如果从存储层查不到数据则不写入缓存层。")]),s._v(" "),n("p",[s._v("缓存穿透将导致不存在的数据每次请求都要到存储层去查询， 失去了缓存保护后端存储的意义。")]),s._v(" "),n("p",[s._v("造成缓存穿透的基本原因有两个：")]),s._v(" "),n("p",[s._v("第一， 自身业务代码或者数据出现问题。")]),s._v(" "),n("p",[s._v("第二， 一些恶意攻击、 爬虫等造成大量空命中。")]),s._v(" "),n("p",[s._v("缓存穿透问题解决方案：")]),s._v(" "),n("p",[s._v("1、"),n("strong",[s._v("缓存空对象")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("String get(String key) {\n    // 从缓存中获取数据\n    String cacheValue = cache.get(key);\n    // 缓存为空\n    if (StringUtils.isBlank(cacheValue)) {\n        // 从存储中获取\n        String storageValue = storage.get(key);\n        cache.set(key, storageValue);\n        // 如果存储数据为空， 需要设置一个过期时间(300秒)\n        if (storageValue == null) {\n            cache.expire(key, 60 * 5);\n        }\n        return storageValue;\n    } else {\n        // 缓存非空\n        return cacheValue;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("2、"),n("strong",[s._v("布隆过滤器")])]),s._v(" "),n("p",[s._v("对于恶意攻击，向服务器请求大量不存在的数据造成的缓存穿透，还可以用布隆过滤器先做一次过滤，对于不存在的数据布隆过滤器一般都能够过滤掉，不让请求再往后端发送。当布隆过滤器说"),n("strong",[s._v("某个值存在时，这个值可能不存在；当它说不存在时，那就肯定不存在。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/redis/61.png",alt:""}})]),s._v(" "),n("p",[s._v("布隆过滤器就是"),n("strong",[s._v("一个大型的位数组和几个不一样的无偏 hash 函数")]),s._v("。所谓无偏就是能够把元素的 hash 值算得比较均匀。")]),s._v(" "),n("p",[s._v("向布隆过滤器中添加 key 时，会使用多个 hash 函数对 key 进行 hash 算得一个整数索引值然后对位数组长度进行取模运算得到一个位置，每个 hash 函数都会算得一个不同的位置。再把位数组的这几个位置都置为 1 就完成了 add 操作。")]),s._v(" "),n("p",[s._v("向布隆过滤器询问 key 是否存在时，跟 add 一样，也会把 hash 的几个位置都算出来，看看位数组中这几个位置是否都为 1，只要有一个位为 0，那么说明布隆过滤器中这个key 不存在。如果都是 1，这并不能说明这个 key 就一定存在，只是极有可能存在，因为这些位被置为 1 可能是因为其它的 key 存在所致。如果这个位数组比较稀疏，这个概率就会很大，如果这个位数组比较拥挤，这个概率就会降低。")]),s._v(" "),n("p",[s._v("这种方法适用于数据命中不高、 数据相对固定、 实时性低（通常是数据集较大） 的应用场景， 代码维护较为复杂， 但是"),n("strong",[s._v("缓存空间占用很少")]),s._v("。")]),s._v(" "),n("p",[s._v("可以用redisson实现布隆过滤器，引入依赖：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<dependency>\n   <groupId>org.redisson</groupId>\n   <artifactId>redisson</artifactId>\n   <version>3.6.5</version>\n</dependency>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("示例伪代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package com.redisson;\n\nimport org.redisson.Redisson;\nimport org.redisson.api.RBloomFilter;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\n\npublic class RedissonBloomFilter {\n\n    public static void main(String[] args) {\n        Config config = new Config();\n        config.useSingleServer().setAddress("redis://localhost:6379");\n        //构造Redisson\n        RedissonClient redisson = Redisson.create(config);\n\n        RBloomFilter<String> bloomFilter = redisson.getBloomFilter("nameList");\n        //初始化布隆过滤器：预计元素为100000000L,误差率为3%,根据这两个参数会计算出底层的bit数组大小\n        bloomFilter.tryInit(100000000L,0.03);\n        //将zhuge插入到布隆过滤器中\n        bloomFilter.add("zhuge");\n\n        //判断下面号码是否在布隆过滤器中\n        System.out.println(bloomFilter.contains("guojia"));//false\n        System.out.println(bloomFilter.contains("baiqi"));//false\n        System.out.println(bloomFilter.contains("zhuge"));//true\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[s._v("使用布隆过滤器需要把所有数据提前放入布隆过滤器，并且在增加数据时也要往布隆过滤器里放，布隆过滤器缓存过滤伪代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//初始化布隆过滤器\nRBloomFilter<String> bloomFilter = redisson.getBloomFilter("nameList");\n//初始化布隆过滤器：预计元素为100000000L,误差率为3%\nbloomFilter.tryInit(100000000L,0.03);\n        \n//把所有数据存入布隆过滤器\nvoid init(){\n    for (String key: keys) {\n        bloomFilter.put(key);\n    }\n}\n\nString get(String key) {\n    // 从布隆过滤器这一级缓存判断下key是否存在\n    Boolean exist = bloomFilter.contains(key);\n    if(!exist){\n        return "";\n    }\n    // 从缓存中获取数据\n    String cacheValue = cache.get(key);\n    // 缓存为空\n    if (StringUtils.isBlank(cacheValue)) {\n        // 从存储中获取\n        String storageValue = storage.get(key);\n        cache.set(key, storageValue);\n        // 如果存储数据为空， 需要设置一个过期时间(300秒)\n        if (storageValue == null) {\n            cache.expire(key, 60 * 5);\n        }\n        return storageValue;\n    } else {\n        // 缓存非空\n        return cacheValue;\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])]),n("p",[s._v("注意：布隆过滤器不能删除数据，如果要删除得重新初始化数据。")]),s._v(" "),n("h3",{attrs:{id:"缓存失效-击穿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存失效-击穿"}},[s._v("#")]),s._v(" 缓存失效(击穿)")]),s._v(" "),n("p",[s._v("由于大批量缓存在同一时间失效可能导致大量请求同时穿透缓存直达数据库，可能会造成数据库瞬间压力过大甚至挂掉，对于这种情况我们在批量增加缓存时最好将这一批数据的缓存过期时间设置为一个时间段内的不同时间。")]),s._v(" "),n("p",[s._v("示例伪代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("String get(String key) {\n    // 从缓存中获取数据\n    String cacheValue = cache.get(key);\n    // 缓存为空\n    if (StringUtils.isBlank(cacheValue)) {\n        // 从存储中获取\n        String storageValue = storage.get(key);\n        cache.set(key, storageValue);\n        //设置一个过期时间(300到600之间的一个随机数)\n        int expireTime = new Random().nextInt(300)  + 300;\n        if (storageValue == null) {\n            cache.expire(key, expireTime);\n        }\n        return storageValue;\n    } else {\n        // 缓存非空\n        return cacheValue;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h3",{attrs:{id:"缓存雪崩"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),n("p",[s._v("缓存雪崩指的是缓存层支撑不住或宕掉后， 流量会像奔逃的野牛一样， 打向后端存储层。")]),s._v(" "),n("p",[s._v("由于缓存层承载着大量请求， 有效地保护了存储层， 但是如果缓存层由于某些原因不能提供服务(比如超大并发过来，缓存层支撑不住，或者由于缓存设计不好，类似大量请求访问bigkey，导致缓存能支撑的并发急剧下降)， 于是大量请求都会打到存储层， 存储层的调用量会暴增， 造成存储层也会级联宕机的情况。")]),s._v(" "),n("p",[s._v("预防和解决缓存雪崩问题， 可以从以下三个方面进行着手。")]),s._v(" "),n("p",[s._v("1） 保证缓存层服务高可用性，比如使用Redis Sentinel或Redis Cluster。")]),s._v(" "),n("p",[s._v("2） 依赖隔离组件为后端限流熔断并降级。比如使用Sentinel或Hystrix限流降级组件。")]),s._v(" "),n("p",[s._v("比如服务降级，我们可以针对不同的数据采取不同的处理方式。当业务应用访问的是非核心数据（例如电商商品属性，用户信息等）时，暂时停止从缓存中查询这些数据，而是直接返回预定义的默认降级信息、空值或是错误提示信息；当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。")]),s._v(" "),n("p",[s._v("3） 提前演练。 在项目上线前， 演练缓存层宕掉后， 应用以及后端的负载情况以及可能出现的问题， 在此基础上做一些预案设定。")]),s._v(" "),n("h3",{attrs:{id:"热点缓存key重建优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#热点缓存key重建优化"}},[s._v("#")]),s._v(" 热点缓存key重建优化")]),s._v(" "),n("p",[s._v("开发人员使用“缓存+过期时间”的策略既可以加速数据读写， 又保证数据的定期更新， 这种模式基本能够满足绝大部分需求。 但是有两个问题如果同时出现， 可能就会对应用造成致命的危害：")]),s._v(" "),n("ul",[n("li",[s._v("当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。")]),s._v(" "),n("li",[s._v("重建缓存不能在短时间完成， 可能是一个复杂计算， 例如复杂的SQL、 多次IO、 多个依赖等。")])]),s._v(" "),n("p",[s._v("在缓存失效的瞬间， 有大量线程来重建缓存， 造成后端负载加大， 甚至可能会让应用崩溃。")]),s._v(" "),n("p",[s._v("要解决这个问题主要就是要避免大量线程同时重建缓存。")]),s._v(" "),n("p",[s._v("我们可以利用互斥锁来解决，此方法只允许一个线程重建缓存， 其他线程等待重建缓存的线程执行完， 重新从缓存获取数据即可。")]),s._v(" "),n("p",[s._v("示例伪代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String get(String key) {\n    // 从Redis中获取数据\n    String value = redis.get(key);\n    // 如果value为空， 则开始重构缓存\n    if (value == null) {\n        // 只允许一个线程重建缓存， 使用nx， 并设置过期时间ex\n        String mutexKey = "mutext:key:" + key;\n        if (redis.set(mutexKey, "1", "ex 180", "nx")) {\n             // 从数据源获取数据\n            value = db.get(key);\n            // 回写Redis， 并设置过期时间\n            redis.setex(key, timeout, value);\n            // 删除key_mutex\n            redis.delete(mutexKey);\n        }// 其他线程休息50毫秒后重试\n        else {\n            Thread.sleep(50);\n            get(key);\n        }\n    }\n    return value;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"缓存与数据库双写不一致"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存与数据库双写不一致"}},[s._v("#")]),s._v(" 缓存与数据库双写不一致")]),s._v(" "),n("p",[s._v("在大并发下，同时操作数据库与缓存会存在数据不一致性问题")]),s._v(" "),n("p",[s._v("1、双写不一致情况")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/redis/63.png",alt:""}})]),s._v(" "),n("p",[s._v("2、读写并发不一致")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/redis/62.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("解决方案：")])]),s._v(" "),n("p",[s._v("1、对于并发几率很小的数据(如个人维度的订单数据、用户数据等)，这种几乎不用考虑这个问题，很少会发生缓存不一致，可以给缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。")]),s._v(" "),n("p",[s._v("2、就算并发很高，如果业务上能容忍短时间的缓存数据不一致(如商品名称，商品分类菜单等)，缓存加上过期时间依然可以解决大部分业务对于缓存的要求。")]),s._v(" "),n("p",[s._v("3、如果不能容忍缓存数据不一致，可以通过加"),n("strong",[s._v("读写锁")]),s._v("保证并发读写或写写的时候按顺序排好队，"),n("strong",[s._v("读读的时候相当于无锁")]),s._v("。")]),s._v(" "),n("blockquote",[n("p",[s._v("redis的读写锁，底层使用的是Redis Lua脚本（脚本命令中有个mode标识read/write代表读锁/写锁）")])]),s._v(" "),n("p",[s._v("4、也可以用阿里开源的canal通过监听数据库的binlog日志及时的去修改缓存，但是引入了新的中间件，增加了系统的复杂度。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/redis/64.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("总结：")])]),s._v(" "),n("p",[s._v("以上我们针对的都是"),n("strong",[s._v("读多写少")]),s._v("的情况加入缓存提高性能，如果"),n("strong",[s._v("写多读多")]),s._v("的情况又不能容忍缓存数据不一致，那就没必要加缓存了，可以直接操作数据库。放入缓存的数据应该是对实时性、一致性要求不是很高的数据。切记不要为了用缓存，同时又要保证绝对的一致性做大量的过度设计和控制，增加系统复杂性！")])])}),[],!1,null,null,null);n.default=t.exports}}]);