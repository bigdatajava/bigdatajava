(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{559:function(t,a,s){"use strict";s.r(a);var r=s(5),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"索引的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的数据结构"}},[t._v("#")]),t._v(" 索引的数据结构")]),t._v(" "),a("p",[t._v("索引是帮助MySQL高效获取数据的排好序的数据结构")]),t._v(" "),a("h3",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),a("h3",{attrs:{id:"红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),a("h3",{attrs:{id:"b-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-tree"}},[t._v("#")]),t._v(" B-Tree")]),t._v(" "),a("p",[t._v("•叶节点具有相同的深度，叶节点的指针为空")]),t._v(" "),a("p",[t._v("•所有索引元素不重复")]),t._v(" "),a("p",[t._v("•节点中的数据索引从左到右递增排列")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql1/image-20210927140749298.png",alt:"image-20210927140749298"}})]),t._v(" "),a("h3",{attrs:{id:"b-tree-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-tree-2"}},[t._v("#")]),t._v(" B+Tree")]),t._v(" "),a("p",[t._v("B-Tree变种；")]),t._v(" "),a("p",[t._v("•非叶子节点不存储data，只存储索引(冗余)，可以放更多的索引")]),t._v(" "),a("p",[t._v("•叶子节点包含所有索引字段")]),t._v(" "),a("p",[t._v("•叶子节点用指针连接，提高区间访问的性能")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql1/image-20210927140844530.png",alt:"image-20210927140844530"}})]),t._v(" "),a("h3",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),a("p",[t._v("•对索引的key进行一次hash计算就可以定位出数据存储的位置")]),t._v(" "),a("p",[t._v("•很多时候Hash索引要比B+ 树索引更高效")]),t._v(" "),a("p",[t._v("•仅能满足 “=”，“IN”，不支持范围查询")]),t._v(" "),a("p",[t._v("•hash冲突问题")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql1/image-20210927140925585.png",alt:"image-20210927140925585"}})]),t._v(" "),a("h2",{attrs:{id:"myisam存储引擎索引实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myisam存储引擎索引实现"}},[t._v("#")]),t._v(" MyISAM存储引擎索引实现")]),t._v(" "),a("p",[t._v("MyISAM索引文件和数据文件是分离的（非聚集）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql1/image-20210927141044022.png",alt:"image-20210927141044022"}})]),t._v(" "),a("h2",{attrs:{id:"innodb索引实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb索引实现"}},[t._v("#")]),t._v(" InnoDB索引实现")]),t._v(" "),a("p",[t._v("InnoDB索引实现（聚集）")]),t._v(" "),a("p",[t._v("•表数据文件本身就是按B+Tree组织的一个索引结构文件")]),t._v(" "),a("p",[t._v("•聚集索引-叶节点包含了完整的数据记录")]),t._v(" "),a("p",[t._v("•为什么建议InnoDB表必须建主键，并且推荐使用整型的自增主键？")]),t._v(" "),a("p",[t._v("•为什么非主键索引结构叶子节点存储的是主键值？(一致性和节省存储空间)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql1/image-20210927141239390.png",alt:"image-20210927141239390"}})]),t._v(" "),a("h2",{attrs:{id:"索引最左前缀原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引最左前缀原理"}},[t._v("#")]),t._v(" 索引最左前缀原理")]),t._v(" "),a("h3",{attrs:{id:"联合索引的底层存储结构长什么样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合索引的底层存储结构长什么样"}},[t._v("#")]),t._v(" 联合索引的底层存储结构长什么样")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql1/image-20210927141330327.png",alt:"image-20210927141330327"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);