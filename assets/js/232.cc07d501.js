(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{600:function(s,a,n){"use strict";n.r(a);var t=n(5),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("U2FsdGVkX18JIDKCNuoYaufI/6sxhEuoHBMC78iN8+WaBmYC3uu6aQe46SHM1kXx\neTBKOA71/8w1gIdUHF4JjGxI2yryPicPeEpG+Q67qYqO/AM2Tw==\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"nacos配置中心使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos配置中心使用"}},[s._v("#")]),s._v(" Nacos配置中心使用")]),s._v(" "),a("p",[s._v("官方文档： https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config")]),s._v(" "),a("p",[s._v("Nacos 提供用于存储配置和其他元数据的 key/value 存储，为分布式系统中的外部化配置提供服务器端和客户端支持。")]),s._v(" "),a("p",[s._v("使用 Spring Cloud Alibaba Nacos Config，您可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/35.jpeg",alt:""}})]),s._v(" "),a("p",[s._v("一：快速开始")]),s._v(" "),a("p",[s._v("准备配置，nacos server中新建nacos-config.properties")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/36.jpeg",alt:""}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/37.png",alt:""}})]),s._v(" "),a("p",[s._v("二：搭建nacos-config服务")]),s._v(" "),a("p",[s._v("通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更")]),s._v(" "),a("p",[s._v("①引入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("②添加bootstrap.properties")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("spring.application.name=nacos-config\n# 配置中心地址\nspring.cloud.nacos.config.server-addr=127.0.0.1:8848\n\n# dataid 为 yaml 的文件扩展名配置方式\n# `${spring.application.name}.${file-extension:properties}`\nspring.cloud.nacos.config.file-extension=yaml\n#profile粒度的配置   `${spring.application.name}-${profile}.${file-extension:properties}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("③启动服务，测试微服务是否使用配置中心的配置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@SpringBootApplication\npublic class NacosConfigApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext applicationContext = SpringApplication.run(NacosConfigApplication.class, args);\n        String userName = applicationContext.getEnvironment().getProperty("common.name");\n        String userAge = applicationContext.getEnvironment().getProperty("common.age");\n        System.out.println("common name :"+userName+"; age: "+userAge);\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"config相关配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config相关配置"}},[s._v("#")]),s._v(" Config相关配置")]),s._v(" "),a("p",[s._v("Nacos 数据模型 Key 由三元组唯一确定, Namespace默认是空串，公共命名空间（public），分组默认是 DEFAULT_GROUP")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/39.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"支持配置的动态更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持配置的动态更新"}},[s._v("#")]),s._v(" 支持配置的动态更新")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@SpringBootApplication\npublic class NacosConfigApplication {\n\n    public static void main(String[] args) throws InterruptedException {\n        ConfigurableApplicationContext applicationContext = SpringApplication.run(NacosConfigApplication.class, args);\n\n         while(true) {\n        //当动态配置刷新时，会更新到 Enviroment中，因此这里每隔一秒中从Enviroment中获取配置\n         String userName = applicationContext.getEnvironment().getProperty("common.name");\n        String userAge = applicationContext.getEnvironment().getProperty("common.age");\n        System.err.println("common name :" + userName + "; age: " + userAge);\n            TimeUnit.SECONDS.sleep(1);\n        }\n\n    }\n\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"支持profile粒度的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持profile粒度的配置"}},[s._v("#")]),s._v(" 支持profile粒度的配置")]),s._v(" "),a("p",[s._v("spring-cloud-starter-alibaba-nacos-config 在加载配置的时候，不仅仅加载了以 dataid 为 ${spring.application.name}.${file-extension:properties} 为前缀的基础配置，还加载了dataid为 ${spring.application.name}-${profile}.${file-extension:properties} 的基础配置。在日常开发中如果遇到多套环境下的不同配置，可以通过Spring 提供的 ${spring.profiles.active} 这个配置项来配置。")]),s._v(" "),a("p",[s._v("spring.profiles.active=dev")]),s._v(" "),a("h3",{attrs:{id:"支持自定义-namespace-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持自定义-namespace-的配置"}},[s._v("#")]),s._v(" 支持自定义 namespace 的配置")]),s._v(" "),a("p",[s._v("用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。")]),s._v(" "),a("p",[s._v("在没有明确指定 ${spring.cloud.nacos.config.namespace} 配置的情况下， 默认使用的是 Nacos 上 Public 这个namespace。如果需要使用自定义的命名空间，可以通过以下配置来实现：")]),s._v(" "),a("p",[s._v("spring.cloud.nacos.config.namespace=71bb9785-231f-4eca-b4dc-6be446e12ff8")]),s._v(" "),a("h3",{attrs:{id:"支持自定义-group-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持自定义-group-的配置"}},[s._v("#")]),s._v(" 支持自定义 Group 的配置")]),s._v(" "),a("p",[s._v("Group是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。")]),s._v(" "),a("p",[s._v("在没有明确指定 ${spring.cloud.nacos.config.group} 配置的情况下，默认是DEFAULT_GROUP 。如果需要自定义自己的 Group，可以通过以下配置来实现：")]),s._v(" "),a("p",[s._v("spring.cloud.nacos.config.group=DEVELOP_GROUP")]),s._v(" "),a("h3",{attrs:{id:"支持自定义扩展的-data-id-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持自定义扩展的-data-id-配置"}},[s._v("#")]),s._v(" 支持自定义扩展的 Data Id 配置")]),s._v(" "),a("p",[s._v("Data ID  是组织划分配置的维度之一。Data ID 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（如 com.taobao.tc.refund.log.level）的命名规则保证全局唯一性。此命名规则非强制。")]),s._v(" "),a("p",[s._v("通过自定义扩展的 Data Id 配置，既可以解决多个应用间配置共享的问题，又可以支持一个应用有多个配置文件。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 自定义 Data Id 的配置\n#不同工程的通用配置 支持共享的 DataId\nspring.cloud.nacos.config.sharedConfigs[0].data-id= common.yaml\nspring.cloud.nacos.config.sharedConfigs[0].group=REFRESH_GROUP\nspring.cloud.nacos.config.sharedConfigs[0].refresh=true\n\n# config external configuration\n# 支持一个应用多个 DataId 的配置\nspring.cloud.nacos.config.extensionConfigs[0].data-id=ext-config-common01.properties\nspring.cloud.nacos.config.extensionConfigs[0].group=REFRESH_GROUP\nspring.cloud.nacos.config.extensionConfigs[0].refresh=true\n\nspring.cloud.nacos.config.extensionConfigs[1].data-id=ext-config-common02.properties\nspring.cloud.nacos.config.extensionConfigs[1].group=REFRESH_GROUP\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"配置的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置的优先级"}},[s._v("#")]),s._v(" 配置的优先级")]),s._v(" "),a("p",[s._v("Spring Cloud Alibaba Nacos Config 目前提供了三种配置能力从 Nacos 拉取相关的配置。")]),s._v(" "),a("ul",[a("li",[s._v("A: 通过 spring.cloud.nacos.config.shared-configs 支持多个共享 Data Id 的配置")]),s._v(" "),a("li",[s._v("B: 通过 spring.cloud.nacos.config.ext-config[n].data-id 的方式支持多个扩展 Data Id 的配置")]),s._v(" "),a("li",[s._v("C: 通过内部相关规则(应用名、应用名+ Profile )自动生成相关的 Data Id 配置")])]),s._v(" "),a("p",[s._v("当三种方式共同使用时，他们的一个优先级关系是:A < B < C")]),s._v(" "),a("p",[s._v("优先级从高到低：")]),s._v(" "),a("ul",[a("li",[s._v("nacos-config-product.yaml 精准配置")]),s._v(" "),a("li",[s._v("nacos-config.yaml 同工程不同环境的通用配置")]),s._v(" "),a("li",[s._v("ext-config: 不同工程 扩展配置")]),s._v(" "),a("li",[s._v("shared-dataids 不同工程通用配置")])]),s._v(" "),a("h3",{attrs:{id:"refreshscope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refreshscope"}},[s._v("#")]),s._v(" @RefreshScope")]),s._v(" "),a("p",[s._v("@Value注解可以获取到配置中心的值，但是无法动态感知修改后的值，需要利用@RefreshScope注解")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@RestController\n@RefreshScope\npublic class TestController {\n\n    @Value("${common.age}")\n    private String age;\n\n    @GetMapping("/common")\n    public String hello() {\n        return age;\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"nacos配置中心源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos配置中心源码分析"}},[s._v("#")]),s._v(" Nacos配置中心源码分析")]),s._v(" "),a("p",[s._v("https://www.processon.com/view/link/603f3d2fe401fd641adb51f1")]),s._v(" "),a("h3",{attrs:{id:"配置中心的架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置中心的架构"}},[s._v("#")]),s._v(" 配置中心的架构")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/40.png",alt:""}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/41.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"配置中心使用demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置中心使用demo"}},[s._v("#")]),s._v(" 配置中心使用demo")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class ConfigServerDemo {\n\n    public static void main(String[] args) throws NacosException, InterruptedException {\n        String serverAddr = "localhost";\n        String dataId = "nacos-config-demo.yaml";\n        String group = "DEFAULT_GROUP";\n        Properties properties = new Properties();\n        properties.put(PropertyKeyConst.SERVER_ADDR, serverAddr);\n        //获取配置服务\n        ConfigService configService = NacosFactory.createConfigService(properties);\n        //获取配置\n        String content = configService.getConfig(dataId, group, 5000);\n        System.out.println(content);\n        //注册监听器\n        configService.addListener(dataId, group, new Listener() {\n            @Override\n            public void receiveConfigInfo(String configInfo) {\n                System.out.println("===recieve:" + configInfo);\n            }\n\n            @Override\n            public Executor getExecutor() {\n                return null;\n            }\n        });\n\n        //发布配置\n        //boolean isPublishOk = configService.publishConfig(dataId, group, "content");\n        //System.out.println(isPublishOk);\n        //发送properties格式\n        configService.publishConfig(dataId,group,"common.age=30", ConfigType.PROPERTIES.getType());\n\n        Thread.sleep(3000);\n        content = configService.getConfig(dataId, group, 5000);\n        System.out.println(content);\n\n//        boolean isRemoveOk = configService.removeConfig(dataId, group);\n//        System.out.println(isRemoveOk);\n//        Thread.sleep(3000);\n\n//        content = configService.getConfig(dataId, group, 5000);\n//        System.out.println(content);\n//        Thread.sleep(300000);\n\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br")])]),a("h2",{attrs:{id:"nacos-config-client源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-config-client源码分析"}},[s._v("#")]),s._v(" Nacos config client源码分析")]),s._v(" "),a("h3",{attrs:{id:"配置中心核心接口configservice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置中心核心接口configservice"}},[s._v("#")]),s._v(" 配置中心核心接口ConfigService")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/42.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"获取配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取配置"}},[s._v("#")]),s._v(" 获取配置")]),s._v(" "),a("p",[s._v("获取配置的主要方法是 NacosConfigService 类的 getConfig 方法，通常情况下该方法直接从本地文件中取得配置的值，如果本地文件不存在或者内容为空，则再通过 HTTP GET 方法从远端拉取配置，并保存到本地快照中。当通过 HTTP 获取远端配置时，Nacos 提供了两种熔断策略，一是超时时间，二是最大重试次数，默认重试三次。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/43.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"注册监听器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册监听器"}},[s._v("#")]),s._v(" 注册监听器")]),s._v(" "),a("p",[s._v("配置中心客户端会通过对配置项注册监听器，达到在配置项变更的时候，执行回调的功能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("NacosConfigService#getConfigAndSignListener\nConfigService#addListener\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("Nacos 可以通过以上方式注册监听器，它们内部的实现均是调用 ClientWorker 类的 addCacheDataIfAbsent。其中 CacheData 是一个维护配置项和其下注册的所有监听器的实例，所有的 CacheData 都保存在 ClientWorker 类中的原子 cacheMap 中，其内部的核心成员有：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/44.png",alt:""}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/45.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"配置长轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置长轮询"}},[s._v("#")]),s._v(" 配置长轮询")]),s._v(" "),a("p",[s._v("ClientWorker 通过其下的两个线程池完成配置长轮询的工作，一个是单线程的 executor，每隔 10ms 按照每 3000 个配置项为一批次捞取待轮询的 cacheData 实例，将其包装成为一个 LongPollingTask 提交进入第二个线程池 executorService 处理。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/46.png",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"nacos-config-server源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-config-server源码分析"}},[s._v("#")]),s._v(" nacos  config server源码分析")]),s._v(" "),a("h3",{attrs:{id:"配置dump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置dump"}},[s._v("#")]),s._v(" 配置dump")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/47.png",alt:""}})]),s._v(" "),a("p",[s._v("服务端启动时就会依赖 DumpService 的 init 方法，从数据库中 load 配置存储在本地磁盘上，并将一些重要的元信息例如 MD5 值缓存在内存中。服务端会根据心跳文件中保存的最后一次心跳时间，来判断到底是从数据库 dump 全量配置数据还是部分增量配置数据（如果机器上次心跳间隔是 6h 以内的话）。")]),s._v(" "),a("p",[s._v("全量 dump 当然先清空磁盘缓存，然后根据主键 ID 每次捞取一千条配置刷进磁盘和内存。增量 dump 就是捞取最近六小时的新增配置（包括更新的和删除的），先按照这批数据刷新一遍内存和文件，再根据内存里所有的数据全量去比对一遍数据库，如果有改变的再同步一次，相比于全量 dump 的话会减少一定的数据库 IO 和磁盘 IO 次数。")]),s._v(" "),a("h3",{attrs:{id:"配置发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置发布"}},[s._v("#")]),s._v(" 配置发布")]),s._v(" "),a("p",[s._v("发布配置的代码位于 ConfigController#publishConfig中。集群部署，请求一开始也只会打到一台机器，这台机器将配置插入Mysql中进行持久化。服务端并不是针对每次配置查询都去访问 MySQL ，而是会依赖 dump 功能在本地文件中将配置缓存起来。因此当单台机器保存完毕配置之后，需要通知其他机器刷新内存和本地磁盘中的文件内容，因此它会发布一个名为 ConfigDataChangeEvent 的事件，这个事件会通过 HTTP 调用通知所有集群节点（包括自身），触发本地文件和内存的刷新。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/48.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"处理长轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理长轮询"}},[s._v("#")]),s._v(" 处理长轮询")]),s._v(" "),a("p",[s._v("客户端会有一个长轮询任务，拉取服务端的配置变更，服务端处理逻辑在LongPollingService类中，其中有一个 Runnable 任务名为ClientLongPolling，服务端会将受到的轮询请求包装成一个 ClientLongPolling 任务，该任务持有一个 AsyncContext 响应对象，通过定时线程池延后 29.5s 执行。比客户端 30s 的超时时间提前 500ms 返回是为了最大程度上保证客户端不会因为网络延时造成超时。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/tuling4/49.png",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"图片附录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片附录"}},[s._v("#")]),s._v(" 图片附录")]),s._v(" "),a("h3",{attrs:{id:"nacos配置中心源码分析脑图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos配置中心源码分析脑图"}},[s._v("#")]),s._v(" Nacos配置中心源码分析脑图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.jpg",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"nacos源码剖析-集群数据一致性-持久化实例cp模式raft协议实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos源码剖析-集群数据一致性-持久化实例cp模式raft协议实现"}},[s._v("#")]),s._v(" Nacos源码剖析-集群数据一致性(持久化实例CP模式Raft协议实现)")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/Nacos%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7(%E6%8C%81%E4%B9%85%E5%8C%96%E5%AE%9E%E4%BE%8BCP%E6%A8%A1%E5%BC%8FRaft%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0).jpg",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"注册中心cap架构剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册中心cap架构剖析"}},[s._v("#")]),s._v(" 注册中心CAP架构剖析")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83CAP%E6%9E%B6%E6%9E%84%E5%89%96%E6%9E%90.jpg",alt:""}})])])}),[],!1,null,null,null);a.default=e.exports}}]);