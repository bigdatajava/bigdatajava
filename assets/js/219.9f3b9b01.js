(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{587:function(e,n,s){"use strict";s.r(n);var a=s(5),t=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("U2FsdGVkX19IoSbfE6wzSOFVsqIzcMZLNXlOhk82lizlE3pCmik5/PY9uieo+fTJ\nCW3buMMy6455R7i5PxmPCS+ATibN9XDlL+DNt+tMgtNvoMgsXDPjQgAnTQzJ9nTO\nAg==\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h2",{attrs:{id:"回顾servlet与jsp执行流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回顾servlet与jsp执行流程"}},[e._v("#")]),e._v(" 回顾servlet与jsp执行流程")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823201849536.png",alt:"image-20210823201849536"}})]),e._v(" "),n("p",[e._v("spring mvc本质上是对其进行封装简化了开发流程。易用性、程序逻辑结构更清晰。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("基于注解的URL映谢\nhttp表单参数转换\n全局统一异常处理\n拦截器的实现\n多视图控制器\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("简洁的web层开发\n支持Restful风格，支持静态资源，本地解析\n灵活的url映射关系\n跟spring loc aop完好集成\n对其他视图freemark，jsp，Velocity，jstl支持集成\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("h2",{attrs:{id:"spring-mvc体系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc体系"}},[e._v("#")]),e._v(" spring MVC体系")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823201551098.png",alt:"image-20210823201551098"}})]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823202219348.png",alt:"image-20210823202219348"}})]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823204747721.png",alt:"image-20210823204747721"}})]),e._v(" "),n("h2",{attrs:{id:"dispatchservlet核心类结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dispatchservlet核心类结构"}},[e._v("#")]),e._v(" dispatchServlet核心类结构")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823201625381.png",alt:"image-20210823201625381"}})]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823202421655.png",alt:"image-20210823202421655"}})]),e._v(" "),n("ol",[n("li",[e._v("HandlerMapping：url与控制器的映谢")]),e._v(" "),n("li",[e._v("HandlerAdapter: 控制器执行适配器")]),e._v(" "),n("li",[e._v("ViewResolver: 视图仓库")]),e._v(" "),n("li",[e._v("view：具体解析视图")]),e._v(" "),n("li",[e._v("HandlerExceptionResolver:异常捕捕捉器")])]),e._v(" "),n("h3",{attrs:{id:"handlermapping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#handlermapping"}},[e._v("#")]),e._v(" HandlerMapping")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823204002326.png",alt:"image-20210823204002326"}})]),e._v(" "),n("ul",[n("li",[e._v("BeanNameUrlHandlerMapping: 基于ioc name 中已/开头的Bean时行 注册至映谢.")]),e._v(" "),n("li",[e._v("SimpleUrlHandlerMapping：基于手动配置 url 与control 映射")]),e._v(" "),n("li",[e._v("RequestMappingHandlerMapping：基于注解方法配置对应映谢")])]),e._v(" "),n("h3",{attrs:{id:"handleradapter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#handleradapter"}},[e._v("#")]),e._v(" HandlerAdapter")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823204143349.png",alt:"image-20210823204143349"}})]),e._v(" "),n("ul",[n("li",[n("p",[e._v("HttpRequestHandlerAdapter：")])]),e._v(" "),n("li",[n("p",[e._v("SimpleServletHandlerAdapter：")])]),e._v(" "),n("li",[n("p",[e._v("SimpleControllerHandlerAdapter：")])]),e._v(" "),n("li",[n("p",[e._v("RequestMappingHandlerAdapter：")])])]),e._v(" "),n("h3",{attrs:{id:"viewresolver"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#viewresolver"}},[e._v("#")]),e._v(" ViewResolver")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823204305822.png",alt:"image-20210823204305822"}})]),e._v(" "),n("ul",[n("li",[n("p",[e._v("BeanNameViewResolver:")])]),e._v(" "),n("li",[n("p",[e._v("InternalResourceViewResolver:")])]),e._v(" "),n("li",[n("p",[e._v("FreeMarkerViewResolver: 演示FreeMarkerViewResol")])])]),e._v(" "),n("h2",{attrs:{id:"springmvc上下文初始化过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springmvc上下文初始化过程"}},[e._v("#")]),e._v(" springMVC上下文初始化过程")]),e._v(" "),n("p",[e._v("MVC 上下文即xmlWebApplicationContext ，依托DispatchServlet 和contextConfigLocation进行创建和初始化，最后对mvc 进策略初始化。")]),e._v(" "),n("ol",[n("li",[e._v("创建DispatchServlet")]),e._v(" "),n("li",[e._v("initServletBean")]),e._v(" "),n("li",[e._v("createWebApplicationContext\n"),n("ol",[n("li",[e._v("createBeanFactory")]),e._v(" "),n("li",[e._v("loadBeanDefinitions (contextConfigLocation)")]),e._v(" "),n("li",[e._v("registerBeanDefinition")]),e._v(" "),n("li",[e._v("IOC 加载完比")])])]),e._v(" "),n("li",[e._v("initStrategies (初始化mvc 环境)\n"),n("ol",[n("li",[e._v("initHandlerMappings (初始化 映谢配置)")]),e._v(" "),n("li",[e._v("initHandlerAdapters(初始化适配器)")]),e._v(" "),n("li",[e._v("initHandlerExceptionResolvers")]),e._v(" "),n("li",[e._v("initViewResolvers")])])])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("webApplicationContext 初始过程 \nhandlerMappings 初始过程 \nhandlerExceptionResolvers 初始过程 \nviewResolvers 初始过程 \nhandleAdapters 初始过程\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("h2",{attrs:{id:"request请求过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#request请求过程"}},[e._v("#")]),e._v(" request请求过程")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("调用doDispatch()")])]),e._v(" "),n("li",[n("p",[e._v("遍历handlerMappings 与request 获取一个执行链 getHandler()")])]),e._v(" "),n("li",[n("p",[e._v("遍历handleAdapters 与 handle 获取一个handle 适配器")])]),e._v(" "),n("li",[n("p",[e._v("通过执行链 去调用拦截器当中的 preHandle() 方法 ，进行预处理。")])]),e._v(" "),n("li",[n("p",[e._v("基于handle 适配器 去调用handle 方法,返回 modelAndView")])]),e._v(" "),n("li",[n("p",[e._v("通过执行链 去调用拦截器当中的 PostHandle() 方法 ，进行拦截处理")])]),e._v(" "),n("li",[n("p",[e._v("processDispatchResult()")]),e._v(" "),n("p",[e._v("7.1. 正常：调用render()进行视图解析")]),e._v(" "),n("p",[e._v("7.1.1. 基于 遍历 viewResolvers 工与 viewname 获取View")]),e._v(" "),n("p",[e._v("7.1.2. 调用view.render() 进行视图解析和返回,设置model 至request")]),e._v(" "),n("p",[e._v("7.2. 异常：遍历handlerExceptionResolvers 调用resolveException(),返回mv,最后跳转至异常 mv")])])]),e._v(" "),n("p",[n("strong",[e._v("1、MVC模型 的由来")])]),e._v(" "),n("p",[n("strong",[e._v("1、Model1")]),e._v(" "),n("strong",[e._v("模型")])]),e._v(" "),n("p",[e._v("Model1 模型是很早以前项目开发的一种常见模型，项目主要由 jsp 和 JavaBean 两部分组成。")]),e._v(" "),n("p",[e._v("它的优点是：结构简单。开发小型项目时效率高。")]),e._v(" "),n("p",[e._v("它的缺点也同样明显：")]),e._v(" "),n("p",[e._v("第一：JSP 的职责兼顾于展示数据和处理数据（也就是干了控制器和视图的事）")]),e._v(" "),n("p",[e._v("第二：所有逻辑代码都是写在 JSP 中的，导致代码重用性很低。")]),e._v(" "),n("p",[e._v("第三：由于展示数据的代码和部分的业务代码交织在一起，维护非常不便。")]),e._v(" "),n("p",[e._v("所以，结论是此种设计模型已经被淘汰没人使用了。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220618093643694.png",alt:"image-20220618093643694"}})]),e._v(" "),n("p",[e._v("在Model 1模式下，整个Web应用几乎全部由JSP页面组成，JSP页面接收处理客户端请求，对请求处理后直接做出响应。用少量的JavaBean来处理数据库连接、数据库访问等操作。")]),e._v(" "),n("p",[n("strong",[e._v("1.2 Model2")]),e._v(" "),n("strong",[e._v("模型")])]),e._v(" "),n("p",[e._v("Model2 模型是在 Model1 的基础上进行改良，它是 MVC 模型的一个经典应用。它把处理请求和展示数据进行分离，让每个部分各司其职。")]),e._v(" "),n("p",[e._v("此时的 JSP 已经就是纯粹的展示数据了，而处理请求的事情交由控制器来完成，使")]),e._v(" "),n("p",[e._v("每个组件充分独立，提高了代码可重用性和易维护性。下图展示的就是 Model2 模型：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220618093754973.png",alt:"image-20220618093754973"}})]),e._v(" "),n("p",[e._v("Model 2是基于MVC架构的设计模式。")]),e._v(" "),n("p",[e._v("在Model 2架构中，Servlet作为前端控制器，负责接收客户端发送的请求")]),e._v(" "),n("p",[e._v("在Servlet中只包含控制逻辑和简单的前端处理；")]),e._v(" "),n("p",[e._v("后端JavaBean来完成实际的逻辑处理；")]),e._v(" "),n("p",[e._v("最后，转发到相应的JSP页面处理显示逻辑。")]),e._v(" "),n("p",[e._v("Model 2具有组件化的特点，更适用于大规模应用的开发。")]),e._v(" "),n("p",[n("strong",[e._v("2")]),e._v(" "),n("strong",[e._v("基于")]),e._v(" "),n("strong",[e._v("MVC")]),e._v(" **模型框架之：**"),n("strong",[e._v("SpringMVC")])]),e._v(" "),n("p",[n("strong",[e._v("2.1 SpringMVC")]),e._v(" "),n("strong",[e._v("的执行过程分析")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220618093831965.png",alt:"image-20220618093831965"}})]),e._v(" "),n("p",[e._v("总结：")]),e._v(" "),n("p",[e._v("1）前端控制器DispatcherServlet 由框架提供")]),e._v(" "),n("p",[e._v("作用：接收请求，处理响应结果")]),e._v(" "),n("p",[e._v("2）处理器映射器HandlerMapping由框架提供")]),e._v(" "),n("p",[e._v("作用：根据请求URL，找到对应的Handler")]),e._v(" "),n("p",[e._v("3）处理器适配器HandlerAdapter由框架提供")]),e._v(" "),n("p",[e._v("作用：调用处理器（Handler|Controller）的方法")]),e._v(" "),n("p",[e._v("4）处理器Handler又名Controller,后端处理器")]),e._v(" "),n("p",[e._v("作用：接收用户请求数据，调用业务方法处理请求")]),e._v(" "),n("p",[e._v("5）视图解析器ViewResolver由框架提供")]),e._v(" "),n("p",[e._v("作用：视图解析，把逻辑视图名称解析成真正的物理视图")]),e._v(" "),n("p",[e._v("支持多种视图技术：JSTLView,FreeMarker...")]),e._v(" "),n("p",[e._v("6）视图View,程序员开发")]),e._v(" "),n("p",[e._v("作用：将数据展现给用户")]),e._v(" "),n("p",[n("strong",[e._v("2.2 SpringMVC")]),e._v(" "),n("strong",[e._v("中三大组件详解")])]),e._v(" "),n("p",[n("strong",[e._v("2.2.1")]),e._v(" "),n("strong",[e._v("处理器映射器")])]),e._v(" "),n("p",[e._v("它指的是："),n("strong",[e._v("HandlerMapping")])]),e._v(" "),n("p",[e._v("是在 Spring 的 3.1 版本之后加入的。它的出现，可以让使用者更加轻松的去配置 SpringMVC 的请求路径映")]),e._v(" "),n("p",[e._v("射。去掉了早期繁琐的 xml 的配置")]),e._v(" "),n("p",[e._v("它的配置有两种方式：都是在 springmvc.xml 中加入配置。")]),e._v(" "),n("p",[e._v("第一种方式：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("第二种方式：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<mvc:annotation-driven></mvc:annotation-driven>\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[n("strong",[e._v("2.2.2")]),e._v(" "),n("strong",[e._v("处理器适配器")])]),e._v(" "),n("p",[e._v("要清晰的认识 SpringMVC 的处理器适配器，就先必须知道适配器以及它的作用。我们先通过下图，直观的了")]),e._v(" "),n("p",[e._v("解一下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220618094006318.png",alt:"image-20220618094006318"}})]),e._v(" "),n("p",[e._v("通过上面三张图，我们可以直观的感受到，它是把不同的接口都转换成了 USB 接口。")]),e._v(" "),n("p",[e._v("带入到我们 SpringMVC 中，就是把不同的控制器，最终都可以看成是适配器类型，从而执行适配器中定义的")]),e._v(" "),n("p",[e._v("方法。更深层次的是，我们可以把公共的功能都定义在适配器中，从而减少每种控制器中都有的重复性代码。")]),e._v(" "),n("p",[e._v("学习了SpringMVC 的执行过程，最终调用的是前端控制器 DispatcherServlet 的 doDispatch 方法，而该方法中的 HandlerAdapter 的 handle 方法实际调用了我们自己写的控制器方法。而我")]),e._v(" "),n("p",[e._v("们写的控制方法名称各不一样，它是通过 handle 方法反射调用的。但是我们不知道的是，其实 SpringMVC 中处")]),e._v(" "),n("p",[e._v("理器适配器也有多个。")]),e._v(" "),n("p",[e._v("HandlerAdapter详解")]),e._v(" "),n("p",[e._v("这里Spring mvc 采用适配器模式来适配调用指定Handler，根据Handler的不同种类采用不同的Adapter,其Handler与 HandlerAdapter 对应关系如下:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Handler类别")]),e._v(" "),n("th",[e._v("对应适配器")]),e._v(" "),n("th",[e._v("描述")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("Controller")]),e._v(" "),n("td",[e._v("SimpleControllerHandlerAdapter")]),e._v(" "),n("td",[e._v("标准控制器，返回ModelAndView")])]),e._v(" "),n("tr",[n("td",[e._v("HttpRequestHandler")]),e._v(" "),n("td",[e._v("HttpRequestHandlerAdapter")]),e._v(" "),n("td",[e._v("业务自行处理 请求，不需要通过modelAndView 转到视图")])]),e._v(" "),n("tr",[n("td",[e._v("Servlet")]),e._v(" "),n("td",[e._v("SimpleServletHandlerAdapter")]),e._v(" "),n("td",[e._v("基于标准的servlet 处理")])]),e._v(" "),n("tr",[n("td",[e._v("HandlerMethod")]),e._v(" "),n("td",[e._v("RequestMappingHandlerAdapter")]),e._v(" "),n("td",[e._v("基于@requestMapping对应方法处理")])])])]),e._v(" "),n("p",[e._v("**第一个：**"),n("strong",[e._v("org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter")])]),e._v(" "),n("p",[e._v("使用此适配器，适用的控制器写法：要求实现 Controller 接口")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class HelloController2 implements Controller {\n\n@Override\npublic ModelAndView handleRequest(HttpServletRequest httpServletRequest, \n\nHttpServletResponse httpServletResponse) throws Exception {\n\n    ModelAndView mv = new ModelAndView();\n    mv.setViewName("success");\n    return mv;\n  } \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("同时要求我们在 springmvc.xml 中添加：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean id="simpleControllerHandlerAdapter " class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean> \n\n<bean name="/sayhello2" class="com.baiqi.web.controller.HelloController2"></bean>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("**第二个：**"),n("strong",[e._v("org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter")])]),e._v(" "),n("p",[e._v("使用此适配器的控制器写法：要求实现 HttpRequestHandler 接口")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class HelloController3 implements HttpRequestHandler {\n\n \n@Override\npublic void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n       request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);\n   } \n}\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("同时要求我们在 springmvc.xml 中添加：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean name="/sayhello3" class="com.baiqi.web.controller.HelloController3"></bean> \n\n<bean id=" httpRequestHandlerAdapter" class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[n("strong",[e._v("第三个：")])]),e._v(" "),n("p",[e._v("org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter")]),e._v(" "),n("p",[e._v("这种方式也是我们实际开发中采用最多的。它的要求是我们用注解@Controller 配置控制器")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Controller\npublic class HelloControler {\n\n@RequestMapping("hello")\npublic String sayHello() {\n    System.out.println("控制器方法执行了");\n    return "success";\n  } \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("同时要求我们在 springmvc.xml 中配置：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean id="requestMappingHandlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("不过通常情况下我们都是直接配置:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<mvc:annotation-driven></mvc:annotation-driven>\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[n("strong",[e._v("2.2.3")]),e._v(" "),n("strong",[e._v("视图解析器")])]),e._v(" "),n("p",[e._v("首先，我们得先了解一下 SpringMVC 中的视图。视图的作用是渲染模型数据，将模型里的数据以某种形式呈")]),e._v(" "),n("p",[e._v("现给客户。")]),e._v(" "),n("p",[e._v("为了实现视图模型和具体实现技术的解耦，Spring 在 org.springframework.web.servlet 包中定义了")]),e._v(" "),n("p",[e._v("一个高度抽象的 View 接口。")]),e._v(" "),n("p",[e._v("我们的视图是无状态的，所以他们不会有线程安全的问题。无状态是指对于每一个请求，都会创建一个 View")]),e._v(" "),n("p",[e._v("对象。")]),e._v(" "),n("p",[e._v("在 SpringMVC 中常用的视图类型：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[e._v("分类")])]),e._v(" "),n("th",[n("strong",[e._v("视图类型")])]),e._v(" "),n("th",[n("strong",[e._v("说明")])])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("URL 视图")]),e._v(" "),n("td",[e._v("InternalResourceView")]),e._v(" "),n("td",[e._v("将 JSP 或者其他资源封装成一个视图，是InternaleResourceViewResolver默认使用的视图类型。")])]),e._v(" "),n("tr",[n("td",[e._v("JstlView")]),e._v(" "),n("td",[e._v("它是当我们在页面中使用了 JSTL 标签库的国际化标签后，需要采用的类型。")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("文档类视图")]),e._v(" "),n("td",[e._v("AbstractPdfView")]),e._v(" "),n("td",[e._v("PDF 文档视图的抽象类")])]),e._v(" "),n("tr",[n("td",[e._v("AbstarctXlsView")]),e._v(" "),n("td",[e._v("Excel 文档视图的抽象类，该类是 4.2版 本 之 后 才 有 的 。 之 前 使 用 的 是AbstractExcelView。")]),e._v(" "),n("td")]),e._v(" "),n("tr",[n("td",[e._v("JSON 视图")]),e._v(" "),n("td",[e._v("MappingJackson2JsonView")]),e._v(" "),n("td",[e._v("将模型数据封装成Json格式数据输出。它需要借助 Jackson 开源框架。")])]),e._v(" "),n("tr",[n("td",[e._v("XML 视图")]),e._v(" "),n("td",[e._v("MappingJackson2XmlView")]),e._v(" "),n("td",[e._v("将模型数据封装成 XML 格式数据。它是从 4.1 版本之后才加入的。")])])])]),e._v(" "),n("p",[e._v("接下来就是了解视图解析器的作用。View Resolver 负责将处理结果生成 View 视图，View Resolver 首")]),e._v(" "),n("p",[e._v("先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果")]),e._v(" "),n("p",[e._v("通过页面展示给用户。视图对象是由视图解析器负责实例化。")]),e._v(" "),n("p",[e._v("视图解析器的作用是将逻辑视图转为物理视图，所有的视图解析器都必须实现 ViewResolver 接口。")]),e._v(" "),n("p",[e._v("SpringMVC 为逻辑视图名的解析提供了不同的策略，可以在 Spring WEB 上下文中配置一种或多种解析策略，")]),e._v(" "),n("p",[e._v("并指定他们之间的先后顺序。每一种映射策略对应一个具体的视图解析器实现类。程序员可以选择一种视图解析器")]),e._v(" "),n("p",[e._v("或混用多种视图解析器。可以通过 order 属性指定解析器的优先顺序，order 越小优先级越高，SpringMVC 会按")]),e._v(" "),n("p",[e._v("视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则抛出 ServletException")]),e._v(" "),n("p",[e._v("异常。")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[e._v("分类")])]),e._v(" "),n("th",[n("strong",[e._v("解析器类型")])]),e._v(" "),n("th",[n("strong",[e._v("说明")])])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("解析为 Bean 的名称")]),e._v(" "),n("td",[e._v("BeanNameViewResolver")]),e._v(" "),n("td",[e._v("Bean 的 id 即为逻辑视图名称。")])]),e._v(" "),n("tr",[n("td",[e._v("解析为 URL 文件")]),e._v(" "),n("td",[e._v("InternalResourceViewResolver")]),e._v(" "),n("td",[e._v("将视图名解析成一个 URL 文件，一般就是一个 jsp 或者 html 文件。文件一般都存放在 WEB-INF 目录中。")])]),e._v(" "),n("tr",[n("td",[e._v("解析指定 XML 文件")]),e._v(" "),n("td",[e._v("XmlViewResolver")]),e._v(" "),n("td",[e._v("解析指定位置的 XML 文件，默认在/WEB-INF/views.xml")])]),e._v(" "),n("tr",[n("td",[e._v("解析指定属性文件")]),e._v(" "),n("td",[e._v("ResourceBundleViewResolver")]),e._v(" "),n("td",[e._v("解析 properties 文件。")])])])]),e._v(" "),n("p",[n("strong",[e._v("2.2.4")]),e._v(" "),n("strong",[e._v("不需要视图解析器的场景分析")])]),e._v(" "),n("p",[e._v("在分析之前，我们先需要回顾下控制器方法的返回值，此处我们都是以注解@Controller 配置控制器为例，")]),e._v(" "),n("p",[e._v("控制器的方法返回值其实支持三种方式：")]),e._v(" "),n("p",[e._v("第一种：String 类型。借助视图解析器，可以在指定位置为我们找到指定扩展名的视图。视图可以是 JSP，")]),e._v(" "),n("p",[e._v("HTML 或者其他的控制器方法上的 RequestMapping 映射地址。前往指定视图的方式，默认是请求转发，可以通过")]),e._v(" "),n("p",[e._v("redirect:前缀控制其使用重定向。")]),e._v(" "),n("p",[e._v("第二种：void，即没有返回值。因为我们在控制器方法的参数中可以直接使用原始 SerlvetAPI 对象")]),e._v(" "),n("p",[e._v("HttpServletRequest 和 HttpServletResponse 对象，所以无论是转发还是重定向都可以轻松实现，而无需")]),e._v(" "),n("p",[e._v("使用返回值。")]),e._v(" "),n("p",[e._v("第三种：ModelAndView 类型。其实我们跟踪源码可以发现在 DispatcherServlet 中的 doDispatch 方")]),e._v(" "),n("p",[e._v("法执行时，HandlerAdapter 的 handle 方法的返回值就是 ModelAndView，只有我们的控制器方法定义为 void")]),e._v(" "),n("p",[e._v("时，才不会返回此类型。当返回值是 String 的时候也会创建 ModelAndView 并返回。")]),e._v(" "),n("p",[e._v("通过上面三种控制器方法返回值，我们可以再深入的剖析一下我们请求之后接收响应的方式，其实无外乎就三")]),e._v(" "),n("p",[e._v("种。")]),e._v(" "),n("p",[e._v("第一种：请求转发")]),e._v(" "),n("p",[e._v("第二种：重定向")]),e._v(" "),n("p",[e._v("第三种：直接使用 Response 对象获取流对象输入。可以是字节流也可以是字符流。")]),e._v(" "),n("p",[e._v("接下来我们就分析，这三种方式的本质区别。")]),e._v(" "),n("p",[e._v("其中请求转发和重定向的区别相信大家已经很熟悉了。但是它们的共同点呢？就是都会引发页面的跳转。")]),e._v(" "),n("p",[e._v("在我们的实际开发中，如果我们不需要页面跳转，即基于 ajax 的异步请求，用 json 数据交互时，即可不配")]),e._v(" "),n("p",[e._v("置任何视图解析器。前后端交互是通过 json 数据的，利用@RequestBody 和@ResponseBody 实现数据到 java")]),e._v(" "),n("p",[e._v("对象的绑定（当然还要借助类似 Jackson 开源框架）。")]),e._v(" "),n("p",[n("strong",[e._v("2.2.5")]),e._v(" "),n("strong",[e._v("请求参数封装的实现原理")])]),e._v(" "),n("p",[e._v("在使用 SpringMVC 实现请求参数封装时，它支持基本类型，POJO 类型和集合类型。其封装原理其实就是使用")]),e._v(" "),n("p",[e._v("我们原始的 ServletAPI 中的方法，并且配合反射实现的封装。")]),e._v(" "),n("p",[e._v("此处我们以最简单的 String 和 Integer 两个方法为例，带着大家把整个执行过程走一圈。")]),e._v(" "),n("p",[e._v("先来看控制器的方法：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Controller\n\npublic class HelloControler {\n\n@RequestMapping("hello")\npublic String sayHello(String name,Integer age) {\n\n    System.out.println("控制器方法执行了"+name+","+age);\n    return "success"; \n  } \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[n("strong",[e._v("2.2.6")]),e._v(" "),n("strong",[e._v("常用注解的使用场景及实现思路分析：")])]),e._v(" "),n("p",[n("strong",[e._v("2.2.6.1 RequestParam")])]),e._v(" "),n("p",[e._v("首先我们要明确，我们的请求参数体现形式是什么样的。")]),e._v(" "),n("p",[e._v("在请求体的 MIME 类型为 application/x-www-form-urlencoded 或者 application/json 的情况下，")]),e._v(" "),n("p",[e._v("无论 get/post/put/delete 请求方式，参数的体现形式都是 key=value。")]),e._v(" "),n("p",[e._v("再来，通过上一小节我们知道，SpringMVC 是使用我们控制器方法的形参作为参数名称，再使用 request 的")]),e._v(" "),n("p",[e._v("getParameterValues 方法获取的参数。所以才会有请求参数的 key 必须和方法形参变量名称保持一致的要求。")]),e._v(" "),n("p",[e._v("但是如果形参变量名称和请求参数的 key 不一致呢？此时，参数将无法封装成功。")]),e._v(" "),n("p",[e._v("此时 RequestParam 注解就会起到作用，它会把该注解 value 属性的值作为请求参数的 key 来获取请求参数")]),e._v(" "),n("p",[e._v("的值，并传递给控制器方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Controller\npublic class ParamController1 {\n\n/**\n* 处理请求的控制器方法\n* @return\n*/\n@RequestMapping("hello")\npublic String sayHello(@RequestParam("username")String name,Integer age) {\n\n  System.out.println("控制器方法执行了"+name+","+age);\n  return "success"; \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[n("strong",[e._v("2.2.6.2 RequestBody")])]),e._v(" "),n("p",[e._v("我们通过源码分析得知，SpringMVC 在封装请求参数的时候，默认只会获取参数的值，而不")]),e._v(" "),n("p",[e._v("会把参数名称一同获取出来，这在我们使用表单提交的时候没有任何问题。因为我们的表单提交，请求参数是")]),e._v(" "),n("p",[e._v("key=value 的。但是当我们使用 ajax 进行提交时，请求参数可能是 json 格式的：{key:value}，在此种情况")]),e._v(" "),n("p",[e._v("下，要想实现封装以我们前面的内容是无法实现的。此时需要我们使用@RequestBody 注解。")]),e._v(" "),n("p",[n("strong",[e._v("JSP")]),e._v(" "),n("strong",[e._v("代码片段：")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script src="${pageContext.request.contextPath}/js/jquery.min.js"><\/script> \n<script type="text/javascript">\n\n$(function(){\n\n$("#ajaxBtn").click(function(){\n\n$.ajax({\n\ntype:"POST",\n\nurl:"${pageContext.request.contextPath}/hello2",\n\ndataType:"text",\n\ndata:"{\'name\':\'test\',\'age\':18}",\n\ncontentType:"application/json",\n\nsuccess:function(data){\n\nalert(data);\n\n}\n\n});\n\n\n});\n\n})\n\n<\/script> \n<title>SpringMVC</title>\n\n</head> \n<body> \n<button id="ajaxBtn">异步请求</button>\n\n</body>\n\n</html>\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br")])]),n("p",[n("strong",[e._v("控制器代码片段")]),e._v("**😗*")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Controller\npublic class ParamController {\n\n/**\n* 处理请求的控制器方法\n* @return\n*/\n\n@RequestMapping("hello2")\npublic String sayHello2(@RequestBody String body) {\n   System.out.println("控制器方法执行了 2"+body);\n   return "success"; \n  } \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[n("strong",[e._v("2.2.6.3 PathVariable")])]),e._v(" "),n("p",[e._v("它是 SpringMVC 在 3.0 之后新加入的一个注解，是 SpringMVC 支持 Restful 风格 URL 的一个重要标志。")]),e._v(" "),n("p",[e._v("​")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220618094415874.png",alt:"image-20220618094415874"}})]),e._v(" "),n("p",[e._v("该注解的作用大家已经非常熟悉了，就是把藏在请求 URL 中的参数，给我们控制器方法的形参赋值。而Restful")]),e._v(" "),n("p",[e._v("风格的 URL，在现如今的开发中使用越来越普遍了。那么它是如何实现封装的呢？请看下图：")]),e._v(" "),n("p",[e._v("首先还是执行到红框中解析参数这行代码，")]),e._v(" "),n("p",[e._v("我们看出 SpringMVC 在实现请求 URL 使用占位符传参并封装到控制器方法的形参中，")]),e._v(" "),n("p",[e._v("是通过请求域来实现的。最后把请求域转成一个 Map，再根据形参的名称作为 key，从 map 中获取 value，并给形")]),e._v(" "),n("p",[e._v("参赋值。当然如果我们使用了 PathVariable 注解的 value 属性，则不会以形参名称为 key，而是直接使用 value")]),e._v(" "),n("p",[e._v("属性的值作为 key 了。")]),e._v(" "),n("p",[n("strong",[e._v("2.2.7")]),e._v(" "),n("strong",[e._v("拦截器的")]),e._v(" "),n("strong",[e._v("AOP")]),e._v(" "),n("strong",[e._v("思想")])]),e._v(" "),n("p",[e._v("AOP 思想是 Spring 框架的两大核心之一，是解决方法调用依赖以及提高方便后期代码维护的重要思想。它是")]),e._v(" "),n("p",[e._v("把我们代码中高度重复的部分抽取出来，并在适当的时机，通过代理机制来执行，从而做到不修改源码对已经写好")]),e._v(" "),n("p",[e._v("的方法进行增强。")]),e._v(" "),n("p",[e._v("而拦截器正式这种思想的具体实现。")]),e._v(" "),n("p",[e._v("拦截器代码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class MyInterceptor1 implements HandlerInterceptor{\n\n@Override\npublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n\n  System.out.println("拦截器执行了");\n  return false; \n}\n\n\n\n@Override\npublic void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,ModelAndView modelAndView) throws Exception {\n\n  System.out.println("执行了 postHandle 方法");\n\n}\n\n@Override\npublic void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n  System.out.println("执行了 afterCompletion 方法");\n  } \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[n("strong",[e._v("2.2.8")]),e._v(" "),n("strong",[e._v("自定义拦截器中三个方法说明及使用场景")])]),e._v(" "),n("p",[n("strong",[e._v("2.2.8.1 preHandle")])]),e._v(" "),n("p",[e._v("此方法的执行时机是在控制器方法执行之前，所以我们通常是使用此方法对请求部分进行增强。同时由于结果")]),e._v(" "),n("p",[e._v("视图还没有创建生成，所以此时我们可以指定响应的视图。")]),e._v(" "),n("p",[n("strong",[e._v("2.2.8.2 postHandle")])]),e._v(" "),n("p",[e._v("此方法的执行时机是在控制器方法执行之后，结果视图创建生成之前。所以通常是使用此方法对响应部分进行")]),e._v(" "),n("p",[e._v("增强。因为结果视图没有生成，所以我们此时仍然可以控制响应结果。")]),e._v(" "),n("p",[n("strong",[e._v("2.2.8.3 afterCompletion")])]),e._v(" "),n("p",[e._v("此方法的执行时机是在结果视图创建生成之后，展示到浏览器之前。所以此方法执行时，本次请求要准备的数")]),e._v(" "),n("p",[e._v("据具已生成完毕，且结果视图也已创建完成，所以我们可以利用此方法进行清理操作。同时，我们也无法控制响应")]),e._v(" "),n("p",[e._v("结果集内容。")]),e._v(" "),n("p",[n("strong",[e._v("2.3")]),e._v(" "),n("strong",[e._v("为什么不使用")]),e._v(" "),n("strong",[e._v("XML")]),e._v(" "),n("strong",[e._v("配置")]),e._v(" "),n("strong",[e._v("SpringMVC")])]),e._v(" "),n("p",[n("strong",[e._v("2.3.1我们先来看基于")]),e._v(" "),n("strong",[e._v("XML")]),e._v(" "),n("strong",[e._v("的")]),e._v(" "),n("strong",[e._v("SpringMVC")]),e._v(" "),n("strong",[e._v("配置：")])]),e._v(" "),n("p",[e._v("第一步：配置 web.xml")]),e._v(" "),n("p",[e._v("第二步：编写控制器")]),e._v(" "),n("p",[e._v("第三步：编写 springmvc.xml")]),e._v(" "),n("p",[e._v("第四步：配置控制器")]),e._v(" "),n("p",[e._v("第五步：配置处理器映射器，处理器适配器。")]),e._v(" "),n("p",[e._v("第六步：配置视图解析器。")]),e._v(" "),n("p",[e._v("其中，前 3 步和第六步基于注解配置时也都有，而第四第五步注解配置只需：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 开启 springmvc 对注解的支持--\x3e\n\n<mvc:annotation-driven></mvc:annotation-driven>\n\n而 XML 配置则需：\n\n\x3c!-- 实现 Controller 接口--\x3e\n\n<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/> \n<bean name="/sayhello2" class="com.baiqi.web.controller.HelloController2"/>\n\n\x3c!-- 继承 HttpRequestHandler 类--\x3e \n<bean name="/sayhello3" class="com.baiqi.web.controller.HelloController3"/> \n<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("而对比注解配置只需一个 Controller 注解和一个 RequestMapping 注解来比，显然注解来的更方便。")]),e._v(" "),n("p",[n("strong",[e._v("2.3.2 mvc:annotation-driven")]),e._v(" "),n("strong",[e._v("的说明")])]),e._v(" "),n("p",[e._v("它就相当于在 xml 中配置了：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- Begin --\x3e\n\n\x3c!-- HandlerMapping --\x3e \n<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean> \n\n<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>\n\n\x3c!-- HandlerAdapter --\x3e \n<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean> \n\n<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean> \n\n<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>\n\n\x3c!-- HadnlerExceptionResolvers --\x3e \n<bean class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"></bean> \n\n<bean class="org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"></bean> \n\n<bean class="org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"></bean>\n\n\x3c!-- End --\x3e \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("3、Spring整合SpringMvc注意事项")]),e._v(" "),n("p",[e._v("Bean 被创建两次 ？")]),e._v(" "),n("p",[e._v("• Spring 的 IOC 容器不应该扫描 SpringMVC 中的 bean, 对应的SpringMVC 的 IOC 容器不应该扫描 Spring 中的 bean")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<context:component-scan base-package="com.baiqi.springmvc" use-default-filters="false">  \n      <context:include-filter type="annotation"    expression="org.springframework.stereotype.Controller"/>\n       <context:include-filter type="annotation"    expression="org.springframework.web.bind.annotation.ControllerAdvice"/>\n  </context:component-scan>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<context:component-scan base-package="com.baiqi.springmvc">  \n    <context:exclude-filter type="annotation"    expression="org.springframework.stereotype.Controller"/>\n    <context:exclude-filter type="annotation"    expression="org.springframework.web.bind.annotation.ControllerAdvice"/>\n </context:component-scan>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("​")]),e._v(" "),n("p",[e._v("4、在 Spring MVC 配置文件中引用业务层的 Bean")]),e._v(" "),n("p",[e._v("• 多个 Spring IOC 容器之间可以设置为父子关系，以实现良好的解耦。")]),e._v(" "),n("p",[e._v("• Spring MVC WEB 层容器可作为 “业务层” Spring 容器的子容器：即 WEB 层容器可以引用业务层容器的 Bean，而业务层容器却访问不到 WEB 层容器的 Bean")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220618094536679.png",alt:"image-20220618094536679"}})]),e._v(" "),n("p",[e._v("附录：")]),e._v(" "),n("p",[e._v("spring MVC执行流程")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/01-Springmvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png",alt:""}})]),e._v(" "),n("p",[e._v("拦截器执行流程")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/02-%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png",alt:"02-拦截器执行流程"}})]),e._v(" "),n("p",[e._v("spring容器与springMVC容器中bean引用关系")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/03-Spring%E5%AE%B9%E5%99%A8%E4%B8%8ESpringmvc%E5%AE%B9%E5%99%A8%E4%B8%ADbean%E5%BC%95%E7%94%A8%E5%85%B3%E7%B3%BB.png",alt:"03-Spring容器与Springmvc容器中bean引用关系"}})])])}),[],!1,null,null,null);n.default=t.exports}}]);