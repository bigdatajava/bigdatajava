(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{409:function(t,e,r){"use strict";r.r(e);var v=r(1),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"rocketmq安装使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq安装使用"}},[t._v("#")]),t._v(" RocketMQ安装使用")]),t._v(" "),e("p",[t._v("​\tRocketMQ是阿里巴巴开源的一个消息中间件，在阿里内部历经了双十一等很多高并发场景的考验，能够处理亿万级别的消息。2016年开源后捐赠给Apache，现在是Apache的一个顶级项目。")]),t._v(" "),e("p",[t._v("​\t目前RocketMQ在阿里云上有一个购买即可用的商业版本，商业版本集成了阿里内部一些更深层次的功能及运维定制。我们这里学习的是Apache的开源版本。开源版本相对于阿里云上的商业版本，功能上略有缺失，但是大体上功能是一样的。")]),t._v(" "),e("p",[t._v("​\tRocketMQ的官网地址： http://rocketmq.apache.org ，github地址是  https://github.com/apache/rocketmq ，当前最新的版本是4.7.1。我们就用这个4.7.1版本来进行学习。")]),t._v(" "),e("h3",{attrs:{id:"下载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载"}},[t._v("#")]),t._v(" 下载")]),t._v(" "),e("p",[t._v("​\t\tRocketMQ运行版本下载地址： https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.7.1/rocketmq-all-4.7.1-bin-release.zip")]),t._v(" "),e("p",[t._v("​\t\tRocketMQ源码版本下载地址： https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.7.1/rocketmq-all-4.7.1-source-release.zip")]),t._v(" "),e("p",[t._v("这两个版本我们都下载下来。")]),t._v(" "),e("h3",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[t._v("​\tRocketMQ的安装非常简单，就是上传解压就可以了。")]),t._v(" "),e("p",[t._v("​\t然后我们准备一台CentOS7的Linux机器，快速把RocketMQ给运行起来。我使用的Linux版本如下：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[oper@worker1 jdk1.8]$ uname -a\nLinux worker1 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("​\t我们需要创建一个操作用户用来运行自己的程序，与root用户区分开。使用root用户创建一个oper用户，并给他创建一个工作目录。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[root@worker1 ~]# useradd oper\n[root@worker1 ~]# passwd oper \n设置用户密码\n[root@worker1 ~]# mkdir /app\n[root@worker1 ~]# chown oper:oper /app\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("​\t 运行RocketMQ需要先安装JDK。我们采用目前最稳定的JDK1.8版本。CentOS可以采用课件资料中的jdk-8u171-linux-x64.tar.gz，也可以自行去Oracle官网上下载。然后用FTP上传到oper用户的工作目录下。由oper用户解压到/app/jdk1.8目录下。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[oper@worker1 tools]$ tar -zxvf jdk-8u171-linux-x64.tar.gz\n[oper@worker1 tools]$ mv jdk1.8.0_171/ /app/jdk1.8\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("​\t配置环境变量。使用 vi ~/.bash_profile编辑文件，在下面加入以下内容：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export JAVA_HOME=/app/jdk1.8/\nPATH=$JAVA_HOME/bin:$PATH:$HOME/.local/bin:$HOME/bin\nexport PATH\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("​\t编辑完成后，执行 source ~/.bash_profile让环境变量生效。输入java -version能查看到以下内容表明JDK安装成功了。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[oper@worker1 ~]$ java -version\njava version "1.8.0_171"\nJava(TM) SE Runtime Environment (build 1.8.0_171-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("​\t 然后我们把下载的rocketmq-all-4.7.1-bin-release.zip在本地完成解压，并上传到/app/rocketmq目录。完成后，把rocketmq的bin目录也配置到环境变量当中。 vi ~/.bash_profile，加入以下内容，并执行source ~/.bash_profile让环境变量生效：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export JAVA_HOME=/app/jdk1.8/\nexport ROCKETMQ_HOME=/app/rocketmq/rocketmq-all-4.7.1-bin-release\nPATH=$ROCKETMQ_HOME/bin:$JAVA_HOME/bin:$PATH:$HOME/.local/bin:$HOME/bin\nexport PATH\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("​\t这样RocketMQ就安装完成了。我们把他运行起来。")]),t._v(" "),e("blockquote",[e("p",[t._v("这个ROCKETMQ_HOME的环境变量是必须要单独配置的，如果不配置的话，启动NameSever和Broker都会报错。")]),t._v(" "),e("p",[t._v("这个环境变量的作用是用来加载$ROCKETMQ_HOME/conf下的除broker.conf以外的几个配置文件。所以实际情况中，可以不按这个配置，但是一定要能找到配置文件。")])]),t._v(" "),e("h3",{attrs:{id:"运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[t._v("#")]),t._v(" 运行")]),t._v(" "),e("p",[t._v("​\t运行之前，我们需要对RocketMQ的组件结构有个大致的了解。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/BAD094A2F5B249EA87FB5B9048B62B19-1.png",alt:""}})]),t._v(" "),e("p",[t._v("​\tRocketMQ由以下这几个组件组成")]),t._v(" "),e("ul",[e("li",[t._v("NameServer : 提供轻量级的Broker路由服务。")]),t._v(" "),e("li",[t._v("Broker：实际处理消息存储、转发等服务的核心组件。")]),t._v(" "),e("li",[t._v("Producer：消息生产者集群。通常是业务系统中的一个功能模块。")]),t._v(" "),e("li",[t._v("Consumer：消息消费者集群。通常也是业务系统中的一个功能模块。")])]),t._v(" "),e("p",[t._v("所以我们要启动RocketMQ服务，需要先启动NameServer。")]),t._v(" "),e("h3",{attrs:{id:"启动nameserver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动nameserver"}},[t._v("#")]),t._v(" 启动NameServer")]),t._v(" "),e("p",[t._v("​\t启动NameServer非常简单， 在$ROCKETMQ_HOME/bin目录下有个mqnamesrv。直接执行这个脚本就可以启动RocketMQ的NameServer服务。")]),t._v(" "),e("p",[t._v("​\t但是要注意，RocketMQ默认预设的JVM内存是4G，这是RocketMQ给我们的最佳配置。但是通常我们用虚拟机的话都是不够4G内存的，所以需要调整下JVM内存大小。"),e("a",{attrs:{href:"http://xn--runserver-z89na9857bcqmtlfda85rmzcf95l5zb.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("修改的方式是直接修改runserver.sh"),e("OutboundLink")],1),t._v("。 用vi runserver.sh编辑这个脚本，在脚本中找到这一行调整内存大小为512M")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('JAVA_OPT="${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -\nXX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("​\t然后我们用静默启动的方式启动NameServer服务：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("nohup bin/mqnamesrv & \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("​\t启动完成后，在nohup.out里看到这一条关键日志就是启动成功了。并且使用jps指令可以看到有一个NamesrvStartup进程。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Java HotSpot(TM) 64-Bit Server VM warning: Using the DefNew young collector with the CMS\ncollector is deprecated and will likely be removed in a future release\nJava HotSpot(TM) 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and\nwill likely be removed in a future release.\nThe Name Server boot success. serializeType=JSON\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h3",{attrs:{id:"启动broker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动broker"}},[t._v("#")]),t._v(" 启动Broker")]),t._v(" "),e("p",[t._v("​\t"),e("a",{attrs:{href:"http://xn--Brokerrunbroker-wy8y53qb44gl6dtn1h9p4b.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("启动Broker的脚本是runbroker.sh"),e("OutboundLink")],1),t._v("。Broker的默认预设内存是8G，启动前，如果内存不够，同样需要调整下JVM内存。vi "),e("a",{attrs:{href:"http://runbroker.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("runbroker.sh"),e("OutboundLink")],1),t._v("，找到这一行，进行内存调整")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('JAVA_OPT="${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("​\t然后我们需要找到$ROCKETMQ_HOME/conf/broker.conf， vi指令进行编辑，在最下面加入一个配置：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("autoCreateTopicEnable=true\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("​\t"),e("a",{attrs:{href:"http://xn--runbroker-zz6n89bg5xa221choab1448bmczanv9bfgw6s1niq8a.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("然后也以静默启动的方式启动runbroker.sh"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("nohup ./mqbroker &\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("​\t启动完成后，同样是检查nohup.out日志，有这一条关键日志就标识启动成功了。 并且jps指令可以看到一个BrokerStartup进程。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("The broker[worker1, 192.168.232.128:10911] boot success. serializeType=JSON\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("在观察runserver.sh和runbroker.sh时，我们还可以查看到其他的JVM执行参数，这些参数都可以进行定制。例如我们观察到一个比较有意思的地方，nameServer使用的是CMS垃圾回收器，而Broker使用的是G1垃圾回收器。 关于垃圾回收器的知识你还记得吗？")])]),t._v(" "),e("h3",{attrs:{id:"命令行验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令行验证"}},[t._v("#")]),t._v(" 命令行验证")]),t._v(" "),e("p",[t._v("​\t在RocketMQ的安装包中，提供了一个tools.sh工具可以用来在命令行快速验证RocketMQ服务。我们在worker2上进入RocketMQ的安装目录：")]),t._v(" "),e("p",[t._v("首先需要配置一个环境变量NAMESRV_ADDR指向我们启动的NameServer服务。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export NAMESRV_ADDR='localhost:9876'\t\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("然后启动消息生产者发送消息：默认会发1000条消息")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("我们可以看到发送消息的日志：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".....\nSendResult [sendStatus=SEND_OK, msgId=C0A8E88007AC3764951D891CE9A003E7, offsetMsgId=C0A8E88000002A9F00000000000317BF, messageQueue=MessageQueue [topic=TopicTest, brokerName=worker1, queueId=1], queueOffset=249]\n14:59:33.418 [NettyClientSelector_1] INFO  RocketmqRemoting - closeChannel: close the connection to remote address[127.0.0.1:9876] result: true\n14:59:33.423 [NettyClientSelector_1] INFO  RocketmqRemoting - closeChannel: close the connection to remote address[192.168.232.128:10911] result: true\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("这日志中，上面部分就是我们发送的消息的内容。后面两句标识消息生产者正常关闭。")]),t._v(" "),e("p",[t._v("然后启动消息消费者接收消息：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bin/tools.sh  org.apache.rocketmq.example.quickstart.Consumer\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("启动后，可以看到消费到的消息。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("......\nConsumeMessageThread_19 Receive New Messages: [MessageExt [brokerName=worker1, queueId=2, storeSize=203, queueOffset=53, sysFlag=0, bornTimestamp=1606460371999, bornHost=/192.168.232.128:43436, storeTimestamp=1606460372000, storeHost=/192.168.232.128:10911, msgId=C0A8E88000002A9F000000000000A7AE, commitLogOffset=42926, bodyCRC=1968636794, reconsumeTimes=0, preparedTransactionOffset=0, toString()=Message{topic='TopicTest', flag=0, properties={MIN_OFFSET=0, MAX_OFFSET=250, CONSUME_START_TIME=1606460450150, UNIQ_KEY=C0A8E88007AC3764951D891CE41F00D4, CLUSTER=DefaultCluster, WAIT=true, TAGS=TagA}, body=[72, 101, 108, 108, 111, 32, 82, 111, 99, 107, 101, 116, 77, 81, 32, 50, 49, 50], transactionId='null'}]] \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("blockquote",[e("p",[t._v("日志中MessageExt后的整个内容就是一条完整的RocketMQ消息。我们要对这个消息的结构有个大概的了解，后面会对这个消息进行深入的理解。")]),t._v(" "),e("p",[t._v("其中比较关键的属性有：brokerName，queueId，msgId，topic，cluster，tags，body，transactionId。先找下这些属性在哪里。")])]),t._v(" "),e("p",[t._v("而这个Consume指令并不会结束，他会继续挂起，等待消费其他的消息。我们可以使用CTRL+C停止该进程。")]),t._v(" "),e("h3",{attrs:{id:"关闭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关闭"}},[t._v("#")]),t._v(" 关闭")]),t._v(" "),e("p",[t._v("要关闭RocketMQ服务可以通过mqshutdown脚本直接关闭")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 1.关闭NameServer\nsh bin/mqshutdown namesrv\n# 2.关闭Broker\nsh bin/mqshutdown broker\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"rocketmq集群架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq集群架构"}},[t._v("#")]),t._v(" RocketMQ集群架构")]),t._v(" "),e("p",[t._v("​\t刚才的演示中，我们已经体验到了RocketMQ是如何工作的。这样，我们回头看RocketMQ的集群架构，就能够有更全面的理解了。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/2.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"rocketmq集群中的角色"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq集群中的角色"}},[t._v("#")]),t._v(" RocketMQ集群中的角色")]),t._v(" "),e("p",[t._v("一个完整的RocketMQ集群中，有如下几个角色")]),t._v(" "),e("ul",[e("li",[t._v("Producer：消息的发送者；举例：发信者")]),t._v(" "),e("li",[t._v("Consumer：消息接收者；举例：收信者")]),t._v(" "),e("li",[t._v("Broker：暂存和传输消息；举例：邮局")]),t._v(" "),e("li",[t._v("NameServer：管理Broker；举例：各个邮局的管理机构")]),t._v(" "),e("li",[t._v("Topic：区分消息的种类；一个发送者可以发送消息给一个或者多个Topic；一个消息的接收者可以订阅一个或者多个Topic消息")])]),t._v(" "),e("blockquote",[e("p",[t._v("我们之前的测试案例中，Topic是什么？topic='TopicTest'")]),t._v(" "),e("p",[t._v("现在你能看懂我们之前在broker.conf中添加的autoCreateTopicEnable=true这个属性的用处了吗？")])]),t._v(" "),e("ul",[e("li",[t._v("Message Queue：相当于是Topic的分区；用于并行发送和接收消息")])]),t._v(" "),e("blockquote",[e("p",[t._v("在我们之前的测试案例中，一个queueId就代表了一个MessageQueue。有哪些queueId？ 0，1，2，3四个MessageQueue，你都找到了吗？")])]),t._v(" "),e("h3",{attrs:{id:"rocketmq集群搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq集群搭建"}},[t._v("#")]),t._v(" RocketMQ集群搭建")]),t._v(" "),e("h3",{attrs:{id:"机器环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#机器环境"}},[t._v("#")]),t._v(" 机器环境")]),t._v(" "),e("p",[t._v("准备三台虚拟机，root密码 root ;IP地址：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("192.168.232.128 worker1\n192.168.232.129 worker2\n192.168.232.130 worker3\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("blockquote",[e("p",[t._v("这里特意不把每个机器的机器名定义得太过规范，比如master slave这样的，有助于更理解各项配置。")])]),t._v(" "),e("h3",{attrs:{id:"创建用户"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建用户"}},[t._v("#")]),t._v(" 创建用户")]),t._v(" "),e("p",[t._v("useradd oper")]),t._v(" "),e("p",[t._v("passwd oper  (密码输入 123qweasd)")]),t._v(" "),e("h3",{attrs:{id:"系统配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统配置"}},[t._v("#")]),t._v(" 系统配置")]),t._v(" "),e("p",[e("strong",[t._v("免密登录")])]),t._v(" "),e("p",[t._v("切换oper用户，在worker1上 生成key")]),t._v(" "),e("p",[t._v("ssh-kengen")]),t._v(" "),e("p",[t._v("然后分发给其他机器")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ssh-copy-id worker1\nssh-copy-id worker2\nssh-copy-id worker3\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("这样就可以在worker1上直接ssh 或者scp到另外的机器，不需要输密码了。")]),t._v(" "),e("p",[e("strong",[t._v("关闭防火墙")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("systemctl stop firewalld.service\nfirewall-cmd --state \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h3",{attrs:{id:"安装java"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装java"}},[t._v("#")]),t._v(" 安装java")]),t._v(" "),e("p",[t._v("给oper创建/app目录")]),t._v(" "),e("p",[t._v("上传jdk的tar包")]),t._v(" "),e("p",[t._v("修改~/.bash_profile，配置环境变量。source生效。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export JAVA_HOME=/app/jdk1.8/\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h3",{attrs:{id:"安装rocketmq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装rocketmq"}},[t._v("#")]),t._v(" 安装RocketMQ")]),t._v(" "),e("p",[t._v("上传tar包，直接解压。然后配置环境变量")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export ROCKETMQ_HOME=/app/rocketmq/rocketmq-all-4.7.1-bin-release\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("RocketMQ在4.5版本之前都不支持master宕机后slave自动切换。在4.5版本后，增加了基于Dleger实现的主从切换。这里用的目前最新的4.7.1版本")])]),t._v(" "),e("h3",{attrs:{id:"配置rocketmq集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置rocketmq集群"}},[t._v("#")]),t._v(" 配置RocketMQ集群")]),t._v(" "),e("p",[t._v("我们为了便于观察，这次搭建一个2主2从异步刷盘的集群，所以我们会使用conf/2m-2s-async下的配置文件，实际项目中，为了达到高可用，一般会使用dleger。预备设计的集群情况如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("机器名")]),t._v(" "),e("th",[t._v("nemaeServer节点部署")]),t._v(" "),e("th",[t._v("broker节点部署")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("worker1")]),t._v(" "),e("td",[t._v("nameserver")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("worker2")]),t._v(" "),e("td",[t._v("nameserver")]),t._v(" "),e("td",[t._v("broker-a, broker-b-s")])]),t._v(" "),e("tr",[e("td",[t._v("worker3")]),t._v(" "),e("td",[t._v("nameserver")]),t._v(" "),e("td",[t._v("broker-b,broker-a-s")])])])]),t._v(" "),e("p",[t._v("所以修改的配置文件是进入rocketmq的config目录下修改2m-2s-async的配置文件。--只需要配置broker.conf。")]),t._v(" "),e("blockquote",[e("p",[t._v("在rocketmq的config目录下可以看到rocketmq建议的各种配置方式：")]),t._v(" "),e("ul",[e("li",[t._v("2m-2s-async: 2主2从异步刷盘(吞吐量较大，但是消息可能丢失),")]),t._v(" "),e("li",[t._v("2m-2s-sync:2主2从同步刷盘(吞吐量会下降，但是消息更安全)，")]),t._v(" "),e("li",[t._v("2m-noslave:2主无从(单点故障)，然后还可以直接配置broker.conf，进行单点环境配置。")]),t._v(" "),e("li",[t._v("而dleger就是用来实现主从切换的。集群中的节点会基于Raft协议随机选举出一个leader，其他的就都是follower。通常正式环境都会采用这种方式来搭建集群。")])])]),t._v(" "),e("p",[t._v("我们这次采用2m-2s-async的方式搭建集群。")]),t._v(" "),e("p",[e("strong",[t._v("配置第一组broker-a")])]),t._v(" "),e("p",[t._v("在"),e("strong",[t._v("worker2")]),t._v("上先配置borker-a的master节点。先配置2m-2s-async/broker-a.properties")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#所属集群名字，名字一样的节点就在同一个集群内\nbrokerClusterName=rocketmq-cluster\n#broker名字，名字一样的节点就是一组主从节点。\nbrokerName=broker-a\n#brokerid,0就表示是Master，>0的都是表示 Slave\nbrokerId=0\n#nameServer地址，分号分割\nnamesrvAddr=worker1:9876;worker2:9876;worker3:9876\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数\ndefaultTopicQueueNums=4\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭\nautoCreateTopicEnable=true\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭\nautoCreateSubscriptionGroup=true\n#Broker 对外服务的监听端口\nlistenPort=10911\n#删除文件时间点，默认凌晨 4点\ndeleteWhen=04\n#文件保留时间，默认 48 小时\nfileReservedTime=120\n#commitLog每个文件的大小默认1G\nmapedFileSizeCommitLog=1073741824\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n#destroyMapedFileIntervalForcibly=120000\n#redeleteHangedFileInterval=120000\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n#存储路径\nstorePathRootDir=/app/rocketmq/store\n#commitLog 存储路径\nstorePathCommitLog=/app/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/app/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/app/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/app/rocketmq/store/checkpoint\n#abort 文件存储路径\nabortFile=/app/rocketmq/store/abort\n#限制的消息大小\nmaxMessageSize=65536\n#flushCommitLogLeastPages=4\n#flushConsumeQueueLeastPages=2\n#flushCommitLogThoroughInterval=10000\n#flushConsumeQueueThoroughInterval=60000\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE\nbrokerRole=ASYNC_MASTER\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘\nflushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n#发消息线程池数量\n#sendMessageThreadPoolNums=128\n#拉消息线程池数量\n#pullMessageThreadPoolNums=128\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br"),e("span",{staticClass:"line-number"},[t._v("45")]),e("br"),e("span",{staticClass:"line-number"},[t._v("46")]),e("br"),e("span",{staticClass:"line-number"},[t._v("47")]),e("br"),e("span",{staticClass:"line-number"},[t._v("48")]),e("br"),e("span",{staticClass:"line-number"},[t._v("49")]),e("br"),e("span",{staticClass:"line-number"},[t._v("50")]),e("br"),e("span",{staticClass:"line-number"},[t._v("51")]),e("br"),e("span",{staticClass:"line-number"},[t._v("52")]),e("br"),e("span",{staticClass:"line-number"},[t._v("53")]),e("br"),e("span",{staticClass:"line-number"},[t._v("54")]),e("br"),e("span",{staticClass:"line-number"},[t._v("55")]),e("br"),e("span",{staticClass:"line-number"},[t._v("56")]),e("br"),e("span",{staticClass:"line-number"},[t._v("57")]),e("br"),e("span",{staticClass:"line-number"},[t._v("58")]),e("br"),e("span",{staticClass:"line-number"},[t._v("59")]),e("br"),e("span",{staticClass:"line-number"},[t._v("60")]),e("br")])]),e("p",[t._v("该节点对应的从节点在"),e("strong",[t._v("worker3")]),t._v("上。修改2m-2s-async/broker-a-s.properties  "),e("code",[t._v("只需要修改brokerId和brokerRole")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#所属集群名字，名字一样的节点就在同一个集群内\nbrokerClusterName=rocketmq-cluster\n#broker名字，名字一样的节点就是一组主从节点。\nbrokerName=broker-a\n#brokerid,0就表示是Master，>0的都是表示 Slave\nbrokerId=1\n#nameServer地址，分号分割\nnamesrvAddr=worker1:9876;worker2:9876;worker3:9876\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数\ndefaultTopicQueueNums=4\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭\nautoCreateTopicEnable=true\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭\nautoCreateSubscriptionGroup=true\n#Broker 对外服务的监听端口\nlistenPort=11011\n#删除文件时间点，默认凌晨 4点\ndeleteWhen=04\n#文件保留时间，默认 48 小时\nfileReservedTime=120\n#commitLog每个文件的大小默认1G\nmapedFileSizeCommitLog=1073741824\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n#destroyMapedFileIntervalForcibly=120000\n#redeleteHangedFileInterval=120000\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n#存储路径\nstorePathRootDir=/app/rocketmq/storeSlave\n#commitLog 存储路径\nstorePathCommitLog=/app/rocketmq/storeSlave/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/app/rocketmq/storeSlave/consumequeue\n#消息索引存储路径\nstorePathIndex=/app/rocketmq/storeSlave/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/app/rocketmq/storeSlave/checkpoint\n#abort 文件存储路径\nabortFile=/app/rocketmq/storeSlave/abort\n#限制的消息大小\nmaxMessageSize=65536\n#flushCommitLogLeastPages=4\n#flushConsumeQueueLeastPages=2\n#flushCommitLogThoroughInterval=10000\n#flushConsumeQueueThoroughInterval=60000\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE\nbrokerRole=SLAVE\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘\nflushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n#发消息线程池数量\n#sendMessageThreadPoolNums=128\n#拉消息线程池数量\n#pullMessageThreadPoolNums=128\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br"),e("span",{staticClass:"line-number"},[t._v("45")]),e("br"),e("span",{staticClass:"line-number"},[t._v("46")]),e("br"),e("span",{staticClass:"line-number"},[t._v("47")]),e("br"),e("span",{staticClass:"line-number"},[t._v("48")]),e("br"),e("span",{staticClass:"line-number"},[t._v("49")]),e("br"),e("span",{staticClass:"line-number"},[t._v("50")]),e("br"),e("span",{staticClass:"line-number"},[t._v("51")]),e("br"),e("span",{staticClass:"line-number"},[t._v("52")]),e("br"),e("span",{staticClass:"line-number"},[t._v("53")]),e("br"),e("span",{staticClass:"line-number"},[t._v("54")]),e("br"),e("span",{staticClass:"line-number"},[t._v("55")]),e("br"),e("span",{staticClass:"line-number"},[t._v("56")]),e("br"),e("span",{staticClass:"line-number"},[t._v("57")]),e("br"),e("span",{staticClass:"line-number"},[t._v("58")]),e("br"),e("span",{staticClass:"line-number"},[t._v("59")]),e("br"),e("span",{staticClass:"line-number"},[t._v("60")]),e("br")])]),e("p",[e("strong",[t._v("配置第二组Broker-b")])]),t._v(" "),e("p",[t._v("这一组broker的主节点在"),e("strong",[t._v("worker3")]),t._v("上，所以需要配置worker3上的config/2m-2s-async/broker-b.properties")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#所属集群名字，名字一样的节点就在同一个集群内\nbrokerClusterName=rocketmq-cluster\n#broker名字，名字一样的节点就是一组主从节点。\nbrokerName=broker-b\n#brokerid,0就表示是Master，>0的都是表示 Slave\nbrokerId=0\n#nameServer地址，分号分割\nnamesrvAddr=worker1:9876;worker2:9876;worker3:9876\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数\ndefaultTopicQueueNums=4\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭\nautoCreateTopicEnable=true\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭\nautoCreateSubscriptionGroup=true\n#Broker 对外服务的监听端口\nlistenPort=10911\n#删除文件时间点，默认凌晨 4点\ndeleteWhen=04\n#文件保留时间，默认 48 小时\nfileReservedTime=120\n#commitLog每个文件的大小默认1G\nmapedFileSizeCommitLog=1073741824\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n#destroyMapedFileIntervalForcibly=120000\n#redeleteHangedFileInterval=120000\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n#存储路径\nstorePathRootDir=/app/rocketmq/store\n#commitLog 存储路径\nstorePathCommitLog=/app/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/app/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/app/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/app/rocketmq/store/checkpoint\n#abort 文件存储路径\nabortFile=/app/rocketmq/store/abort\n#限制的消息大小\nmaxMessageSize=65536\n#flushCommitLogLeastPages=4\n#flushConsumeQueueLeastPages=2\n#flushCommitLogThoroughInterval=10000\n#flushConsumeQueueThoroughInterval=60000\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE\nbrokerRole=ASYNC_MASTER\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘\nflushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n#发消息线程池数量\n#sendMessageThreadPoolNums=128\n#拉消息线程池数量\n#pullMessageThreadPoolNums=128\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br"),e("span",{staticClass:"line-number"},[t._v("45")]),e("br"),e("span",{staticClass:"line-number"},[t._v("46")]),e("br"),e("span",{staticClass:"line-number"},[t._v("47")]),e("br"),e("span",{staticClass:"line-number"},[t._v("48")]),e("br"),e("span",{staticClass:"line-number"},[t._v("49")]),e("br"),e("span",{staticClass:"line-number"},[t._v("50")]),e("br"),e("span",{staticClass:"line-number"},[t._v("51")]),e("br"),e("span",{staticClass:"line-number"},[t._v("52")]),e("br"),e("span",{staticClass:"line-number"},[t._v("53")]),e("br"),e("span",{staticClass:"line-number"},[t._v("54")]),e("br"),e("span",{staticClass:"line-number"},[t._v("55")]),e("br"),e("span",{staticClass:"line-number"},[t._v("56")]),e("br"),e("span",{staticClass:"line-number"},[t._v("57")]),e("br"),e("span",{staticClass:"line-number"},[t._v("58")]),e("br"),e("span",{staticClass:"line-number"},[t._v("59")]),e("br"),e("span",{staticClass:"line-number"},[t._v("60")]),e("br")])]),e("p",[t._v("然后他对应的slave在worker2上，修改work2上的 conf/2m-2s-async/broker-b-s.properties")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#所属集群名字，名字一样的节点就在同一个集群内\nbrokerClusterName=rocketmq-cluster\n#broker名字，名字一样的节点就是一组主从节点。\nbrokerName=broker-b\n#brokerid,0就表示是Master，>0的都是表示 Slave\nbrokerId=1\n#nameServer地址，分号分割\nnamesrvAddr=worker1:9876;worker2:9876;worker3:9876\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数\ndefaultTopicQueueNums=4\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭\nautoCreateTopicEnable=true\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭\nautoCreateSubscriptionGroup=true\n#Broker 对外服务的监听端口\nlistenPort=11011\n#删除文件时间点，默认凌晨 4点\ndeleteWhen=04\n#文件保留时间，默认 48 小时\nfileReservedTime=120\n#commitLog每个文件的大小默认1G\nmapedFileSizeCommitLog=1073741824\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n#destroyMapedFileIntervalForcibly=120000\n#redeleteHangedFileInterval=120000\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n#存储路径\nstorePathRootDir=/app/rocketmq/storeSlave\n#commitLog 存储路径\nstorePathCommitLog=/app/rocketmq/storeSlave/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/app/rocketmq/storeSlave/consumequeue\n#消息索引存储路径\nstorePathIndex=/app/rocketmq/storeSlave/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/app/rocketmq/storeSlave/checkpoint\n#abort 文件存储路径\nabortFile=/app/rocketmq/storeSlave/abort\n#限制的消息大小\nmaxMessageSize=65536\n#flushCommitLogLeastPages=4\n#flushConsumeQueueLeastPages=2\n#flushCommitLogThoroughInterval=10000\n#flushConsumeQueueThoroughInterval=60000\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE\nbrokerRole=SLAVE\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘\nflushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n#发消息线程池数量\n#sendMessageThreadPoolNums=128\n#拉消息线程池数量\n#pullMessageThreadPoolNums=128\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br"),e("span",{staticClass:"line-number"},[t._v("45")]),e("br"),e("span",{staticClass:"line-number"},[t._v("46")]),e("br"),e("span",{staticClass:"line-number"},[t._v("47")]),e("br"),e("span",{staticClass:"line-number"},[t._v("48")]),e("br"),e("span",{staticClass:"line-number"},[t._v("49")]),e("br"),e("span",{staticClass:"line-number"},[t._v("50")]),e("br"),e("span",{staticClass:"line-number"},[t._v("51")]),e("br"),e("span",{staticClass:"line-number"},[t._v("52")]),e("br"),e("span",{staticClass:"line-number"},[t._v("53")]),e("br"),e("span",{staticClass:"line-number"},[t._v("54")]),e("br"),e("span",{staticClass:"line-number"},[t._v("55")]),e("br"),e("span",{staticClass:"line-number"},[t._v("56")]),e("br"),e("span",{staticClass:"line-number"},[t._v("57")]),e("br"),e("span",{staticClass:"line-number"},[t._v("58")]),e("br"),e("span",{staticClass:"line-number"},[t._v("59")]),e("br"),e("span",{staticClass:"line-number"},[t._v("60")]),e("br")])]),e("blockquote",[e("p",[t._v("这样broker就配置完成了。")]),t._v(" "),e("p",[t._v("需要注意的配置项：1、同一机器上两个实例的store目录不能相同，否则会报错 Lock failed,MQ already started")]),t._v(" "),e("p",[t._v("2、同一机器上两个实例的listenPort也不能相同。否则会报端口占用的错")]),t._v(" "),e("p",[t._v("nameserver不需要进行配置，直接启动就行。这也看出nameserver是无状态的。")]),t._v(" "),e("p",[t._v("3、其他的配置项参见《RcoketMQ全部配置表.pdf》")])]),t._v(" "),e("h3",{attrs:{id:"启动rocketmq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动rocketmq"}},[t._v("#")]),t._v(" 启动RocketMQ")]),t._v(" "),e("p",[t._v("启动就比较简单了，直接调用bin目录下的脚本就行。只是启动之前要注意看下他们的JVM内存配置，默认的配置都比较高。")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("先启动nameServer。")])])]),t._v(" "),e("p",[t._v("修改三个节点上的bin/runserver.sh，调整里面的jvm内存配置。找到下面这一行调整下内存")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('JAVA_OPT="${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("直接在三个节点上启动nameServer。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("nohup bin/mqnamesrv &\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("启动完成后，在nohup.out里看到这一条关键日志就是启动成功了。")]),t._v(" "),e("p",[t._v("Java HotSpot(TM) 64-Bit Server VM warning: Using the DefNew young collector  with the CMS collector is deprecated and will likely be removed in a  future release Java HotSpot(TM) 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed in a future release. The Name Server boot success. serializeType=JSON")]),t._v(" "),e("p",[t._v("使用jps指令可以看到一个NamesrvStartup进程。")]),t._v(" "),e("blockquote",[e("p",[t._v("这里也看到，RocketMQ在runserver.sh中是使用的CMS垃圾回收期，而在runbroker.sh中使用的是G1垃圾回收期。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[t._v("再启动broker")])])]),t._v(" "),e("p",[t._v("启动broker是使用的mqbroker指令，只是注意启动broker时需要通过-c 指定对应的配置文件。")]),t._v(" "),e("p",[t._v("在"),e("strong",[t._v("worker2")]),t._v("上启动broker-a的master节点和broker-b的slave节点")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("nohup ./mqbroker -c ../conf/2m-2s-async/broker-a.properties &\nnohup ./mqbroker -c ../conf/2m-2s-async/broker-b-s.properties &\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("在work3上启动broker-b的master节点和broker-a的slave节点")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("nohup ./mqbroker -c ../conf/2m-2s-async/broker-b.properties &\nnohup ./mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("blockquote",[e("p",[t._v("启动slave时，如果遇到报错 Lock failed,MQ already started ，那是因为有多个实例共用了同一个storePath造成的，这时就需要调整store的路径。")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[t._v("启动状态检查")])])]),t._v(" "),e("p",[t._v("使用jps指令，能看到一个NameSrvStartup进程和两个BrokerStartup进程。")]),t._v(" "),e("p",[t._v("nohup.out中也有启动成功的日志。")]),t._v(" "),e("p",[t._v("对应的日志文件：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 查看nameServer日志\ntail -500f ~/logs/rocketmqlogs/namesrv.log\n# 查看broker日志\ntail -500f ~/logs/rocketmqlogs/broker.log\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("ol",{attrs:{start:"4"}},[e("li",[e("strong",[t._v("测试mqadmin管理工具")])])]),t._v(" "),e("p",[t._v("RocketMQ的源代码中并没有为我们提供类似于Nacos或者RabbitMQ那样的控制台，只提供了一个mqadmin指令来管理RocketMQ，命令在bin目录下。使用方式是 ./mqadmin {command} {args}")]),t._v(" "),e("p",[t._v("所有指令如下：")]),t._v(" "),e("p",[t._v("4.1 "),e("strong",[t._v("Topic相关")]),t._v("：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("updateTopic")]),t._v(" "),e("td",[t._v("创建更新Topic配置")]),t._v(" "),e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，表示 topic 所在  Broker，只支持单台Broker，地址为ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("cluster 名称，表示 topic 所在集群（集群可通过  clusterList 查询）")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h-")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-p")]),t._v(" "),e("td",[t._v("指定新topic的读写权限( W=2|R=4|WR=6 )")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-r")]),t._v(" "),e("td",[t._v("可读队列数（默认为 8）")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-w")]),t._v(" "),e("td",[t._v("可写队列数（默认为 8）")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称（名称只能使用字符  ^[a-zA-Z0-9_-]+$ ）")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("deleteTopic")]),t._v(" "),e("td",[t._v("删除Topic")]),t._v(" "),e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("cluster 名称，表示删除某集群下的某个 topic （集群  可通过 clusterList 查询）")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称（名称只能使用字符  ^[a-zA-Z0-9_-]+$ ）")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("topicList")]),t._v(" "),e("td",[t._v("查看 Topic 列表信息")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("不配置-c只返回topic列表，增加-c返回clusterName,  topic, consumerGroup信息，即topic的所属集群和订阅关系，没有参数")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("topicRoute")]),t._v(" "),e("td",[t._v("查看 Topic 路由信息")]),t._v(" "),e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("topicStatus")]),t._v(" "),e("td",[t._v("查看 Topic 消息队列offset")]),t._v(" "),e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("topicClusterList")]),t._v(" "),e("td",[t._v("查看 Topic 所在集群列表")]),t._v(" "),e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("updateTopicPerm")]),t._v(" "),e("td",[t._v("更新 Topic 读写权限")]),t._v(" "),e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，表示 topic 所在  Broker，只支持单台Broker，地址为ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-p")]),t._v(" "),e("td",[t._v("指定新 topic 的读写权限( W=2|R=4|WR=6 )")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("cluster 名称，表示 topic 所在集群（集群可通过  clusterList 查询），-b优先，如果没有-b，则对集群中所有Broker执行命令")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("updateOrderConf")]),t._v(" "),e("td",[t._v("从NameServer上创建、删除、获取特定命名空间的kv配置，目前还未启用")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic，键")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-v")]),t._v(" "),e("td",[t._v("orderConf，值")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-m")]),t._v(" "),e("td",[t._v("method，可选get、put、delete")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("allocateMQ")]),t._v(" "),e("td",[t._v("以平均负载算法计算消费者列表负载消息队列的负载结果")]),t._v(" "),e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("ipList，用逗号分隔，计算这些ip去负载Topic的消息队列")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("statsAll")]),t._v(" "),e("td",[t._v("打印Topic订阅关系、TPS、积累量、24h读写总量等信息")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-a")]),t._v(" "),e("td",[t._v("是否只打印活跃topic")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("指定topic")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("4.2 "),e("strong",[t._v("集群相关")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("clusterList")]),t._v(" "),e("td",[t._v("查看集群信息，集群、BrokerName、BrokerId、TPS等信息")]),t._v(" "),e("td",[t._v("-m")]),t._v(" "),e("td",[t._v("打印更多信息 (增加打印出如下信息 #InTotalYest,  #OutTotalYest, #InTotalToday ,#OutTotalToday)")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("打印间隔，单位秒")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("clusterRT")]),t._v(" "),e("td",[t._v("发送消息检测集群各Broker RT。消息发往${BrokerName} Topic。")]),t._v(" "),e("td",[t._v("-a")]),t._v(" "),e("td",[t._v("amount，每次探测的总数，RT = 总时间 /  amount")])]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("消息大小，单位B")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("探测哪个集群")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-p")]),t._v(" "),e("td",[t._v("是否打印格式化日志，以|分割，默认不打印")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-m")]),t._v(" "),e("td",[t._v("所属机房，打印使用")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("发送间隔，单位秒")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("4.3 "),e("strong",[t._v("Broker相关")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("updateBrokerConfig")]),t._v(" "),e("td",[t._v("更新 Broker 配置文件，会修改Broker.conf")]),t._v(" "),e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，格式为ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("cluster 名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-k")]),t._v(" "),e("td",[t._v("key 值")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-v")]),t._v(" "),e("td",[t._v("value 值")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("brokerStatus")]),t._v(" "),e("td",[t._v("查看 Broker 统计信息、运行状态（你想要的信息几乎都在里面）")]),t._v(" "),e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，地址为ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("brokerConsumeStats")]),t._v(" "),e("td",[t._v("Broker中各个消费者的消费情况，按Message Queue维度返回Consume  Offset，Broker Offset，Diff，TImestamp等信息")]),t._v(" "),e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，地址为ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("请求超时时间")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-l")]),t._v(" "),e("td",[t._v("diff阈值，超过阈值才打印")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-o")]),t._v(" "),e("td",[t._v("是否为顺序topic，一般为false")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("getBrokerConfig")]),t._v(" "),e("td",[t._v("获取Broker配置")]),t._v(" "),e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，地址为ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("wipeWritePerm")]),t._v(" "),e("td",[t._v("从NameServer上清除 Broker写权限")]),t._v(" "),e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，地址为ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("cleanExpiredCQ")]),t._v(" "),e("td",[t._v("清理Broker上过期的Consume Queue，如果手动减少对列数可能产生过期队列")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，地址为ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("集群名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("cleanUnusedTopic")]),t._v(" "),e("td",[t._v("清理Broker上不使用的Topic，从内存中释放Topic的Consume  Queue，如果手动删除Topic会产生不使用的Topic")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 地址，地址为ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("集群名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("sendMsgStatus")]),t._v(" "),e("td",[t._v("向Broker发消息，返回发送状态和RT")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("BrokerName，注意不同于Broker地址")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("消息大小，单位B")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("发送次数")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("4.4 "),e("strong",[t._v("消息相关")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("queryMsgById")]),t._v(" "),e("td",[t._v("根据offsetMsgId查询msg，如果使用开源控制台，应使用offsetMsgId，此命令还有其他参数，具体作用请阅读QueryMsgByIdSubCommand。")]),t._v(" "),e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("msgId")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("queryMsgByKey")]),t._v(" "),e("td",[t._v("根据消息 Key 查询消息")]),t._v(" "),e("td",[t._v("-k")]),t._v(" "),e("td",[t._v("msgKey")])]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("Topic 名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("queryMsgByOffset")]),t._v(" "),e("td",[t._v("根据 Offset 查询消息")]),t._v(" "),e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker 名称，（这里需要注意  填写的是 Broker 的名称，不是 Broker 的地址，Broker 名称可以在 clusterList 查到）")])]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("query 队列 id")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-o")]),t._v(" "),e("td",[t._v("offset 值")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic 名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("queryMsgByUniqueKey")]),t._v(" "),e("td",[t._v("根据msgId查询，msgId不同于offsetMsgId，区别详见常见运维问题。-g，-d配合使用，查到消息后尝试让特定的消费者消费消息并返回消费结果")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("uniqe msg id")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("consumerGroup")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-d")]),t._v(" "),e("td",[t._v("clientId")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("checkMsgSendRT")]),t._v(" "),e("td",[t._v("检测向topic发消息的RT，功能类似clusterRT")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-a")]),t._v(" "),e("td",[t._v("探测次数")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("消息大小")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("sendMessage")]),t._v(" "),e("td",[t._v("发送一条消息，可以根据配置发往特定Message Queue，或普通发送。")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-p")]),t._v(" "),e("td",[t._v("body，消息体")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-k")]),t._v(" "),e("td",[t._v("keys")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("tags")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("BrokerName")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("queueId")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("consumeMessage")]),t._v(" "),e("td",[t._v("消费消息。可以根据offset、开始&结束时间戳、消息队列消费消息，配置不同执行不同消费逻辑，详见ConsumeMessageCommand。")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("BrokerName")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-o")]),t._v(" "),e("td",[t._v("从offset开始消费")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("queueId")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("消费者分组")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("开始时间戳，格式详见-h")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-d")]),t._v(" "),e("td",[t._v("结束时间戳")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("消费多少条消息")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("printMsg")]),t._v(" "),e("td",[t._v("从Broker消费消息并打印，可选时间段")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("字符集，例如UTF-8")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("subExpress，过滤表达式")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("开始时间戳，格式参见-h")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-e")]),t._v(" "),e("td",[t._v("结束时间戳")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-d")]),t._v(" "),e("td",[t._v("是否打印消息体")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("printMsgByQueue")]),t._v(" "),e("td",[t._v("类似printMsg，但指定Message Queue")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("queueId")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-a")]),t._v(" "),e("td",[t._v("BrokerName")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("字符集，例如UTF-8")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("subExpress，过滤表达式")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("开始时间戳，格式参见-h")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-e")]),t._v(" "),e("td",[t._v("结束时间戳")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-p")]),t._v(" "),e("td",[t._v("是否打印消息")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-d")]),t._v(" "),e("td",[t._v("是否打印消息体")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-f")]),t._v(" "),e("td",[t._v("是否统计tag数量并打印")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("resetOffsetByTime")]),t._v(" "),e("td",[t._v("按时间戳重置offset，Broker和consumer都会重置")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("消费者分组")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("重置为此时间戳对应的offset")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-f")]),t._v(" "),e("td",[t._v("是否强制重置，如果false，只支持回溯offset，如果true，不管时间戳对应offset与consumeOffset关系")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("是否重置c++客户端offset")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("4.5 "),e("strong",[t._v("消费者和消费者组相关")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("consumerProgress")]),t._v(" "),e("td",[t._v("查看订阅组消费状态，可以查看具体的client IP的消息积累量")]),t._v(" "),e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("消费者所属组名")])]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("是否打印client IP")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("consumerStatus")]),t._v(" "),e("td",[t._v("查看消费者状态，包括同一个分组中是否都是相同的订阅，分析Process  Queue是否堆积，返回消费者jstack结果，内容较多，使用者参见ConsumerStatusSubCommand")]),t._v(" "),e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("consumer group")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("clientId")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("是否执行jstack")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("getConsumerStatus")]),t._v(" "),e("td",[t._v("获取 Consumer 消费进度")]),t._v(" "),e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("消费者所属组名")])]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("查询主题")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("Consumer 客户端 ip")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("updateSubGroup")]),t._v(" "),e("td",[t._v("更新或创建订阅关系")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker地址")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("集群名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("消费者分组名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("分组是否允许消费")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-m")]),t._v(" "),e("td",[t._v("是否从最小offset开始消费")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-d")]),t._v(" "),e("td",[t._v("是否是广播模式")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-q")]),t._v(" "),e("td",[t._v("重试队列数量")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-r")]),t._v(" "),e("td",[t._v("最大重试次数")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-i")]),t._v(" "),e("td",[t._v("当slaveReadEnable开启时有效，且还未达到从slave消费时建议从哪个BrokerId消费，可以配置备机id，主动从备机消费")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-w")]),t._v(" "),e("td",[t._v("如果Broker建议从slave消费，配置决定从哪个slave消费，配置BrokerId，例如1")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-a")]),t._v(" "),e("td",[t._v("当消费者数量变化时是否通知其他消费者负载均衡")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("deleteSubGroup")]),t._v(" "),e("td",[t._v("从Broker删除订阅关系")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Broker地址")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-c")]),t._v(" "),e("td",[t._v("集群名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("消费者分组名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("cloneGroupOffset")]),t._v(" "),e("td",[t._v("在目标群组中使用源群组的offset")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("源消费者组")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-d")]),t._v(" "),e("td",[t._v("目标消费者组")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("topic名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-o")]),t._v(" "),e("td",[t._v("暂未使用")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("4.6 "),e("strong",[t._v("连接相关")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("consumerConnec tion")]),t._v(" "),e("td",[t._v("查询 Consumer 的网络连接")]),t._v(" "),e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("消费者所属组名")])]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("producerConnec tion")]),t._v(" "),e("td",[t._v("查询 Producer 的网络连接")]),t._v(" "),e("td",[t._v("-g")]),t._v(" "),e("td",[t._v("生产者所属组名")])]),t._v(" "),e("tr",[e("td",[t._v("-t")]),t._v(" "),e("td",[t._v("主题名称")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("4.7 "),e("strong",[t._v("NameServer相关")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("updateKvConfig")]),t._v(" "),e("td",[t._v("更新NameServer的kv配置，目前还未使用")]),t._v(" "),e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("命名空间")])]),t._v(" "),e("tr",[e("td",[t._v("-k")]),t._v(" "),e("td",[t._v("key")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-v")]),t._v(" "),e("td",[t._v("value")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("deleteKvConfig")]),t._v(" "),e("td",[t._v("删除NameServer的kv配置")]),t._v(" "),e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("命名空间")])]),t._v(" "),e("tr",[e("td",[t._v("-k")]),t._v(" "),e("td",[t._v("key")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("getNamesrvConfig")]),t._v(" "),e("td",[t._v("获取NameServer配置")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("updateNamesrvConfig")]),t._v(" "),e("td",[t._v("修改NameServer配置")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-k")]),t._v(" "),e("td",[t._v("key")]),t._v(" "),e("td"),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("-v")]),t._v(" "),e("td",[t._v("value")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("4.8 其他")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("命令选项")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("startMonitoring")]),t._v(" "),e("td",[t._v("开启监控进程，监控消息误删、重试队列消息数等")]),t._v(" "),e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("NameServer 服务地址，格式 ip:port")])]),t._v(" "),e("tr",[e("td",[t._v("-h")]),t._v(" "),e("td",[t._v("打印帮助")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：")]),t._v(" "),e("p",[t._v("1、几乎所有指令都需要通过-n参数配置nameServer地址，格式为ip:port")]),t._v(" "),e("p",[t._v("2、几乎所有执行都可以通过-h参数获得帮助")]),t._v(" "),e("p",[t._v("3、当既有Broker地址(-b)又有集群名称clustername(-c)配合项，则优先以Broker地址执行指令。如果不配置Broker地址，则对集群中所有主机执行指令。")])]),t._v(" "),e("h3",{attrs:{id:"命令行验证-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令行验证-2"}},[t._v("#")]),t._v(" 命令行验证")]),t._v(" "),e("p",[t._v("在RocketMQ的安装包中，提供了一个tools.sh工具可以用来在命令行快速验证RocketMQ服务。我们在worker2上进入RocketMQ的安装目录：")]),t._v(" "),e("p",[t._v("发送消息：默认会发1000条消息")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("接收消息：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bin/tools.sh  org.apache.rocketmq.example.quickstart.Consumer\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("注意，这是官方提供的Demo，但是官方的源码中，这两个类都是没有指定nameServer的，所以运行会有点问题。要指定NameServer地址，可以配置一个环境变量NAMESRV_ADDR，这样默认会读取这个NameServer地址。可以配到.bash_profile里或者直接临时指定。")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export NAMESRV_ADDR='worker1:9876;worker2:9876;worker3:9876'\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("然后就可以正常执行了。")]),t._v(" "),e("p",[t._v("这个NameServer地址的读取方式见源码中org.apache.rocketmq.common.utils.NameServerAddressUtils")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public static String getNameServerAddresses() {\n        return System.getProperty("rocketmq.namesrv.addr", System.getenv("NAMESRV_ADDR"));\n    }\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("这个方法就是在DefaultMQProducer中默认的设置NameServer地址的方式，这个rokcetmq.namesrv.addr属性可以在java中使用System.setproperties指定，也可以在SpringBoot中配到配置文件里。")]),t._v(" "),e("blockquote",[e("p",[t._v("这个tools.sh就封装了一个简单的运行RocketMQ的环境，可以运行源码中的其他示例，然后自己的例子也可以放到RocketMQ的lib目录下去执行。")])]),t._v(" "),e("h3",{attrs:{id:"搭建管理控制台"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搭建管理控制台"}},[t._v("#")]),t._v(" 搭建管理控制台")]),t._v(" "),e("p",[t._v("RocketMQ源代码中并没有提供控制台，但是有一个Rocket的社区扩展项目中提供了一个控制台，地址： https://github.com/apache/rocketmq-externals")]),t._v(" "),e("p",[t._v("下载下来后，进入其中的rocket-console目录，使用maven进行编译")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mvn clean package -Dmaven.test.skip=true\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("编译完成后，获取target下的jar包，就可以直接执行。但是这个时候要注意，在这个项目的application.properties中需要指定nameserver的地址。默认这个属性是空的。")]),t._v(" "),e("p",[t._v("那我们可以在jar包的当前目录下增加一个application.properties文件，覆盖jar包中默认的一个属性：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rocketmq.config.namesrvAddr=worker1:9876;worker2:9876;worker3:9876\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("然后执行：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("java -jar rocketmq-console-ng-1.0.1.jar\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("启动完成后，可以访问 http://192.168.232.128:8080看到管理页面")]),t._v(" "),e("blockquote",[e("p",[t._v("在管理页面的右上角可以选择语言。")])]),t._v(" "),e("h3",{attrs:{id:"dleger高可用集群搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dleger高可用集群搭建"}},[t._v("#")]),t._v(" Dleger高可用集群搭建")]),t._v(" "),e("p",[t._v("通过这种方式，我们搭建了一个主从结构的RocketMQ集群，但是我们要注意，这种主从结构是只做数据备份，没有容灾功能的。也就是说当一个master节点挂了后，slave节点是无法切换成master节点继续提供服务的。注意这个集群至少要是3台，允许少于一半的节点发生故障。")]),t._v(" "),e("blockquote",[e("p",[t._v("如果slave挂了，对集群的影响不会很大，因为slave只是做数据备份的。但是影响也是会有的，例如，当消费者要拉取的数据量比较大时，RocketMQ有一定的机制会优先保证Master节点的性能，只让Master节点返回一小部分数据，而让其他部分的数据从slave节点去拉取。")]),t._v(" "),e("p",[t._v("另外，需要注意，Dleger会有他自己的CommitLog机制，也就是说，使用主从集群累计下来的消息，是无法转移到Dleger集群中的。")])]),t._v(" "),e("p",[t._v("​\t而如果要进行高可用的容灾备份，需要采用Dledger的方式来搭建高可用集群。注意，这个Dledger需要在RocketMQ4.5以后的版本才支持，我们使用的4.7.1版本已经默认集成了dledger。")]),t._v(" "),e("p",[e("strong",[t._v("搭建方法")])]),t._v(" "),e("p",[t._v("​\t要搭建高可用的Broker集群，我们只需要配置conf/dleger下的配置文件就行。")]),t._v(" "),e("blockquote",[e("p",[t._v("这种模式是基于Raft协议的，是一个类似于Zookeeper的paxos协议的选举协议，也是会在集群中随机选举出一个leader，其他的就是follower。只是他选举的过程跟paxos有点不同。Raft协议基于随机休眠机制的，选举过程会比paxos相对慢一点。")])]),t._v(" "),e("p",[t._v("​\t首先："),e("a",{attrs:{href:"http://xn--runserver-947nw2gmts9m8bkijnsdy1kk96m302b.xn--shrunbroker-804s.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("我们同样是需要修改runserver.sh和runbroker.sh"),e("OutboundLink")],1),t._v("，对JVM内存进行定制。")]),t._v(" "),e("p",[t._v("​\t然后：我们需要修改conf/dleger下的配置文件。 跟dleger相关的几个配置项如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("name")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("举例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("enableDLegerCommitLog")]),t._v(" "),e("td",[t._v("是否启动 DLedger")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("dLegerGroup")]),t._v(" "),e("td",[t._v("DLedger Raft Group的名字，建议和 brokerName 保持一致")]),t._v(" "),e("td",[t._v("RaftNode00")])]),t._v(" "),e("tr",[e("td",[t._v("dLegerPeers")]),t._v(" "),e("td",[t._v("DLedger Group 内各节点的端口信息，同一个 Group 内的各个节点配置必须要保证一致")]),t._v(" "),e("td",[t._v("n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913")])]),t._v(" "),e("tr",[e("td",[t._v("dLegerSelfId")]),t._v(" "),e("td",[t._v("节点 id, 必须属于 dLegerPeers 中的一个；同 Group 内各个节点要唯一")]),t._v(" "),e("td",[t._v("n0")])]),t._v(" "),e("tr",[e("td",[t._v("sendMessageThreadPoolNums")]),t._v(" "),e("td",[t._v("发送线程个数，建议配置成 Cpu 核数")]),t._v(" "),e("td",[t._v("16")])])])]),t._v(" "),e("p",[t._v("配置完后，同样是使用 nohup bin/mqbroker -c $conf_name & 的方式指定实例文件。")]),t._v(" "),e("blockquote",[e("p",[t._v("在bin/dleger下有个fast-try.sh，这个脚本是在本地启动三个RocketMQ实例，搭建一个高可用的集群，读取的就是conf/dleger下的broker-no.conf，broker-n1.conf和broker-n2.conf。使用这个脚本同样要注意定制下JVM内存，他给每个实例默认定制的是1G内存，虚拟机肯定是不够的。")]),t._v(" "),e("p",[t._v("这种单机三实例的集群搭建完成后，可以使用  bin/mqadmin clusterList -n worker1.conf的方式查看集群状态。")]),t._v(" "),e("p",[t._v("单机状态下一般一次主从切换需要大概10S的时间。")])]),t._v(" "),e("h3",{attrs:{id:"调整系统参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调整系统参数"}},[t._v("#")]),t._v(" 调整系统参数")]),t._v(" "),e("p",[t._v("到这里，我们的整个RocketMQ的服务就搭建完成了。但是在实际使用时，我们说RocketMQ的吞吐量、性能都很高，那要发挥RocketMQ的高性能，还需要对RocketMQ以及服务器的性能进行定制")]),t._v(" "),e("h3",{attrs:{id:"配置rocketmq的jvm内存大小"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置rocketmq的jvm内存大小"}},[t._v("#")]),t._v(" 配置RocketMQ的JVM内存大小：")]),t._v(" "),e("p",[t._v("之前提到过，在runserver.sh中需要定制nameserver的内存大小，在runbroker.sh中需要定制broker的内存大小。这些默认的配置可以认为都是经过检验的最优化配置，但是在实际情况中都还需要根据服务器的实际情况进行调整。这里以runbroker.sh中对G1GC的配置举例，在runbroker.sh中的关键配置：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('JAVA_OPT="${JAVA_OPT} -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0"\nJAVA_OPT="${JAVA_OPT} -verbose:gc -Xloggc:${GC_LOG_DIR}/rmq_broker_gc_%p_%t.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintAdaptiveSizePolicy"\nJAVA_OPT="${JAVA_OPT} -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("-XX:+UseG1GC: 使用G1垃圾回收器，  -XX:G1HeapRegionSize=16m  将G1的region块大小设为16M，-XX:G1ReservePercent：在G1的老年代中预留25%空闲内存，这个默认值是10%，RocketMQ把这个参数调大了。-XX:InitiatingHeapOccupancyPercent=30：当堆内存的使用率达到30%之后就会启动G1垃圾回收器尝试回收垃圾，默认值是45%，RocketMQ把这个参数调小了，也就是提高了GC的频率，但是避免了垃圾对象过多，一次垃圾回收时间太长的问题。")]),t._v(" "),e("p",[t._v("然后，后面定制了GC的日志文件，确定GC日志文件的地址、打印的内容以及控制每个日志文件的大小为30M并且只保留5个文件。这些在进行性能检验时，是相当重要的参考内容。")]),t._v(" "),e("h3",{attrs:{id:"rocketmq的其他一些核心参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq的其他一些核心参数"}},[t._v("#")]),t._v(" RocketMQ的其他一些核心参数")]),t._v(" "),e("p",[t._v("例如在conf/dleger/broker-n0.conf中有一个参数：sendMessageThreadPoolNums=16。这一个参数是表明RocketMQ内部用来发送消息的线程池的线程数量是16个，其实这个参数可以根据机器的CPU核心数进行适当调整，例如如果你的机器核心数超过16个，就可以把这个参数适当调大。")]),t._v(" "),e("h3",{attrs:{id:"linux内核参数定制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux内核参数定制"}},[t._v("#")]),t._v(" Linux内核参数定制")]),t._v(" "),e("p",[t._v("我们在部署RocketMQ的时候，还需要对Linux内核参数进行一定的定制。例如")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("ulimit")]),t._v("，需要进行大量的网络通信和磁盘IO。")]),t._v(" "),e("li",[e("strong",[t._v("vm.extra_free_kbytes")]),t._v("，告诉VM在后台回收（kswapd）启动的阈值与直接回收（通过分配进程）的阈值之间保留额外的可用内存。RocketMQ使用此参数来避免内存分配中的长延迟。（与具体内核版本相关）")]),t._v(" "),e("li",[e("strong",[t._v("vm.min_free_kbytes")]),t._v("，如果将其设置为低于1024KB，将会巧妙的将系统破坏，并且系统在高负载下容易出现死锁。")]),t._v(" "),e("li",[e("strong",[t._v("vm.max_map_count")]),t._v("，限制一个进程可能具有的最大内存映射区域数。RocketMQ将使用mmap加载CommitLog和ConsumeQueue，因此建议将为此参数设置较大的值。")]),t._v(" "),e("li",[e("strong",[t._v("vm.swappiness")]),t._v("，定义内核交换内存页面的积极程度。较高的值会增加攻击性，较低的值会减少交换量。建议将值设置为10来避免交换延迟。")]),t._v(" "),e("li",[e("strong",[t._v("File descriptor limits")]),t._v("，RocketMQ需要为文件（CommitLog和ConsumeQueue）和网络连接打开文件描述符。我们建议设置文件描述符的值为655350。")])]),t._v(" "),e("blockquote",[e("p",[t._v("这些参数在CentOS7中的配置文件都在 /proc/sys/vm目录下。")]),t._v(" "),e("p",[t._v("另外，RocketMQ的bin目录下有个os.sh里面设置了RocketMQ建议的系统内核参数，可以根据情况进行调整。")])]),t._v(" "),e("h2",{attrs:{id:"rocketmq全部配置表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq全部配置表"}},[t._v("#")]),t._v(" RocketMQ全部配置表")]),t._v(" "),e("h3",{attrs:{id:"broker配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#broker配置"}},[t._v("#")]),t._v(" Broker配置")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("参数名")])]),t._v(" "),e("th",[e("strong",[t._v("默认值")])]),t._v(" "),e("th",[e("strong",[t._v("说明")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("listenPort")]),t._v(" "),e("td",[t._v("10911")]),t._v(" "),e("td",[t._v("接受客户端连接的监听端口")])]),t._v(" "),e("tr",[e("td",[t._v("namesrvAddr")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[t._v("nameServer 地址")])]),t._v(" "),e("tr",[e("td",[t._v("brokerIP1")]),t._v(" "),e("td",[t._v("网卡的  InetAddress")]),t._v(" "),e("td",[t._v("当前  broker 监听的 IP")])]),t._v(" "),e("tr",[e("td",[t._v("brokerIP2")]),t._v(" "),e("td",[t._v("跟  brokerIP1 一样")]),t._v(" "),e("td",[t._v("存在主从  broker 时，如果在 broker 主节点上配置了 brokerIP2 属性，broker 从节点会连接主节点配置的  brokerIP2 进行同步")])]),t._v(" "),e("tr",[e("td",[t._v("brokerName")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[t._v("broker 的名称")])]),t._v(" "),e("tr",[e("td",[t._v("brokerClusterName")]),t._v(" "),e("td",[t._v("DefaultCluster")]),t._v(" "),e("td",[t._v("本  broker 所属的 Cluser 名称")])]),t._v(" "),e("tr",[e("td",[t._v("brokerId")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("broker id, 0 表示 master, 其他的正整数表示 slave")])]),t._v(" "),e("tr",[e("td",[t._v("storePathCommitLog")]),t._v(" "),e("td",[t._v("$HOME/store/commitlog/")]),t._v(" "),e("td",[t._v("存储  commit log 的路径")])]),t._v(" "),e("tr",[e("td",[t._v("storePathConsumerQueue")]),t._v(" "),e("td",[t._v("$HOME/store/consumequeue/")]),t._v(" "),e("td",[t._v("存储  consume queue 的路径")])]),t._v(" "),e("tr",[e("td",[t._v("mappedFileSizeCommitLog")]),t._v(" "),e("td",[t._v("1024 * 1024 *  1024(1G)")]),t._v(" "),e("td",[t._v("commit log 的映射文件大小")])]),t._v(" "),e("tr",[e("td",[t._v("deleteWhen")]),t._v(" "),e("td",[t._v("04")]),t._v(" "),e("td",[t._v("在每天的什么时间删除已经超过文件保留时间的  commit log")])]),t._v(" "),e("tr",[e("td",[t._v("fileReservedTime")]),t._v(" "),e("td",[t._v("72")]),t._v(" "),e("td",[t._v("以小时计算的文件保留时间")])]),t._v(" "),e("tr",[e("td",[t._v("brokerRole")]),t._v(" "),e("td",[t._v("ASYNC_MASTER")]),t._v(" "),e("td",[t._v("SYNC_MASTER/ASYNC_MASTER/SLAVE")])]),t._v(" "),e("tr",[e("td",[t._v("flushDiskType")]),t._v(" "),e("td",[t._v("ASYNC_FLUSH")]),t._v(" "),e("td",[t._v("SYNC_FLUSH/ASYNC_FLUSH  SYNC_FLUSH 模式下的 broker 保证在收到确认生产者之前将消息刷盘。ASYNC_FLUSH 模式下的 broker 则利用刷盘一组消息的模式，可以取得更好的性能。")])])])]),t._v(" "),e("h3",{attrs:{id:"客户端的公共配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端的公共配置"}},[t._v("#")]),t._v(" 客户端的公共配置")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("参数名")])]),t._v(" "),e("th",[e("strong",[t._v("默认值")])]),t._v(" "),e("th",[e("strong",[t._v("说明")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("namesrvAddr")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("Name  Server地址列表，多个NameServer地  址用分号隔开")])]),t._v(" "),e("tr",[e("td",[t._v("clientIP")]),t._v(" "),e("td",[t._v("本机IP")]),t._v(" "),e("td",[t._v("客户端本机IP地址，某些机器会发生无法识别客户端IP地址情况，需要应用在代码中强制指定")])]),t._v(" "),e("tr",[e("td",[t._v("instanceName")]),t._v(" "),e("td",[t._v("DEFAULT")]),t._v(" "),e("td",[t._v("客户端实例名称，客户端创建的多个  Producer、Consumer实际是共用一个内部实例（这个实例包含网络连接、线程资源等）")])]),t._v(" "),e("tr",[e("td",[t._v("clientCallbackExecutorThreads")]),t._v(" "),e("td",[t._v("4")]),t._v(" "),e("td",[t._v("通信层异步回调线程数")])]),t._v(" "),e("tr",[e("td",[t._v("pollNameServerInteval")]),t._v(" "),e("td",[t._v("30000")]),t._v(" "),e("td",[t._v("轮询Name  Server间隔时间，单位毫秒")])]),t._v(" "),e("tr",[e("td",[t._v("heartbeatBrokerInterval")]),t._v(" "),e("td",[t._v("30000")]),t._v(" "),e("td",[t._v("向Broker发送心跳间隔时间，单位毫秒")])]),t._v(" "),e("tr",[e("td",[t._v("persistConsumerOffsetInterval")]),t._v(" "),e("td",[t._v("5000")]),t._v(" "),e("td",[t._v("持久化Consumer消费进度间隔时间，单位毫秒")])])])]),t._v(" "),e("h3",{attrs:{id:"producer配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#producer配置"}},[t._v("#")]),t._v(" Producer配置")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("参数名")])]),t._v(" "),e("th",[e("strong",[t._v("默认值")])]),t._v(" "),e("th",[e("strong",[t._v("说明")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("producerGroup")]),t._v(" "),e("td",[t._v("DEFAULT_PRODUCER")]),t._v(" "),e("td",[t._v("Producer组名，多个Producer如果属于一个应用，发送同样的消息，则应该将它们归为同一组")])]),t._v(" "),e("tr",[e("td",[t._v("createTopicKey")]),t._v(" "),e("td",[t._v("TBW102")]),t._v(" "),e("td",[t._v("在发送消息时，自动创建服务器不存在的topic，需要指定  Key，该Key可用于配置发送消息所在topic的默认路由。")])]),t._v(" "),e("tr",[e("td",[t._v("defaultTopicQueueNums")]),t._v(" "),e("td",[t._v("4")]),t._v(" "),e("td",[t._v("在发送消息，自动创建服务器不存在的topic时，默认创建的队列数")])]),t._v(" "),e("tr",[e("td",[t._v("sendMsgTimeout")]),t._v(" "),e("td",[t._v("10000")]),t._v(" "),e("td",[t._v("发送消息超时时间，单位毫秒")])]),t._v(" "),e("tr",[e("td",[t._v("compressMsgBodyOverHowmuch")]),t._v(" "),e("td",[t._v("4096")]),t._v(" "),e("td",[t._v("消息Body超过多大开始压缩（Consumer收到消息会自动解压缩），单位字节")])]),t._v(" "),e("tr",[e("td",[t._v("retryAnotherBrokerWhenNotStoreOK")]),t._v(" "),e("td",[t._v("FALSE")]),t._v(" "),e("td",[t._v("如果发送消息返回sendResult，但是 sendStatus!=SEND_OK，是否重试发送")])]),t._v(" "),e("tr",[e("td",[t._v("retryTimesWhenSendFailed")]),t._v(" "),e("td",[t._v("2")]),t._v(" "),e("td",[t._v("如果消息发送失败，最大重试次数，该参数只对同步发送模式起作用")])]),t._v(" "),e("tr",[e("td",[t._v("maxMessageSize")]),t._v(" "),e("td",[t._v("4MB")]),t._v(" "),e("td",[t._v("客户端限制的消息大小，超过报错，同时服务端也会限制，所以需要跟服务端配合使用。")])]),t._v(" "),e("tr",[e("td",[t._v("transactionCheckListener")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("事务消息回查监听器，如果发送事务消息，必须设置")])]),t._v(" "),e("tr",[e("td",[t._v("checkThreadPoolMinSize")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("Broker回查Producer事务状态时，线程池最小线程数")])]),t._v(" "),e("tr",[e("td",[t._v("checkThreadPoolMaxSize")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("Broker回查Producer事务状态时，线程池最大线程数")])]),t._v(" "),e("tr",[e("td",[t._v("checkRequestHoldMax")]),t._v(" "),e("td",[t._v("2000")]),t._v(" "),e("td",[t._v("Broker回查Producer事务状态时，Producer本地缓冲请求队  列大小")])]),t._v(" "),e("tr",[e("td",[t._v("RPCHook")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[t._v("该参数是在Producer创建时传入的，包含消息发送前的预处理和消息响应后的处理两个接口，用户可以在第一个接口中做一些安全控制或者其他操作。")])])])]),t._v(" "),e("h3",{attrs:{id:"pushconsumer配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pushconsumer配置"}},[t._v("#")]),t._v(" PushConsumer配置")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("参数名")])]),t._v(" "),e("th",[e("strong",[t._v("默认值")])]),t._v(" "),e("th",[e("strong",[t._v("说明")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("consumerGroup")]),t._v(" "),e("td",[t._v("DEFAULT_CONSUMER")]),t._v(" "),e("td",[t._v("Consumer组名，多个Consumer如果属于一个应用，订阅同样的消息，且消费逻辑一致，则应该将它们归为同一组")])]),t._v(" "),e("tr",[e("td",[t._v("messageModel")]),t._v(" "),e("td",[t._v("CLUSTERING")]),t._v(" "),e("td",[t._v("消费模型支持集群消费和广播消费两种")])]),t._v(" "),e("tr",[e("td",[t._v("consumeFromWhere")]),t._v(" "),e("td",[t._v("CONSUME_FROM_LAST_OFFSET")]),t._v(" "),e("td",[t._v("Consumer启动后，默认从上次消费的位置开始消费，这包含两种情况：一种是上次消费的位置未过期，则消费从上次中止的位置进行；一种是上次消费位置已经过期，则从当前队列第一条消息开始消费")])]),t._v(" "),e("tr",[e("td",[t._v("consumeTimestamp")]),t._v(" "),e("td",[t._v("半个小时前")]),t._v(" "),e("td",[t._v("只有当consumeFromWhere值为CONSUME_FROM_TIMESTAMP时才起作用。")])]),t._v(" "),e("tr",[e("td",[t._v("allocateMessageQueueStrategy")]),t._v(" "),e("td",[t._v("AllocateMessageQueueAveragely")]),t._v(" "),e("td",[t._v("Rebalance算法实现策略")])]),t._v(" "),e("tr",[e("td",[t._v("subscription")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("订阅关系")])]),t._v(" "),e("tr",[e("td",[t._v("messageListener")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("消息监听器")])]),t._v(" "),e("tr",[e("td",[t._v("offsetStore")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("消费进度存储")])]),t._v(" "),e("tr",[e("td",[t._v("consumeThreadMin")]),t._v(" "),e("td",[t._v("10")]),t._v(" "),e("td",[t._v("消费线程池最小线程数")])]),t._v(" "),e("tr",[e("td",[t._v("consumeThreadMax")]),t._v(" "),e("td",[t._v("20")]),t._v(" "),e("td",[t._v("消费线程池最大线程数")])]),t._v(" "),e("tr",[e("td",[t._v("consumeConcurrentlyMaxSpan")]),t._v(" "),e("td",[t._v("2000")]),t._v(" "),e("td",[t._v("单队列并行消费允许的最大跨度")])]),t._v(" "),e("tr",[e("td",[t._v("pullThresholdForQueue")]),t._v(" "),e("td",[t._v("1000")]),t._v(" "),e("td",[t._v("拉消息本地队列缓存消息最大数")])]),t._v(" "),e("tr",[e("td",[t._v("pullInterval")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("拉消息间隔，由于是长轮询，所以为0，但是如果应用为了流控，也可以设置大于0的值，单位毫秒")])]),t._v(" "),e("tr",[e("td",[t._v("consumeMessageBatchMaxSize")]),t._v(" "),e("td",[t._v("1")]),t._v(" "),e("td",[t._v("批量消费，一次消费多少条消息")])]),t._v(" "),e("tr",[e("td",[t._v("pullBatchSize")]),t._v(" "),e("td",[t._v("32")]),t._v(" "),e("td",[t._v("批量拉消息，一次最多拉多少条")])])])]),t._v(" "),e("h3",{attrs:{id:"pushconsumer配置-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pushconsumer配置-2"}},[t._v("#")]),t._v(" PushConsumer配置")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("参数名")])]),t._v(" "),e("th",[e("strong",[t._v("默认值")])]),t._v(" "),e("th",[e("strong",[t._v("说明")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("consumerGroup")]),t._v(" "),e("td",[t._v("DEFAULT_CONSUMER")]),t._v(" "),e("td",[t._v("Consumer组名，多个Consumer如果属于一个应用，订阅同样的消息，且消费逻辑一致，则应该将它们归为同一组")])]),t._v(" "),e("tr",[e("td",[t._v("brokerSuspendMaxTimeMillis")]),t._v(" "),e("td",[t._v("20000")]),t._v(" "),e("td",[t._v("长轮询，Consumer拉消息请求在Broker 挂起最长时间，单位毫秒")])]),t._v(" "),e("tr",[e("td",[t._v("consumerTimeoutMillisWhenSuspend")]),t._v(" "),e("td",[t._v("30000")]),t._v(" "),e("td",[t._v("长轮询，Consumer拉消息请求在Broker 挂起超过指定时间，客户端认为超时，单位毫秒")])]),t._v(" "),e("tr",[e("td",[t._v("consumerPullTimeoutMillis")]),t._v(" "),e("td",[t._v("10000")]),t._v(" "),e("td",[t._v("非长轮询，拉消息超时时间，单位毫秒")])]),t._v(" "),e("tr",[e("td",[t._v("messageModel")]),t._v(" "),e("td",[t._v("BROADCASTING")]),t._v(" "),e("td",[t._v("消息支持两种模式：集群消费和广播消费")])]),t._v(" "),e("tr",[e("td",[t._v("messageQueueListener")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("监听队列变化")])]),t._v(" "),e("tr",[e("td",[t._v("offsetStore")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("消费进度存储")])]),t._v(" "),e("tr",[e("td",[t._v("registerTopics")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("注册的topic集合")])]),t._v(" "),e("tr",[e("td",[t._v("allocateMessageQueueStrategy")]),t._v(" "),e("td",[t._v("AllocateMessageQueueAveragely")]),t._v(" "),e("td",[t._v("Rebalance算法实现策略")])])])]),t._v(" "),e("h3",{attrs:{id:"message数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#message数据结构"}},[t._v("#")]),t._v(" Message数据结构")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("字段名")])]),t._v(" "),e("th",[e("strong",[t._v("默认值")])]),t._v(" "),e("th",[e("strong",[t._v("说明")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Topic")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[t._v("必填，消息所属topic的名称")])]),t._v(" "),e("tr",[e("td",[t._v("Body")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[t._v("必填，消息体")])]),t._v(" "),e("tr",[e("td",[t._v("Tags")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[t._v("选填，消息标签，方便服务器过滤使用。目前只支持每个消息设置一个tag")])]),t._v(" "),e("tr",[e("td",[t._v("Keys")]),t._v(" "),e("td",[t._v("null")]),t._v(" "),e("td",[t._v("选填，代表这条消息的业务关键词，服务器会根据keys创建哈希索引，设置后，可以在Console系统根据Topic、Keys来查询消  息，由于是哈希索引，请尽可能保证key唯一，例如订单号，商品  Id等。")])]),t._v(" "),e("tr",[e("td",[t._v("Flag")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("选填，完全由应用来设置，RocketMQ不做干预")])]),t._v(" "),e("tr",[e("td",[t._v("DelayTimeLevel")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("选填，消息延时级别，0表示不延时，大于0会延时特定的时间才会被消费")])]),t._v(" "),e("tr",[e("td",[t._v("WaitStoreMsgOK")]),t._v(" "),e("td",[t._v("TRUE")]),t._v(" "),e("td",[t._v("选填，表示消息是否在服务器落盘后才返回应答。")])])])]),t._v(" "),e("h2",{attrs:{id:"rocketmq参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq参考资料"}},[t._v("#")]),t._v(" RocketMQ参考资料")]),t._v(" "),e("blockquote",[e("p",[t._v("RocketMQ的源代码中有个docs目录，在他的docs/cn/architecture.md文档中，有对RocketMQ架构的更详细的介绍！非常nice！")])]),t._v(" "),e("h2",{attrs:{id:"基础概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[t._v("#")]),t._v(" 基础概念")]),t._v(" "),e("h3",{attrs:{id:"_1-消息模型-message-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-消息模型-message-model"}},[t._v("#")]),t._v(" 1 消息模型（Message Model）")]),t._v(" "),e("p",[t._v("RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker  可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue  用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。")]),t._v(" "),e("h3",{attrs:{id:"_2-消息生产者-producer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-消息生产者-producer"}},[t._v("#")]),t._v(" 2 消息生产者（Producer）")]),t._v(" "),e("p",[t._v("负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。")]),t._v(" "),e("p",[t._v("生产者中，会把同一类Producer组成一个集合，叫做生产者组，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。")]),t._v(" "),e("h3",{attrs:{id:"_3-消息消费者-consumer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-消息消费者-consumer"}},[t._v("#")]),t._v(" 3 消息消费者（Consumer）")]),t._v(" "),e("p",[t._v("负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。")]),t._v(" "),e("ul",[e("li",[t._v("拉取式消费的应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。")]),t._v(" "),e("li",[t._v("推动式消费模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。")])]),t._v(" "),e("p",[t._v("消费者同样会把同一类Consumer组成一个集合，叫做消费者组，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。")]),t._v(" "),e("ul",[e("li",[t._v("集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。")]),t._v(" "),e("li",[t._v("广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。")])]),t._v(" "),e("h3",{attrs:{id:"_4-主题-topic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-主题-topic"}},[t._v("#")]),t._v(" 4 主题（Topic）")]),t._v(" "),e("p",[t._v("表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。")]),t._v(" "),e("p",[t._v("同一个Topic下的数据，会分片保存到不同的Broker上，而每一个分片单位，就叫做MessageQueue。MessageQueue是生产者发送消息与消费者消费消息的最小单位。")]),t._v(" "),e("h3",{attrs:{id:"_5-代理服务器-broker-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-代理服务器-broker-server"}},[t._v("#")]),t._v(" 5 代理服务器（Broker Server）")]),t._v(" "),e("p",[t._v("消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。")]),t._v(" "),e("p",[t._v("Broker Server是RocketMQ真正的业务核心，包含了多个重要的子模块：")]),t._v(" "),e("ul",[e("li",[t._v("Remoting Module：整个Broker的实体，负责处理来自clients端的请求。")]),t._v(" "),e("li",[t._v("Client Manager：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息")]),t._v(" "),e("li",[t._v("Store Service：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。")]),t._v(" "),e("li",[t._v("HA Service：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。")]),t._v(" "),e("li",[t._v("Index Service：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。")])]),t._v(" "),e("p",[t._v("而Broker Server要保证高可用需要搭建主从集群架构。RocketMQ中有两种Broker架构模式：")]),t._v(" "),e("ul",[e("li",[t._v("普通集群：")])]),t._v(" "),e("p",[t._v("这种集群模式下会给每个节点分配一个固定的角色，master负责响应客户端的请求，并存储消息。slave则只负责对master的消息进行同步保存，并响应部分客户端的读请求。消息同步方式分为同步同步和异步同步。")]),t._v(" "),e("p",[t._v("这种集群模式下各个节点的角色无法进行切换，也就是说，master节点挂了，这一组Broker就不可用了。")]),t._v(" "),e("ul",[e("li",[t._v("Dledger高可用集群：")])]),t._v(" "),e("p",[t._v("Dledger是RocketMQ自4.5版本引入的实现高可用集群的一项技术。这个模式下的集群会随机选出一个节点作为master，而当master节点挂了后，会从slave中自动选出一个节点升级成为master。")]),t._v(" "),e("p",[t._v("Dledger技术做的事情：1、接管Broker的CommitLog消息存储  2、从集群中选举出master节点  3、完成master节点往slave节点的消息同步。")]),t._v(" "),e("p",[t._v("Dledger的关键部分是在他的节点选举上。Dledger是使用Raft算法来进行节点选举的。这里简单介绍下Raft算法的选举过程:")]),t._v(" "),e("blockquote",[e("p",[t._v("首先：每个节点有三个状态，Leader，follower和candidate(候选人)。正常运行的情况下，集群中会有一个leader，其他都是follower，follower只响应Leader和Candidate的请求，而客户端的请求全部由Leader处理，即使有客户端请求到了一个follower，也会将请求转发到leader。")]),t._v(" "),e("p",[t._v("集群刚启动时，每个节点都是follower状态，之后集群内部会发送一个timeout信号，所有follower就转成candidate去拉取选票，获得大多数选票的节点选为leader，其他候选人转为follower。如果一个timeout信号发出时，没有选出leader，将会重新开始一次新的选举。而Leader节点会往其他节点发送心跳信号，确认他的leader状态。")]),t._v(" "),e("p",[t._v("-- 然后会启动定时器，如果在指定时间内没有收到Leader的心跳，就会转为Candidate状态，然后向其他成员发起投票请求，如果收到半数以上成员的投票，则Candidate会晋升为Leader。然后leader也有可能会退化成follower。")]),t._v(" "),e("p",[t._v("​\t然后，在Raft协议中，会将时间分为一些任意时间长度的时间片段，叫做term。term会使用一个全局唯一，连续递增的编号作为标识，也就是起到了一个逻辑时钟的作用。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/3.png",alt:""}})]),t._v(" "),e("p",[t._v("在每一个term时间片里，都会进行新的选举，每一个Candidate都会努力争取成为leader。获得票数最多的节点就会被选举为Leader。被选为Leader的这个节点，在一个term时间片里就会保持leader状态。这样，就会保证在同一时间段内，集群中只会有一个Leader。在某些情况下，选票可能会被各个节点瓜分，形成不了多数派，那这个term可能直到结束都没有leader，直到下一个term再重新发起选举，这也就没有了Zookeeper中的脑裂问题。而在每次重新选举的过程中， leader也有可能会退化成为follower。也就是说，在这个集群中， leader节点是会不断变化的。")]),t._v(" "),e("p",[t._v("​\t 然后，每次选举的过程中，每个节点都会存储当前term编号，并在节点之间进行交流时，都会带上自己的term编号。如果一个节点发现他的编号比另外一个小，那么他就会将自己的编号更新为较大的那一个。而如果leader或者candidate发现自己的编号不是最新的，他就会自动转成follower。如果接收到的请求term编号小于自己的编号，term将会拒绝执行。")]),t._v(" "),e("p",[t._v("在选举过程中，Raft协议会通过心跳机制发起leader选举。节点都是从follower状态开始的，如果收到了来自leader或者candidate的心跳RPC请求，那他就会保持follower状态，避免争抢成为candidate。而leader会往其他节点发送心跳信号，来确认自己的地位。如果follower一段时间(两个timeout信号)内没有收到Leader的心跳信号，他就会认为leader挂了，发起新一轮选举。")]),t._v(" "),e("p",[t._v("​\t选举开始后，每个follower会增加自己当前的term，并将自己转为candidate。然后向其他节点发起投票请求，请求时会带上自己的编号和term，也就是说都会默认投自己一票。之后candidate状态可能会发生以下三种变化：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("赢得选举，成为leader")]),t._v("：  如果它在一个term内收到了大多数的选票，将会在接下的剩余term时间内称为leader，然后就可以通过发送心跳确立自己的地位。(每一个server在一个term内只能投一张选票，并且按照先到先得的原则投出)")]),t._v(" "),e("li",[e("strong",[t._v("其他节点成为leader")]),t._v("：   在等待投票时，可能会收到其他server发出心跳信号，说明其他leader已经产生了。这时通过比较自己的term编号和RPC过来的term编号，如果比对方大，说明leader的term过期了，就会拒绝该RPC,并继续保持候选人身份; 如果对方编号不比自己小,则承认对方的地位,转为follower。")]),t._v(" "),e("li",[e("strong",[t._v("选票被瓜分,选举失败")]),t._v(":  如果没有candidate获取大多数选票, 则没有leader产生, candidate们等待超时后发起另一轮选举.  为了防止下一次选票还被瓜分,必须采取一些额外的措施, raft采用随机election  timeout(随机休眠时间)的机制防止选票被持续瓜分。通过将timeout随机设为一段区间上的某个值,  因此很大概率会有某个candidate率先超时然后赢得大部分选票。")])]),t._v(" "),e("p",[t._v("所以以三个节点的集群为例，选举过程会是这样的：")]),t._v(" "),e("ol",[e("li",[t._v("集群启动时，三个节点都是follower，发起投票后，三个节点都会给自己投票。这样一轮投票下来，三个节点的term都是1，是一样的，这样是选举不出Leader的。")]),t._v(" "),e("li",[t._v("当一轮投票选举不出Leader后，三个节点会进入随机休眠，例如A休眠1秒，B休眠3秒，C休眠2秒。")]),t._v(" "),e("li",[t._v("一秒后，A节点醒来，会把自己的term加一票，投为2。然后2秒时，C节点醒来，发现A的term已经是2，比自己的1大，就会承认A是Leader，把自己的term也更新为2。实际上这个时候，A已经获得了集群中的多数票，2票，A就会被选举成Leader。这样，一般经过很短的几轮选举，就会选举出一个Leader来。")]),t._v(" "),e("li",[t._v("到3秒时，B节点会醒来，他也同样会承认A的term最大，他是Leader，自己的term也会更新为2。这样集群中的所有Candidate就都确定成了leader和follower.")]),t._v(" "),e("li",[t._v("然后在一个任期内，A会不断发心跳给另外两个节点。当A挂了后，另外的节点没有收到A的心跳，就会都转化成Candidate状态，重新发起选举。")])])]),t._v(" "),e("p",[t._v("Dledger还会采用Raft协议进行多副本的消息同步：")]),t._v(" "),e("blockquote",[e("p",[t._v("简单来说，数据同步会通过两个阶段，一个是uncommitted阶段，一个是commited阶段。")]),t._v(" "),e("p",[t._v("Leader Broker上的Dledger收到一条数据后，会标记为uncommitted状态，然后他通过自己的DledgerServer组件把这个uncommitted数据发给Follower Broker的DledgerServer组件。")]),t._v(" "),e("p",[t._v("接着Follower Broker的DledgerServer收到uncommitted消息之后，必须返回一个ack给Leader  Broker的Dledger。然后如果Leader Broker收到超过半数的Follower  Broker返回的ack之后，就会把消息标记为committed状态。")]),t._v(" "),e("p",[t._v("​\t\t再接下来， Leader  Broker上的DledgerServer就会发送committed消息给Follower  Broker上的DledgerServer，让他们把消息也标记为committed状态。这样，就基于Raft协议完成了两阶段的数据同步。")])]),t._v(" "),e("p",[t._v("最后，关于Dledger以及Raft协议的更底层的详细资料，后续会有一个分布式一致性协议的专题，将会结合其他分布式一致性算法做统一讲解，这里就不深入展开了。")]),t._v(" "),e("h3",{attrs:{id:"_6-名字服务-name-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-名字服务-name-server"}},[t._v("#")]),t._v(" 6 名字服务（Name Server）")]),t._v(" "),e("p",[t._v("名称服务充当路由消息的提供者。Broker Server会在启动时向所有的Name  Server注册自己的服务信息，并且后续通过心跳请求的方式保证这个服务信息的实时性。生产者或消费者能够通过名字服务查找各主题相应的Broker  IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。")]),t._v(" "),e("p",[t._v("这种特性也就意味着NameServer中任意的节点挂了，只要有一台服务节点正常，整个路由服务就不会有影响。当然，这里不考虑节点的负载情况。")]),t._v(" "),e("h3",{attrs:{id:"_7-消息-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-消息-message"}},[t._v("#")]),t._v(" 7 消息（Message）")]),t._v(" "),e("p",[t._v("消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题Topic。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。")]),t._v(" "),e("p",[t._v("并且Message上有一个为消息设置的标志，Tag标签。用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。")]),t._v(" "),e("blockquote",[e("p",[t._v("关于Message的更详细字段，在源码的docs/cn/best_practice.md中有详细介绍。")])]),t._v(" "),e("h2",{attrs:{id:"消息存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息存储"}},[t._v("#")]),t._v(" 消息存储")]),t._v(" "),e("h3",{attrs:{id:"_1、何时存储消息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、何时存储消息"}},[t._v("#")]),t._v(" 1、何时存储消息")]),t._v(" "),e("p",[t._v("分布式队列因为有高可靠性的要求，所以数据要进行持久化存储。")]),t._v(" "),e("ol",[e("li",[t._v("MQ收到一条消息后，需要向生产者返回一个ACK响应，并将消息存储起来。")]),t._v(" "),e("li",[t._v("MQ Push一条消息给消费者后，等待消费者的ACK响应，需要将消息标记为已消费。如果没有标记为消费，MQ会不断的尝试往消费者推送这条消息。")]),t._v(" "),e("li",[t._v("MQ需要定期删除一些过期的消息，这样才能保证服务一直可用。")])]),t._v(" "),e("h3",{attrs:{id:"_2、消息存储介质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、消息存储介质"}},[t._v("#")]),t._v(" 2、消息存储介质")]),t._v(" "),e("p",[t._v("RocketMQ采用的是类似于Kafka的文件存储机制，即直接用磁盘文件来保存消息，而不需要借助MySQL这一类索引工具。")]),t._v(" "),e("h4",{attrs:{id:"_2-1磁盘保存文件慢吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1磁盘保存文件慢吗"}},[t._v("#")]),t._v(" 2.1磁盘保存文件慢吗？")]),t._v(" "),e("p",[t._v("磁盘如果使用得当，磁盘的速度完全可以匹配上网络 的数据传输速度。目前的高性能磁盘，顺序写速度可以达到600MB/s，  超过了一般网卡的传输速度。但是磁盘随机写的速度只有大概100KB/s，和顺序写的性能相差6000倍！因为有如此巨大的速度差别，好的消息队列系统会比普通的消息队列系统速度快多个数量级。RocketMQ的消息用顺序写,保证了消息存储的速度。")]),t._v(" "),e("h4",{attrs:{id:"_2-2零拷贝技术加速文件读写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2零拷贝技术加速文件读写"}},[t._v("#")]),t._v(" 2.2零拷贝技术加速文件读写")]),t._v(" "),e("p",[t._v("Linux操作系统分为【用户态】和【内核态】，文件操作、网络操作需要涉及这两种形态的切换，免不了进行数据复制。")]),t._v(" "),e("p",[t._v("一台服务器 把本机磁盘文件的内容发送到客户端，一般分为两个步骤：")]),t._v(" "),e("p",[t._v("1）read；读取本地文件内容；")]),t._v(" "),e("p",[t._v("2）write；将读取的内容通过网络发送出去。")]),t._v(" "),e("p",[t._v("这两个看似简单的操作，实际进行了4 次数据复制，分别是：")]),t._v(" "),e("ol",[e("li",[t._v("从磁盘复制数据到内核态内存；")]),t._v(" "),e("li",[t._v("从内核态内存复 制到用户态内存；")]),t._v(" "),e("li",[t._v("然后从用户态 内存复制到网络驱动的内核态内存；")]),t._v(" "),e("li",[t._v("最后是从网络驱动的内核态内存复 制到网卡中进行传输。")])]),t._v(" "),e("p",[t._v("而通过使用mmap的方式，可以省去向用户态的内存复制，提高速度。这种机制在Java中是通过NIO包中的MappedByteBuffer实现的。RocketMQ充分利用了上述特性，也就是所谓的“零拷贝”技术，提高消息存盘和网络发送的速度。")]),t._v(" "),e("blockquote",[e("p",[t._v("这里需要注意的是，采用MappedByteBuffer这种内存映射的方式有几个限制，其中之一是一次只能映射1.5~2G 的文件至用户态的虚拟内存，这也是为何RocketMQ默认设置单个CommitLog日志数据文件为1G的原因了")])]),t._v(" "),e("blockquote",[e("p",[t._v("关于零拷贝，JAVA的NIO中提供了两种实现方式，mmap和sendfile，其中mmap适合比较小的文件，而sendfile适合传递比较大的文件。同学们自行回顾下这部分的内容。")])]),t._v(" "),e("h3",{attrs:{id:"_3-消息存储结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-消息存储结构"}},[t._v("#")]),t._v(" 3 消息存储结构")]),t._v(" "),e("p",[t._v("RocketMQ消息的存储分为三个部分：")]),t._v(" "),e("ul",[e("li",[t._v("CommitLog：存储消息的元数据。所有消息都会顺序存入到CommitLog文件当中。CommitLog由多个文件组成，每个文件固定大小1G。以第一条消息的偏移量为文件名。")]),t._v(" "),e("li",[t._v("ConsumerQueue：存储消息在CommitLog的索引。一个MessageQueue一个文件，记录当前MessageQueue被哪些消费者组消费到了哪一条CommitLog。")]),t._v(" "),e("li",[t._v("IndexFile：为了消息查询提供了一种通过key或时间区间来查询消息的方法，这种通过IndexFile来查找消息的方法不影响发送与消费消息的主流程")])]),t._v(" "),e("p",[t._v("整体的消息存储结构如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/4.png",alt:""}})]),t._v(" "),e("blockquote",[e("p",[t._v("还记得我们在搭建集群时都特意指定的文件存储路径吗？现在可以上去看看这些文件都是什么样子。还有哪些落盘的文件？")]),t._v(" "),e("p",[t._v("另外还有几个文件可以了解下。")]),t._v(" "),e("p",[t._v("abort：这个文件是RocketMQ用来判断程序是否正常关闭的一个标识文件。正常情况下，会在启动时创建，而关闭服务时删除。但是如果遇到一些服务器宕机，或者kill  -9这样一些非正常关闭服务的情况，这个abort文件就不会删除，因此RocketMQ就可以判断上一次服务是非正常关闭的，后续就会做一些数据恢复的操作。")]),t._v(" "),e("p",[t._v("checkpoint：数据存盘检查点")]),t._v(" "),e("p",[t._v("config/*.json：这些文件是将RocketMQ的一些关键配置信息进行存盘保存。例如Topic配置、消费者组配置、消费者组消息偏移量Offset 等等一些信息。")])]),t._v(" "),e("h3",{attrs:{id:"_4-刷盘机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-刷盘机制"}},[t._v("#")]),t._v(" 4 刷盘机制")]),t._v(" "),e("p",[t._v("RocketMQ需要将消息存储到磁盘上，这样才能保证断电后消息不会丢失。同时这样才可以让存储的消息量可以超出内存的限制。RocketMQ为了提高性能，会尽量保证磁盘的顺序写。消息在写入磁盘时，有两种写磁盘的方式，同步刷盘和异步刷盘")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/5.png",alt:""}})]),t._v(" "),e("ul",[e("li",[e("p",[t._v("同步刷盘：")]),t._v(" "),e("p",[t._v("在返回写成功状态时，消息已经被写入磁盘。具体流程是，消息写入内存的PAGECACHE后，立刻通知刷盘线程刷盘， 然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写 成功的状态。")])]),t._v(" "),e("li",[e("p",[t._v("异步刷盘：")]),t._v(" "),e("p",[t._v("在返回写成功状态时，消息可能只是被写入了内存的PAGECACHE，写操作的返回快，吞吐量大；当内存里的消息量积累到一定程度时，统一触发写磁盘动作，快速写入。")])]),t._v(" "),e("li",[e("p",[t._v("配置方式：")]),t._v(" "),e("p",[t._v("刷盘方式是通过Broker配置文件里的flushDiskType 参数设置的，这个参数被配置成SYNC_FLUSH、ASYNC_FLUSH中的 一个。")])])]),t._v(" "),e("h3",{attrs:{id:"_5-消息主从复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-消息主从复制"}},[t._v("#")]),t._v(" 5 消息主从复制")]),t._v(" "),e("p",[t._v("如果Broker以一个集群的方式部署，会有一个master节点和多个slave节点，消息需要从Master复制到Slave上。而消息复制的方式分为同步复制和异步复制。")]),t._v(" "),e("ul",[e("li",[t._v("同步复制：")])]),t._v(" "),e("p",[t._v("同步复制是等Master和Slave都写入消息成功后才反馈给客户端写入成功的状态。")]),t._v(" "),e("p",[t._v("在同步复制下，如果Master节点故障，Slave上有全部的数据备份，这样容易恢复数据。但是同步复制会增大数据写入的延迟，降低系统的吞吐量。")]),t._v(" "),e("ul",[e("li",[t._v("异步复制：")])]),t._v(" "),e("p",[t._v("异步复制是只要master写入消息成功，就反馈给客户端写入成功的状态。然后再异步的将消息复制给Slave节点。")]),t._v(" "),e("p",[t._v("在异步复制下，系统拥有较低的延迟和较高的吞吐量。但是如果master节点故障，而有些数据没有完成复制，就会造成数据丢失。")]),t._v(" "),e("ul",[e("li",[t._v("配置方式：")])]),t._v(" "),e("p",[t._v("消息复制方式是通过Broker配置文件里的brokerRole参数进行设置的，这个参数可以被设置成ASYNC_MASTER、 SYNC_MASTER、SLAVE三个值中的一个。")]),t._v(" "),e("h3",{attrs:{id:"_6-负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-负载均衡"}},[t._v("#")]),t._v(" 6 负载均衡")]),t._v(" "),e("h4",{attrs:{id:"_6-1producer负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1producer负载均衡"}},[t._v("#")]),t._v(" 6.1Producer负载均衡")]),t._v(" "),e("p",[t._v("Producer发送消息时，默认会轮询目标Topic下的所有MessageQueue，并采用递增取模的方式往不同的MessageQueue上发送消息，以达到让消息平均落在不同的queue上的目的。而由于MessageQueue是分布在不同的Broker上的，所以消息也会发送到不同的broker上。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/6.png",alt:""}})]),t._v(" "),e("p",[t._v("同时生产者在发送消息时，可以指定一个MessageQueueSelector。通过这个对象来将消息发送到自己指定的MessageQueue上。这样可以保证消息局部有序。")]),t._v(" "),e("h4",{attrs:{id:"_6-2-consumer负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-consumer负载均衡"}},[t._v("#")]),t._v(" 6.2 Consumer负载均衡")]),t._v(" "),e("p",[t._v("Consumer也是以MessageQueue为单位来进行负载均衡。分为集群模式和广播模式。")]),t._v(" "),e("h5",{attrs:{id:"_1、集群模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、集群模式"}},[t._v("#")]),t._v(" 1、集群模式")]),t._v(" "),e("p",[t._v("在集群消费模式下，每条消息只需要投递到订阅这个topic的Consumer Group下的一个实例即可。RocketMQ采用主动拉取的方式拉取并消费消息，在拉取的时候需要明确指定拉取哪一条message queue。")]),t._v(" "),e("p",[t._v("而每当实例的数量有变更，都会触发一次所有实例的负载均衡，这时候会按照queue的数量和实例的数量平均分配queue给每个实例。")]),t._v(" "),e("p",[t._v("每次分配时，都会将MessageQueue和消费者ID进行排序后，再用不同的分配算法进行分配。内置的分配的算法共有六种，分别对应AllocateMessageQueueStrategy下的六种实现类，可以在consumer中直接set来指定。默认情况下使用的是最简单的平均分配策略。")]),t._v(" "),e("ul",[e("li",[t._v("AllocateMachineRoomNearby： 将同机房的Consumer和Broker优先分配在一起。")])]),t._v(" "),e("p",[t._v("​\t这个策略可以通过一个machineRoomResolver对象来定制Consumer和Broker的机房解析规则。然后还需要引入另外一个分配策略来对同机房的Broker和Consumer进行分配。一般也就用简单的平均分配策略或者轮询分配策略。")]),t._v(" "),e("blockquote",[e("p",[t._v("感觉这东西挺鸡肋的，直接给个属性指定机房不是挺好的吗。")])]),t._v(" "),e("p",[t._v("​\t源码中有测试代码AllocateMachineRoomNearByTest。")]),t._v(" "),e("p",[t._v('​\t在示例中：Broker的机房指定方式： messageQueue.getBrokerName().split("-")[0]，而Consumer的机房指定方式：clientID.split("-")[0]')]),t._v(" "),e("p",[t._v("​\t\tclinetID的构建方式：见ClientConfig.buildMQClientId方法。按他的测试代码应该是要把clientIP指定为IDC1-CID-0这样的形式。")]),t._v(" "),e("ul",[e("li",[t._v("AllocateMessageQueueAveragely：平均分配。将所有MessageQueue平均分给每一个消费者")]),t._v(" "),e("li",[t._v("AllocateMessageQueueAveragelyByCircle： 轮询分配。轮流的给一个消费者分配一个MessageQueue。")]),t._v(" "),e("li",[t._v("AllocateMessageQueueByConfig： 不分配，直接指定一个messageQueue列表。类似于广播模式，直接指定所有队列。")]),t._v(" "),e("li",[t._v("AllocateMessageQueueByMachineRoom：按逻辑机房的概念进行分配。又是对BrokerName和ConsumerIdc有定制化的配置。")]),t._v(" "),e("li",[t._v("AllocateMessageQueueConsistentHash。源码中有测试代码AllocateMessageQueueConsitentHashTest。这个一致性哈希策略只需要指定一个虚拟节点数，是用的一个哈希环的算法，虚拟节点是为了让Hash数据在换上分布更为均匀。")])]),t._v(" "),e("p",[t._v("例如平均分配时的分配情况是这样的：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/7.png",alt:""}})]),t._v(" "),e("h5",{attrs:{id:"_2、广播模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、广播模式"}},[t._v("#")]),t._v(" 2、广播模式")]),t._v(" "),e("p",[t._v("广播模式下，每一条消息都会投递给订阅了Topic的所有消费者实例，所以也就没有消息分配这一说。而在实现上，就是在Consumer分配Queue时，所有Consumer都分到所有的Queue。")]),t._v(" "),e("h3",{attrs:{id:"_7、消息重试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、消息重试"}},[t._v("#")]),t._v(" 7、消息重试")]),t._v(" "),e("p",[t._v("首先对于广播模式的消息， 是不存在消息重试的机制的，即消息消费失败后，不会再重新进行发送，而只是继续消费新的消息。")]),t._v(" "),e("p",[t._v("而对于普通的消息，当消费者消费消息失败后，你可以通过设置返回状态达到消息重试的结果。")]),t._v(" "),e("h4",{attrs:{id:"_1、如何让消息进行重试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、如何让消息进行重试"}},[t._v("#")]),t._v(" 1、如何让消息进行重试")]),t._v(" "),e("p",[t._v("集群消费方式下，消息消费失败后期望消息重试，需要在消息监听器接口的实现中明确进行配置。可以有三种配置方式：")]),t._v(" "),e("ul",[e("li",[t._v("返回Action.ReconsumeLater-推荐")]),t._v(" "),e("li",[t._v("返回null")]),t._v(" "),e("li",[t._v("抛出异常")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class MessageListenerImpl implements MessageListener {\n    @Override\n    public Action consume(Message message, ConsumeContext context) {\n        //处理消息\n        doConsumeMessage(message);\n        //方式1：返回 Action.ReconsumeLater，消息将重试\n        return Action.ReconsumeLater;\n        //方式2：返回 null，消息将重试\n        return null;\n        //方式3：直接抛出异常， 消息将重试\n        throw new RuntimeException("Consumer Message exceotion");\n    }\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("如果希望消费失败后不重试，可以直接返回Action.CommitMessage。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class MessageListenerImpl implements MessageListener {\n    @Override\n    public Action consume(Message message, ConsumeContext context) {\n        try {\n            doConsumeMessage(message);\n        } catch (Throwable e) {\n            //捕获消费逻辑中的所有异常，并返回 Action.CommitMessage;\n            return Action.CommitMessage;\n        }\n        //消息处理正常，直接返回 Action.CommitMessage;\n        return Action.CommitMessage;\n    }\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("h4",{attrs:{id:"_2、重试消息如何处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、重试消息如何处理"}},[t._v("#")]),t._v(" 2、重试消息如何处理")]),t._v(" "),e("p",[t._v("重试的消息会进入一个 “%RETRY%”+ConsumeGroup  的队列中。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/8.png",alt:""}})]),t._v(" "),e("p",[t._v("然后RocketMQ默认允许每条消息最多重试16次，每次重试的间隔时间如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("重试次数")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("与上次重试的间隔时间")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("重试次数")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("与上次重试的间隔时间")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("10 秒")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("9")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("7 分钟")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("30 秒")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("8 分钟")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1 分钟")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("11")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("9 分钟")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2 分钟")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("12")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("10 分钟")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3 分钟")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("13")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("20 分钟")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4 分钟")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("14")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("30 分钟")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5 分钟")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("15")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1 小时")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("6 分钟")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("16")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2 小时")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("这个重试时间跟延迟消息的延迟级别是对应的。不过取的是延迟级别的后16级别。")]),t._v(" "),e("p",[t._v("messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h")]),t._v(" "),e("p",[t._v("这个重试时间可以将源码中的org.apache.rocketmq.example.quickstart.Consumer里的消息监听器返回状态改为RECONSUME_LATER测试一下。")])]),t._v(" "),e("p",[e("strong",[t._v("重试次数：")])]),t._v(" "),e("p",[t._v("如果消息重试16次后仍然失败，消息将不再投递。转为进入死信队列。")]),t._v(" "),e("p",[t._v("另外一条消息无论重试多少次，这些重试消息的MessageId始终都是一样的。")]),t._v(" "),e("p",[t._v("然后关于这个重试次数，RocketMQ可以进行定制。例如通过consumer.setMaxReconsumeTimes(20);将重试次数设定为20次。当定制的重试次数超过16次后，消息的重试时间间隔均为2小时。")]),t._v(" "),e("p",[e("strong",[t._v("关于MessageId：")])]),t._v(" "),e("p",[t._v("在老版本的RocketMQ中，一条消息无论重试多少次，这些重试消息的MessageId始终都是一样的。")]),t._v(" "),e("p",[t._v("但是在4.7.1版本中，每次重试MessageId都会重建。")]),t._v(" "),e("p",[e("strong",[t._v("配置覆盖：")])]),t._v(" "),e("p",[t._v("消息最大重试次数的设置对相同GroupID下的所有Consumer实例有效。并且最后启动的Consumer会覆盖之前启动的Consumer的配置。")]),t._v(" "),e("h3",{attrs:{id:"_8、死信队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、死信队列"}},[t._v("#")]),t._v(" 8、死信队列")]),t._v(" "),e("p",[t._v("当一条消息消费失败，RocketMQ就会自动进行消息重试。而如果消息超过最大重试次数，RocketMQ就会认为这个消息有问题。但是此时，RocketMQ不会立刻将这个有问题的消息丢弃，而会将其发送到这个消费者组对应的一种特殊队列：死信队列。")]),t._v(" "),e("p",[t._v("死信队列的名称是%DLQ%+ConsumGroup")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/rocketmq/9.png",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("死信队列的特征：")])]),t._v(" "),e("ul",[e("li",[t._v("一个死信队列对应一个ConsumGroup，而不是对应某个消费者实例。")]),t._v(" "),e("li",[t._v("如果一个ConsumeGroup没有产生死信队列，RocketMQ就不会为其创建相应的死信队列。")]),t._v(" "),e("li",[t._v("一个死信队列包含了这个ConsumeGroup里的所有死信消息，而不区分该消息属于哪个Topic。")]),t._v(" "),e("li",[t._v("死信队列中的消息不会再被消费者正常消费。")]),t._v(" "),e("li",[t._v("死信队列的有效期跟正常消息相同。默认3天，对应broker.conf中的fileReservedTime属性。超过这个最长时间的消息都会被删除，而不管消息是否消费过。")])]),t._v(" "),e("p",[t._v("通常，一条消息进入了死信队列，意味着消息在消费处理的过程中出现了比较严重的错误，并且无法自行恢复。此时，一般需要人工去查看死信队列中的消息，对错误原因进行排查。然后对死信消息进行处理，比如转发到正常的Topic重新进行消费，或者丢弃。")]),t._v(" "),e("blockquote",[e("p",[t._v("注：默认创建出来的死信队列，他里面的消息是无法读取的，在控制台和消费者中都无法读取。这是因为这些默认的死信队列，他们的权限perm被设置成了2:禁读(这个权限有三种 2:禁读，4:禁写,6:可读可写)。需要手动将死信队列的权限配置成6，才能被消费(可以通过mqadmin指定或者web控制台)。")])]),t._v(" "),e("h3",{attrs:{id:"_9、消息幂等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9、消息幂等"}},[t._v("#")]),t._v(" 9、消息幂等")]),t._v(" "),e("h4",{attrs:{id:"_1、幂等的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、幂等的概念"}},[t._v("#")]),t._v(" 1、幂等的概念")]),t._v(" "),e("p",[t._v("在MQ系统中，对于消息幂等有三种实现语义：")]),t._v(" "),e("ul",[e("li",[t._v("at most once 最多一次：每条消息最多只会被消费一次")]),t._v(" "),e("li",[t._v("at least once 至少一次：每条消息至少会被消费一次")]),t._v(" "),e("li",[t._v("exactly once 刚刚好一次：每条消息都只会确定的消费一次")])]),t._v(" "),e("p",[t._v("这三种语义都有他适用的业务场景。")]),t._v(" "),e("p",[t._v("其中，at most once是最好保证的。RocketMQ中可以直接用异步发送、sendOneWay等方式就可以保证。")]),t._v(" "),e("p",[t._v("而at least once这个语义，RocketMQ也有同步发送、事务消息等很多方式能够保证。")]),t._v(" "),e("p",[t._v("而这个exactly once是MQ中最理想也是最难保证的一种语义，需要有非常精细的设计才行。RocketMQ只能保证at least once，保证不了exactly once。所以，使用RocketMQ时，需要由业务系统自行保证消息的幂等性。")]),t._v(" "),e("blockquote",[e("p",[t._v("关于这个问题，官网上有明确的回答：")]),t._v(" "),e("h3",{attrs:{id:"_4-are-messages-delivered-exactly-once"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-are-messages-delivered-exactly-once"}},[t._v("#")]),t._v(" 4. Are messages delivered exactly once?")]),t._v(" "),e("p",[t._v("RocketMQ ensures that all messages are delivered at least once. In most cases, the messages are not repeated.")])]),t._v(" "),e("h4",{attrs:{id:"_2、消息幂等的必要性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、消息幂等的必要性"}},[t._v("#")]),t._v(" 2、消息幂等的必要性")]),t._v(" "),e("p",[t._v("在互联网应用中，尤其在网络不稳定的情况下，消息队列 RocketMQ 的消息有可能会出现重复，这个重复简单可以概括为以下情况：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("发送时消息重复")]),t._v(" "),e("p",[t._v("当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或者客户端宕机，导致服务端对客户端应答失败。 如果此时生产者意识到消息发送失败并尝试再次发送消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。")])]),t._v(" "),e("li",[e("p",[t._v("投递时消息重复")]),t._v(" "),e("p",[t._v("消息消费的场景下，消息已投递到消费者并完成业务处理，当客户端给服务端反馈应答的时候网络闪断。 为了保证消息至少被消费一次，消息队列 RocketMQ  的服务端将在网络恢复后再次尝试投递之前已被处理过的消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。")])]),t._v(" "),e("li",[e("p",[t._v("负载均衡时消息重复（包括但不限于网络抖动、Broker 重启以及订阅方应用重启）")]),t._v(" "),e("p",[t._v("当消息队列 RocketMQ 的 Broker 或客户端重启、扩容或缩容时，会触发 Rebalance，此时消费者可能会收到重复消息。")])])]),t._v(" "),e("h4",{attrs:{id:"_3、处理方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、处理方式"}},[t._v("#")]),t._v(" 3、处理方式")]),t._v(" "),e("p",[t._v("从上面的分析中，我们知道，在RocketMQ中，是无法保证每个消息只被投递一次的，所以要在业务上自行来保证消息消费的幂等性。")]),t._v(" "),e("p",[t._v("而要处理这个问题，RocketMQ的每条消息都有一个唯一的MessageId，这个参数在多次投递的过程中是不会改变的，所以业务上可以用这个MessageId来作为判断幂等的关键依据。")]),t._v(" "),e("p",[t._v("但是，这个MessageId是无法保证全局唯一的，也会有冲突的情况。所以在一些对幂等性要求严格的场景，最好是使用业务上唯一的一个标识比较靠谱。例如订单ID。而这个业务标识可以使用Message的Key来进行传递。")])])}),[],!1,null,null,null);e.default=_.exports}}]);