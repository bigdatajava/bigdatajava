(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{564:function(t,s,r){"use strict";r.r(s);var _=r(5),v=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("U2FsdGVkX180KbMmt2oIdKNuqsud6yNUNQ5O21gFH+zjozOM1rqcEp02llIjzO6V\nwLRtvJj2PzQqZ6Vz3A7O3JZBhgSzAaOWnm8QwuIZbF8TPuKy+aLfvg==\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("MVCC多版本并发控制机制")])]),t._v(" "),s("p",[t._v("Mysql在可重复读隔离级别下如何保证事务较高的隔离性，我们上节课给大家演示过，同样的sql查询语句在一个事务里多次执行查询结果相同，就算其它事务对数据有修改也不会影响当前事务sql语句的查询结果。")]),t._v(" "),s("p",[t._v("这个隔离性就是靠MVCC("),s("strong",[t._v("Multi-Version Concurrency Control")]),t._v(")机制来保证的，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。")]),t._v(" "),s("p",[t._v("Mysql在读已提交和可重复读隔离级别下都实现了MVCC机制。")]),t._v(" "),s("p",[s("strong",[t._v("undo日志版本链与read view机制详解")])]),t._v(" "),s("p",[t._v("undo日志版本链是指一行数据被多个事务依次修改过后，在每个事务修改完后，Mysql会保留修改前的数据undo回滚日志，并且用两个隐藏字段trx_id和roll_pointer把这些undo日志串联起来形成一个历史记录版本链(见下图，需参考视频里的例子理解)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql3/50.png",alt:""}})]),t._v(" "),s("p",[t._v("在"),s("strong",[t._v("可重复读隔离级别")]),t._v("，当事务开启，执行任何查询sql时会生成当前事务的**一致性视图read-view，**该视图在事务结束之前都不会变化("),s("strong",[t._v("如果是读已提交隔离级别在每次执行查询sql时都会重新生成")]),t._v(")，这个视图由执行查询时所有未提交事务id数组（数组里最小的id为min_id）和已创建的最大事务id（max_id）组成，事务里的任何sql查询结果需要从对应版本链里的最新数据开始逐条跟read-view做比对从而得到最终的快照结果。")]),t._v(" "),s("p",[s("strong",[t._v("版本链比对规则：")])]),t._v(" "),s("p",[t._v("\\1. 如果 row 的 trx_id 落在绿色部分( trx_id")]),t._v(" "),s("p",[t._v("\\2. 如果 row 的 trx_id 落在红色部分( trx_id>max_id )，表示这个版本是由将来启动的事务生成的，是不可见的(若 row 的 trx_id 就是当前自己的事务是可见的）；")]),t._v(" "),s("p",[t._v("\\3. 如果 row 的 trx_id 落在黄色部分(min_id <=trx_id<= max_id)，那就包括两种情况")]),t._v(" "),s("p",[t._v("a. 若 row 的 trx_id 在视图数组中，表示这个版本是由还没提交的事务生成的，不可见(若 row 的 trx_id 就是当前自己的事务是可见的)；")]),t._v(" "),s("p",[t._v("b. 若 row 的 trx_id 不在视图数组中，表示这个版本是已经提交了的事务生成的，可见。")]),t._v(" "),s("p",[t._v("对于删除的情况可以认为是update的特殊情况，会将版本链上最新的数据复制一份，然后将trx_id修改成删除操作的trx_id，同时在该条记录的头信息（record header）里的（deleted_flag）标记位写上true，来表示当前记录已经被删除，在查询时按照上面的规则查到对应的记录如果delete_flag标记位为true，意味着记录已被删除，则不返回数据。")]),t._v(" "),s("p",[t._v("**注意：**begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个修改操作InnoDB表的语句，事务才真正启动，才会向mysql申请事务id，mysql内部是严格按照事务的启动顺序来分配事务id的。")]),t._v(" "),s("p",[s("strong",[t._v("总结：")])]),t._v(" "),s("p",[t._v("MVCC机制的实现就是通过read-view机制与undo版本链比对机制，使得不同的事务会根据数据版本链对比规则读取同一条数据在版本链上的不同版本数据。")]),t._v(" "),s("p",[s("strong",[t._v("Innodb引擎SQL执行的BufferPool缓存机制")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql3/51.png",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("为什么Mysql不能直接更新磁盘上的数据而且设置这么一套复杂的机制来执行SQL了？")])]),t._v(" "),s("p",[t._v("因为来一个请求就直接对磁盘文件进行随机读写，然后更新磁盘文件里的数据性能可能相当差。")]),t._v(" "),s("p",[t._v("因为磁盘随机读写的性能是非常差的，所以直接更新磁盘文件是不能让数据库抗住很高并发的。")]),t._v(" "),s("p",[t._v("Mysql这套机制看起来复杂，但它可以保证每个更新请求都是"),s("strong",[t._v("更新内存BufferPool")]),t._v("，然后"),s("strong",[t._v("顺序写日志文件")]),t._v("，同时还能保证各种异常情况下的数据一致性。")]),t._v(" "),s("p",[t._v("更新内存的性能是极高的，然后顺序写磁盘上的日志文件的性能也是非常高的，要远高于随机读写磁盘文件。")]),t._v(" "),s("p",[t._v("正是通过这套机制，才能让我们的MySQL数据库在较高配置的机器上每秒可以抗下几干的读写请求。")]),t._v(" "),s("h2",{attrs:{id:"图片附录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片附录"}},[t._v("#")]),t._v(" 图片附录")]),t._v(" "),s("h3",{attrs:{id:"mvcc机制举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvcc机制举例"}},[t._v("#")]),t._v(" MVCC机制举例")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220618152644446.png",alt:"image-20220618152644446"}})]),t._v(" "),s("h3",{attrs:{id:"mysql执行过程与bufferpool缓存机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql执行过程与bufferpool缓存机制"}},[t._v("#")]),t._v(" Mysql执行过程与BufferPool缓存机制")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/Mysql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%8EBufferPool%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.png",alt:"Mysql执行过程与BufferPool缓存机制"}})])])}),[],!1,null,null,null);s.default=v.exports}}]);