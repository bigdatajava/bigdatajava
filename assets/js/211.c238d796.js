(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{553:function(s,n,a){"use strict";a.r(n);var e=a(1),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("U2FsdGVkX1+1PdawsECCMKjVjXVdeQLFmTqHtWqdI21KxT6RANYjfVnccah7pKON\nvHjboBF7mYuzbek2fFE4e4OuNJL841pbx+/XnZ6CLk9KUZCBBhNwlW17a/D+nK5m\nDA==\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[s._v("#")]),s._v(" 线程")]),s._v(" "),n("p",[s._v("线程是调度CPU资源的最小单位，线程模型分为KLT模型与ULT模型，JVM使用的KLT模型，Java线程与OS线程保持1:1的映射关系，也就是说有一个java线程也会在操作系统里有一个对应的线程。Java线程有多种生命状态")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("NEW")]),s._v(",新建")]),s._v(" "),n("p",[n("strong",[s._v("RUNNABLE")]),s._v(",运行")]),s._v(" "),n("p",[n("strong",[s._v("BLOCKED")]),s._v(",阻塞")]),s._v(" "),n("p",[n("strong",[s._v("WAITING")]),s._v(",等待")]),s._v(" "),n("p",[n("strong",[s._v("TIMED_WAITING")]),s._v(",超时等待")]),s._v(" "),n("p",[n("strong",[s._v("TERMINATED")]),s._v("，终结")])]),s._v(" "),n("p",[s._v("状态切换如下图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/50.png",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"线程的实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的实现方式"}},[s._v("#")]),s._v(" 线程的实现方式")]),s._v(" "),n("p",[n("strong",[s._v("Runnable,Thread,Callable")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 实现Runnable接口的类将被Thread执行，表示一个基本的任务\npublic interface Runnable {\n    // run方法就是它所有的内容，就是实际执行的任务\n    public abstract void run();\n}\n//Callable同样是任务，与Runnable接口的区别在于它接收泛型，同时它执行任务后带有返回内容\npublic interface Callable<V> {\n    // 相对于run方法的带有返回值的call方法\n    V call() throws Exception;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")])]),s._v(" "),n("h2",{attrs:{id:"协程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#协程"}},[s._v("#")]),s._v(" 协程")]),s._v(" "),n("p",[s._v("协程\t(纤程，用户级线程)，目的是为了追求最大力度的发挥硬件性能和提升软件的速度，协程基本原理是:在某个点挂起当前的任务，并且保存栈信息，去执行另一个任务；等完成或达到某个条件时，再还原原来的栈信息并继续执行(整个过程线程不需要上下文切换)。")]),s._v(" "),n("blockquote",[n("p",[s._v("Java原生不支持协程，在纯java代码里需要使用协程的话需要引入第三方包,如：quasar")])]),s._v(" "),n("h2",{attrs:{id:"线程池理论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池理论"}},[s._v("#")]),s._v(" 线程池理论")]),s._v(" "),n("p",[s._v("“线程池”，顾名思义就是一个线程缓存，线程是稀缺资源，如果被无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此Java中提供线程池对线程进行统一分配、调优和监控")]),s._v(" "),n("p",[n("strong",[s._v("线程池介绍")])]),s._v(" "),n("p",[s._v("在web开发中，服务器需要接受并处理请求，所以会为一个请求来分配一个线程来进行处理。如果每次请求都新创建一个线程的话实现起来非常简便，但是存在一个问题：")]),s._v(" "),n("p",[n("strong",[s._v("如果并发的请求数量非常多，但每个线程执行的时间很短，这样就会频繁的创建和销毁线程，如此一来会大大降低系统的效率。可能出现服务器在为每个请求创建新线程和销毁线程上花费的时间和消耗的系统资源要比处理实际的用户请求的时间和资源更多。")])]),s._v(" "),n("p",[s._v("那么有没有一种办法使执行完一个任务，并不被销毁，而是可以继续执行其他的任务呢？")]),s._v(" "),n("p",[s._v("这就是线程池的目的了。线程池为线程生命周期的开销和资源不足问题提供了解决方案。通过对多个任务重用线程，线程创建的开销被分摊到了多个任务上。")]),s._v(" "),n("p",[n("strong",[s._v("什么时候使用线程池？")])]),s._v(" "),n("ul",[n("li",[s._v("单个任务处理时间比较短")]),s._v(" "),n("li",[s._v("需要处理的任务数量很大")])]),s._v(" "),n("p",[n("strong",[s._v("线程池优势")])]),s._v(" "),n("ul",[n("li",[s._v("重用存在的线程，减少线程创建，消亡的开销，提高性能")]),s._v(" "),n("li",[s._v("提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。")]),s._v(" "),n("li",[s._v("提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])]),s._v(" "),n("h3",{attrs:{id:"executor框架"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#executor框架"}},[s._v("#")]),s._v(" Executor框架")]),s._v(" "),n("p",[s._v("Executor接口是线程池框架中最基础的部分，定义了一个用于执行Runnable的execute方法。")]),s._v(" "),n("p",[s._v("下图为它的继承与实现")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/51.png",alt:""}})]),s._v(" "),n("p",[s._v("从图中可以看出Executor下有一个重要子接口ExecutorService，其中定义了线程池的具体行为")]),s._v(" "),n("p",[s._v("1，"),n("strong",[s._v("execute")]),s._v("（Runnable command）：履行Ruannable类型的任务,")]),s._v(" "),n("p",[s._v("2，"),n("strong",[s._v("submit")]),s._v("（task）：可用来提交Callable或Runnable任务，并返回代表此任务的Future对象")]),s._v(" "),n("p",[s._v("3，"),n("strong",[s._v("shutdown")]),s._v("（）：在完成已提交的任务后封闭办事，不再接管新任务,")]),s._v(" "),n("p",[s._v("4，"),n("strong",[s._v("shutdownNow")]),s._v("（）：停止所有正在履行的任务并封闭办事。")]),s._v(" "),n("p",[s._v("5，"),n("strong",[s._v("isTerminated")]),s._v("（）：测试是否所有任务都履行完毕了。")]),s._v(" "),n("p",[s._v("6，"),n("strong",[s._v("isShutdown")]),s._v("（）：测试是否该ExecutorService已被关闭。")]),s._v(" "),n("h3",{attrs:{id:"线程池重点属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池重点属性"}},[s._v("#")]),s._v(" 线程池重点属性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("ctl")]),s._v(" 是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段， 它包含两部分的信息: 线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)。")]),s._v(" "),n("p",[s._v("使用了Integer类型来保存，高3位保存runState，低29位保存workerCount。COUNT_BITS 就是29，CAPACITY就是1左移29位减1（29个1），这个常量表示workerCount的上限值，大约是5亿。")]),s._v(" "),n("h3",{attrs:{id:"ctl相关方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ctl相关方法"}},[s._v("#")]),s._v(" ctl相关方法")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取运行状态；")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("runStateOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CAPACITY")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取活动线程数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("workerCountOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CAPACITY")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取运行状态和活动线程数的值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ctlOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" wc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" rs "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" wc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"线程池存在5种状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池存在5种状态"}},[s._v("#")]),s._v(" 线程池存在5种状态")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("RUNNING    = -1 << COUNT_BITS; //高3位为111\nSHUTDOWN   =  0 << COUNT_BITS; //高3位为000\nSTOP       =  1 << COUNT_BITS; //高3位为001\nTIDYING    =  2 << COUNT_BITS; //高3位为010\nTERMINATED =  3 << COUNT_BITS; //高3位为011\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ol",[n("li",[s._v("RUNNING")])]),s._v(" "),n("blockquote",[n("p",[s._v("(1) 状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。")]),s._v(" "),n("p",[s._v("(2) 状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态，并且线程池中的任务数为0！")])]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("SHUTDOWN")])]),s._v(" "),n("blockquote",[n("p",[s._v("(1) 状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。")]),s._v(" "),n("p",[s._v("(2) 状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -> SHUTDOWN。")])]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("STOP")])]),s._v(" "),n("blockquote",[n("p",[s._v("(1) 状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。")]),s._v(" "),n("p",[s._v("(2) 状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -> STOP。")])]),s._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[s._v("TIDYING")])]),s._v(" "),n("blockquote",[n("p",[s._v("(1) 状态说明：当所有的任务已终止，ctl记录的”任务数量”为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。")]),s._v(" "),n("p",[s._v("(2) 状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -> TIDYING。 当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -> TIDYING。")])]),s._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[s._v("TERMINATED")])]),s._v(" "),n("blockquote",[n("p",[s._v("(1) 状态说明：线程池彻底终止，就变成TERMINATED状态。")]),s._v(" "),n("p",[s._v("(2) 状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -> TERMINATED。")])]),s._v(" "),n("p",[s._v("进入TERMINATED的条件如下：")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("线程池不是RUNNING状态；")]),s._v(" "),n("li",[s._v("线程池状态不是TIDYING状态或TERMINATED状态；")]),s._v(" "),n("li",[s._v("如果线程池状态是SHUTDOWN并且workerQueue为空；")]),s._v(" "),n("li",[s._v("workerCount为0；")]),s._v(" "),n("li",[s._v("设置TIDYING状态成功。")])])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/52.png",alt:""}})]),s._v(" "),n("h2",{attrs:{id:"线程池的具体实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池的具体实现"}},[s._v("#")]),s._v(" 线程池的具体实现")]),s._v(" "),n("p",[s._v("ThreadPoolExecutor 默认线程池")]),s._v(" "),n("p",[s._v("ScheduledThreadPoolExecutor 定时线程池")]),s._v(" "),n("h3",{attrs:{id:"线程池的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池的创建"}},[s._v("#")]),s._v(" 线程池的创建")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" corePoolSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maximumPoolSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" keepAliveTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),s._v(" unit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockingQueue")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" workQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadFactory")]),s._v(" threadFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionHandler")]),s._v(" handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"构造参数解释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造参数解释"}},[s._v("#")]),s._v(" 构造参数解释")]),s._v(" "),n("h4",{attrs:{id:"corepoolsize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#corepoolsize"}},[s._v("#")]),s._v(" corePoolSize")]),s._v(" "),n("p",[s._v("​\t线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize；如果当前线程数为corePoolSize，继续提交的任务被保存到阻塞队列中，等待被执行；如果执行了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有核心线程。")]),s._v(" "),n("h4",{attrs:{id:"maximumpoolsize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maximumpoolsize"}},[s._v("#")]),s._v(" maximumPoolSize")]),s._v(" "),n("p",[s._v("​\t线程池中允许的最大线程数。如果当前阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于maximumPoolSize；")]),s._v(" "),n("h4",{attrs:{id:"keepalivetime"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keepalivetime"}},[s._v("#")]),s._v(" keepAliveTime")]),s._v(" "),n("p",[s._v("​\t线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；")]),s._v(" "),n("h4",{attrs:{id:"unit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unit"}},[s._v("#")]),s._v(" unit")]),s._v(" "),n("p",[s._v("​\tkeepAliveTime的单位；")]),s._v(" "),n("h4",{attrs:{id:"workqueue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#workqueue"}},[s._v("#")]),s._v(" workQueue")]),s._v(" "),n("p",[s._v("​\t用来保存等待被执行的任务的阻塞队列，且任务必须实现Runable接口，在JDK中提供了如下阻塞队列：")]),s._v(" "),n("ul",[n("li",[s._v("1、ArrayBlockingQueue：基于数组结构的有界阻塞队列，按FIFO排序任务；")]),s._v(" "),n("li",[s._v("2、LinkedBlockingQuene：基于链表结构的阻塞队列，按FIFO排序任务，吞吐量通常要高于ArrayBlockingQuene；")]),s._v(" "),n("li",[s._v("3、SynchronousQuene：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene；")]),s._v(" "),n("li",[s._v("4、priorityBlockingQuene：具有优先级的无界阻塞队列；")])]),s._v(" "),n("h4",{attrs:{id:"threadfactory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#threadfactory"}},[s._v("#")]),s._v(" threadFactory")]),s._v(" "),n("p",[s._v("​\t它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。")]),s._v(" "),n("h4",{attrs:{id:"handler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#handler"}},[s._v("#")]),s._v(" handler")]),s._v(" "),n("p",[s._v("​\t线程池的饱和策略，当阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，必须采取一种策略处理该任务，线程池提供了4种策略：")]),s._v(" "),n("ul",[n("li",[s._v("1、AbortPolicy：直接抛出异常，默认策略；")]),s._v(" "),n("li",[s._v("2、CallerRunsPolicy：用调用者所在的线程来执行任务；")]),s._v(" "),n("li",[s._v("3、DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；")]),s._v(" "),n("li",[s._v("4、DiscardPolicy：直接丢弃任务；")])]),s._v(" "),n("p",[s._v("上面的4种策略都是ThreadPoolExecutor的内部类。")]),s._v(" "),n("p",[s._v("当然也可以根据应用场景实现RejectedExecutionHandler接口，自定义饱和策略，如记录日志或持久化存储不能处理的任务。")]),s._v(" "),n("h3",{attrs:{id:"线程池常见方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池常见方法"}},[s._v("#")]),s._v(" 线程池常见方法")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//提交任务无返回值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Future")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//任务执行完成后有返回值")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//线程池监控\npublic long getTaskCount() //线程池已执行与未执行的任务总数\npublic long getCompletedTaskCount() //已完成的任务数\npublic int getPoolSize() //线程池当前的线程数\npublic int getActiveCount() //线程池中正在执行任务的线程数量\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"线程池源码解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池源码解析"}},[s._v("#")]),s._v(" 线程池源码解析")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/53.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("源码分析")])]),s._v(" "),n("h3",{attrs:{id:"execute方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execute方法"}},[s._v("#")]),s._v(" execute方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n/*\n * clt记录着runState和workerCount\n */\n    int c = ctl.get();\n/*\n * workerCountOf方法取出低29位的值，表示当前活动的线程数；\n * 如果当前活动线程数小于corePoolSize，则新建一个线程放入线程池中；\n * 并把任务添加到该线程中。\n */\n    if (workerCountOf(c) < corePoolSize) {\n/*\n * addWorker中的第二个参数表示限制添加线程的数量是根据corePoolSize来判断还是maximumPoolSize来判断；\n * 如果为true，根据corePoolSize来判断；\n * 如果为false，则根据maximumPoolSize来判断\n */\n        if (addWorker(command, true))\n            return;\n/*\n * 如果添加失败，则重新获取ctl值\n */\n        c = ctl.get();\n    }\n/*\n * 如果当前线程池是运行状态并且任务添加到队列成功\n */\n    if (isRunning(c) && workQueue.offer(command)) {\n// 重新获取ctl值\n        int recheck = ctl.get();\n // 再次判断线程池的运行状态，如果不是运行状态，由于之前已经把command添加到workQueue中了，\n// 这时需要移除该command\n// 执行过后通过handler使用拒绝策略对该任务进行处理，整个方法返回\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n/*\n * 获取线程池中的有效线程数，如果数量是0，则执行addWorker方法\n * 这里传入的参数表示：\n * 1. 第一个参数为null，表示在线程池中创建一个线程，但不去启动；\n * 2. 第二个参数为false，将线程池的有限线程数量的上限设置为maximumPoolSize，添加线程时根据maximumPoolSize来判断；\n * 如果判断workerCount大于0，则直接返回，在workQueue中新增的command会在将来的某个时刻被执行。\n */\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n/*\n * 如果执行到这里，有两种情况：\n * 1. 线程池已经不是RUNNING状态；\n * 2. 线程池是RUNNING状态，但workerCount >= corePoolSize并且workQueue已满。\n * 这时，再次调用addWorker方法，但第二个参数传入为false，将线程池的有限线程数量的上限设置为maximumPoolSize；\n * 如果失败则拒绝该任务\n */\n    else if (!addWorker(command, false))\n        reject(command);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br")])]),n("p",[s._v("简单来说，在执行execute()方法时如果状态一直是RUNNING时，的执行过程如下：")]),s._v(" "),n("ol",[n("li",[s._v("如果workerCount < corePoolSize，则创建并启动一个线程来执行新提交的任务；")]),s._v(" "),n("li",[s._v("如果workerCount >= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中；")]),s._v(" "),n("li",[s._v("如果workerCount >= corePoolSize && workerCount < maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务；")]),s._v(" "),n("li",[s._v("如果workerCount >= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。")])]),s._v(" "),n("p",[s._v("这里要注意一下addWorker(null, false);，也就是创建一个线程，但并没有传入任务，因为任务已经被添加到workQueue中了，所以worker在执行的时候，会直接从workQueue中获取任务。所以，在workerCountOf(recheck) == 0时执行addWorker(null, false);也是为了保证线程池在RUNNING状态下必须要有一个线程来执行任务。")]),s._v(" "),n("p",[s._v("execute方法执行流程如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/54.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("addWorker方法")])]),s._v(" "),n("p",[s._v("addWorker方法的主要工作是在线程池中创建一个新的线程并执行，firstTask参数 用于指定新增的线程执行的第一个任务，core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n    // 获取运行状态\n        int rs = runStateOf(c);\n    /*\n     * 这个if判断\n     * 如果rs >= SHUTDOWN，则表示此时不再接收新任务；\n     * 接着判断以下3个条件，只要有1个不满足，则返回false：\n     * 1. rs == SHUTDOWN，这时表示关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务\n     * 2. firsTask为空\n     * 3. 阻塞队列不为空\n     * \n     * 首先考虑rs == SHUTDOWN的情况\n     * 这种情况下不会接受新提交的任务，所以在firstTask不为空的时候会返回false；\n     * 然后，如果firstTask为空，并且workQueue也为空，则返回false，\n     * 因为队列中已经没有任务了，不需要再添加线程了\n     */\n     // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n                ! (rs == SHUTDOWN &&\n                        firstTask == null &&\n                        ! workQueue.isEmpty()))\n            return false;\n        for (;;) {\n            // 获取线程数\n            int wc = workerCountOf(c);\n            // 如果wc超过CAPACITY，也就是ctl的低29位的最大值（二进制是29个1），返回false；\n            // 这里的core是addWorker方法的第二个参数，如果为true表示根据corePoolSize来比较，\n            // 如果为false则根据maximumPoolSize来比较。\n            // \n            if (wc >= CAPACITY ||\n                    wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            // 尝试增加workerCount，如果成功，则跳出第一个for循环\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            // 如果增加workerCount失败，则重新获取ctl的值\n            c = ctl.get();  // Re-read ctl\n            // 如果当前的运行状态不等于rs，说明状态已被改变，返回第一个for循环继续执行\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n     // 根据firstTask来创建Worker对象\n        w = new Worker(firstTask);\n     // 每一个Worker对象都会创建一个线程\n        final Thread t = w.thread;\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                int rs = runStateOf(ctl.get());\n                // rs < SHUTDOWN表示是RUNNING状态；\n                // 如果rs是RUNNING状态或者rs是SHUTDOWN状态并且firstTask为null，向线程池中添加线程。\n                // 因为在SHUTDOWN时不会在添加新的任务，但还是会执行workQueue中的任务\n                if (rs < SHUTDOWN ||\n                        (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    // workers是一个HashSet\n                    workers.add(w);\n                    int s = workers.size();\n                    // largestPoolSize记录着线程池中出现过的最大线程数量\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                // 启动线程\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br")])]),n("h3",{attrs:{id:"worker类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#worker类"}},[s._v("#")]),s._v(" Worker类")]),s._v(" "),n("p",[s._v("线程池中的每一个线程被封装成一个Worker对象，ThreadPool维护的其实就是一组Worker对象，请参见JDK源码。")]),s._v(" "),n("p",[s._v("Worker类继承了AQS，并实现了Runnable接口，注意其中的firstTask和thread属性：firstTask用它来保存传入的任务；thread是在调用构造方法时通过ThreadFactory来创建的线程，是用来处理任务的线程。")]),s._v(" "),n("p",[s._v("在调用构造方法时，需要把任务传入，这里通过getThreadFactory().newThread(this);来新建一个线程，newThread方法传入的参数是this，因为Worker本身继承了Runnable接口，也就是一个线程，所以一个Worker对象在启动的时候会调用Worker类中的run方法。")]),s._v(" "),n("p",[s._v("Worker继承了AQS，使用AQS来实现独占锁的功能。为什么不使用ReentrantLock来实现呢？可以看到tryAcquire方法，它是不允许重入的，而ReentrantLock是允许重入的：")]),s._v(" "),n("ol",[n("li",[s._v("lock方法一旦获取了独占锁，表示当前线程正在执行任务中；")]),s._v(" "),n("li",[s._v("如果正在执行任务，则不应该中断线程；")]),s._v(" "),n("li",[s._v("如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断；")]),s._v(" "),n("li",[s._v("线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；")]),s._v(" "),n("li",[s._v("之所以设置为不可重入，是因为我们不希望任务在调用像setCorePoolSize这样的线程池控制方法时重新获取锁。如果使用ReentrantLock，它是可重入的，这样如果在任务中调用了如setCorePoolSize这类线程池控制的方法，会中断正在运行的线程。")])]),s._v(" "),n("p",[s._v("所以，Worker继承自AQS，用于判断线程是否空闲以及是否可以被中断。")]),s._v(" "),n("p",[s._v("此外，在构造方法中执行了setState(-1);，把state变量设置为-1，为什么这么做呢？是因为AQS中默认的state是0，如果刚创建了一个Worker对象，还没有执行任务时，这时就不应该被中断，看一下tryAquire方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("protected boolean tryAcquire(int unused) {\n//cas修改state，不可重入\n    if (compareAndSetState(0, 1)) { \n        setExclusiveOwnerThread(Thread.currentThread());\n        return true;\n    }\n    return false;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("tryAcquire方法是根据state是否是0来判断的，所以，setState(-1);将state设置为-1是为了禁止在执行任务前对线程进行中断。")]),s._v(" "),n("p",[s._v("正因为如此，在runWorker方法中会先调用Worker对象的unlock方法将state设置为0。")]),s._v(" "),n("h3",{attrs:{id:"runworker方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#runworker方法"}},[s._v("#")]),s._v(" runWorker方法")]),s._v(" "),n("p",[s._v("在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("final void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    // 获取第一个任务\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    // 允许中断\n    w.unlock(); // allow interrupts\n    // 是否因为异常退出循环\n    boolean completedAbruptly = true;\n    try {\n        // 如果task为空，则通过getTask来获取任务\n        while (task != null || (task = getTask()) != null) {\n            w.lock();\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                    (Thread.interrupted() &&\n                            runStateAtLeast(ctl.get(), STOP))) &&\n                    !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])]),n("p",[s._v("这里说明一下第一个if判断，目的是：")]),s._v(" "),n("ul",[n("li",[s._v("如果线程池正在停止，那么要保证当前线程是中断状态；")]),s._v(" "),n("li",[s._v("如果不是的话，则要保证当前线程不是中断状态；")])]),s._v(" "),n("p",[s._v("这里要考虑在执行该if语句期间可能也执行了shutdownNow方法，shutdownNow方法会把状态设置为STOP，回顾一下STOP状态：")]),s._v(" "),n("p",[s._v("不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程。在线程池处于 RUNNING 或 SHUTDOWN 状态时，调用 shutdownNow() 方法会使线程池进入到该状态。")]),s._v(" "),n("p",[s._v("STOP状态要中断线程池中的所有线程，而这里使用Thread.interrupted()来判断是否中断是为了确保在RUNNING或者SHUTDOWN状态时线程是非中断状态的，因为Thread.interrupted()方法会复位中断的状态。")]),s._v(" "),n("p",[s._v("总结一下runWorker方法的执行过程：")]),s._v(" "),n("ol",[n("li",[s._v("while循环不断地通过getTask()方法获取任务；")]),s._v(" "),n("li",[s._v("getTask()方法从阻塞队列中取任务；")]),s._v(" "),n("li",[s._v("如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态；")]),s._v(" "),n("li",[s._v("调用task.run()执行任务；")]),s._v(" "),n("li",[s._v("如果task为null则跳出循环，执行processWorkerExit()方法；")]),s._v(" "),n("li",[s._v("runWorker方法执行完毕，也代表着Worker中的run方法执行完毕，销毁线程。")])]),s._v(" "),n("p",[s._v("这里的beforeExecute方法和afterExecute方法在ThreadPoolExecutor类中是空的，留给子类来实现。")]),s._v(" "),n("p",[s._v("completedAbruptly变量来表示在执行任务过程中是否出现了异常，在processWorkerExit方法中会对该变量的值进行判断。")]),s._v(" "),n("h3",{attrs:{id:"gettask方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gettask方法"}},[s._v("#")]),s._v(" getTask方法")]),s._v(" "),n("p",[s._v("getTask方法用来从阻塞队列中取任务，代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private Runnable getTask() {\n    // timeOut变量的值表示上次从阻塞队列中取任务时是否超时\n    boolean timedOut = false; // Did the last poll() time out?\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n        // Check if queue empty only if necessary.\n    /*\n     * 如果线程池状态rs >= SHUTDOWN，也就是非RUNNING状态，再进行以下判断：\n     * 1. rs >= STOP，线程池是否正在stop；\n     * 2. 阻塞队列是否为空。\n     * 如果以上条件满足，则将workerCount减1并返回null。\n     * 因为如果当前线程池状态的值是SHUTDOWN或以上时，不允许再向阻塞队列中添加任务。\n     */\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            decrementWorkerCount();\n            return null;\n        }\n        int wc = workerCountOf(c);\n        // Are workers subject to culling?\n        // timed变量用于判断是否需要进行超时控制。\n        // allowCoreThreadTimeOut默认是false，也就是核心线程不允许进行超时；\n        // wc > corePoolSize，表示当前线程池中的线程数量大于核心线程数量；\n        // 对于超过核心线程数量的这些线程，需要进行超时控制\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n    /*\n     * wc > maximumPoolSize的情况是因为可能在此方法执行阶段同时执行了setMaximumPoolSize方法；\n     * timed && timedOut 如果为true，表示当前操作需要进行超时控制，并且上次从阻塞队列中获取任务发生了超时\n     * 接下来判断，如果有效线程数量大于1，或者阻塞队列是空的，那么尝试将workerCount减1；\n     * 如果减1失败，则返回重试。\n     * 如果wc == 1时，也就说明当前线程是线程池中唯一的一个线程了。\n     */\n        if ((wc > maximumPoolSize || (timed && timedOut))\n                && (wc > 1 || workQueue.isEmpty())) {\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            continue;\n        }\n        try {\n        /*\n         * 根据timed来判断，如果为true，则通过阻塞队列的poll方法进行超时控制，如果在keepAliveTime时间内没有获取到任务，则返回null；\n         * 否则通过take方法，如果这时队列为空，则take方法会阻塞直到队列不为空。\n         *\n         */\n            Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n            if (r != null)\n                return r;\n            // 如果 r == null，说明已经超时，timedOut设置为true\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            // 如果获取任务时当前线程发生了中断，则设置timedOut为false并返回循环重试\n            timedOut = false;\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br")])]),n("p",[s._v("这里重要的地方是第二个if判断，目的是控制线程池的有效线程数量。由上文中的分析可以知道，在执行execute方法时，如果当前线程池的线程数量超过了corePoolSize且小于maximumPoolSize，并且workQueue已满时，则可以增加工作线程，但这时如果超时没有获取到任务，也就是timedOut为true的情况，说明workQueue已经为空了，也就说明了当前线程池中不需要那么多线程来执行任务了，可以把多于corePoolSize数量的线程销毁掉，保持线程数量在corePoolSize即可。")]),s._v(" "),n("p",[s._v("什么时候会销毁？当然是runWorker方法执行完之后，也就是Worker中的run方法执行完，由JVM自动回收。")]),s._v(" "),n("p",[s._v("getTask方法返回null时，在runWorker方法中会跳出while循环，然后会执行processWorkerExit方法。")]),s._v(" "),n("h3",{attrs:{id:"processworkerexit方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#processworkerexit方法"}},[s._v("#")]),s._v(" processWorkerExit方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private void processWorkerExit(Worker w, boolean completedAbruptly) {\n    // 如果completedAbruptly值为true，则说明线程执行时出现了异常，需要将workerCount减1；\n    // 如果线程执行时没有出现异常，说明在getTask()方法中已经已经对workerCount进行了减1操作，这里就不必再减了。  \n    if (completedAbruptly) // If abrupt, then workerCount wasn't adjusted\n        decrementWorkerCount();\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        //统计完成的任务数\n        completedTaskCount += w.completedTasks;\n        // 从workers中移除，也就表示着从线程池中移除了一个工作线程\n        workers.remove(w);\n    } finally {\n        mainLock.unlock();\n    }\n    // 根据线程池状态进行判断是否结束线程池\n    tryTerminate();\n    int c = ctl.get();\n/*\n * 当线程池是RUNNING或SHUTDOWN状态时，如果worker是异常结束，那么会直接addWorker；\n * 如果allowCoreThreadTimeOut=true，并且等待队列有任务，至少保留一个worker；\n * 如果allowCoreThreadTimeOut=false，workerCount不少于corePoolSize。\n */\n    if (runStateLessThan(c, STOP)) {\n        if (!completedAbruptly) {\n            int min = allowCoreThreadTimeOut ? 0 : corePoolSize;\n            if (min == 0 && ! workQueue.isEmpty())\n                min = 1;\n            if (workerCountOf(c) >= min)\n                return; // replacement not needed\n        }\n        addWorker(null, false);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[s._v("至此，processWorkerExit执行完之后，工作线程被销毁，以上就是整个工作线程的生命周期，从execute方法开始，Worker使用ThreadFactory创建新的工作线程，runWorker通过getTask获取任务，然后执行任务，如果getTask返回null，进入processWorkerExit方法，整个线程结束，如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/55.png",alt:""}})]),s._v(" "),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("ul",[n("li",[s._v("分析了线程的创建，任务的提交，状态的转换以及线程池的关闭；")]),s._v(" "),n("li",[s._v("这里通过execute方法来展开线程池的工作流程，execute方法通过corePoolSize，maximumPoolSize以及阻塞队列的大小来判断决定传入的任务应该被立即执行，还是应该添加到阻塞队列中，还是应该拒绝任务。")]),s._v(" "),n("li",[s._v("介绍了线程池关闭时的过程，也分析了shutdown方法与getTask方法存在竞态条件；")]),s._v(" "),n("li",[s._v("在获取任务时，要通过线程池的状态来判断应该结束工作线程还是阻塞线程等待新的任务，也解释了为什么关闭线程池时要中断工作线程以及为什么每一个worker都需要lock。")])]),s._v(" "),n("h2",{attrs:{id:"图片附录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图片附录"}},[s._v("#")]),s._v(" 图片附录")]),s._v(" "),n("h3",{attrs:{id:"线程池的执行流程-细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程池的执行流程-细节"}},[s._v("#")]),s._v(" 线程池的执行流程-细节")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/spring/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-%E7%BB%86%E8%8A%82%E7%B2%BE%E8%AE%B2.jpg",alt:"线程池的执行流程-细节精讲"}})])])}),[],!1,null,null,null);n.default=t.exports}}]);