(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{583:function(n,t,s){"use strict";s.r(t);var a=s(5),e=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"spring核心api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring核心api"}},[n._v("#")]),n._v(" Spring核心API")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("U2FsdGVkX18nOumNSd91SZ9FbOSPULp+W+jPyHF5IsarhKkY5nNTQsg7eux7Gusz\nupzObsEoi5ADEruF82qu73V+G5g+JHavu2tnaiwtE6CA8zrEjjfyIdMjaeGUur8c\n/Ls0A0v9O5PolN7tlh+EWVntOShwmqX/8sECxz/eFQ==\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h3",{attrs:{id:"beanfactory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory"}},[n._v("#")]),n._v(" BeanFactory")]),n._v(" "),t("p",[n._v("org.springframework.beans.factory")]),n._v(" "),t("p",[n._v("BeanFactory是用于访问Spring Bean容器的根接口，典型的工厂模式，用于生产Bean的一个Bean工厂，其提供了生产Bean所需的最基本规则。")]),n._v(" "),t("p",[n._v("BeanFactory的所有方法：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7408.png",alt:"0"}})]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7410.png",alt:"0"}})]),n._v(" "),t("h3",{attrs:{id:"beandefinition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition"}},[n._v("#")]),n._v(" BeanDefinition")]),n._v(" "),t("p",[t("strong",[n._v("功能")])]),n._v(" "),t("p",[n._v("BeanDefinition是bean在spring中的描述，有了BeanDefinition我们就可以创建Bean,BeanDefinition是Bean在spring中的定义形态 接下来我们看看BeanDefinition的相关接口与类.")]),n._v(" "),t("p",[t("strong",[n._v("方法")])]),n._v(" "),t("ul",[t("li",[n._v("String: getBeanClassName: 返回当前bean definition定义的类名")]),n._v(" "),t("li",[n._v("ConstructorArgumentValues: getConstructorArgumentValues:返回bean的构造函数参数")]),n._v(" "),t("li",[n._v("String[]: getDependsOn:返回当前bean所依赖的其他bean的名称")]),n._v(" "),t("li",[n._v("String: getFactoryBeanName: 返回factory bean的名称")]),n._v(" "),t("li",[n._v("String: getFactoryMethodName: 返回工厂方法的名称")]),n._v(" "),t("li",[n._v("BeanDefinition: getOriginatingBeanDefinition: 返回原始的BeanDefinition,如果不存在返回null")]),n._v(" "),t("li",[n._v("String: getParentName: 返回当前bean definition的父definition的名字")]),n._v(" "),t("li",[n._v("MutablePropertyValues: getPropertyValues: 返回一个用于新的bean实例上的属性值")]),n._v(" "),t("li",[n._v("String: getScope: 返回当前bean的目标范围")]),n._v(" "),t("li",[n._v("boolean: isAbstract: 当前bean是否是abstract,意味着不能被实例化")]),n._v(" "),t("li",[n._v("boolean: isLazyInit: bean是否是延迟初始化")]),n._v(" "),t("li",[n._v("boolean: isPrimary: bean是否为自动装配的主要候选bean")]),n._v(" "),t("li",[n._v("boolean: isPrototype: bean是否是多实例")]),n._v(" "),t("li",[n._v("boolean: isSingleton: bean是否是单例")]),n._v(" "),t("li",[n._v("void: setAutowiredCandidate(boolean): 设置bean是否对其他bean是自动装配的候选bean")]),n._v(" "),t("li",[n._v("void: setBeanClassName(String): 指定bean definition的类名")]),n._v(" "),t("li",[n._v("void: setDependsOn(String ...): 设置当前bean初始化所依赖的beans的名称")]),n._v(" "),t("li",[n._v("void: setFactoryBeanName(String): 如果factory bean的名称")]),n._v(" "),t("li",[n._v("void: setFactoryMethodName(String): 设置工厂的方法名")]),n._v(" "),t("li",[n._v("void: setLazyInit(boolean lazyInit): 设置是否延迟初始化")]),n._v(" "),t("li",[n._v("void: setParentName(String): 设置父definition的名称")]),n._v(" "),t("li",[n._v("void: setPrimary(boolean): 设置是否主要的候选bean")]),n._v(" "),t("li",[n._v("void: setScope(String): 设置bean的范围,如:单例,多实例")])]),n._v(" "),t("p",[n._v("定义")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("BeanDefinition接口")]),n._v(": 顶级基础接口,用来描述Bean,里面存放Bean元数据，比如Bean类名、scope、属性、构造函数参数列表、依赖的bean、是否是单例类、是否是懒加载等一些列信息。")])]),n._v(" "),t("p",[t("strong",[n._v("向上")])]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7425.png",alt:"0"}})]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("BeanMetadataElement接口")]),n._v("：BeanDefinition元数据，返回该Bean的来源")]),n._v(" "),t("li",[t("strong",[n._v("AttributeAccessor接口")]),n._v("：提供对BeanDefinition属性操作能力，")])]),n._v(" "),t("p",[t("strong",[n._v("向下")])]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"D:%5CFile%5Cnylg%5Cdocs%5C02.Spring%5C01.Spring!%5B%5D(https:%5Cgitee.com%5Cnylg%5Cpicture%5Craw%5Cmaster%5Cspring%5C7419.png)",alt:"0"}})]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("AbstractBeanDefinition类")]),n._v("：抽象类统一实现了BeanDefinition定义的一部分操作，可以说是定义了BeanDefinition很多默认的属性。 正是在AbstractBeanDefinition基础上， Spring衍生出了一些列BeaDefinition。")])]),n._v(" "),t("p",[n._v("这里我们可以关注下重写的equals(),hashcode(), toString()方法")]),n._v(" "),t("p",[n._v("此外initMethodName属性，destroyMethodName 属性， 这两个属性bean的生命周期有关，此处只提一句，后续讲解。")]),n._v(" "),t("p",[n._v("接下来。我们看看从AbstractBeanDefinition上衍生出来的几个类")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("RootBeanDefinition")]),n._v(": 代表一个xml,java Config来的BeanDefinition")]),n._v(" "),t("li",[t("strong",[n._v("ChildBeanDefinition")]),n._v(": 从Spring2.5开始，ChildBeanDefinition已经不再使用，取而代之的是GenericBeanDefinition。")]),n._v(" "),t("li",[t("strong",[n._v("GenericBeanDefinition:")]),n._v(" spring2.5后注册bean首选的是GenericBeanDefinition。GenericBeanDefinition允许动态的设置父bean.GenericBeanDefinition可以作为RootBeanDefinition与ChildBeanDefinition的替代品。")]),n._v(" "),t("li",[t("strong",[n._v("AnnotatedBeanDefinition接口")]),n._v("： 表示注解类型BeanDefinition。有两个重要的属性，AnnotationMetadata，MethodMetadata分别表示BeanDefinition的注解元信息和方法元信息 实现了此接口的BeanDefinition可以获取到注解元数据和方法元数据。")]),n._v(" "),t("li",[t("strong",[n._v("AnnotatedGenericBeanDefinition类")]),n._v(": 表示@Configuration注解注释的BeanDefinition类")]),n._v(" "),t("li",[t("strong",[n._v("ScannedGenericBeanDefinition类")]),n._v(": 表示@Component、@Service、@Controller等注解注释的Bean类")])]),n._v(" "),t("p",[n._v("操作")]),n._v(" "),t("p",[n._v("动作也可分为两种： 一种是针对自身的操作: 自提提供给外部的可以操作其本身的动作 另一种是外部对BeanDefinition的操作")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("BeanDefinitionRegistry接口")]),n._v("：具有增，查，删BeanDefinition的能力。一次只能注册一个BeanDefinition.")])]),n._v(" "),t("p",[n._v("实现类SimpleBeanDefinitionRegistry，DefaultListableBeanFactory，GenericApplicationContext等 一般实现类里都都有一个 private final Map beanDefinitionMap = new ConcurrentHashMap()来存储BeanDefinition.")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/image-20220617133628271.png",alt:"image-20220617133628271"}})]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("BeanDefinitionReader接口")]),n._v("： 既可以使用BeanDefinitionRegistry构造。也可以通过loadBeanDefinitions把配置加载为多个BeanDefinition并注册到BeanDefinitionRegistry中。 可以说是高效版本的BeanDefinitionRegistry. 实现类有 XmlBeanDefinitionReader从xml中读取BeanDefinition； PropertiesBeanDefinitionReader从Properties文件读取BeanDefinition")]),n._v(" "),t("li",[t("strong",[n._v("AnnotatedBeanDefinitionReader类")]),n._v(" 对带有注解的BeanDefinition进行注册")]),n._v(" "),t("li",[t("strong",[n._v("ClassPathBeanDefinitionScanner类")]),n._v("： 可以扫描到"),t("a",{attrs:{href:"https://my.oschina.net/u/3907912",target:"_blank",rel:"noopener noreferrer"}},[n._v("@Component"),t("OutboundLink")],1),n._v(" @Repository @Service @Controller 的BeanDefinition注册到容器中。")])]),n._v(" "),t("p",[n._v("其他形态")]),n._v(" "),t("ul",[t("li",[n._v("BeanDefinitionHolder： BeanDefinition包装类。")])]),n._v(" "),t("p",[n._v("Bean")]),n._v(" "),t("p",[n._v("Bean是我们需要的对象，是我们从spring内得到的结果，也就是对象实例")]),n._v(" "),t("p",[n._v("定义")]),n._v(" "),t("p",[n._v("从定义层面看.Bean其实就是我们需要的对象.")]),n._v(" "),t("p",[n._v("操作")]),n._v(" "),t("p",[n._v("我们来看看Bean在spring有哪些操作相关的接口或类。")]),n._v(" "),t("ul",[t("li",[n._v("SingletonBeanRegistry接口：与BeanDefinition的注册相应的。Bean的操作也有一个类似的接口来操作Bean.SingletonBeanRegistry接口提供了对Bean的注册，获取，存在性判断等功能。")]),n._v(" "),t("li",[n._v("InitializingBean:对于实现 InitializingBean的Bean，它将执行 afterPropertiesSet(); 在所有的 bean 属性被设置之后。")]),n._v(" "),t("li",[n._v("InstantiationStrategy:提供 Bean实例化的策略接口，")]),n._v(" "),t("li",[n._v("DisposableBean:对于 实现了DisposableBean的Bean ，它将运行 destroy()在 Spring 容器释放该 bean 之后")]),n._v(" "),t("li",[n._v("FactoryBean: 生产Bean的Bean.")])]),n._v(" "),t("p",[n._v("其他形态")]),n._v(" "),t("ul",[t("li",[n._v("BeanWrapper: 对Bean的包装.BeanWrapper可以看作是一个从 BeanDefinition 到 Bean 过程中间的产物，可以称为”低级 bean“，在一般情况下，我们不会在实际项目中用到它。BeanWrapper 是 Spring 框架中重要的组件类，它就相当于一个代理类，Spring 委托 BeanWrapper 完成 Bean 属性的填充工作。在 bean 实例被 InstantiatioonStrategy 创建出来后，Spring 容器会将 Bean 实例通过 BeanWrapper 包裹起来，是通过 BeanWrapper.setWrappedInstance() 完成的")])]),n._v(" "),t("p",[n._v("总结：")]),n._v(" "),t("p",[n._v("BeanDefinition是物料，Bean是成品，理解BeanDefinition与Bean的关系是理解spring的基础。")]),n._v(" "),t("h3",{attrs:{id:"aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[n._v("#")]),n._v(" AOP")]),n._v(" "),t("p",[t("strong",[n._v("Pointcut家族")])]),n._v(" "),t("p",[t("strong",[n._v("它是Spring AOP对切点的一个顶层首相，非常的重要。")])]),n._v(" "),t("p",[n._v("首先得看看这个顶级接口抽象的图谱：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7409.png",alt:"0"}})]),n._v(" "),t("p",[n._v("这里面有一个非常重要得子接口：ExpressionPointcut，它是用于解析String类型的切点表达式的接口（这也是我们使用得最最最多的）")]),n._v(" "),t("p",[t("strong",[n._v("Pointcut接口分析")])]),n._v(" "),t("p",[n._v("**主要负责对系统的相应的Joinpoint进行捕捉，对系统中所有的对象进行Joinpoint所定义的规则进行匹配。**提供了一个TruePointcut实例，当Pointcut为TruePointcut类型时，则会忽略所有的匹配条件，永远返回true")]),n._v(" "),t("p",[n._v("显然可以看出，这个接口和ClassFilter和MethodMatcher有关系")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public interface Pointcut {\n\n\tClassFilter getClassFilter();\n\tMethodMatcher getMethodMatcher();\n\t/**\n\t * Canonical Pointcut instance that always matches.\n\t * 意思是：用于匹配上的一个实例（意思是永远返回true嘛）\n\t */\n\tPointcut TRUE = TruePointcut.INSTANCE;\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("p",[n._v("ClassFilter与MethodMatcher分别用于在不同的级别上限定Joinpoint的匹配范围，满足不同粒度的匹配")]),n._v(" "),t("p",[t("strong",[n._v("ClassFilter限定在类级别上，MethodMatcher限定在方法级别上")])]),n._v(" "),t("p",[n._v("SpringAop主要支持在方法级别上的匹配，所以对类级别的匹配支持相对简单一些")]),n._v(" "),t("p",[t("strong",[n._v("ClassFilter")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@FunctionalInterface\npublic interface ClassFilter {\n\n\t// true表示能够匹配。那就会进行织入的操作\n\tboolean matches(Class<?> clazz);\n\t// 常量 会匹配所有的类   TrueClassFilter不是public得class，所以只是Spring内部自己使用的\n\tClassFilter TRUE = TrueClassFilter.INSTANCE;\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("p",[n._v("Spring给他的实现类也比较多，如下：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7420.png",alt:"0"}})]),n._v(" "),t("p",[t("strong",[n._v("RootClassFilter")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public class RootClassFilter implements ClassFilter, Serializable {\n\n\tprivate Class<?> clazz;\n\tpublic RootClassFilter(Class<?> clazz) {\n\t\tthis.clazz = clazz;\n\t}\n\t// 显然，传进来的candidate必须是clazz的子类才行\n\t@Override\n\tpublic boolean matches(Class<?> candidate) {\n\t\treturn clazz.isAssignableFrom(candidate);\n\t}\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("AnnotationClassFilter")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class AnnotationClassFilter implements ClassFilter {\n\t...\n\tpublic AnnotationClassFilter(Class<? extends Annotation> annotationType) {\n\t\t// 默认情况下checkInherited给的false：不去看它继承过来的注解\n\t\tthis(annotationType, false);\n\t}\n\t// checkInherited true：表示继承过来得注解也算\n\tpublic AnnotationClassFilter(Class<? extends Annotation> annotationType, boolean checkInherited) {\n\t\tAssert.notNull(annotationType, "Annotation type must not be null");\n\t\tthis.annotationType = annotationType;\n\t\tthis.checkInherited = checkInherited;\n\t}\n\t...\n\t@Override\n\tpublic boolean matches(Class<?> clazz) {\n\t\treturn (this.checkInherited ?\n\t\t\t\t// 继承的注解也会找出来\n\t\t\t\t(AnnotationUtils.findAnnotation(clazz, this.annotationType) != null) :\n\t\t\t\t// 只会看自己本类的注解\n\t\t\t\tclazz.isAnnotationPresent(this.annotationType));\n\t}\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("AspectJExpressionPointcut")])]),n._v(" "),t("p",[n._v("它既是个Pointcut，它也是个ClassFilter，下面会详细分析本类")]),n._v(" "),t("p",[t("strong",[n._v("MethodMatcher")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public interface MethodMatcher {\n\t\n\t// 这个称为静态匹配：在匹配条件不是太严格时使用，可以满足大部分场景的使用\n\tboolean matches(Method method, @Nullable Class<?> targetClass);\n\t// 这个称为动态匹配（运行时匹配）: 它是严格的匹配。在运行时动态的对参数的类型进行匹配\n\tboolean matches(Method method, @Nullable Class<?> targetClass, Object... args);\n\t\n\t//两个方法的分界线就是boolean isRuntime()方法，步骤如下\n\t// 1、先调用静态匹配，若返回true。此时就会继续去检查isRuntime()的返回值\n\t// 2、若isRuntime()还返回true，那就继续调用动态匹配\n\t// (若静态匹配都匹配上，动态匹配那铁定更匹配不上得~~~~)\n\n\t// 是否需要执行动态匹配\n\tboolean isRuntime();\n\tMethodMatcher TRUE = TrueMethodMatcher.INSTANCE;\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br")])]),t("p",[n._v("应用场景：比如需要统计用户登录次数时，那么登录传入的参数就是可以忽略的，则静态匹配就足够了")]),n._v(" "),t("p",[n._v("但是若要在登陆时对用户账号执行特殊的操作**（如赋予特殊的操作权限）**，就需要对参数进行一个类似于检验的操作，因此需要动态匹配")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7411.png",alt:"0"}})]),n._v(" "),t("p",[n._v("它有两个非常重要的抽象实现：StaticMethodMatcher和DynamicMethodMatcher")]),n._v(" "),t("p",[t("strong",[n._v("StaticMethodMatcher 静态匹配")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public abstract class StaticMethodMatcher implements MethodMatcher {\n\t// 永远返回false表示只会去静态匹配\n\t@Override\n\tpublic final boolean isRuntime() {\n\t\treturn false;\n\t}\n\t// 三参数matches抛出异常，使其不被调用\n\t@Override\n\tpublic final boolean matches(Method method, @Nullable Class<?> targetClass, Object... args) {\n\t\t// should never be invoked because isRuntime() returns false\n\t\tthrow new UnsupportedOperationException("Illegal MethodMatcher usage");\n\t}\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("作用：它表示不会考虑具体 方法参数。因为不用每次都检查参数，那么对于同样的类型的方法匹配结果，就可以在框架内部缓存以提高性能。比如常用的实现类：AnnotationMethodMatcher")]),n._v(" "),t("p",[t("strong",[n._v("DynamicMethodMatcher 动态匹配")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public abstract class DynamicMethodMatcher implements MethodMatcher {\n\t\n\t// 永远返回true\n\t@Override\n\tpublic final boolean isRuntime() {\n\t\treturn true;\n\t}\n\t// 永远返回true，去匹配动态匹配的方法即可\n\t@Override\n\tpublic boolean matches(Method method, @Nullable Class<?> targetClass) {\n\t\treturn true;\n\t}\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("说明：因为每次都要对方法参数进行检查，无法对匹配结果进行缓存，所以，匹配效率相对 StatisMethodMatcher 来说要差，但匹配度更高。(实际使用得其实较少)")]),n._v(" "),t("p",[t("strong",[n._v("JdkRegexpMethodPointcut：基于正则的Pointcut")])]),n._v(" "),t("p",[n._v("Spring官方为我们提供了一个基于正则表达式来匹配方法名的Pointcut，JdkRegexpMethodPointcut。")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7413.png",alt:"0"}})]),n._v(" "),t("p",[n._v("它提供了最重要的4个属性("),t("strong",[n._v("patterns和excludedPatterns")]),n._v("来自于父类AbstractRegexpMethodPointcut)：")]),n._v(" "),t("p",[n._v("这里昂个属性来自于父类，相对来说就是比较简单的匹配signatureString（方法的全路径名称）")]),n._v(" "),t("ul",[t("li",[n._v("String[] patterns：匹配的正则表达式。如find.*表示所有方法名以find开始的方法")]),n._v(" "),t("li",[n._v("String[] excludedPatterns：排除的正则表达式们")])]),n._v(" "),t("p",[n._v("下面两个是子类，也就是JdkRegexpMethodPointcut自己提供的属性")]),n._v(" "),t("ul",[t("li",[n._v("Pattern[] compiledPatterns：相当于把正则字符串，Pattern.compile()成正则对象")]),n._v(" "),t("li",[n._v("Pattern[] compiledExclusionPatterns：同上")])]),n._v(" "),t("p",[n._v("都是数组，正则表达式都可以多个哟~~")]),n._v(" "),t("p",[t("strong",[n._v("需要注意的是，这两组含义相同，请不要同时跨组使用，没有意义，没必要深究。")])]),n._v(" "),t("p",[n._v("这种切点表达式，在早期Spring中的使用较多，一般这么使用：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('\x3c!-- 自己书写的日志切面 --\x3e\n<bean id="logBeforeAdvice" class="com.fsx.aop.LogBeforeAdvice" />\n\n\x3c!-- 使用JDK的正则切点~~~~~~ --\x3e\n<bean id="regexPointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut">\n    <property name="patterns">\n         <list>\n             <value>find.*</value>\x3c!-- 拦截所有方法名以find开始的方法 --\x3e\n         </list>\n    </property>\n</bean>\n\n\x3c!-- 切面+切点  组合成一个增强器即可~~~~~~ --\x3e\n<aop:config>\n     <aop:advisor advice-ref="logBeforeAdvice" pointcut-ref="regexPointcut"/>\n </aop:config>\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br")])]),t("p",[n._v("其实Spring为我们提供了一个简便的Advisor定义，"),t("strong",[n._v("可以方便的让我们同时指定一个")]),n._v("JdkRegexpMethodPointcut和其需要对应的Advice，它就是RegexpMethodPointcutAdvisor，这样配置起来非常的方便")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('\t<bean id="logBeforeAdvice" class="com.fsx.aop.LogBeforeAdvice" />\n    <bean class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">\n        <property name="advice" ref="logBeforeAdvice"/>\n        <property name="pattern" value="find.*"/>\n    </bean>\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7418.png",alt:"0"}})]),n._v(" "),t("p",[n._v("这个举例事基于XML的，之前我们都是这么来用的。那么现在用Java代码的方式也实现一遍（不需要Spring容器）：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(' public static void main(String[] args) {\n\n        ProxyFactory factory = new ProxyFactory(new Person());\n\n        //声明一个aspectj切点,一张切面\n        JdkRegexpMethodPointcut cut = new JdkRegexpMethodPointcut();\n        //cut.setPattern("com.fsx.maintest.Person.run"); //它会拦截Person类下所有run的方法（无法精确到方法签名）\n        //cut.setPattern(".*run.*");//.号匹配除"\\r\\n"之外的任何单个字符。*号代表零次或多次匹配前面的字符或子表达式  所以它拦截任意包下任意类的run方法\n        cut.setPatterns(new String[]{".*run.*", ".*say.*"}); //可以配置多个正则表达  式...  sayHi方法也会被拦截 \n\n        // 声明一个通知（此处使用环绕通知 MethodInterceptor ）\n        Advice advice = (MethodInterceptor) invocation -> {\n            System.out.println("============>放行前拦截...");\n            Object obj = invocation.proceed();\n            System.out.println("============>放行后拦截...");\n            return obj;\n        };\n\n        //切面=切点+通知\n        // 它还有个构造函数：DefaultPointcutAdvisor(Advice advice); 用的切面就是Pointcut.TRUE，所以如果你要指定切面，请使用自己指定的构造函数\n        // Pointcut.TRUE：表示啥都返回true，也就是说这个切面作用于所有的方法上/所有的方法\n        // addAdvice();方法最终内部都是被包装成一个 `DefaultPointcutAdvisor`，且使用的是Pointcut.TRUE切面，因此需要注意这些区别  相当于new DefaultPointcutAdvisor(Pointcut.TRUE,advice);\n        Advisor advisor = new DefaultPointcutAdvisor(cut, advice);\n        factory.addAdvisor(advisor);\n        Person p = (Person) factory.getProxy();\n\n        // 执行方法\n        p.run();\n        p.run(10);\n        p.say();\n        p.sayHi("Jack");\n        p.say("Tom", 666);\n\n    }\n}\n\nclass Person {\n\n    public int run() {\n        System.out.println("我在run...");\n        return 0;\n    }\n\n    public void run(int i) {\n        System.out.println("我在run...<" + i + ">");\n    }\n\n    public void say() {\n        System.out.println("我在say...");\n    }\n\n    public void sayHi(String name) {\n        System.out.println("Hi," + name + ",你好");\n    }\n\n    public int say(String name, int i) {\n        System.out.println(name + "----" + i);\n        return 0;\n    }\n\n}\n输出：\n============>放行前拦截...\n我在run...\n============>放行后拦截...\n============>放行前拦截...\n我在run...<10>\n============>放行后拦截...\n============>放行前拦截...\n我在say...\n============>放行后拦截...\n============>放行前拦截...\nHi,Jack,你好\n============>放行后拦截...\n============>放行前拦截...\nTom----666\n============>放行后拦截...\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br")])]),t("p",[n._v("最后需要注意的是：RegexpMethodPointcutAdvisor没有提供不匹配的正则表达式注入方法，即没有excludedPatterns注入，"),t("strong",[n._v("如果需要该功能请还是使用JdkRegexpMethodPointcut")]),n._v("。")]),n._v(" "),t("p",[t("strong",[n._v("AspectJExpressionPointcut详细使用和分析")])]),n._v(" "),t("p",[n._v("AspectJExpressionPointcut如字面，它和Expression有关，而这个切点表达式，最终还是依赖于AspectJ的jar包去解析的~~~~ Spring在使用@Aspect注解时，会大量的用到它")]),n._v(" "),t("p",[n._v("用AspectJExpressionPointcut实现的切点比JdkRegexpMethodPointcut实现切点的好处就是，在设置切点的时候可以用切点语言来"),t("strong",[n._v("更加精确的")]),n._v("表示拦截哪个方法。（可以精确到返回参数，参数类型，方法名,当然，也可以模糊匹配）")]),n._v(" "),t("p",[t("strong",[n._v("纯Java方式Demo：")])]),n._v(" "),t("p",[n._v("下面我先用一个纯Java的方式的例子，先体验一把：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public static void main(String[] args) {\n        //String pointcutExpression = "execution( int com.fsx.maintest.Person.run() )"; // 会拦截Person.run()方法\n        //String pointcutExpression = "args()"; // 所有没有入参的方法会被拦截。  比如：run()会拦截,但是run(int i)不会被拦截\n        // ... AspectJExpressionPointcut支持的表达式 一共有11种（也就是Spring全部支持的切点表达式类型）\n        String pointcutExpression = "@annotation(org.springframework.test.context.transaction.AfterTransaction)"; // 拦截上方法标有@AfterTransaction此注解的任意方法们\n\n\n        // =============================================================\n        ProxyFactory factory = new ProxyFactory(new Person());\n\n        //声明一个aspectj切点,一张切面\n        AspectJExpressionPointcut cut = new AspectJExpressionPointcut();\n        cut.setExpression(pointcutExpression); // 设置切点表达式\n\n        // 声明一个通知（此处使用环绕通知 MethodInterceptor ）\n        Advice advice = (MethodInterceptor) invocation -> {\n            System.out.println("============>放行前拦截...");\n            Object obj = invocation.proceed();\n            System.out.println("============>放行后拦截...");\n            return obj;\n        };\n\n        //切面=切点+通知\n        // 它还有个构造函数：DefaultPointcutAdvisor(Advice advice); 用的切面就是Pointcut.TRUE，所以如果你要指定切面，请使用自己指定的构造函数\n        // Pointcut.TRUE：表示啥都返回true，也就是说这个切面作用于所有的方法上/所有的方法\n        // addAdvice();方法最终内部都是被包装成一个 `DefaultPointcutAdvisor`，且使用的是Pointcut.TRUE切面，因此需要注意这些区别  相当于new DefaultPointcutAdvisor(Pointcut.TRUE,advice);\n        Advisor advisor = new DefaultPointcutAdvisor(cut, advice);\n        factory.addAdvisor(advisor);\n        Person p = (Person) factory.getProxy();\n\n        // 执行方法\n        p.run();\n        p.run(10);\n        p.say();\n        p.sayHi("Jack");\n        p.say("Tom", 666);\n\n    }\n\n}\n\nclass Person {\n\n    @AfterTransaction\n    public int run() {\n        System.out.println("我在run...");\n        return 0;\n    }\n\n    public void run(int i) {\n        System.out.println("我在run...<" + i + ">");\n    }\n\n    public void say() {\n        System.out.println("我在say...");\n    }\n\n    public void sayHi(String name) {\n        System.out.println("Hi," + name + ",你好");\n    }\n\n    public int say(String name, int i) {\n        System.out.println(name + "----" + i);\n        return 0;\n    }\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("如上面的图，其实Spring也我们提供了AspectJExpressionPointcutAdvisor来专门处理基于AspectJ的通知+切点的")]),n._v(" "),t("p",[t("strong",[n._v("XML方式")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class Person {\n\n    @AfterTransaction\n    public int run() {\n        System.out.println("我在run...");\n        return 0;\n    }\n\n    public void run(int i) {\n        System.out.println("我在run...<" + i + ">");\n    }\n\n    public void say() {\n        System.out.println("我在say...");\n    }\n\n    public void sayHi(String name) {\n        System.out.println("Hi," + name + ",你好");\n    }\n\n    public int say(String name, int i) {\n        System.out.println(name + "----" + i);\n        return 0;\n    }\n\n}\n\n// 相当于准备了一个Advice\npublic class MyMethodInteceptor implements MethodInterceptor {\n\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        System.out.println("============>放行前拦截...");\n        Object obj = invocation.proceed();\n        System.out.println("============>放行后拦截...");\n        return obj;\n    }\n}\n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br")])]),t("p",[n._v("书写Spring的xml配置文件：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    \x3c!-- 作为示例，这是需要被切入的目标类 --\x3e\n    <bean class="com.fsx.bean.Person"/>\n\n    \x3c!-- 切面=切点+通知 (采用面向切点语言进行配置切面)   此处为了便捷 直接使用 AspectJExpressionPointcutAdvisor --\x3e\n    <bean id="advisor" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">\n        <property name="expression"\n                  value="@annotation(org.springframework.test.context.transaction.AfterTransaction)"></property>\n\n        \x3c!-- 一个Advisor里面对应一个advice~~~ --\x3e\n        <property name="advice">\n            <bean class="com.fsx.aop.MyMethodInteceptor"/>\n        </property>\n    </bean>\n</beans>\n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("把该xml配置文件导入Config配置类，让它生效")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('...\n@Configuration\n@ImportResource(locations = "classpath:spring.xml")\npublic class RootConfig { ... }\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br")])]),t("p",[n._v("启动Spring容器（采用JUnit测试）：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = {RootConfig.class})\npublic class TestSpringBean {\n\n    @Autowired\n    private Person p;\n\n    @Test\n    public void test1() {\n\n        System.out.println(p.getClass()); //class com.fsx.bean.Person$$EnhancerBySpringCGLIB$$cba1d735\n\n        p.run();\n        p.run(10);\n        p.say();\n        p.sayHi("Jack");\n        p.say("Tom", 666);\n    }\n}\n\n输出：\nclass com.fsx.bean.Person$$EnhancerBySpringCGLIB$$cba1d735 // 说明它是CGLIB的代理\n============>放行前拦截...\n我在run...\n============>放行后拦截...\n我在run...<10>\n我在say...\nHi,Jack,你好\nTom----666\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br")])]),t("p",[n._v("备注：此xml的配置方式其实是最原始的Spring AOP的使用。并没有使用到、这种标签注解，关于使用它们的xml配置方式，此处不做过多介绍了~~~因为也比较简单~")]),n._v(" "),t("p",[t("strong",[n._v("AspectJExpressionPointcut****源码分析")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 很容易发现，自己即是ClassFilter，也是MethodMatcher   \n// 它是子接口:ExpressionPointcut的实现类\npublic class AspectJExpressionPointcut extends AbstractExpressionPointcut\n\t\timplements ClassFilter, IntroductionAwareMethodMatcher, BeanFactoryAware {\n\t\t...\n\t\tprivate static final Set<PointcutPrimitive> SUPPORTED_PRIMITIVES = new HashSet<>();\n\t\t\n\t// 从此处可以看出，Spring支持的AspectJ的切点语言表达式一共有10中（加上后面的自己的Bean方式一共11种）\n\t// AspectJ框架本省支持的非常非常多，详解枚举类：org.aspectj.weaver.tools.PointcutPrimitive\n\tstatic {\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.EXECUTION);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.ARGS);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.REFERENCE);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.THIS);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.TARGET);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.WITHIN);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.AT_ANNOTATION);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.AT_WITHIN);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.AT_ARGS);\n\t\tSUPPORTED_PRIMITIVES.add(PointcutPrimitive.AT_TARGET);\n\t}\n\t...\n\t\t\n\t// 它持有BeanFactory 的引用，但是是可以为null的，也就是说它脱离容器也能够正常work\n\t@Nullable\n\tprivate BeanFactory beanFactory;\n\t...\n\t// PointcutExpression是org.aspectj.weaver.tools.PointcutExpression是AspectJ的类\n\t// 它最终通过一系列操作，由org.aspectj.weaver.tools.PointcutParser#parsePointcutExpression从字符串表达式解析出来\n\t@Nullable\n\tprivate transient PointcutExpression pointcutExpression;\n\t\n\t...\n\t// 由此可见，我们不仅仅可议写&& ||  !这种。也支持 and or not这种哦~~~\n\tprivate String replaceBooleanOperators(String pcExpr) {\n\t\tString result = StringUtils.replace(pcExpr, " and ", " && ");\n\t\tresult = StringUtils.replace(result, " or ", " || ");\n\t\tresult = StringUtils.replace(result, " not ", " ! ");\n\t\treturn result;\n\t}\n\t...\n\t// 这是ClassFilter 匹配类。借助的PointcutExpression#couldMatchJoinPointsInType 去匹配\n\tpublic boolean matches(Class<?> targetClass) { ... }\n\t// MethodMatcher 匹配方法，借助的PointcutExpression和ShadowMatch去匹配的\n\tpublic boolean matches(Method method, @Nullable Class<?> targetClass, boolean hasIntroductions) { ... }\n\t@Override\n\tpublic boolean isRuntime() {\n\t\t//mayNeedDynamicTest 相当于由AspectJ框架去判断的（是否有动态内容）\n\t\treturn obtainPointcutExpression().mayNeedDynamicTest();\n\t}\n\t...\n\n\t// 初始化一个Pointcut的解析器。我们发现最后一行，新注册了一个BeanPointcutDesignatorHandler  它是准们处理Spring自己支持的bean() 的切点表达式的\n\tprivate PointcutParser initializePointcutParser(@Nullable ClassLoader classLoader) {\n\t\tPointcutParser parser = PointcutParser\n\t\t\t\t.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(\n\t\t\t\t\t\tSUPPORTED_PRIMITIVES, classLoader);\n\t\tparser.registerPointcutDesignatorHandler(new BeanPointcutDesignatorHandler());\n\t\treturn parser;\n\t}\n\n\t// 真正的解析，依赖于Spring自己实现的这个内部类（主要是ContextBasedMatcher 这个类，就会使用到BeanFactory了）\n\tprivate class BeanPointcutDesignatorHandler implements PointcutDesignatorHandler {\n\n\t\tprivate static final String BEAN_DESIGNATOR_NAME = "bean";\n\t\t@Override\n\t\tpublic String getDesignatorName() {\n\t\t\treturn BEAN_DESIGNATOR_NAME;\n\t\t}\n\t\t// ContextBasedMatcher由Spring自己实现，对容器内Bean的匹配\n\t\t@Override\n\t\tpublic ContextBasedMatcher parse(String expression) {\n\t\t\treturn new BeanContextMatcher(expression);\n\t\t}\n\t}\n\n}\n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("NameMatchMethodPointcut")])]),n._v(" "),t("p",[n._v("如果创建切入点时候，我们往往"),t("strong",[n._v("只需要方法名字匹配")]),n._v("，无需理会方法的签名和返回类型，这种情况下，我们可以使用 NameMatchMethodPointCut方法名字匹配切入点。（这种功能最弱，但显然效率是最高的）")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class Main {\n\n    public static void main(String[] args) {\n        ProxyFactory factory = new ProxyFactory(new Person());\n\n\n\n\n\n        // 声明一个通知（此处使用环绕通知 MethodInterceptor ）\n        Advice advice = (MethodInterceptor) invocation -> {\n            System.out.println("============>放行前拦截...");\n            Object obj = invocation.proceed();\n            System.out.println("============>放行后拦截...");\n            return obj;\n        };\n        声明一个aspectj切点,一张切面\n        //NameMatchMethodPointcut cut = new NameMatchMethodPointcut();\n        //cut.setMappedName("run"); //会匹配所有的方法名为run的方法\n         切点+通知\n        //Advisor advisor = new DefaultPointcutAdvisor(cut, advice);\n\n        NameMatchMethodPointcutAdvisor advisor = new NameMatchMethodPointcutAdvisor();\n        advisor.setMappedName("run");\n        advisor.setAdvice(advice);\n\n        factory.addAdvisor(advisor);\n        Person p = (Person) factory.getProxy();\n\n        // 执行方法\n        p.run();\n        p.run(10);\n        p.say();\n        p.sayHi("Jack");\n        p.say("Tom", 666);\n\n    }\n\n}\n输出：\n============>放行前拦截...\n我在run...\n============>放行后拦截...\n============>放行前拦截...\n我在run...<10>\n============>放行后拦截...\n我在say...\nHi,Jack,你好\nTom----666\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br")])]),t("p",[t("strong",[n._v("其它Pointcut")])]),n._v(" "),t("p",[n._v("上面已经介绍了Spring中使用得比较多的Pointcut，接下来简单的讲述一下稍微偏门些的Pointcut。")]),n._v(" "),t("p",[n._v("从顶部的pointcut的继承图中可以看出，有很多实现类。")]),n._v(" "),t("p",[t("strong",[n._v("ControlFlowPointCut：流程切入点")])]),n._v(" "),t("p",[n._v("如果有这样的特殊需求：我们对一个方法进行切入通知，但只有这个方法"),t("strong",[n._v("在一个特定方法中被调用的时候执行通知（即存在流程上行的依赖关系）")]),n._v("，我们可以使用ControlFlowPointCut流程切入点")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class Main {\n\n    public static void main(String[] args) {\n        ProxyFactory factory = new ProxyFactory(new Person());\n\n        // 声明一个通知（此处使用环绕通知 MethodInterceptor ）\n        Advice advice = (MethodInterceptor) invocation -> {\n            System.out.println("============>放行前拦截...");\n            Object obj = invocation.proceed();\n            System.out.println("============>放行后拦截...");\n            return obj;\n        };\n        声明一个aspectj切点,一张切面\n        // 含义：Main类里面，方法名为funabc执行时，内部调用的任何代理的方法都会被拦截~~~ 它控制的是整个流程\n        ControlFlowPointcut cut = new ControlFlowPointcut(Main.class, "funabc");\n\n        // 切点+通知\n        Advisor advisor = new DefaultPointcutAdvisor(cut, advice);\n        factory.addAdvisor(advisor);\n        Person p = (Person) factory.getProxy();\n\n        // 执行方法\n        p.run();\n        p.run(10);\n        p.say();\n        p.sayHi("Jack");\n        p.say("Tom", 666);\n\n        // 此处调用Main类，方法名为funabc的方法。内部代理对象的方法就都会被拦截上了\n        funabc(p);\n    }\n\n    private static void funabc(Person person) {\n        person.run();\n        person.say();\n    }\n\n}\n\n输出：\n我在run...\n我在run...<10>\n我在say...\nHi,Jack,你好\nTom----666\n============>放行前拦截...\n我在run...\n============>放行后拦截...\n============>放行前拦截...\n我在say...\n============>放行后拦截...\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("使用流程切入点有时候可以解决不少问题，但值得注意的是：")]),n._v(" "),t("p",[n._v("使用流程切入点在jdk1.4中比其他切入点要慢5倍，在1.3上则要慢10倍，追求高性能的"),t("strong",[n._v("要慎重使用")])]),n._v(" "),t("p",[t("strong",[n._v("ComposablePointcut 组合切入点")])]),n._v(" "),t("p",[n._v("从上面的例子中，每次我们只能定义一个切入点（切点表达式）。有的时候，一个切点可能难以描述目标连接点的信息，而是需要同时满足两个切入点才行，那么ComposablePointcut就派上了用场（"),t("strong",[n._v("aspectJ里面的&& ||等其实也能达到类似的效果")]),n._v("）。")]),n._v(" "),t("p",[n._v("但是更好的方式是使用Spring提供的ComposalbePointcut把两个切点组合起来，通过切点的复合运行算表示，ComposalbePointcut可以将多个切点以并集或者交集的方式组合起来，提供切点之间复合运算的功能。")]),n._v(" "),t("p",[n._v("先看一个Demo：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class Main {\n\n    public static void main(String[] args) {\n        ProxyFactory factory = new ProxyFactory(new Person());\n\n        // 声明一个通知（此处使用环绕通知 MethodInterceptor ）\n        Advice advice = (MethodInterceptor) invocation -> {\n            System.out.println("============>放行前拦截...");\n            Object obj = invocation.proceed();\n            System.out.println("============>放行后拦截...");\n            return obj;\n        };\n\n        // 先创建一个流程切入点\n        ControlFlowPointcut controlFlowPointcut = new ControlFlowPointcut(Main.class, "funabc");\n        // 再创建一个方法名切入点\n        NameMatchMethodPointcut nameMatchMethodPointcut = new NameMatchMethodPointcut();\n        nameMatchMethodPointcut.addMethodName("say");\n\n        // 创建一个复合切点 把上面两者并且进来\n        ComposablePointcut cut = new ComposablePointcut();\n        cut.intersection((Pointcut) controlFlowPointcut).intersection((Pointcut)nameMatchMethodPointcut);\n\n        // 切点+通知（注意：此处放的是复合切面）\n        Advisor advisor = new DefaultPointcutAdvisor(cut, advice);\n        factory.addAdvisor(advisor);\n        Person p = (Person) factory.getProxy();\n\n        // 执行方法\n        p.run();\n        p.run(10);\n        p.say();\n        p.sayHi("Jack");\n        p.say("Tom", 666);\n\n        funabc(p);\n    }\n\n    private static void funabc(Person person) {\n        person.run();\n        person.say();\n\n    }\n\n}\n\n输出：\n我在run...\n我在run...<10>\n我在say...\nHi,Jack,你好\nTom----666\n我在run...\n============>放行前拦截...\n我在say...\n============>放行后拦截...\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br")])]),t("p",[n._v("从结果中和上面对比我们能看出，两个切入点有并且的效果。（只有say方法被拦截了，run方法并没有被拦截）")]),n._v(" "),t("p",[t("strong",[n._v("ComposablePointcut 源码分析")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class ComposablePointcut implements Pointcut, Serializable {\n\n\t// 它持有ClassFilter 和 MethodMatcher ，最终通过它去组合匹配\n\tprivate ClassFilter classFilter;\n\tprivate MethodMatcher methodMatcher;\n\n\t// 构造函数一个共5个\n\n\t// 匹配所有类所有方法的复合切点\n\tpublic ComposablePointcut() {\n\t\tthis.classFilter = ClassFilter.TRUE;\n\t\tthis.methodMatcher = MethodMatcher.TRUE;\n\t}\n\t// 匹配特定切点的复合切点（相当于把这个节点包装了一下而已）\n\tpublic ComposablePointcut(Pointcut pointcut) {\n\t\tAssert.notNull(pointcut, "Pointcut must not be null");\n\t\tthis.classFilter = pointcut.getClassFilter();\n\t\tthis.methodMatcher = pointcut.getMethodMatcher();\n\t}\n\t// 匹配特定类**所有方法**的复合切点\n\tpublic ComposablePointcut(ClassFilter classFilter) {\n\t\tAssert.notNull(classFilter, "ClassFilter must not be null");\n\t\tthis.classFilter = classFilter;\n\t\tthis.methodMatcher = MethodMatcher.TRUE;\n\t}\n\t// 匹配**所有类**特定方法的复合切点\n\tpublic ComposablePointcut(MethodMatcher methodMatcher) {\n\t\tAssert.notNull(methodMatcher, "MethodMatcher must not be null");\n\t\tthis.classFilter = ClassFilter.TRUE;\n\t\tthis.methodMatcher = methodMatcher;\n\t}\n\t// 匹配特定类特定方法的复合切点（这个是最为强大的）\n\tpublic ComposablePointcut(ClassFilter classFilter, MethodMatcher methodMatcher) {\n\t\tAssert.notNull(classFilter, "ClassFilter must not be null");\n\t\tAssert.notNull(methodMatcher, "MethodMatcher must not be null");\n\t\tthis.classFilter = classFilter;\n\t\tthis.methodMatcher = methodMatcher;\n\t}\n\t\n\t// 匹配特定类特定方法的复合切点（这个是最为强大的）\n\tpublic ComposablePointcut union(ClassFilter other) {\n\t\tthis.classFilter = ClassFilters.union(this.classFilter, other);\n\t\treturn this;\n\t}\n\n\t// ==========3个并集(union) / 3个交集(intersection) 运算的方法========\n\tpublic ComposablePointcut intersection(ClassFilter other) {\n\t\tthis.classFilter = ClassFilters.intersection(this.classFilter, other);\n\t\treturn this;\n\t}\n\tpublic ComposablePointcut union(MethodMatcher other) {\n\t\tthis.methodMatcher = MethodMatchers.union(this.methodMatcher, other);\n\t\treturn this;\n\t}\n\tpublic ComposablePointcut intersection(MethodMatcher other) {\n\t\tthis.methodMatcher = MethodMatchers.intersection(this.methodMatcher, other);\n\t\treturn this;\n\t}\n\tpublic ComposablePointcut union(Pointcut other) {\n\t\tthis.methodMatcher = MethodMatchers.union(\n\t\t\t\tthis.methodMatcher, this.classFilter, other.getMethodMatcher(), other.getClassFilter());\n\t\tthis.classFilter = ClassFilters.union(this.classFilter, other.getClassFilter());\n\t\treturn this;\n\t}\n\tpublic ComposablePointcut intersection(Pointcut other) {\n\t\tthis.classFilter = ClassFilters.intersection(this.classFilter, other.getClassFilter());\n\t\tthis.methodMatcher = MethodMatchers.intersection(this.methodMatcher, other.getMethodMatcher());\n\t\treturn this;\n\t}\n\t...\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br")])]),t("p",[n._v("ComposablePointcut没有提供"),t("strong",[n._v("直接对两个切点类型")]),n._v("并集交集的运算的方法。若需要，请参照org.springframework.aop.support.Pointcuts这个工具类里面有对两个Pointcut进行并集、交集的操作（后面再介绍）")]),n._v(" "),t("p",[t("strong",[n._v("AnnotationMatchingPointcut 注解切入点")])]),n._v(" "),t("p",[n._v("根据对象是否有指定类型的注解来匹配Pointcut")]),n._v(" "),t("p",[n._v("有两种注解，类级别注解和方法级别注解。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//仅指定类级别的注解， 标注了 ClassLevelAnnotation 注解的类中的**所有方法**执行的时候，将全部匹配。  \nAnnotationMatchingPointcut pointcut = new AnnotationMatchingPointcut(ClassLevelAnnotation.class);  \n// === 还可以使用静态方法创建 pointcut 实例  \nAnnotationMatchingPointcut pointcut = AnnotationMatchingPointcut.forClassAnnotation(ClassLevelAnnotation.class);  \n\n\n//仅指定方法级别的注解，标注了 MethodLeavelAnnotaion 注解的**方法（忽略类匹配）都将匹配**  \nAnnotationMatchingPointcut pointcut = AnnotationMatchingPointcut.forMethodAnnotation(MethodLevelAnnotation.class);  \n\n==========这个是同时想限定：===============\n//同时限定类级别和方法级别的注解，只有标注了 ClassLevelAnnotation 的类中 ***同时***标注了 MethodLevelAnnotation 的方法才会匹配  \nAnnotationMatchingPointcut pointcut = new AnnotationMatchingPointcut(ClassLevelAnnotation.class, MethodLevelAnnotation.class);  \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("Demo：略")]),n._v(" "),t("p",[t("strong",[n._v("总结")])]),n._v(" "),t("p",[n._v("其实，这些基础的知识也是为了去更好的理解Spring的自动代理创建器铺路")]),n._v(" "),t("h3",{attrs:{id:"advisor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advisor"}},[n._v("#")]),n._v(" Advisor")]),n._v(" "),t("p",[n._v("Advisor是Spring AOP的顶层抽象，用来管理Advice和Pointcut（PointcutAdvisor和切点有关，但IntroductionAdvisor和切点无关）")]),n._v(" "),t("p",[n._v("注意：Advice是aopalliance对通知（增强器）的顶层抽象，请注意区分~~")]),n._v(" "),t("p",[n._v("Pointcut是Spring AOP对切点的抽象。切点的实现方式有多种，其中一种就是AspectJ")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public interface Advisor {\n\n\t//@since 5.0 Spring5以后才有的  空通知  一般当作默认值\n\tAdvice EMPTY_ADVICE = new Advice() {};\n\t\n\t// 该Advisor 持有的通知器\n\tAdvice getAdvice();\n\t// 这个有点意思：Spring所有的实现类都是return true(官方说暂时还没有应用到)\n\t// 注意：生成的Advisor是单例还是多例不由isPerInstance()的返回结果决定，而由自己在定义bean的时候控制\n\t// 理解：和类共享（per-class）或基于实例（per-instance）相关  类共享：类比静态变量   实例共享：类比实例变量\n\tboolean isPerInstance();\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("它的继承体系主要有如下两个：PointcutAdvisor和IntroductionAdvisor")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7423.png",alt:"0"}})]),n._v(" "),t("p",[n._v("IntroductionAdvisor与PointcutAdvisor最本质上的区别就是，IntroductionAdvisor"),t("strong",[n._v("只能应用于类级别的拦截")]),n._v("，只能使用Introduction型的Advice。")]),n._v(" "),t("p",[n._v("而不能像PointcutAdvisor那样，可以使用任何类型的Pointcut，以及几乎任何类型的Advice。")]),n._v(" "),t("p",[t("strong",[n._v("PointcutAdvisor")]),n._v("**：和切点有关的Advisor**")]),n._v(" "),t("p",[n._v("顾名思义，它和Pointcu有关。在上一篇博文："),t("a",{attrs:{href:"https://blog.csdn.net/f641385712/article/details/89178421",target:"_blank",rel:"noopener noreferrer"}},[n._v("【小家Spring】Spring AOP核心类Pointcut解析，对PointcutExpression切点表达式解析原理分析（以AspectJExpressionPointcut为例）"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("其实我们已经介绍了好几个PointcutAdvisor。比如：RegexpMethodPointcutAdvisor和NameMatchMethodPointcutAdvisor,它哥俩都位于org.springframework.aop.support此包。当然还要介绍过AspectJExpressionPointcutAdvisor…")]),n._v(" "),t("p",[n._v("PointcutAdvisor它的实现类非常的多：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public interface PointcutAdvisor extends Advisor {\n\tPointcut getPointcut();\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7414.png",alt:"0"}})]),n._v(" "),t("p",[t("strong",[n._v("AbstractPointcutAdvisor")]),n._v("**：抽象实现**")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 实现了 Ordered接口\npublic abstract class AbstractPointcutAdvisor implements PointcutAdvisor, Ordered, Serializable {\n\t// 调用者可以手动来指定Order\n\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}\n\t\n\t@Override\n\tpublic int getOrder() {\n\t\tif (this.order != null) {\n\t\t\treturn this.order;\n\t\t}\n\t\t\n\t\t// 若调用者没有指定Order，那就拿advice的order为准（若有），否则LOWEST_PRECEDENCE表示最后执行\n\t\tAdvice advice = getAdvice();\n\t\tif (advice instanceof Ordered) {\n\t\t\treturn ((Ordered) advice).getOrder();\n\t\t}\n\t\treturn Ordered.LOWEST_PRECEDENCE;\n\t}\n\t// Spring还没有使用该属性 永远返回true了\n\t@Override\n\tpublic boolean isPerInstance() {\n\t\treturn true;\n\t}\n\t...\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("hr"),n._v(" "),t("p",[t("strong",[n._v("AbstractGenericPointcutAdvisor 一般的、通用的PointcutAdvisor")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public abstract class AbstractGenericPointcutAdvisor extends AbstractPointcutAdvisor {\n\tprivate Advice advice = EMPTY_ADVICE;\n\tpublic void setAdvice(Advice advice) {\n\t\tthis.advice = advice;\n\t}\n\t@Override\n\tpublic Advice getAdvice() {\n\t\treturn this.advice;\n\t}\n\t...\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("DefaultPointcutAdvisor 通用的，最强大的Advisor")])]),n._v(" "),t("p",[n._v("它是Spring提供的通用的，也被认为是最强大的Advisor。它可以把任意的两个Advice和Pointcut放在一起：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public class DefaultPointcutAdvisor extends AbstractGenericPointcutAdvisor implements Serializable {\n\tprivate Pointcut pointcut = Pointcut.TRUE;\n\tpublic DefaultPointcutAdvisor() {\n\t}\n\t// 若没有指定advice,默认Pointcut.TRUE，也就是说会匹配所有的方法的执行\n\tpublic DefaultPointcutAdvisor(Advice advice) {\n\t\tthis(Pointcut.TRUE, advice);\n\t}\n\t// 显然，这个构造函数式非常强大的~~\n\tpublic DefaultPointcutAdvisor(Pointcut pointcut, Advice advice) {\n\t\tthis.pointcut = pointcut;\n\t\tsetAdvice(advice);\n\t}\n\n}\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("hr"),n._v(" "),t("p",[t("strong",[n._v("AbstractBeanFactoryPointcutAdvisor：和bean工厂有关的PointcutAdvisor")])]),n._v(" "),t("p",[n._v("从命名也能看出来，它和BeanFactory有关。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 实现了BeanFactoryAware接口，若在Bean容器里注册可议注入BeanFactory~~~从而访问里面的实例\npublic abstract class AbstractBeanFactoryPointcutAdvisor extends AbstractPointcutAdvisor implements BeanFactoryAware {\n\t\n\t// 我们发现这两个都是@Nullable，所以他们脱离容器使用也是可以的\n\t@Nullable\n\tprivate String adviceBeanName;\n\t@Nullable\n\tprivate BeanFactory beanFactory;\n\t\n\t@Nullable\n\tprivate transient volatile Advice advice;\n\tpublic void setAdviceBeanName(@Nullable String adviceBeanName) {\n\t\tthis.adviceBeanName = adviceBeanName;\n\t}\n\t@Override\n\tpublic void setBeanFactory(BeanFactory beanFactory) {\n\t\tthis.beanFactory = beanFactory;\n\t\t// 若在Spring环境下，会给AdviceMonitor重新赋值为：getSingletonMutex()\n\t\tresetAdviceMonitor();\n\t}\n\t\n\t// 此处加锁\n\tpublic void setAdvice(Advice advice) {\n\t\tsynchronized (this.adviceMonitor) {\n\t\t\tthis.advice = advice;\n\t\t}\n\t}\n\n\t// 这是它最重要的方法，获取增强器\n\t@Override\n\tpublic Advice getAdvice() {\n\t\tAdvice advice = this.advice;\n\t\t// 非Spring环境一般手动set进来，所以就直接返回吧\n\t\tif (advice != null) {\n\t\t\treturn advice;\n\t\t}\n\n\t\t// 显然进来Spring容器环境了，bean工厂和beanName都是不能为null的\n\t\tAssert.state(this.adviceBeanName != null, \"'adviceBeanName' must be specified\");\n\t\tAssert.state(this.beanFactory != null, \"BeanFactory must be set to resolve 'adviceBeanName'\");\n\t\t\n\t\t// 若bean是单例的  那就没什么好说的  直接去工厂里拿出来就完事了（Advice.class）  有可能返回null哦\n\t\tif (this.beanFactory.isSingleton(this.adviceBeanName)) {\n\t\t\tadvice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);\n\t\t\tthis.advice = advice;\n\t\t\treturn advice;\n\t\t}\n\t\t// 若是多例的，就加锁  然后调用getBean()给他生成一个新的实例即可\n\t\telse {\n\t\t\tsynchronized (this.adviceMonitor) {\n\t\t\t\t//这步赋值和判断不能省~~~确保万无一失\n\t\t\t\tadvice = this.advice;\n\t\t\t\tif (advice == null) {\n\t\t\t\t\tadvice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);\n\t\t\t\t\tthis.advice = advice;\n\t\t\t\t}\n\t\t\t\treturn advice;\n\t\t\t}\n\t\t}\n\t}\n}\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("DefaultBeanFactoryPointcutAdvisor：通用的BeanFactory的Advisor")])]),n._v(" "),t("p",[n._v("这个是和Bean工厂关联的，通用的PointcutAdvisor")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public class DefaultBeanFactoryPointcutAdvisor extends AbstractBeanFactoryPointcutAdvisor {\n\tprivate Pointcut pointcut = Pointcut.TRUE;\n\n\t// 若传进来为null，还是选择 Pointcut.TRUE 匹配所有\n\tpublic void setPointcut(@Nullable Pointcut pointcut) {\n\t\tthis.pointcut = (pointcut != null ? pointcut : Pointcut.TRUE);\n\t}\n\t@Override\n\tpublic Pointcut getPointcut() {\n\t\treturn this.pointcut;\n\t}\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br")])]),t("p",[n._v("在Spring事务相关里，你会看到这个类")]),n._v(" "),t("p",[n._v("位于org.springframework.aop.support包内")]),n._v(" "),t("p",[t("strong",[n._v("BeanFactoryCacheOperationSourceAdvisor：和Cache有关")])]),n._v(" "),t("p",[n._v("Spring Cache的@Cachable等注解的拦截，就是采用了它。该类位于：org.springframework.cache.interceptor，显然它和cache相关了。Jar包属于：Spring-context.jar")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// @since 3.1  毕竟Spring的整个org.springframework.cache.Cache体系都是从这里开始的。（@Cacheable...等等）\npublic class BeanFactoryCacheOperationSourceAdvisor extends AbstractBeanFactoryPointcutAdvisor {\n\n\t// 显然它最重要的是持有这个引用（Cache章节详细介绍了它）\n\t@Nullable\n\tprivate CacheOperationSource cacheOperationSource;\n\n\t// Pointcut使用的是CacheOperationSourcePointcut\n\tprivate final CacheOperationSourcePointcut pointcut = new CacheOperationSourcePointcut() {\n\t\t@Override\n\t\t@Nullable\n\t\tprotected CacheOperationSource getCacheOperationSource() {\n\t\t\treturn cacheOperationSource;\n\t\t}\n\t};\n\n\n\tpublic void setCacheOperationSource(CacheOperationSource cacheOperationSource) {\n\t\tthis.cacheOperationSource = cacheOperationSource;\n\t}\n\tpublic void setClassFilter(ClassFilter classFilter) {\n\t\tthis.pointcut.setClassFilter(classFilter);\n\t}\n\t@Override\n\tpublic Pointcut getPointcut() {\n\t\treturn this.pointcut;\n\t}\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br")])]),t("p",[t("strong",[n._v("AsyncAnnotationAdvisor：和@Async有关")])]),n._v(" "),t("p",[n._v("位于包为：org.springframework.scheduling.annotation，所属jar包为spring-context.jar")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class AsyncAnnotationAdvisor extends AbstractPointcutAdvisor implements BeanFactoryAware {\n\t// 处理异步发生的异常的====\n\tprivate AsyncUncaughtExceptionHandler exceptionHandler;\n\t\n\tprivate Advice advice;\n\tprivate Pointcut pointcut;\n\n\t// 构造函数们\n\tpublic AsyncAnnotationAdvisor() {\n\t\tthis(null, null);\n\t}\n\t// executor：可以自己指定异步任务的执行器\n\t// exceptionHandler：异步异常的处理器\n\tpublic AsyncAnnotationAdvisor(@Nullable Executor executor, @Nullable AsyncUncaughtExceptionHandler exceptionHandler) {\n\t\tSet<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<>(2);\n\t\tasyncAnnotationTypes.add(Async.class);\n\t\t\n\t\t// 支持EJB的注解：@Asynchronous\n\t\ttry {\n\t\t\tasyncAnnotationTypes.add((Class<? extends Annotation>)\n\t\t\t\t\tClassUtils.forName("javax.ejb.Asynchronous", AsyncAnnotationAdvisor.class.getClassLoader()));\n\t\t} catch (ClassNotFoundException ex) {\n\t\t\t// If EJB 3.1 API not present, simply ignore.\n\t\t}\n\t\tif (exceptionHandler != null) {\n\t\t\tthis.exceptionHandler = exceptionHandler;\n\t\t} else {\n\t\t\t// SimpleAsyncUncaughtExceptionHandler：只是一个简单的logger.error的输入打印\n\t\t\tthis.exceptionHandler = new SimpleAsyncUncaughtExceptionHandler();\n\t\t}\n\t\t\n\t\t// buildAdvice: new AnnotationAsyncExecutionInterceptor(executor, exceptionHandler)   它是个MethodInterceptor  环绕通知器\n\t\tthis.advice = buildAdvice(executor, this.exceptionHandler);\n\t\t// 把asyncAnnotationTypes交给buildPointcut，它最终是个ComposablePointcut，会把这两种注解都支持。union起来 或者的关系\n\t\tthis.pointcut = buildPointcut(asyncAnnotationTypes);\n\t}\n\n\tpublic void setTaskExecutor(Executor executor) {\n\t\tthis.advice = buildAdvice(executor, this.exceptionHandler);\n\t}\n\t...\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br")])]),t("p",[t("strong",[n._v("AbstractAspectJAdvice****的实现类如下：这5个实现类完完整整的对应着我们AspectJ的那5个注解。")])]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7417.png",alt:"0"}})]),n._v(" "),t("hr"),n._v(" "),t("p",[t("strong",[n._v("AspectJPointcutAdvisor")])]),n._v(" "),t("p",[n._v("显然是和AspectJ相关的，使用得很是广泛。注意它和AspectJExpressionPointcutAdvisor的区别。有名字也能看出来，AspectJExpressionPointcutAdvisor和表达式语言的切点相关的，而AspectJPointcutAdvisor是无关的。它哥俩都位于包org.springframework.aop.aspectj里。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class AspectJPointcutAdvisor implements PointcutAdvisor, Ordered {\n\t\n\t// AbstractAspectJAdvice通知：它的子类看下面截图，就非常清楚了\n\tprivate final AbstractAspectJAdvice advice;\n\t// 可以接受任意的Pointcut，可谓非常的通用（当然也包含切点表达式啦）\n\tprivate final Pointcut pointcut;\n\n\t@Nullable\n\tprivate Integer order;\n\t\n\t// 只有这一个构造函数，包装一个advice\n\tpublic AspectJPointcutAdvisor(AbstractAspectJAdvice advice) {\n\t\tAssert.notNull(advice, "Advice must not be null");\n\t\tthis.advice = advice;\n\t\t// 然后pointcut根据advice直接给生成了一个。这是AbstractAspectJAdvice#buildSafePointcut的方法\n\t\tthis.pointcut = advice.buildSafePointcut();\n\t}\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br")])]),t("hr"),n._v(" "),t("hr"),n._v(" "),t("p",[t("strong",[n._v("InstantiationModelAwarePointcutAdvisor")])]),n._v(" "),t("p",[n._v("它是PointcutAdvisor的一个子接口。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 由SpringAOP顾问包装AspectJ实现的接口 可能具有延迟初始化策略的方面。\n// 例如，一个PerThis实例化模型意味着对建议的初始化太慢\npublic interface InstantiationModelAwarePointcutAdvisor extends PointcutAdvisor {\n\n\t// 该Advisor是否需要懒加载\n\tboolean isLazy();\n\t// 判断此Advisor它所拥有的Advice是否已经初始化了\n\tboolean isAdviceInstantiated();\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[n._v("它的唯一实现类：InstantiationModelAwarePointcutAdvisorImpl")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 默认的访问权限，显然是Spring内部自己用的\nclass InstantiationModelAwarePointcutAdvisorImpl\n\t\timplements InstantiationModelAwarePointcutAdvisor, AspectJPrecedenceInformation, Serializable {\n\tprivate static final Advice EMPTY_ADVICE = new Advice() {};\n\t// 和AspectJExpression\n\tprivate final AspectJExpressionPointcut declaredPointcut;\n\t..\n\t\n\t// 通知方法\n\tprivate transient Method aspectJAdviceMethod;\n\t\n\tprivate final AspectJAdvisorFactory aspectJAdvisorFactory;\n\tprivate final MetadataAwareAspectInstanceFactory aspectInstanceFactory;\n\n\t@Nullable\n\tprivate Advice instantiatedAdvice;\n\t@Nullable\n\tprivate Boolean isBeforeAdvice;\n\t@Nullable\n\tprivate Boolean isAfterAdvice;\n\t\n\t...\n\t@Override\n\tpublic boolean isPerInstance() {\n\t\treturn (getAspectMetadata().getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON);\n\t}\n\t@Override\n\tpublic synchronized Advice getAdvice() {\n\t\tif (this.instantiatedAdvice == null) {\n\t\t\tthis.instantiatedAdvice = instantiateAdvice(this.declaredPointcut);\n\t\t}\n\t\treturn this.instantiatedAdvice;\n\t}\n\t// advice 由aspectJAdvisorFactory去生产  懒加载的效果\n\tprivate Advice instantiateAdvice(AspectJExpressionPointcut pointcut) {\n\t\tAdvice advice = this.aspectJAdvisorFactory.getAdvice(this.aspectJAdviceMethod, pointcut,\n\t\t\t\tthis.aspectInstanceFactory, this.declarationOrder, this.aspectName);\n\t\treturn (advice != null ? advice : EMPTY_ADVICE);\n\t}\n\n\t@Override\n\tpublic boolean isBeforeAdvice() {\n\t\tif (this.isBeforeAdvice == null) {\n\t\t\tdetermineAdviceType();\n\t\t}\n\t\treturn this.isBeforeAdvice;\n\t}\n\t@Override\n\tpublic boolean isAfterAdvice() {\n\t\tif (this.isAfterAdvice == null) {\n\t\t\tdetermineAdviceType();\n\t\t}\n\t\treturn this.isAfterAdvice;\n\t}\n\t\n\t// 这里解释根据@Aspect方法上标注的注解，来区分这两个字段的值的\n\tprivate void determineAdviceType() {\n\t\tAspectJAnnotation<?> aspectJAnnotation =\n\t\t\t\tAbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(this.aspectJAdviceMethod);\n\t\tif (aspectJAnnotation == null) {\n\t\t\tthis.isBeforeAdvice = false;\n\t\t\tthis.isAfterAdvice = false;\n\t\t}\n\t\telse {\n\t\t\tswitch (aspectJAnnotation.getAnnotationType()) {\n\t\t\t\tcase AtAfter:\n\t\t\t\tcase AtAfterReturning:\n\t\t\t\tcase AtAfterThrowing:\n\t\t\t\t\tthis.isAfterAdvice = true;\n\t\t\t\t\tthis.isBeforeAdvice = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase AtAround:\n\t\t\t\tcase AtPointcut:\n\t\t\t\t\tthis.isAfterAdvice = false;\n\t\t\t\t\tthis.isBeforeAdvice = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase AtBefore:\n\t\t\t\t\tthis.isAfterAdvice = false;\n\t\t\t\t\tthis.isBeforeAdvice = true;\n\t\t\t}\n\t\t}\n\t}\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br")])]),t("p",[t("strong",[n._v("这个"),t("strong",[t("strong",[n._v("Advisor")])]),n._v("是在Spring解析被")]),n._v(" "),t("strong",[n._v("@AspectJ****注解注释的类时生成的 Advisor,。")])]),n._v(" "),t("p",[n._v("而这个 Advisor中的 Pointcut与Advice都是由ReflectiveAspectJAdvisorFactory 来解析生成的(与之对应的 Advice 是 AspectJMethodBeforeAdvice, AspectJAfterAdvice, AspectJAfterReturningAdvice, AspectJAfterThrowingAdvice, AspectJAroundAdvice,")]),n._v(" "),t("p",[n._v("Pointcut 则是AspectJExpressionPointcut)， 解析的步骤是:")]),n._v(" "),t("p",[n._v("自动代理创建器：AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors() ->")]),n._v(" "),t("p",[n._v("Bean工厂相关的Advisor构建器：BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors() ->")]),n._v(" "),t("p",[n._v("ReflectiveAspectJAdvisorFactory.getAdvisors() ->")]),n._v(" "),t("p",[n._v("ReflectiveAspectJAdvisorFactory.getAdvisor() 最终生成了InstantiationModelAwarePointcutAdvisorImpl(当然包括里面的 Pointcut与 advice 也都是由 ReflectiveAspectJAdvisorFactory 解析生成的)")]),n._v(" "),t("hr"),n._v(" "),t("p",[t("strong",[n._v("IntroductionAdvisor：引介切面")])]),n._v(" "),t("p",[n._v("Spring中有五种增强：BeforeAdvide（前置增强）、AfterAdvice（后置增强）、ThrowsAdvice（异常增强）、RoundAdvice（环绕增强）、IntroductionAdvice（引入增强）")]),n._v(" "),t("p",[n._v("RoundAdvice（环绕增强）：就是BeforeAdvide（前置增强）、AfterAdvice（后置增强）的组合使用叫环绕增强。前四种都比较简单。。。")]),n._v(" "),t("p",[t("strong",[n._v("引入增强（Introduction Advice）的概念：一个Java类，没有实现A接口，在不修改Java类的情况下，使其具备A接口的功能。****（非常强大有木有，A不需要动代码，就能有别的功能，吊炸天有木有）")])]),n._v(" "),t("p",[n._v("IntroductionAdvisor纯粹就是为Introduction而生的。")]),n._v(" "),t("p",[n._v("IntroductionAdvisor 和 PointcutAdvisor接口不同，它仅有一个类过滤器ClassFilter 而没有 MethodMatcher，这是因为 "),t("strong",[n._v("`引介切面")]),n._v(" 的切点是类级别的，而 Pointcut 的切点是方法级别的（"),t("strong",[n._v("细粒度更细，所以更加常用")]),n._v("）。")]),n._v(" "),t("p",[n._v("为了更好的了解IntroductionAdvisor，我先有必要讲解下IntroductionInfo和IntroductionInterceptor；")]),n._v(" "),t("p",[n._v("Introduction可以在不改动目标类定义的情况下，为目标类增加新的属性和行为。")]),n._v(" "),t("p",[t("strong",[n._v("IntroductionInfo：引介信息")])]),n._v(" "),t("p",[n._v("IntroductionInfo 接口描述了目标类需要实现的新接口。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 提供描述引言所需信息的接口\n// IntroductionAdvisor必须实现这个接口。若`org.aopalliance.aop.Advice`直接实现了此接口，\n// 它可议独立的当作introduction来使用而不用依赖IntroductionAdvisor。这种情况下，这个advice可议自描述，不仅提供。。。\npublic interface IntroductionInfo {\n\t//Return the additional interfaces introduced by this Advisor or Advice.\n\t// 返回额外给Advisor 或者 advice实现的接口们\n\tClass<?>[] getInterfaces();\n}\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("它的继承结构如下：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7416.png",alt:"0"}})]),n._v(" "),t("p",[t("strong",[n._v("IntroductionInterceptor：引介拦截器")])]),n._v(" "),t("p",[n._v("在Spring中，为目标对象添加新的属性和行为必须声明相应的接口以及相应的实现。这样，再通过特定的拦截器将新的接口定义以及实现类中的逻辑附加到目标对象上。然后，目标对象（确切的说，是目标对象的代理对象）就拥有了新的状态和行为")]),n._v(" "),t("p",[n._v("这里面介绍这个非常强大的拦截器：IntroductionInterceptor")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// IntroductionInterceptor它是对MethodInterceptor的一个扩展，同时他还继承了接口DynamicIntroductionAdvice\npublic interface IntroductionInterceptor extends MethodInterceptor, DynamicIntroductionAdvice {\n\t\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("DynamicIntroductionAdvice")]),n._v("**：**")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public interface DynamicIntroductionAdvice extends Advice {\n\tboolean implementsInterface(Class<?> intf);\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("通过DynamicIntroductionAdvice，可以界定当前的 IntroductionInterceptor为哪些接口"),t("strong",[n._v("提供相应的拦截功能")]),n._v("。通过MethodInterceptor,IntroductionInterceptor 就可以处理新添加的接口上的方法调用了")]),n._v(" "),t("p",[t("strong",[n._v("打个比方")])]),n._v(" "),t("p",[n._v("如果把每个目标对象实例看作盒装牛奶生产线上的那一盒盒牛奶的话，那么生产合格证就是新的Introduction逻辑，而introductionInterceptor 就是把这些生产合格证"),t("strong",[n._v("贴到一盒盒牛奶上的那个人")]),n._v("。")]),n._v(" "),t("p",[n._v("要对目标对象进行拦截并添加Introduction的逻辑，我们可以直接扩展IntroductionInterceptor，然后在子类的invoke方法中实现所有的拦截逻辑")]),n._v(" "),t("p",[n._v("除非特殊情况下需要直接扩展IntroductionInterceptor,大多数时候，"),t("strong",[n._v("直接使用Spring提供的两个现成的实现类就可以了")]),n._v("：DelegatingIntroductionInterceptor 和 DelegatePerTargetObjectIntroductionInterceptor")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7422.png",alt:"0"}})]),n._v(" "),t("p",[t("strong",[n._v("例子")])]),n._v(" "),t("p",[n._v("下面使用一个例子，加深一下对引介增强的了解：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 定义一个新的行为接口，这个行为准备作用在目标对象上\npublic interface IOtherInte {\n    void doOther();\n}\n// 自己定义一个IntroductionInterceptor来实现IntroductionInterceptor接口\n// 注意：此处也实现了接口IOtherInte（这是类似于增强器部分）  相当于这个interptor目前就只处理 IOtherInte\npublic class SomeInteIntroductionInterceptor implements IntroductionInterceptor, IOtherInte {\n    /**\n     * 判断调用的方法是否为指定类中的方法\n     * 如果Method代表了一个方法 那么调用它的invoke就相当于执行了它代表的这个方法\n     */\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        if (implementsInterface(invocation.getMethod().getDeclaringClass())) {\n            System.out.println("我是引介增强的方法体~~~invoke");\n            return invocation.getMethod().invoke(this, invocation.getArguments());\n        }\n        return invocation.proceed();\n    }\n\n    /**\n     * 判断clazz是否为给定接口IOtherBean的实现\n     */\n    @Override\n    public boolean implementsInterface(Class clazz) {\n        return clazz.isAssignableFrom(IOtherInte.class);\n    }\n\n    @Override\n    public void doOther() {\n        System.out.println("给人贴标签 doOther...");\n    }\n}\n\n// 方法测试\n    public static void main(String[] args) {\n        ProxyFactory factory = new ProxyFactory(new Person());\n        factory.setProxyTargetClass(true); // 强制私用CGLIB 以保证我们的Person方法也能正常调用\n\n        // 此处采用IntroductionInterceptor 这个引介增强的拦截器\n        Advice advice = new SomeInteIntroductionInterceptor();\n\n        // 切点+通知（注意：此处放的是复合切面）\n        Advisor advisor = new DefaultIntroductionAdvisor((DynamicIntroductionAdvice) advice, IOtherInte.class);\n        //Advisor advisor = new DefaultPointcutAdvisor(cut, advice);\n        factory.addAdvisor(advisor);\n\n        IOtherInte otherInte = (IOtherInte) factory.getProxy();\n        otherInte.doOther();\n\n        System.out.println("===============================");\n\n        // Person本身自己的方法  也得到了保留\n        Person p = (Person) factory.getProxy();\n        p.run();\n        p.say();\n    }\n\n输出：\n我是引介增强的方法体~~~invoke\n给人贴标签 doOther...\n===============================\n我在run...\n我在say...\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("我们发现，我们没有更改过Person类的任何代码，它竟然就有了doOther()方法的功能，这就是引介增强的强大功能。此处使用的Advisor为DefaultIntroductionAdvisor。它也是我们最常用的Advisor:")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 它是一个Advisor，同时也是一个IntroductionInfo \npublic interface IntroductionAdvisor extends Advisor, IntroductionInfo {\n\t\n\t// 它只有ClassFilter，因为它只能作用在类层面上\n\tClassFilter getClassFilter();\n\t// 判断这些接口，是否真的能够增强。  DynamicIntroductionAdvice#implementsInterface()方法\n\tvoid validateInterfaces() throws IllegalArgumentException;\n\n}\n\n// 它直接事IntroductionAdvisor的实现类。同时也是一个ClassFilter\npublic class DefaultIntroductionAdvisor implements IntroductionAdvisor, ClassFilter, Ordered, Serializable {\n\tprivate final Advice advice;\n\n\tprivate final Set<Class<?>> interfaces = new LinkedHashSet<>();\n\tprivate int order = Ordered.LOWEST_PRECEDENCE;\n    \n\t// 构造函数们\n\tpublic DefaultIntroductionAdvisor(Advice advice) {\n\t\tthis(advice, (advice instanceof IntroductionInfo ? (IntroductionInfo) advice : null));\n\t}\n\t\n\t// 如果IntroductionInfo 不等于null，就会把接口都add进去/\n\t// IntroductionInfo 的实现类有常用的：DelegatingIntroductionInterceptor和DelegatePerTargetObjectIntroductionInterceptor\n\tpublic DefaultIntroductionAdvisor(Advice advice, @Nullable IntroductionInfo introductionInfo) {\n\t\tAssert.notNull(advice, "Advice must not be null");\n\t\tthis.advice = advice;\n\t\tif (introductionInfo != null) {\n\t\t\tClass<?>[] introducedInterfaces = introductionInfo.getInterfaces();\n\t\t\tif (introducedInterfaces.length == 0) {\n\t\t\t\tthrow new IllegalArgumentException("IntroductionAdviceSupport implements no interfaces");\n\t\t\t}\n\t\t\tfor (Class<?> ifc : introducedInterfaces) {\n\t\t\t\taddInterface(ifc);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//当然你也可以不使用IntroductionInfo，而自己手动指定了这个接口\n\tpublic DefaultIntroductionAdvisor(DynamicIntroductionAdvice advice, Class<?> intf) {\n\t\tAssert.notNull(advice, "Advice must not be null");\n\t\tthis.advice = advice;\n\t\taddInterface(intf);\n\t}\n\t...\n\t@Override\n\tpublic void validateInterfaces() throws IllegalArgumentException {\n\t\tfor (Class<?> ifc : this.interfaces) {\n\t\t\tif (this.advice instanceof DynamicIntroductionAdvice &&\n\t\t\t\t\t!((DynamicIntroductionAdvice) this.advice).implementsInterface(ifc)) {\n\t\t\t throw new IllegalArgumentException("DynamicIntroductionAdvice [" + this.advice + "] " +\n\t\t\t\t\t "does not implement interface [" + ifc.getName() + "] specified for introduction");\n\t\t\t}\n\t\t}\n\t}\n\t...\n\t\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br")])]),t("p",[t("strong",[n._v("DelegatingIntroductionInterceptor和DelegatePerTargetObjectIntroductionInterceptor")])]),n._v(" "),t("p",[n._v("这两个类是 Spring AOP 中为 IntroductionInterceptor 介面所提供的实作类别，我们可以直接继承他俩，然后扩展我们自己的行为状态。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class DelegatingIntroductionInterceptor extends IntroductionInfoSupport\n\t\timplements IntroductionInterceptor {\n\t\n\t// 需要被代理的那个对象。因为这个类需要子类继承使用，所以一般都是thid\n\t@Nullable\n\tprivate Object delegate;\n\t/**\n\t * Construct a new DelegatingIntroductionInterceptor.\n\t * The delegate will be the subclass, which must implement\n\t * additional interfaces.\n\t * 访问权限事protected，显然就是说子类必须去继承这个类，然后提供空构造函数。代理类就是this\n\t */\n\tprotected DelegatingIntroductionInterceptor() {\n\t\tinit(this);\n\t}\n\t// 当然，你也可以手动指定delegate\n\tpublic DelegatingIntroductionInterceptor(Object delegate) {\n\t\tinit(delegate);\n\t}\n\tprivate void init(Object delegate) {\n\t\tAssert.notNull(delegate, "Delegate must not be null");\n\t\tthis.delegate = delegate;\n\t\timplementInterfacesOnObject(delegate);\n\t\t\n\t\t// 移除调这些内部标记的接口们\n\t\t// We don\'t want to expose the control interface\n\t\tsuppressInterface(IntroductionInterceptor.class);\n\t\tsuppressInterface(DynamicIntroductionAdvice.class);\n\t}\n\t\n\t// 如果你要自定义一些行为：比如环绕通知之类的，子类需要复写此方法（否则没有必要了）\n\t@Override\n\t@Nullable\n\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\t// 判断是否是引介增强\n\t\tif (isMethodOnIntroducedInterface(mi)) {\n\t\t\tObject retVal = AopUtils.invokeJoinpointUsingReflection(this.delegate, mi.getMethod(), mi.getArguments());\n\n\t\t\t// 如果返回值就是delegate 本身，那就把本身返回出去\n\t\t\tif (retVal == this.delegate && mi instanceof ProxyMethodInvocation) {\n\t\t\t\tObject proxy = ((ProxyMethodInvocation) mi).getProxy();\n\t\t\t\tif (mi.getMethod().getReturnType().isInstance(proxy)) {\n\t\t\t\t\tretVal = proxy;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn retVal;\n\t\t}\n\n\t\treturn doProceed(mi);\n\t}\n\t...\n}\n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br")])]),t("p",[n._v("因此，上面的例子Demo，我用DelegatingIntroductionInterceptor改造一下（只需要改造SomeInteIntroductionInterceptor即可）：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 因为我们继承自DelegatingIntroductionInterceptor，所以若我们不做环绕通知个性化，只需要实现接口的方法即可\npublic class SomeInteIntroductionInterceptor extends DelegatingIntroductionInterceptor implements IOtherInte {\n\n    @Override\n    public void doOther() {\n        System.out.println("给人贴标签 doOther...");\n    }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("继承此类，确实少了不少事呢。")]),n._v(" "),t("p",[t("strong",[n._v("DelegatePerTargetObjectIntroductionInterceptor")])]),n._v(" "),t("p",[n._v("与DelegatingIntroductionInterceptor不同，DelegatePerTargetObjectIntroductionInterceptor会在内部持有一个目标对象"),t("strong",[n._v("与相应Introduction逻辑实现类之间的映射关系")]),n._v("。")]),n._v(" "),t("p",[n._v("当每个目标对象上的新定义的接口方法被调用的时候，它会拦截这些调用。然后以目标对象实例作为键，到它持有的那个映射关系中取得对应当前目标对象实例的Introduction实现类实例。 使用起来和DelegatingIntroductionInterceptor没有太大区别，主要在构造函数上：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('1: 可以删除掉SomeInteIntroductionInterceptor类了\n2：单独实现引介接口\npublic class OtherImpl implements IOtherInte {\n\n    @Override\n    public void doOther() {\n        System.out.println("我是OtherImpl");\n    }\n}\nmain方法里修改如下：这样就ok了\nAdvice advice = new DelegatePerTargetObjectIntroductionInterceptor(OtherImpl.class, IOtherInte.class);\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("p",[n._v("备注：若你需要复写invoke方法的逻辑，请扩展它即可~~~（它的优点是：每次执行目标对象的时候，都可议缓存起来，提高一点效率吧）")]),n._v(" "),t("p",[t("strong",[n._v("总结")])]),n._v(" "),t("p",[n._v("Advisor是Spring AOP中非常重要的一个概念，最终代理对象进行执行什么的，都是适配到此处，因此需要重点掌握。")]),n._v(" "),t("p",[n._v("其中，引介增强平时使用得较少，但是在特殊的场景下，它能够解决某一类问题，还是非常不错的~")]),n._v(" "),t("p",[t("strong",[n._v("事务")])]),n._v(" "),t("p",[n._v("DataSourceTransactionManager:")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7424.png",alt:"0"}})]),n._v(" "),t("p",[t("strong",[n._v("TransactionAttribute")])]),n._v(" "),t("p",[n._v("这个接口是在TransactionDefinition的基础上的扩展")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 它继承自TransactionDefinition ，所有可以定义事务的基础属性\npublic interface TransactionAttribute extends TransactionDefinition {\n\t // 返回与此事务属性关联的限定符值\n\t//@since 3.0\n\t@Nullable\n\tString getQualifier();\n\t// Should we roll back on the given exception?\n\tboolean rollbackOn(Throwable ex);\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7412.png",alt:"0"}})]),n._v(" "),t("p",[n._v("它的主要实现类有：DefaultTransactionAttribute、RuleBasedTransactionAttribute、DelegatingTransactionAttribute")]),n._v(" "),t("p",[t("strong",[n._v("DefaultTransactionAttribute")])]),n._v(" "),t("p",[n._v("默认的事务属性实现，也是最常用的一个实现。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 它继承自DefaultTransactionDefinition \npublic class DefaultTransactionAttribute extends DefaultTransactionDefinition implements TransactionAttribute {\n\n\t@Nullable\n\tprivate String qualifier;\n\t@Nullable\n\tprivate String descriptor;\n\n\t// 你自己也可以自定义一个TransactionAttribute other 来替换掉一些默认行为\n\tpublic DefaultTransactionAttribute() {\n\t\tsuper();\n\t}\n\tpublic DefaultTransactionAttribute(TransactionAttribute other) {\n\t\tsuper(other);\n\t}\n\n\t// @since 3.0\n\tpublic void setQualifier(@Nullable String qualifier) {\n\t\tthis.qualifier = qualifier;\n\t}\n\t@Override\n\t@Nullable\n\tpublic String getQualifier() {\n\t\treturn this.qualifier;\n\t}\n\t...\n\t// 可以清晰的看到：默认只回滚RuntimeException 或者 Error(比如OOM这种)\n\t@Override\n\tpublic boolean rollbackOn(Throwable ex) {\n\t\treturn (ex instanceof RuntimeException || ex instanceof Error);\n\t}\n\t\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br")])]),t("p",[t("strong",[n._v("RuleBasedTransactionAttribute")])]),n._v(" "),t("p",[n._v("这个在基础实现的基础上扩展了一下，扩展了一些规则。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class RuleBasedTransactionAttribute extends DefaultTransactionAttribute implements Serializable {\n\t/** Prefix for rollback-on-exception rules in description strings. */\n\tpublic static final String PREFIX_ROLLBACK_RULE = "-";\n\t/** Prefix for commit-on-exception rules in description strings. */\n\tpublic static final String PREFIX_COMMIT_RULE = "+";\n\n\t// RollbackRuleAttribute：它是个实体类，确定给定异常是否应导致回滚的规则\n\t// 相当于封装了这个规则的一个实体，内部封装一个异常  提供一个实例变量： 这个变量相当于回滚规则为只回滚RuntimeException\n\t// public static final RollbackRuleAttribute ROLLBACK_ON_RUNTIME_EXCEPTIONS = new RollbackRuleAttribute(RuntimeException.class);\n\t// 所以此类最重要的一个属性，就是这个，它能维护多种回滚的规则~~~~\n\t@Nullable\n\tprivate List<RollbackRuleAttribute> rollbackRules;\n\t...\n\tpublic List<RollbackRuleAttribute> getRollbackRules() {\n\t\tif (this.rollbackRules == null) {\n\t\t\tthis.rollbackRules = new LinkedList<>();\n\t\t}\n\t\treturn this.rollbackRules;\n\t}\n\n\t// 核心逻辑输入，复写了父类的rollbackOn方法。也就是看看当前异常是否需要回滚呢？？？\n\t@Override\n\tpublic boolean rollbackOn(Throwable ex) {\n\t\tRollbackRuleAttribute winner = null;\n\t\tint deepest = Integer.MAX_VALUE;\n\n\t\t// 这里getDepth()就是去看看异常栈里面  该类型的异常处于啥位置。\n\t\t// 这里用了Integer的最大值，基本相当于不管异常有多深，遇上此异常都应该回滚喽，也就是找到这个winnner了~~~~~\n\t\tif (this.rollbackRules != null) {\n\t\t\tfor (RollbackRuleAttribute rule : this.rollbackRules) {\n\t\t\t\tint depth = rule.getDepth(ex);\n\t\t\t\tif (depth >= 0 && depth < deepest) {\n\t\t\t\t\tdeepest = depth;\n\t\t\t\t\twinner = rule;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// User superclass behavior (rollback on unchecked) if no rule matches.\n\t\t// 这句相当于：如果你没有指定回滚规则，那就交给父类吧（只回滚RuntimeException和Error类型）\n\t\tif (winner == null) {\n\t\t\treturn super.rollbackOn(ex);\n\t\t}\n\t\t\n\t\t// 最终只要找到了，但是不是NoRollbackRuleAttribute类型就成`~~~~\n\t\treturn !(winner instanceof NoRollbackRuleAttribute);\n\t}\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("DelegatingTransactionAttribute")])]),n._v(" "),t("p",[n._v("很显然，它就是一个简单的代理，内部持有一个TransactionAttribute的引用。自己也是个抽象类，没做啥事，此处略过。它也继承自：DelegatingTransactionDefinition")]),n._v(" "),t("p",[t("strong",[n._v("TransactionDefinition")])]),n._v(" "),t("p",[n._v("事务的定义，上面已经介绍了一个重要分支：TransactionAttribute。接下来继续介绍另外一个分支：")]),n._v(" "),t("p",[t("strong",[n._v("DelegatingTransactionDefinition")])]),n._v(" "),t("p",[n._v("一样的也就是个代理抽象类，啥都木有做。内部持有一个TransactionDefinition targetDefinition的引用而已，所有方法都是委托给targetDefinition去做的")]),n._v(" "),t("p",[t("strong",[n._v("ResourceTransactionDefinition")])]),n._v(" "),t("p",[n._v("这个子接口非常的新，是Spring5.1才提供的")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// @since 5.1\n// 指示资源事务，尤其是事务性资源是否准备好进行本地优化\npublic interface ResourceTransactionDefinition extends TransactionDefinition {\n\t// 确定事务性资源是否准备好进行本地优化\n\t// @see #isReadOnly()\n\tboolean isLocalResource();\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("它和ResourceTransactionManager的使用相关联。ResourceTransactionManager是PlatformTransactionManager的一个子接口。")]),n._v(" "),t("p",[n._v("我们最常用的事务管理器DataSourceTransactionManager也实现了这个接口~~~~")]),n._v(" "),t("p",[n._v("目前Spring还未提供任何ResourceTransactionDefinition它的具体实现~")]),n._v(" "),t("p",[t("strong",[n._v("TransactionAttributeSource：事务属性源")])]),n._v(" "),t("p",[n._v("它位于包：org.springframework.transaction.interceptor")]),n._v(" "),t("p",[n._v("它有点类似于之前讲过的TargetSource，它也是对TransactionAttribute进行了一层包装~~")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public interface TransactionAttributeSource {\n\t// 通过Method和目标类，拿到事务属性~~~\n\t// 比如我们的@Transaction是标注在方法上的，可议自定义方法级别的事务属性，用它就特别的方便~\n\t@Nullable\n\tTransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("这里有很多人不明白了，为何都给了Method，为啥还要传入Class呢？难道Method还不知道它所属的类？？？")]),n._v(" "),t("p",[n._v("这里做如下解释：")]),n._v(" "),t("ol",[t("li",[n._v("method – 目前正在进行的方法调用")]),n._v(" "),t("li",[n._v("targetClass – 真正要调用的方法所在的类")])]),n._v(" "),t("p",[n._v("这里是有细微差别的：")]),n._v(" "),t("ul",[t("li",[n._v("method的所属类不一样是targetClass。比如：method是代理对象的方法，它的所属类是代理出来的类")]),n._v(" "),t("li",[n._v("但是：targetClass一定会有一个方法和method的方法签名一样")])]),n._v(" "),t("p",[n._v("通常情况下，method的所属类会是targetClass的某个祖先类或者实现的某个接口。(动态代理)")]),n._v(" "),t("p",[n._v("它的实现有多种：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7415.png",alt:"0"}})]),n._v(" "),t("p",[n._v("TransactionAttributeSource一般都是作为TransactionInterceptor的一个属性被set进去，然后看看这个事务属性可以作用在不同的方法上面，实现不同方法的个性化定制~")]),n._v(" "),t("p",[n._v("（实际真正处理它的是父类TransactionAspectSupport，它会做匹配~~~~） 具体的在详解TransactionInterceptor的时候会讲述到")]),n._v(" "),t("p",[t("strong",[n._v("NameMatchTransactionAttributeSource")])]),n._v(" "),t("p",[n._v("根据名字就能匹配，然后该事务属性就会作用在对应的方法上。比如下面例子：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 自定义配置一个事务拦截器（@Transaction注解也会使用此拦截器进行拦截）\n    @Bean\n    public TransactionInterceptor transactionInterceptor(PlatformTransactionManager transactionManager) {\n        Map<String, TransactionAttribute> txMap = new HashMap<>();\n        // required事务  适用于觉得部分场景~\n        RuleBasedTransactionAttribute requiredTx = new RuleBasedTransactionAttribute();\n        requiredTx.setRollbackRules(Collections.singletonList(new RollbackRuleAttribute(RuntimeException.class)));\n        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n        txMap.put("add*", requiredTx);\n        txMap.put("save*", requiredTx);\n        txMap.put("insert*", requiredTx);\n        txMap.put("update*", requiredTx);\n        txMap.put("delete*", requiredTx);\n\n        // 查询 使用只读事务\n        RuleBasedTransactionAttribute readOnlyTx = new RuleBasedTransactionAttribute();\n        readOnlyTx.setReadOnly(true);\n        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);\n        txMap.put("get*", readOnlyTx);\n        txMap.put("query*", readOnlyTx);\n\n        // 定义事务属性的source~~~ 此处使用它  也就是根据方法名进行匹配的~~~\n        NameMatchTransactionAttributeSource source = new NameMatchTransactionAttributeSource();\n        source.setNameMap(txMap);\n        return new TransactionInterceptor(transactionManager, source);\n    }\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("这个在我们基于XML的配置事务的时候，原理就是这样的~~")]),n._v(" "),t("p",[n._v("注意此处的匹配模式也是基于简单匹配的：PatternMatchUtils.simpleMatch。而非强大的正则匹配。底层getTransactionAttribute()时会根据不同的方法名，来返回不同的事务属性~~~")]),n._v(" "),t("p",[t("strong",[n._v("MethodMapTransactionAttributeSource")])]),n._v(" "),t("p",[n._v("它的使用方式和NameMatchTransactionAttributeSource基本相同，但是有一个不同在于：")]),n._v(" "),t("p",[n._v("如果使用NameMatchTransactionAttributeSource配置属性源，比如get*配置为执行事务，那么所有的bean的get方法都会被加上事务，这可能不是我们想要的，因此对于自动代理，我们更好的选择是MethodMapTransactionAttributeSource，它需要指定需要事务化的完整类名和方法名")]),n._v(" "),t("p",[t("strong",[n._v("CompositeTransactionAttributeSource")])]),n._v(" "),t("p",[n._v("它代表一种组合模式。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// @since 2.0 它是Spring2.0后才推出来的\npublic class CompositeTransactionAttributeSource implements TransactionAttributeSource, Serializable {\n\tprivate final TransactionAttributeSource[] transactionAttributeSources;\n\tpublic CompositeTransactionAttributeSource(TransactionAttributeSource... transactionAttributeSources) {\n\t\tAssert.notNull(transactionAttributeSources, "TransactionAttributeSource array must not be null");\n\t\tthis.transactionAttributeSources = transactionAttributeSources;\n\t}\n\t\t\n\t// 这个实现方法也很容易。多个TransactionAttributeSource放在一起，只要任意一个匹配上就成\n\t// 备注：若匹配上多个，请注意先后顺序就成   这里面是数组  会保持和你放入的顺序一样~~~\n\t@Override\n\t@Nullable\n\tpublic TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {\n\t\tfor (TransactionAttributeSource source : this.transactionAttributeSources) {\n\t\t\tTransactionAttribute attr = source.getTransactionAttribute(method, targetClass);\n\t\t\tif (attr != null) {\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[t("strong",[n._v("MatchAlwaysTransactionAttributeSource")])]),n._v(" "),t("p",[n._v("它是TransactionAttributeSource的一个最简单的实现，每次调用，都是返回相同的TransactionAttribute")]),n._v(" "),t("p",[n._v("当然它是可议set一个TransactionAttribute作为通用的事务属性的实现的")]),n._v(" "),t("p",[t("strong",[n._v("AnnotationTransactionAttributeSource")])]),n._v(" "),t("p",[n._v("这个就是重点了，它是基于注解驱动的事务管理的事务属性源，和@Transaction相关，也是现在使用得最最多的方式。")]),n._v(" "),t("p",[n._v("它的基本作用为：它遇上比如@Transaction标注的方法时，此类会分析此事务注解，最终组织形成一个TransactionAttribute供随后的调用。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class AnnotationTransactionAttributeSource extends AbstractFallbackTransactionAttributeSource implements Serializable {\n\n\t// 这个是“向下兼容”，JavaEE提供的其余两种注解~~\n\tprivate static final boolean jta12Present; //JTA 1.2事务注解\n\tprivate static final boolean ejb3Present; //EJB 3 事务注解是\n\tstatic {\n\t\tClassLoader classLoader = AnnotationTransactionAttributeSource.class.getClassLoader();\n\t\tjta12Present = ClassUtils.isPresent("javax.transaction.Transactional", classLoader);\n\t\tejb3Present = ClassUtils.isPresent("javax.ejb.TransactionAttribute", classLoader);\n\t}\n\t\n\t// true：只处理public方法（基于JDK的代理  显然就只会处理这种方法）\n\t// false：private/protected等方法都会处理。   基于AspectJ代理得方式可议设置为false\n\t// 默认情况下：会被赋值为true，表示只处理public的方法\n\tprivate final boolean publicMethodsOnly;\n\t// 保存用于分析事务注解的事务注解分析器   这个注解分析的解析器是重点\n\tprivate final Set<TransactionAnnotationParser> annotationParsers;\n\n\t// 构造函数, publicMethodsOnly 缺省使用 true\n\tpublic AnnotationTransactionAttributeSource() {\n\t\tthis(true);\n\t}\n\tpublic AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {\n\t\tthis.publicMethodsOnly = publicMethodsOnly;\n\t\tif (jta12Present || ejb3Present) {\n\t\t\tthis.annotationParsers = new LinkedHashSet<>(4);\n\t\t\tthis.annotationParsers.add(new SpringTransactionAnnotationParser());\n\t\t\tif (jta12Present) {\n\t\t\t\tthis.annotationParsers.add(new JtaTransactionAnnotationParser());\n\t\t\t}\n\t\t\tif (ejb3Present) {\n\t\t\t\tthis.annotationParsers.add(new Ejb3TransactionAnnotationParser());\n\t\t\t}\n\t\t} \n\t\t// 默认情况下，只添加Spring自己的注解解析器（绝大部分情况都实这里）\n\t\telse {\n\t\t\tthis.annotationParsers = Collections.singleton(new SpringTransactionAnnotationParser());\n\t\t}\n\t}\n\t// 自己也可以指定一个TransactionAnnotationParser   或者多个也成\n\tpublic AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {\t... }\n\tpublic AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) { ... }\n\tpublic AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) { ... }\n\n\t// 获取某个类/方法上的事务注解属性（属于 父类的抽象方法）\n\t@Override\n\t@Nullable\n\tprotected TransactionAttribute findTransactionAttribute(Class<?> clazz) {\n\t\treturn determineTransactionAttribute(clazz);\n\t}\n\t@Override\n\t@Nullable\n\tprotected TransactionAttribute findTransactionAttribute(Method method) {\n\t\treturn determineTransactionAttribute(method);\n\t}\n\n\t// 具体实现如下：\n\t// 分析获取某个被注解的元素（AnnotatedElement ），具体的来讲，指的是一个类或者一个方法上的事务注解属性。\n\t// 实现会遍历自己属性annotationParsers中所包含的事务注解属性分析器试图获取事务注解属性  所以主要还是依赖于TransactionAnnotationParser 去解析的\n\t@Nullable\n\tprotected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {\n\t\tfor (TransactionAnnotationParser annotationParser : this.annotationParsers) {\n\t\t\tTransactionAttribute attr = annotationParser.parseTransactionAnnotation(element);\n\t\t\tif (attr != null) {\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * By default, only public methods can be made transactional.\n\t */\n\t@Override\n\tprotected boolean allowPublicMethodsOnly() {\n\t\treturn this.publicMethodsOnly;\n\t}\n\t...\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br")])]),t("p",[n._v("从源码中可议知道，真正提供给调用的getTransactionAttribute在父类中实现的：")]),n._v(" "),t("p",[t("strong",[n._v("AbstractFallbackTransactionAttributeSource")])]),n._v(" "),t("p",[n._v("AbstractFallbackTransactionAttributeSource是接口TransactionAttributeSource的抽象实现，也是上面提到的工具类AnnotationTransactionAttributeSource的父类。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public abstract class AbstractFallbackTransactionAttributeSource implements TransactionAttributeSource {\n\n\t// 针对没有事务注解属性的方法进行事务注解属性缓存时使用的特殊值，用于标记该方法没有事务注解属性\n\t// 从而不用在首次缓存在信息后，不用再次重复执行真正的分析  来提高查找的效率\n\t// 标注了@Transaction注解的表示有事务属性的，才会最终加入事务。但是，但是此处需要注意的是，只要被事务的Advisor切中的，都会缓存起来  放置过度的查找~~~~ 因此才有这个常量的出现\n\tprivate static final TransactionAttribute NULL_TRANSACTION_ATTRIBUTE = new DefaultTransactionAttribute() {\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn "null";\n\t\t}\n\t};\n\n\t// 方法上的事务注解属性缓存，key使用目标类上的方法，使用类型MethodClassKey来表示\n\t// 这个Map会比较大，会被事务相关的Advisor拦截下来的方法，最终都会缓存下来。关于事务相关的Advisor，后续也是会着重讲解的~~~\n\t// 因为会有很多，所以我们才需要一个NULL_TRANSACTION_ATTRIBUTE常量来提高查找的效率~~~\n\tprivate final Map<Object, TransactionAttribute> attributeCache = new ConcurrentHashMap<>(1024);\n\n\t// 获取指定方法上的注解事务属性   如果方法上没有注解事务属性，则使用目标方法所属类上的注解事务属性\n\t@Override\n\t@Nullable\n\tpublic TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {\n\t\t// 如果目标方法是内置类Object上的方法，总是返回null，这些方法上不应用事务\n\t\tif (method.getDeclaringClass() == Object.class) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// 先看缓存里有木有，此处使用的非常经典的MethodClassKey作为Map的key\n\t\tObject cacheKey = getCacheKey(method, targetClass);\n\t\tTransactionAttribute cached = this.attributeCache.get(cacheKey);\n\t\tif (cached != null) {\n\t\t\t//目标方法上上并没有事务注解属性，但是已经被尝试分析过并且已经被缓存，\n\t\t\t// 使用的值是 NULL_TRANSACTION_ATTRIBUTE,所以这里再次尝试获取其注解事务属性时，直接返回 null\n\t\t\tif (cached == NULL_TRANSACTION_ATTRIBUTE) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t}\n\t\t// 缓存没有命中~~~~\n\t\telse {\n\t\t\t// 通过方法、目标Class 分析出此方法上的事务属性~~~~~\n\t\t\tTransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);\n\t\t\t// 如果目标方法上并没有使用注解事务属性，也缓存该信息，只不过使用的值是一个特殊值:\n\t\t\tif (txAttr == null) {\n\t\t\t\tthis.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE);\n\t\t\t}\n\t\t\t// 存在目标属性~ 就put到里面去。\n\t\t\t// 获取到methodIdentification  基本只为了输出日志~~~\n\t\t\telse {\n\t\t\t\tString methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass);\n\t\t\t\tif (txAttr instanceof DefaultTransactionAttribute) {\n\t\t\t\t\t((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);\n\t\t\t\t}\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace("Adding transactional method \'" + methodIdentification + "\' with attribute: " + txAttr);\n\t\t\t\t}\n\t\t\t\tthis.attributeCache.put(cacheKey, txAttr);\n\t\t\t}\n\t\t\treturn txAttr;\n\t\t}\n\t}\n\n\t//查找目标方法上的事务注解属性 也是上面的核心方法\n\t@Nullable\n\tprotected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {\n\t\t// 如果事务注解属性分析仅仅针对public方法，而当前方法不是public，则直接返回null\n\t\t// 如果是private，AOP是能切入，代理对象也会生成的  但就是事务不回生效的~~~~\n\t\tif (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// 上面说了，因为Method并不一样属于目标类。所以这个方法就是获取targetClass上的那个和method对应的方法  也就是最终要执行的方法\n\t\tMethod specificMethod = AopUtils.getMostSpecificMethod(method, targetClass);\n\n\t\t// 第一步：去找直接标记在方法上的事务属性~~~ 如果方法上有就直接返回（不用再看类上的了）\n\t\t// findTransactionAttribute这个方法其实就是子类去实现的\n\t\tTransactionAttribute txAttr = findTransactionAttribute(specificMethod);\n\t\tif (txAttr != null) {\n\t\t\treturn txAttr;\n\t\t}\n\n\t\t// 然后尝试检查事务注解属性是否标记在目标方法 specificMethod（注意此处用不是Method） 所属类上\n\t\ttxAttr = findTransactionAttribute(specificMethod.getDeclaringClass());\n\t\tif (txAttr != null && ClassUtils.isUserLevelMethod(method)) {\n\t\t\treturn txAttr;\n\t\t}\n\n\t\t// 程序走到这里说明目标方法specificMethod，也就是实现类上的目标方法上没有标记事务注解属性（否则直接返回了嘛）\n\t\t\n\t\t// 如果 specificMethod 和 method 不同，则说明 specificMethod 是具体实现类的方法method 是实现类所实现接口的方法\n\t\t// 因此再次尝试从 method 上获取事务注解属性\n\t\t// 这也就是为何我们的@Transaction标注在接口上或者接口的方法上都是好使的原因~~~~~~~\n\t\tif (specificMethod != method) {\n\t\t\t// Fallback is to look at the original method.\n\t\t\ttxAttr = findTransactionAttribute(method);\n\t\t\tif (txAttr != null) {\n\t\t\t\treturn txAttr;\n\t\t\t}\n\t\t\ttxAttr = findTransactionAttribute(method.getDeclaringClass());\n\t\t\tif (txAttr != null && ClassUtils.isUserLevelMethod(method)) {\n\t\t\t\treturn txAttr;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t// 可议看到默认值是false  表示private的也是ok的\n\t// 但是`AnnotationTransactionAttributeSource`复写了它  可以由开发者指定（默认是true了）\n\tprotected boolean allowPublicMethodsOnly() {\n\t\treturn false;\n\t}\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br"),t("span",{staticClass:"line-number"},[n._v("89")]),t("br"),t("span",{staticClass:"line-number"},[n._v("90")]),t("br"),t("span",{staticClass:"line-number"},[n._v("91")]),t("br"),t("span",{staticClass:"line-number"},[n._v("92")]),t("br"),t("span",{staticClass:"line-number"},[n._v("93")]),t("br"),t("span",{staticClass:"line-number"},[n._v("94")]),t("br"),t("span",{staticClass:"line-number"},[n._v("95")]),t("br"),t("span",{staticClass:"line-number"},[n._v("96")]),t("br"),t("span",{staticClass:"line-number"},[n._v("97")]),t("br"),t("span",{staticClass:"line-number"},[n._v("98")]),t("br"),t("span",{staticClass:"line-number"},[n._v("99")]),t("br"),t("span",{staticClass:"line-number"},[n._v("100")]),t("br"),t("span",{staticClass:"line-number"},[n._v("101")]),t("br"),t("span",{staticClass:"line-number"},[n._v("102")]),t("br"),t("span",{staticClass:"line-number"},[n._v("103")]),t("br"),t("span",{staticClass:"line-number"},[n._v("104")]),t("br"),t("span",{staticClass:"line-number"},[n._v("105")]),t("br"),t("span",{staticClass:"line-number"},[n._v("106")]),t("br"),t("span",{staticClass:"line-number"},[n._v("107")]),t("br"),t("span",{staticClass:"line-number"},[n._v("108")]),t("br"),t("span",{staticClass:"line-number"},[n._v("109")]),t("br"),t("span",{staticClass:"line-number"},[n._v("110")]),t("br"),t("span",{staticClass:"line-number"},[n._v("111")]),t("br"),t("span",{staticClass:"line-number"},[n._v("112")]),t("br"),t("span",{staticClass:"line-number"},[n._v("113")]),t("br")])]),t("p",[n._v("从上文可以看出，真正把@Transaction注解变成一个TransactionAttribute类的是TransactionAnnotationParser，下面有必要来具体看看它")]),n._v(" "),t("p",[t("strong",[n._v("TransactionAnnotationParser")])]),n._v(" "),t("p",[n._v("顾名思义，它是解析方法/类上事务注解的。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// @since 2.5\npublic interface TransactionAnnotationParser {\n\t@Nullable\n\tTransactionAttribute parseTransactionAnnotation(AnnotatedElement element);\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("p",[n._v("它支持上面说的到三个注解，分别对应三个实现类：JtaTransactionAnnotationParser、Ejb3TransactionAnnotationParser、SpringTransactionAnnotationParser。")]),n._v(" "),t("p",[n._v("因为现在基本是Spring的天下了，因此本文只讲述SpringTransactionAnnotationParser，其它的雷同")]),n._v(" "),t("p",[t("strong",[n._v("SpringTransactionAnnotationParser")])]),n._v(" "),t("p",[n._v("它专门用于解析Class或者Method上的org.springframework.transaction.annotation.Transactional注解的。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// @since 2.5 此类的实现相对来说还是比较简单的\npublic class SpringTransactionAnnotationParser implements TransactionAnnotationParser, Serializable {\n\t\n\t// 此方法对外暴露，表示获取该方法/类上面的TransactionAttribute \n\t@Override\n\t@Nullable\n\tpublic TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {\n\t\tAnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(element, Transactional.class, false, false);\n\t\tif (attributes != null) {\n\t\t\t// 此处注意，把这个注解的属性交给它，最终转换为事务的属性类~~~~\n\t\t\treturn parseTransactionAnnotation(attributes);\n\t\t}\n\t\t// 注解都木有，那就返回null\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// 顺便提供的一个重载方法，可以让你直接传入一个注解\n\tpublic TransactionAttribute parseTransactionAnnotation(Transactional ann) {\n\t\treturn parseTransactionAnnotation(AnnotationUtils.getAnnotationAttributes(ann, false, false));\n\t}\n\n\t// 这个简单的说：就是把注解的属性们 专门为事务属性们~~~~\n\tprotected TransactionAttribute parseTransactionAnnotation(AnnotationAttributes attributes) {\n\t\t// 此处用的 RuleBasedTransactionAttribute  因为它可议指定不需要回滚的类~~~~\n\t\tRuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute();\n\t\t\n\t\t// 事务的传播属性枚举：内部定义了7种事务传播行为~~~~~\n\t\tPropagation propagation = attributes.getEnum("propagation");\n\t\trbta.setPropagationBehavior(propagation.value());\n\t\t\n\t\t// 事务的隔离级别枚举。一共是4中，枚举里提供一个默认值: 也就是上面我们说的TransactionDefinition.ISOLATION_DEFAULT\n\t\t// 至于默认值是哪种隔离界别：这个具体的数据库有关~~~\n\t\tIsolation isolation = attributes.getEnum("isolation");\n\t\trbta.setIsolationLevel(isolation.value());\n\t\n\t\t// 设置事务的超时时间\n\t\trbta.setTimeout(attributes.getNumber("timeout").intValue());\n\t\t// 是否是只读事务\n\t\trbta.setReadOnly(attributes.getBoolean("readOnly"));\n\t\t// 这个属性，是指定事务管理器PlatformTransactionManager的BeanName的，若不指定，那就按照类型找了\n\t\t// 若容器中存在多个事务管理器，但又没指定名字  那就报错啦~~~\n\t\trbta.setQualifier(attributes.getString("value"));\n\n\t\t// rollbackFor可以指定需要回滚的异常，可议指定多个  若不指定默认为RuntimeException\n\t\t// 此处使用的RollbackRuleAttribute包装~~~~  它就是个POJO没有实现其余接口\n\t\tList<RollbackRuleAttribute> rollbackRules = new ArrayList<>();\n\t\tfor (Class<?> rbRule : attributes.getClassArray("rollbackFor")) {\n\t\t\trollbackRules.add(new RollbackRuleAttribute(rbRule));\n\t\t}\n\t\t// 全类名的方式~~\n\t\tfor (String rbRule : attributes.getStringArray("rollbackForClassName")) {\n\t\t\trollbackRules.add(new RollbackRuleAttribute(rbRule));\n\t\t}\n\n\n\t\t// 指定不需要回滚的异常类型们~~~\n\t\t// 此处使用的NoRollbackRuleAttribute包装  它是RollbackRuleAttribute的子类\n\t\tfor (Class<?> rbRule : attributes.getClassArray("noRollbackFor")) {\n\t\t\trollbackRules.add(new NoRollbackRuleAttribute(rbRule));\n\t\t}\n\t\tfor (String rbRule : attributes.getStringArray("noRollbackForClassName")) {\n\t\t\trollbackRules.add(new NoRollbackRuleAttribute(rbRule));\n\t\t}\n\t\t// 最后别忘了set进去\n\t\trbta.setRollbackRules(rollbackRules);\n\n\t\treturn rbta;\n\t}\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br")])]),t("p",[n._v("通过这个parser就可议把方法/类上的注解，转换为事务属性，然后缓存起来。")]),n._v(" "),t("p",[n._v("这样方法在调用的时候，直接根据Method就能取到事务属性，从而执行不同的事务策略~~~")]),n._v(" "),t("p",[t("strong",[n._v("SavepointManager")])]),n._v(" "),t("p",[n._v("管理事务savepoint的编程式API接口。")]),n._v(" "),t("p",[n._v("JDBC定义了SavePoint接口，提供在一个更细粒度的事务控制机制。"),t("strong",[n._v("当设置了一个保存点后，可以rollback到该保存点处的状态，而不是rollback整个事务。Connection接口的setSavepoint和releaseSavepoint方法可以设置和释放保存点。")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// @since 1.1\npublic interface SavepointManager {\n\tObject createSavepoint() throws TransactionException;\n\tvoid rollbackToSavepoint(Object savepoint) throws TransactionException;\n\tvoid releaseSavepoint(Object savepoint) throws TransactionException;\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("它的主要实现有如下：")]),n._v(" "),t("p",[n._v("​    "),t("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/7421.png",alt:"0"}})]),n._v(" "),t("p",[n._v("TransactionStatus这个分支很重要，后面有着重分析。这里先看看JdbcTransactionObjectSupport这个实现")]),n._v(" "),t("p",[t("strong",[n._v("JdbcTransactionObjectSupport")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// @since 1.1  继承自SmartTransactionObject \npublic abstract class JdbcTransactionObjectSupport implements SavepointManager, SmartTransactionObject {\n\t\n\t// 这是Spring定义的类，持有java.sql.Connection\n\t// 所以最支不支持还原点、创建还原点其实都是委托给它来的~\n\t@Nullable\n\tprivate ConnectionHolder connectionHolder;\n\t...\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[n._v("它也只是个抽象类，SmartTransactionObject接口相关的方法都没有去实现~~~~但是它的子类DataSourceTransactionObject有去实现的~")]),n._v(" "),t("p",[n._v("关于还原点的实现，整体上还是比较简单的，就是委托给Connection去做~")])])}),[],!1,null,null,null);t.default=e.exports}}]);