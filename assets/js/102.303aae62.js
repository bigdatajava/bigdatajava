(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{444:function(t,e,a){"use strict";a.r(e);var s=a(1),i=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"git使用教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git使用教程"}},[t._v("#")]),t._v(" Git使用教程")]),t._v(" "),e("h2",{attrs:{id:"一、安装git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、安装git"}},[t._v("#")]),t._v(" 一、安装Git")]),t._v(" "),e("h3",{attrs:{id:"_1-git-config"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-config"}},[t._v("#")]),t._v(" 1.Git config")]),t._v(" "),e("blockquote",[e("p",[t._v("Git 自带一个git config 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：")]),t._v(" "),e("blockquote",[e("p",[t._v("1./etc/gitconfig 文件:包含系统上每一个用户及他们仓库的通用配置。如果使用带有 "),e("strong",[t._v("--system")]),t._v(" 选项的 git config时，它会从此文件读写配置变量。\n2.~/.gitconfig或~/.config/git/config 文件：只针对当前用户。可以传递 "),e("strong",[t._v("--global")]),t._v(" 选项让 Git读写此文件。\n3.当前使用仓库的 Git 目录中的 config 文件（就是.git/config）：针对该仓库。")])]),t._v(" "),e("blockquote",[e("blockquote",[e("p",[t._v("每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖/etc/gitconfig 中的配置变量。\n在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是C:\\Users\\SUSER）的.gitconfig 文件")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("配置用户信息")]),t._v(" "),e("blockquote",[e("p",[t._v('$ git config --global user.name "chao"\n$ git config --global user.email xxx@163.com')])]),t._v(" "),e("blockquote",[e("p",[t._v("再次强调，如果使用 --global选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情，Git都会使用这些信息，当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global选项的命令来配置")])])]),t._v(" "),e("p",[t._v("官网下载后直接默认安装就可以")]),t._v(" "),e("h2",{attrs:{id:"二、本地使用git上传项目到github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、本地使用git上传项目到github"}},[t._v("#")]),t._v(" 二、本地使用Git上传项目到GitHub")]),t._v(" "),e("p",[t._v("cd 到上传项目的根目录下，鼠标右键 -> Git Bash Here  进入到Git黑窗口执行下面命令。")]),t._v(" "),e("p",[t._v("1.初始化本地仓库")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git init\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("2.添加当前工作目录文件到Git，添加管理")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add .(记得有个点哦，并且和add之间有空格)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("Git提供了一个跳过使用暂存区域的方式，只要在提交的时候，给git commit加上 -a选项，Git就会自动把所有已跟踪过的文件暂存起来一并提交，从而跳过Git add步骤")])]),t._v(" "),e("p",[t._v("3.查看一下当前目录是否 被git管理的文件 以及被git管理并且被修改但是还没有提交的文件，")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git status（若出现了很多红色文件，那么就需要再次进行2的步骤，git add .直到没有问题。）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("$ git status -s 或者 git status --short 更为紧凑的格式输出\n"),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201107102857671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})])]),t._v(" "),e("p",[t._v("4.移除文件")]),t._v(" "),e("blockquote",[e("p",[t._v("想把文件从Git仓库中删除（即从暂存区移除），但依然期望保留在当前工作目录。换句话说，你想让文件保留在磁盘，但是不想让Git继续跟踪，当你忘记添加 .gitignore文件，不小心把一个很大的日志文件添加到暂存区中。可以使用 --cached选项：")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git rm --cached 想要从暂存区移除的文件名字")])])]),t._v(" "),e("p",[t._v("5.撤销文件的修改")]),t._v(" "),e("blockquote",[e("p",[t._v("还原成上次提交时的样子，撤销修改")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git checkout -- 文件名")])])]),t._v(" "),e("p",[t._v("4.提交文件，把本地仓库暂存区的文件提交到本地仓库。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git commit -m "message"  （其中message就是你提交文件时候的备注。以便知道本次提交是什么作用）\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("5.关联远程仓库，其中origin后跟的是，远程仓库的别名。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin https://github.com/bendan321/nihao.git\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("6.push文件。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push -u origin master。\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("7.pull文件")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull --rebase origin master\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"创建新branch-合并branch-删除branch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建新branch-合并branch-删除branch"}},[t._v("#")]),t._v(" 创建新branch,合并branch，删除branch")]),t._v(" "),e("p",[t._v("创建branch")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git checkout -b 新branch名字")]),t._v(" "),e("blockquote",[e("p",[t._v("开发和最后push上")])])]),t._v(" "),e("blockquote",[e("p",[t._v("切换branch")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git checkout branch名字")])])]),t._v(" "),e("p",[t._v("合并分支")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git  checkout master   先切换到master\n$ git merge 要合并到master的branch名字\n$ git push")])]),t._v(" "),e("blockquote",[e("p",[t._v("删除本地分支")]),t._v(" "),e("blockquote",[e("p",[t._v("git branch -d 需删除的分支名字")])])]),t._v(" "),e("blockquote",[e("p",[t._v("从远程仓库删除分支")]),t._v(" "),e("blockquote",[e("p",[t._v("$ git push origin --delete 要删除的分支名字")])])]),t._v(" "),e("blockquote",[e("p",[t._v("更新远程分支列表\n$ git remote update origin --prune\n$ git branch -a 查看所有分支")])]),t._v(" "),e("h2",{attrs:{id:"解决合并冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决合并冲突"}},[t._v("#")]),t._v(" 解决合并冲突")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20201107130222462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaW9mY2hhbw==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),e("h2",{attrs:{id:"git-tag使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-tag使用"}},[t._v("#")]),t._v(" git tag使用")]),t._v(" "),e("blockquote",[e("p",[t._v("显示所有的tag")]),t._v(" "),e("blockquote",[e("p",[t._v("git tag")])])]),t._v(" "),e("blockquote",[e("p",[t._v("查看某个版本系列的tag")]),t._v(" "),e("blockquote",[e("p",[t._v("git tag -l 'v1.0.*'")])])]),t._v(" "),e("blockquote",[e("p",[t._v("创建标签")]),t._v(" "),e("blockquote",[e("p",[t._v('git tag -a v1.0.0 -m "内容：v1.0.0"')])])]),t._v(" "),e("blockquote",[e("p",[t._v("查看标签的详情，可以看到你commit的内容")]),t._v(" "),e("blockquote",[e("p",[t._v("git show v0.0.6")])])]),t._v(" "),e("blockquote",[e("p",[t._v("推送标签")]),t._v(" "),e("blockquote",[e("p",[t._v("git push origin v1.0.0")])])]),t._v(" "),e("blockquote",[e("p",[t._v("删除标签")]),t._v(" "),e("blockquote",[e("p",[t._v("删除本地\ngit tag -d v1.0.0\n删除远程的\ngit push origin :refs/tags/v1.0.0")])])]),t._v(" "),e("blockquote",[e("p",[t._v("补打标签，对过去的提交打标签\n$ git log --pretty=oneline\n6d6be385e3e5de8d10b5e52610b72d34c1117386 nfdfdd\n$ git tag -a v1.2 6d6be385e3e5de8d10b5e52610b72d34c1117386\n$ git push origin v1.2")])]),t._v(" "),e("p",[t._v("8.使用git下载github上的文件")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone GitHub链接地址\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("$ git diff 来分析文件差异，也有插件版本图形化方式，可以使用$ git difftool命名来用Araxis,emerge或vimdiff等软件输出diff分析结果，使用 $ git difftool --tool-help命名来查看支持的软件")])]),t._v(" "),e("h2",{attrs:{id:"三、idea使用git上传项目到github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、idea使用git上传项目到github"}},[t._v("#")]),t._v(" 三、Idea使用Git上传项目到GitHub")]),t._v(" "),e("p",[t._v("Windows下git环境变量配置")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("在Path变量中增加：C:\\Program Files\\Git\\cmd -这里路径改为实际安装位置\n\n验证是否配置成功，windows命令行，输入git命令\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("1.电脑已经安装git，Idea需要配置下git基础配置")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("settings -> GitHub -> host:github.com; Login:GitHub用户名; Password:GitHub用户密码 ->test (可以点test测试下是否能够连通)\n\nsettings -> Git -> Path to Git executable ->电脑Git安装路径/bin/git.exe ->test（看是否能够连通）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("类似于命令 git init")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("   VCS -> import into version control -> Create Git Repository ->选中项目OK\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("3.类似于命令 git add .")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("选中Idea中项目右键  Git->add\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("4.类似于命令 git commit")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("选中Idea中项目右键  Git->commit -> 填写commit信息备注，（注意：次时将用不到的项目文件可以勾选去了，只保留src和pom.xml即可）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("4.类似于命令 git remote")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("选中Idea中项目右键 Git -> Repository -> remote ->店家“+”,将GitHub上的仓库地址写在此处(例如：https://github.com/bigdatajava/springboot.git)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("5.类似于命令 git push")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("选中Idea中项目右键 Git ->Repository -> push\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("至此项目成功上传到GitHub")]),t._v(" "),e("h3",{attrs:{id:"_3-1-idea导入github项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-idea导入github项目"}},[t._v("#")]),t._v(" 3.1 idea导入GitHub项目")]),t._v(" "),e("p",[t._v("1，从Github中导入文件")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("File -> New -> Project from Version Control -> 输入Git Repository URL -> 点击clone \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("2，导入的项目是不能运行的，需要先将其加入源文件中变成可执行项目及代码")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("File -> Project Structure，在弹出来的对话框里选择modules -> 选中项目,将对应的项目文件变为合适的 sources/Resources/Tests/Test Resources ->点击应用和ok\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])])}),[],!1,null,null,null);e.default=i.exports}}]);