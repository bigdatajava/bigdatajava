(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{582:function(n,s,a){"use strict";a.r(s);var e=a(5),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"aop-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop-详解"}},[n._v("#")]),n._v(" AOP  详解")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("U2FsdGVkX18s7u7XFKNT78DOLCqTTsOWH9rbsiAsRCBnv2rQm7ApCHle6nZ/ObNJ\nlbfmWxOPydujkmMedSxBBStSNHYEbdEkqiw6GnBUxaOp6aPngNjSGzbyuIXUH66+\ndw==\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("h3",{attrs:{id:"aop体系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop体系"}},[n._v("#")]),n._v(" AOP体系")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210821184448557.png",alt:"image-20210821184448557"}})]),n._v(" "),s("p",[s("strong",[n._v("Java proxy，cglib")])]),n._v(" "),s("p",[n._v("什么时候走jdk proxy，或cglib proxy")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210821183540466.png",alt:"image-20210821183540466"}})]),n._v(" "),s("p",[s("strong",[n._v("spring AOP 定义组件，通知拦截组件，调用组件")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210821174827728.png",alt:"image-20210821174827728"}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210823195819135.png",alt:"image-20210823195819135"}})]),n._v(" "),s("p",[n._v("综述")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring-ioc/image-20210821185124168.png",alt:"image-20210821185124168"}})]),n._v(" "),s("h3",{attrs:{id:"aop-aspectj-spring-aop-前世今生"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop-aspectj-spring-aop-前世今生"}},[n._v("#")]),n._v(" AOP, AspectJ, Spring AOP  前世今生")]),n._v(" "),s("p",[n._v("我们先来把它们的概念和关系说说清楚，我们学习的Spring-AOP其实冰山一角，但是AOP还有很多的相关内容需要了解。")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("AOP 要实现的是在我们原来写的代码的基础上，进行一定的包装，如在方法执行前、方法返回后、方法抛出异常后等地方进行一定的拦截处理或者叫增强处理。")])]),n._v(" "),s("li",[s("p",[n._v("AOP 的实现并不是因为 Java 提供了什么神奇的钩子，可以把方法的几个生命周期告诉我们，而是我们要实现一个代理，实际运行的实例其实是生成的代理类的实例。")])]),n._v(" "),s("li",[s("p",[n._v("作为 Java 开发者，我们都很熟悉 "),s("strong",[n._v("AspectJ")]),n._v(" 这个词，甚至于我们提到 AOP 的时候，想到的往往就是 AspectJ，即使你可能不太懂它是怎么工作的。这里，我们把 AspectJ 和 Spring AOP 做个简单的对比：")])])]),n._v(" "),s("p",[s("strong",[n._v("Spring AOP：")])]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6638.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("AOP 术语解释")])]),n._v(" "),s("p",[n._v("https://www.processon.com/view/link/5ecca5ebe0b34d5f262eae3a")]),n._v(" "),s("p",[s("strong",[n._v("Spring Aop：")])]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("它基于动态代理来实现")]),n._v("。默认地，如果使用接口的，用 JDK 提供的动态代理实现，如果没有接口，使用 CGLIB 实现。大家一定要明白背后的意思，包括什么时候会不用 JDK 提供的动态代理，而用 CGLIB 实现。")]),n._v(" "),s("li",[s("strong",[n._v("Spring 3.2 以后，spring-core 直接就把 CGLIB 和 ASM 的源码包括进来了")]),n._v("，这也是为什么我们不需要显式引入这两个依赖")]),n._v(" "),s("li",[n._v("Spring 的 IOC 容器和 AOP 都很重要，Spring AOP 需要依赖于 IOC 容器来管理。")]),n._v(" "),s("li",[n._v("Spring AOP 只能作用于 Spring 容器中的 Bean，它是使用纯粹的 Java 代码实现的，只能作用于 bean 的方法。")]),n._v(" "),s("li",[s("strong",[n._v("Spring 提供了 AspectJ 的支持，但只用到的AspectJ的切点解析和匹配。")])]),n._v(" "),s("li",[n._v("很多人会对比 Spring AOP 和 AspectJ 的性能，Spring AOP 是基于代理实现的，在容器启动的时候需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 那么好。")])]),n._v(" "),s("p",[s("strong",[n._v("AspectJ：")])]),n._v(" "),s("ul",[s("li",[s("p",[n._v("AspectJ 出身也是名门，来自于 Eclipse 基金会，link：https://www.eclipse.org/aspectj")])]),n._v(" "),s("li",[s("p",[n._v("属于静态织入，它是通过修改代码来实现的，它的织入时机可以是：")])]),n._v(" "),s("li",[s("ul",[s("li",[n._v("Compile-time weaving：编译期织入，如类 A 使用 AspectJ 添加了一个属性，类 B 引用了它，这个场景就需要编译期的时候就进行织入，否则没法编译类 B。")]),n._v(" "),s("li",[n._v("Post-compile weaving：编译后织入，也就是已经生成了 .class 文件，或已经打成 jar 包了，这种情况我们需要增强处理的话，就要用到编译后织入。")]),n._v(" "),s("li",[s("strong",[n._v("Load-time weaving")]),n._v("：指的是在加载类的时候进行织入，要实现这个时期的织入，有几种常见的方法。1、自定义类加载器来干这个，这个应该是最容易想到的办法，在被织入类加载到 JVM 前去对它进行加载，这样就可以在加载的时候定义行为了。2、在 JVM 启动的时候指定 AspectJ 提供的 agent：-javaagent:xxx/xxx/aspectjweaver.jar。")])])]),n._v(" "),s("li",[s("p",[n._v("AspectJ 能干很多 Spring AOP 干不了的事情，它是 "),s("strong",[n._v("AOP 编程的完全解决方案")]),n._v("。Spring AOP 致力于解决的是企业级开发中最普遍的 AOP 需求（方法织入），而不是力求成为一个像 AspectJ 一样的 AOP 编程完全解决方案。")])]),n._v(" "),s("li",[s("p",[n._v("因为 AspectJ 在实际代码运行前完成了织入，所以大家会说它生成的类是没有额外运行时开销的。")])])]),n._v(" "),s("p",[s("strong",[n._v("Spring AOP")])]),n._v(" "),s("p",[n._v("首先要说明的是，这里介绍的 Spring AOP 是纯的 Spring 代码，和 AspectJ 没什么关系，但是 Spring 延用了 AspectJ 中的概念，包括使用了 AspectJ 提供的 jar 包中的注解，但是不依赖于其实现功能。")]),n._v(" "),s("p",[s("em",[n._v("后面介绍的如")]),n._v(" "),s("a",{attrs:{href:"https://github.com/Aspect",target:"_blank",rel:"noopener noreferrer"}},[s("em",[n._v("@Aspect")]),s("OutboundLink")],1),s("em",[n._v("、")]),s("a",{attrs:{href:"https://github.com/Pointcut",target:"_blank",rel:"noopener noreferrer"}},[s("em",[n._v("@Pointcut")]),s("OutboundLink")],1),s("em",[n._v("、")]),s("a",{attrs:{href:"https://github.com/Before",target:"_blank",rel:"noopener noreferrer"}},[s("em",[n._v("@Before")]),s("OutboundLink")],1),s("em",[n._v("、")]),s("a",{attrs:{href:"https://github.com/After",target:"_blank",rel:"noopener noreferrer"}},[s("em",[n._v("@After")]),s("OutboundLink")],1),n._v(" "),s("em",[n._v("等注解都是来自于 AspectJ，但是功能的实现是纯 Spring AOP 自己实现的。")])]),n._v(" "),s("p",[n._v("下面我们来介绍 Spring AOP 的使用方法，先从最简单的配置方式开始说起，这样大家想看源码也会比较容易。")]),n._v(" "),s("p",[n._v("目前 Spring AOP 一共有三种配置方式，Spring 做到了很好地向下兼容，所以大家可以放心使用。")]),n._v(" "),s("ul",[s("li",[n._v("Spring 1.2 "),s("strong",[n._v("基于接口的配置")]),n._v("：最早的 Spring AOP 是完全基于几个接口的，想看源码的同学可以从这里起步。")]),n._v(" "),s("li",[n._v("Spring 2.0 "),s("strong",[n._v("schema-based 配置")]),n._v("：Spring 2.0 以后使用 XML 的方式来配置，使用 命名空间")]),n._v(" "),s("li",[n._v("Spring 2.0 "),s("a",{attrs:{href:"https://github.com/AspectJ",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[n._v("@AspectJ")]),s("OutboundLink")],1),n._v(" "),s("strong",[n._v("配置")]),n._v("：使用注解的方式来配置，这种方式感觉是最方便的，还有，这里虽然叫做 "),s("a",{attrs:{href:"https://github.com/AspectJ",target:"_blank",rel:"noopener noreferrer"}},[n._v("@AspectJ"),s("OutboundLink")],1),n._v("，但是这个和 AspectJ 其实没啥关系。")])]),n._v(" "),s("h4",{attrs:{id:"spring-1-2-中的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-1-2-中的配置"}},[n._v("#")]),n._v(" Spring 1.2 中的配置")]),n._v(" "),s("p",[n._v("这节我们将介绍 Spring 1.2 中的配置，这是最古老的配置，但是由于 Spring 提供了很好的向后兼容，以及很多人根本不知道什么配置是什么版本的，以及是否有更新更好的配置方法替代，所以还是会有很多代码是采用这种古老的配置方式的（比如声明式事务），这里说的古老并没有贬义的意思。")]),n._v(" "),s("p",[n._v("下面用一个简单的例子来演示怎么使用 Spring 1.2 的配置方式。")]),n._v(" "),s("p",[n._v("首先定义需要被增强的类：")]),n._v(" "),s("p",[s("strong",[n._v("接口")]),n._v("：Calculate.java， "),s("strong",[n._v("实现类")]),n._v("：TulingCalculate.java")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * 计算类接口\n * Created by xsls on 2019/6/10.\n */\npublic interface Calculate {\n\n    /**\n     * 加法\n     * @param numA\n     * @param numB\n     * @return\n     */\n     int add(int numA, int numB);\n\n    /**\n     * 减法\n     * @param numA\n     * @param numB\n     * @return\n     */\n     int sub(int numA, int numB);\n\n    /**\n     * 除法\n     * @param numA\n     * @param numB\n     * @return\n     */\n     int div(int numA, int numB);\n\n    /**\n     * 乘法\n     * @param numA\n     * @param numB\n     * @return\n     */\n     int multi(int numA, int numB);\n\n    int mod(int numA, int numB);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * Created by xsls on 2019/6/10.\n */\n@Component\npublic class TulingCalculate implements Calculate {\n\n    public int add(int numA, int numB) {\n\n        System.out.println("执行目标方法:add");\n          System.out.println(1/0);\n        return numA+numB;\n    }\n\n    public int sub(int numA, int numB) {\n        System.out.println("执行目标方法:reduce");\n        return numA-numB;\n    }\n\n    public int div(int numA, int numB) {\n        System.out.println("执行目标方法:div");\n        return numA/numB;\n    }\n\n    public int multi(int numA, int numB) {\n        System.out.println("执行目标方法:multi");\n\n        return numA*numB;\n    }\n\n    public int mod(int numA,int numB){\n        System.out.println("执行目标方法:mod");\n\n      int retVal = ((Calculate)AopContext.currentProxy()).add(numA,numB);\n        //int retVal = this.add(numA,numB);\n\n        return retVal%numA;\n\n        //return numA%numB;\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br")])]),s("p",[n._v("接下来，我们定义 "),s("strong",[n._v("advice或Interceptor")]),n._v("， 我这里提供2个：")]),n._v(" "),s("p",[s("em",[n._v("advice 是我们接触的第一个概念，记住它是干什么用的。")])]),n._v(" "),s("p",[n._v("TulingLogAdvice.java")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class TulingLogAdvice implements MethodBeforeAdvice {\n    @Override\n    public void before(Method method, Object[] args, Object target) throws Throwable {\n        String methodName = method.getName();\n        System.out.println("执行目标方法【"+methodName+"】的<前置通知>,入参"+ Arrays.asList(args));\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("TulingLogInterceptor.java")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/***\n * @Author 徐庶   QQ:1092002729\n * @Slogan 致敬大师，致敬未来的你\n */\npublic class TulingLogInterceptor implements MethodInterceptor {\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        System.out.println(getClass()+"调用方法前");\n        Object ret=invocation.proceed();\n        System.out.println(getClass()+"调用方法后");\n        return ret;\n    }\n\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("上面的两个 Advice 分别用于方法调用前输出参数和方法调用后输出结果。")]),n._v(" "),s("p",[n._v("现在可以开始配置了，通过配置类：")]),n._v(" "),s("p",[s("strong",[n._v("FactoryBean方式创建单个代理：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// 被代理对象\n  @Bean\n  public Calculate tulingCalculate() {\n      return new TulingCalculate();\n  }\n\n  // Advice 方式\n  @Bean\n  public TulingLogAdvice tulingLogAdvice(){\n      return new TulingLogAdvice();\n  }\n\n// Interceptor方式 ， 类似环绕通知\n  @Bean\n  public TulingLogInterceptor tulingLogInterceptor() {\n      return new TulingLogInterceptor();\n  }\n  \n  /**\n * FactoryBean方式单个： ProxyFactoryBean\n * @return\n */\n@Bean\npublic ProxyFactoryBean calculateProxy(){\n    ProxyFactoryBean userService=new ProxyFactoryBean();\n    userService.setInterceptorNames("tulingLogAdvice","tulingLogInterceptor");  // 根据指定的顺序执行\n    userService.setTarget(tulingCalculate());\n    return userService;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("接下来，我们跑起来看看：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args) { \n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EalyAopMainConfig.class);\n    Calculate calculateProxy = ctx.getBean("calculateProxy",Calculate.class);\n    calculateProxy.div(1,1);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("查看输出结果：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6395.png",alt:"0"}})]),n._v(" "),s("p",[n._v("从结果可以看到，使用了责任链方式对advice和Interceptor都进行调用。这个例子理解起来应该非常简单，就是通过调用FactoryBean的getObject方法创建一个代理实现。")]),n._v(" "),s("p",[s("em",[n._v("代理模式需要一个接口（可选）、一个具体实现类，然后就是定义一个代理类，用来包装实现类，添加自定义逻辑，在使用的时候，需要用代理类来生成实例。")])]),n._v(" "),s("p",[n._v("此中方法有个致命的问题，如果我们只能指定单一的Bean的AOP， 如果多个Bean需要创建多个ProxyFactoryBean 。而且，我们看到，我们的拦截器的粒度只控制到了类级别，类中所有的方法都进行了拦截。接下来，我们看看怎么样"),s("strong",[n._v("只拦截特定的方法")]),n._v("。")]),n._v(" "),s("p",[n._v("在上面的配置中，配置拦截器的时候，interceptorNames 除了指定为 Advice，是还可以指定为 Interceptor 和 Advisor 的。")]),n._v(" "),s("p",[n._v("这里我们来理解 "),s("strong",[n._v("Advisor")]),n._v(" 的概念，它也比较简单，"),s("strong",[n._v("它内部需要指定一个 Advice")]),n._v("，Advisor 决定该拦截哪些方法，拦截后需要完成的工作还是内部的 Advice 来做。")]),n._v(" "),s("p",[n._v("它有好几个实现类，这里我们使用实现类 "),s("strong",[n._v("NameMatchMethodPointcutAdvisor")]),n._v(" 来演示，从名字上就可以看出来，它需要我们给它提供方法名字，这样符合该配置的方法才会做拦截。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Bean\npublic NameMatchMethodPointcutAdvisor tulingLogAspect() {\n    NameMatchMethodPointcutAdvisor advisor=new NameMatchMethodPointcutAdvisor();\n    // 通知(Advice)  ：是我们的通知类\n    // 通知者(Advisor)：是经过包装后的细粒度控制方式。\n    advisor.setAdvice(tulingLogAdvice());\n    advisor.setMappedNames("div");\n    return  advisor;\n}\n\n/**\n * FactoryBean方式单个： ProxyFactoryBean\n *  控制粒度到方法\n * @return\n */\n@Bean\npublic ProxyFactoryBean calculateProxy(){\n    ProxyFactoryBean userService=new ProxyFactoryBean();\n    userService.setInterceptorNames("tulingLogAspect");   \n    userService.setTarget(tulingCalculate());\n    return userService;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("p",[s("em",[n._v("我们可以看到，"),s("em",[n._v("calculateProxy")]),n._v("这个 bean 配置了一个 advisor，advisor 内部有一个 advice。advisor 负责匹配方法，内部的 advice 负责实现方法包装。")])]),n._v(" "),s("p",[s("em",[n._v("注意，这里的 mappedNames 配置是可以指定多个的，用逗号分隔，可以是不同类中的方法。相比直接指定 advice，advisor 实现了更细粒度的控制，因为在这里配置 advice 的话，所有方法都会被拦截。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(' public static void main(String[] args) { \n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EalyAopMainConfig.class);\n    Calculate calculateProxy = ctx.getBean("calculateProxy",Calculate.class);\n    calculateProxy.div(1,1);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("输出结果如下，只有 div方法被拦截：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6394.png",alt:"0"}})]),n._v(" "),s("p",[n._v("上面，我们介绍完了 "),s("strong",[n._v("Advice、Advisor、Interceptor")]),n._v(" 三个概念，相信大家应该很容易就看懂它们了。")]),n._v(" "),s("p",[n._v('它们有个共同的问题，那就是我们得为每个 bean 都配置一个代理，之后获取 bean 的时候需要获取这个代理类的 bean 实例（如 ctx.getBean("calculateProxy",Calculate.class)），这显然非常不方便，不利于我们之后要使用的自动根据类型注入。下面介绍 autoproxy 的解决方案。')]),n._v(" "),s("p",[s("strong",[n._v("autoproxy")]),n._v("：从名字我们也可以看出来，它是实现自动代理，也就是说当 Spring 发现一个 bean 需要被切面织入的时候，Spring 会自动生成这个 bean 的一个代理来拦截方法的执行，确保定义的切面能被执行。")]),n._v(" "),s("p",[n._v("这里强调"),s("strong",[n._v("自动")]),n._v("，也就是说 Spring 会自动做这件事，而不用像前面介绍的，我们需要显式地指定代理类的 bean。")]),n._v(" "),s("p",[n._v("我们去掉原来的 "),s("strong",[n._v("ProxyFactoryBean")]),n._v(" 的配置，改为使用 "),s("strong",[n._v("BeanNameAutoProxyCreator")]),n._v(" 来配置：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n *autoProxy: BeanPostProcessor手动指定Advice方式  BeanNameAutoProxyCreator\n * @return\n */\n @Bean\n public BeanNameAutoProxyCreator autoProxyCreator() {\n BeanNameAutoProxyCreator beanNameAutoProxyCreator = new BeanNameAutoProxyCreator();\n //设置要创建代理的那些Bean的名字\n beanNameAutoProxyCreator.setBeanNames("tuling*");\n //设置拦截链名字(这些拦截器是有先后顺序的)\n beanNameAutoProxyCreator.setInterceptorNames("tulingLogInterceptor");\n return beanNameAutoProxyCreator;\n }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("配置很简单，beanNames 中可以使用正则来匹配 bean 的名字来增强多个类。 也就是说不再是配置某个 bean 的代理了。")]),n._v(" "),s("p",[s("em",[n._v("注意，这里的 InterceptorNames 和前面一样，也是可以配置成 Advisor 和 Interceptor 的。")])]),n._v(" "),s("p",[n._v("然后我们修改下使用的地方：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args) {\n\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EalyAopMainConfig.class);\n    Calculate tulingCalculate = ctx.getBean("tulingCalculate",Calculate.class);\n    tulingCalculate.div(1,1); \n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("发现没有，"),s("strong",[n._v("我们在使用的时候，完全不需要关心代理了")]),n._v("，直接使用原来的类型就可以了，这是非常方便的。")]),n._v(" "),s("p",[n._v("输出结果就是 OrderService 和 UserService 中的每个方法都得到了拦截：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6393.png",alt:"0"}})]),n._v(" "),s("p",[n._v("到这里，是不是发现 BeanNameAutoProxyCreator 非常好用，它需要指定被拦截类名的模式(如 *ServiceImpl)，它可以配置多次，这样就可以用来匹配不同模式的类了。")]),n._v(" "),s("p",[n._v("另外，在 BeanNameAutoProxyCreator 同一个包中，还有一个非常有用的类 "),s("strong",[n._v("DefaultAdvisorAutoProxyCreator")]),n._v("，比上面的 BeanNameAutoProxyCreator 还要方便。")]),n._v(" "),s("p",[n._v("之前我们说过，advisor 内部包装了 advice，advisor 负责决定拦截哪些方法，内部 advice 定义拦截后的逻辑。所以，仔细想想其实就是只要让我们的 advisor 全局生效就能实现我们需要的自定义拦截功能、拦截后的逻辑处理。")]),n._v(" "),s("p",[s("em",[n._v("BeanNameAutoProxyCreator 是自己匹配方法，然后交由内部配置 advice 来拦截处理；")])]),n._v(" "),s("p",[s("em",[n._v("而 DefaultAdvisorAutoProxyCreator 是让 ioc 容器中的所有 advisor 来匹配方法，advisor 内部都是有 advice 的，让它们内部的 advice 来执行拦截处理。")])]),n._v(" "),s("p",[n._v("1、我们需要再回头看下 Advisor 的配置，上面我们用了 NameMatchMethodPointcutAdvisor 这个类：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n *autoProxy: BeanPostProcessor手动指定Advice方式  BeanNameAutoProxyCreator\n * @return\n */\n @Bean\n public BeanNameAutoProxyCreator autoProxyCreator() {\n BeanNameAutoProxyCreator beanNameAutoProxyCreator = new BeanNameAutoProxyCreator();\n //设置要创建代理的那些Bean的名字\n beanNameAutoProxyCreator.setBeanNames("tuling*");\n //设置拦截链名字(这些拦截器是有先后顺序的)\n beanNameAutoProxyCreator.setInterceptorNames("tulingLogInterceptor");\n return beanNameAutoProxyCreator;\n }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("其实 Advisor 还有一个更加灵活的实现类 "),s("strong",[n._v("RegexpMethodPointcutAdvisor")]),n._v("，它能实现正则匹配，如：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// RegexpMethodPointcutAdvisor 按正则匹配类\n@Bean\npublic RegexpMethodPointcutAdvisor tulingLogAspectInterceptor() {\n    RegexpMethodPointcutAdvisor advisor=new RegexpMethodPointcutAdvisor();\n    advisor.setAdvice(tulingLogInterceptor());\n    advisor.setPattern("tuling.TulingCalculate.*");\n    return  advisor;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("也就是说，我们能通过配置 Advisor，精确定位到需要被拦截的方法，然后使用内部的 Advice 执行逻辑处理。")]),n._v(" "),s("p",[n._v("2、之后，我们需要配置 DefaultAdvisorAutoProxyCreator，它的配置非常简单，直接使用下面这段配置就可以了，它就会使得"),s("strong",[n._v("所有的 Advisor 自动生效")]),n._v("，无须其他配置。（记得把之前的autoProxyCreator配置去掉，无需创建2次代理）")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * BeanPostProcessor自动扫描Advisor方式  DefaultAdvisorAutoProxyCreator \n * @return\n */\n@Bean\npublic DefaultAdvisorAutoProxyCreator autoProxyCreator() {\n    return new DefaultAdvisorAutoProxyCreator();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("然后我们运行一下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static void main(String[] args) {\n\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EalyAopMainConfig.class);\n    Calculate tulingCalculate = ctx.getBean("tulingCalculate",Calculate.class);\n    tulingCalculate.div(1,1); \n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("输出：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6390.png",alt:"0"}})]),n._v(" "),s("p",[n._v("从结果可以看出，create "),s("em",[n._v("方法使用了 logArgsAdvisor 进行传参输出，query")]),n._v(" 方法使用了 logResultAdvisor 进行了返回结果输出。")]),n._v(" "),s("p",[n._v("到这里，Spring 1.2 的配置就要介绍完了。本文不会介绍得面面俱到，主要是关注最核心的配置，如果读者感兴趣，要学会自己去摸索，比如这里的 Advisor 就不只有我这里介绍的 NameMatchMethodPointcutAdvisor 和 RegexpMethodPointcutAdvisor，AutoProxyCreator 也不仅仅是 BeanNameAutoProxyCreator 和 DefaultAdvisorAutoProxyCreator。")]),n._v(" "),s("p",[s("em",[n._v("读到这里，我想对于很多人来说，就知道怎么去阅读 Spring AOP 源码了。")])]),n._v(" "),s("h4",{attrs:{id:"spring-2-0-aspectj-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-2-0-aspectj-配置"}},[n._v("#")]),n._v(" Spring 2.0 @AspectJ 配置")]),n._v(" "),s("h4",{attrs:{id:"spring-2-0-schema-based-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-2-0-schema-based-配置"}},[n._v("#")]),n._v(" Spring 2.0 schema-based 配置")]),n._v(" "),s("p",[n._v("这两种方式请参考基础文档："),s("a",{attrs:{href:"note://A668683C87AF489C88FA528F3552DB44"}},[n._v("05-SpringAOP的使用详解")])]),n._v(" "),s("h4",{attrs:{id:"aspectj编译方式实现aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aspectj编译方式实现aop"}},[n._v("#")]),n._v(" AspectJ编译方式实现AOP：")]),n._v(" "),s("p",[n._v("AspectJ方式不多讲，2大核心：")]),n._v(" "),s("ul",[s("li",[n._v("定义了切面表达式的语法和解析机制")]),n._v(" "),s("li",[n._v("提供了强大的织入工具")])]),n._v(" "),s("p",[n._v("它是通过织入的方式：直接将切面在【编译前、后】或【JVM加载的时候】进行织入到.class代码中。在实际生产中，我们用得最多的还是纯 Spring AOP，因为AspectJ学习成本高， Spring AOP已经能满足日常开发种的需求。 通过本AspectJ大家了解下 Spring Aop只用到了aspectj的设计理念（注解)和切点表达式配对。")]),n._v(" "),s("p",[n._v("AccountAspect .aj")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public aspect AccountAspect {\n    pointcut callPay(int amount, Account account):\n            call(boolean cn.tulingxueyuan.myAspectJ.model.Account.pay(int)) && args(amount) && target(account);\n    before(int amount, Account account): callPay(amount, account) {\n        System.out.println("[AccountAspect]付款前总金额: " + account.balance);\n        System.out.println("[AccountAspect]需要付款: " + amount);\n    }\n    boolean around(int amount, Account account): callPay(amount, account) {\n        if (account.balance < amount) {\n            System.out.println("[AccountAspect]拒绝付款!");\n            return false;\n        }\n        return proceed(amount, account);\n    }\n    after(int amount, Account balance): callPay(amount, balance) {\n        System.out.println("[AccountAspect]付款后，剩余：" + balance.balance);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("p",[n._v("MainApp.java")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class MainApp {\n        public static void main(String[] args) {\n            testCompileTime();\n        }\n        public static void testCompileTime() {\n            Account account = new Account();\n            System.out.println("==================");\n            account.pay(10);\n            account.pay(50);\n            System.out.println("==================");\n        }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("织入后：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class MainApp {\n    public MainApp() {\n    }\n\n    public static void main(String[] args) {\n        testCompileTime();\n    }\n\n    public static void testCompileTime() {\n        Account account = new Account();\n        System.out.println("==================");\n        byte var1 = 10;\n        Account var2 = account;\n\n        try {\n            AccountAspect.aspectOf().ajc$before$cn_tulingxueyuan_myAspectJ_AccountAspect$1$ed770766(var1, var2);\n            pay_aroundBody1$advice(var2, var1, AccountAspect.aspectOf(), var1, var2, (AroundClosure)null);\n        } catch (Throwable var8) {\n            AccountAspect.aspectOf().ajc$after$cn_tulingxueyuan_myAspectJ_AccountAspect$3$fa1eb897(var1, account);\n            throw var8;\n        }\n\n        AccountAspect.aspectOf().ajc$after$cn_tulingxueyuan_myAspectJ_AccountAspect$3$fa1eb897(var1, account);\n        byte var4 = 50;\n        Account var5 = account;\n\n        try {\n            AccountAspect.aspectOf().ajc$before$cn_tulingxueyuan_myAspectJ_AccountAspect$1$ed770766(var4, var5);\n            pay_aroundBody3$advice(var5, var4, AccountAspect.aspectOf(), var4, var5, (AroundClosure)null);\n        } catch (Throwable var7) {\n            AccountAspect.aspectOf().ajc$after$cn_tulingxueyuan_myAspectJ_AccountAspect$3$fa1eb897(var4, account);\n            throw var7;\n        }\n\n        AccountAspect.aspectOf().ajc$after$cn_tulingxueyuan_myAspectJ_AccountAspect$3$fa1eb897(var4, account);\n        System.out.println("==================");\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br")])]),s("p",[n._v("那AOP的4种实现方式就给大家总结到之里， 讲这块内容主要是为了减少待会大家阅读源码的障碍性。那么我们正式进入源码的领域：")]),n._v(" "),s("h3",{attrs:{id:"spring-aop源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop源码解析"}},[n._v("#")]),n._v(" spring aop源码解析")]),n._v(" "),s("p",[n._v("我们知道，spring中的aop是通过动态代理实现的，那么他具体是如何实现的呢？spring通过一个切面类，在他的类上加入@Aspect注解，定义一个Pointcut方法，最后定义一系列的增强方法。这样就完成一个对象的切面操作。")]),n._v(" "),s("p",[n._v("那么思考一下，按照上述的基础，要实现我们的aop，大致有以下思路：")]),n._v(" "),s("p",[n._v("1.找到所有的切面类")]),n._v(" "),s("p",[n._v("2.解析出所有的advice并保存")]),n._v(" "),s("p",[n._v("3.创建一个动态代理类")]),n._v(" "),s("p",[n._v("4.调用被代理类的方法时，找到他的所有增强器，并增强当前的方法")]),n._v(" "),s("p",[n._v("那么下面通过源码验证一下我们的猜测：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6492.png",alt:"0"}})]),n._v(" "),s("h4",{attrs:{id:"一、切面类的解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、切面类的解析"}},[n._v("#")]),n._v(" 一、切面类的解析")]),n._v(" "),s("p",[n._v("spring通过@EnableAspectJAutoProxy开启aop切面，在注解类上面发现@Import(AspectJAutoProxyRegistrar.class)，AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar，所以他会通过registerBeanDefinitions方法为我们容器导入beanDefinition。")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6477.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("进入解析切面的过程：")])]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6493.png",alt:"0"}})]),n._v(" "),s("p",[n._v("postProcessBeforeInstantiation是在任意bean创建的时候就调用了")]),n._v(" "),s("p",[n._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation")]),n._v(" "),s("p",[n._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInstantiation")]),n._v(" "),s("p",[n._v("org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation")]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessBeforeInstantiation")]),n._v(" "),s("p",[s("strong",[n._v("详细流程图：")])]),n._v(" "),s("p",[n._v("https://www.processon.com/view/link/5f1958a35653bb7fd24d0aad")]),n._v(" "),s("p",[n._v("追踪一下源码可以看到最终导入AnnotationAwareAspectJAutoProxyCreator，我们看一下他的类继承关系图，发现它实现了两个重要的接口，BeanPostProcessor和InstantiationAwareBeanPostProcessor")]),n._v(" "),s("p",[n._v("首先看InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation方法")]),n._v(" "),s("p",[n._v("Object postProcessBeforeInstantiation(Class beanClass, String beanName)（InstantiationAwareBeanPostProcessor）")]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessBeforeInstantiation")]),n._v(" "),s("p",[n._v("org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator#shouldSkip")]),n._v(" "),s("p",[n._v("org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator#findCandidateAdvisors")]),n._v(" "),s("p",[n._v("org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public List<Advisor> buildAspectJAdvisors() {\n                 //获取缓存中的aspectBeanNames\n        List<String> aspectNames = this.aspectBeanNames;\n\n        if (aspectNames == null) {\n            synchronized (this) {\n                aspectNames = this.aspectBeanNames;\n                if (aspectNames == null) {\n                    List<Advisor> advisors = new ArrayList<>();\n                    aspectNames = new ArrayList<>();\n                          //获取beanFactory中所有的beanNames\n                    String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n                            this.beanFactory, Object.class, true, false);\n                    for (String beanName : beanNames) {\n                        if (!isEligibleBean(beanName)) {\n                            continue;\n                        }\n                        // We must be careful not to instantiate beans eagerly as in this case they\n                        // would be cached by the Spring container but would not have been weaved.\n                        Class<?> beanType = this.beanFactory.getType(beanName);\n                        if (beanType == null) {\n                            continue;\n                        }\n                        //找出所有类上面含@Aspect注解的beanName\n                        if (this.advisorFactory.isAspect(beanType)) {\n                        //将找到的beanName放入aspectNames集合\n                            aspectNames.add(beanName);\n                            AspectMetadata amd = new AspectMetadata(beanType, beanName);\n                            if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {\n                                MetadataAwareAspectInstanceFactory factory =\n                                        new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName);\n                          //1.找到切面类的所有但是不包括@Pointcut注解的方法\n                           //2.筛选出来包含@Around, @Before, @After,@ AfterReturning， @AfterThrowing注解的方法\n                          //3.封装为List<Advisor>返回\n                                List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory);\n                                if (this.beanFactory.isSingleton(beanName)) {\n                            //将上面找出来的Advisor按照key为beanName，value为List<Advisor>的形式存入advisorsCache\n                                    this.advisorsCache.put(beanName, classAdvisors);\n                                }\n                                else {\n                                    this.aspectFactoryCache.put(beanName, factory);\n                                }\n                                advisors.addAll(classAdvisors);\n                            }\n                            else {\n                                // Per target or per this.\n                                if (this.beanFactory.isSingleton(beanName)) {\n                                    throw new IllegalArgumentException("Bean with name \'" + beanName +\n                                            "\' is a singleton, but aspect instantiation model is not singleton");\n                                }\n                                MetadataAwareAspectInstanceFactory factory =\n                                        new PrototypeAspectInstanceFactory(this.beanFactory, beanName);\n                                this.aspectFactoryCache.put(beanName, factory);\n                                advisors.addAll(this.advisorFactory.getAdvisors(factory));\n                            }\n                        }\n                    }\n                    this.aspectBeanNames = aspectNames;\n                    return advisors;\n                }\n            }\n        }\n\n        if (aspectNames.isEmpty()) {\n            return Collections.emptyList();\n        }\n        List<Advisor> advisors = new ArrayList<>();\n        for (String aspectName : aspectNames) {\n            //当再次进入该方法，会直接从advisorsCache缓存中获取\n            List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName);\n            if (cachedAdvisors != null) {\n                advisors.addAll(cachedAdvisors);\n            }\n            else {\n                MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName);\n                advisors.addAll(this.advisorFactory.getAdvisors(factory));\n            }\n        }\n        return advisors;\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br")])]),s("p",[n._v("流程图：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6499.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("解析的步骤：")])]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6503.png",alt:"0"}})]),n._v(" "),s("p",[n._v("最终将解析出来的advisor放入缓存，这里思考清楚 advisor和advise的区别")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6514.png",alt:"0"}})]),n._v(" "),s("p",[n._v("其实就是我们切面中的通知方法：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6516.png",alt:"0"}})]),n._v(" "),s("h4",{attrs:{id:"二、创建代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、创建代理"}},[n._v("#")]),n._v(" 二、创建代理")]),n._v(" "),s("p",[s("strong",[n._v("进入创建代理的过程：")])]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6519.png",alt:"0"}})]),n._v(" "),s("p",[n._v("postProcessAfterInitialization是在bean创建完成之后执行的")]),n._v(" "),s("p",[n._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean")]),n._v(" "),s("p",[n._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)")]),n._v(" "),s("p",[n._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization")]),n._v(" "),s("p",[n._v("org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization")]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessAfterInitialization")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6529.png",alt:"0"}})]),n._v(" "),s("p",[s("strong",[n._v("详细流程图：")])]),n._v(" "),s("p",[n._v("https://www.processon.com/view/link/5f1e93f25653bb7fd2549b7c")]),n._v(" "),s("p",[s("strong",[n._v("1.获取advisors:"),s("strong",[n._v("创建代理之前首先要判断当前bean是否满足被代理， 所以需要")]),n._v("将advisor从之前的缓存中拿出来")]),n._v("和当前bean 根据"),s("strong",[n._v("表达式")]),n._v("进行匹配：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6531.png",alt:"0"}})]),n._v(" "),s("p",[n._v("Object postProcessAfterInitialization(@Nullable Object bean, String beanName)（BeanPostProcessor）")]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessAfterInitialization")]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#wrapIfNecessary")]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#getAdvicesAndAdvisorsForBean")]),n._v(" "),s("p",[n._v("org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator#findCandidateAdvisors")]),n._v(" "),s("p",[n._v("上述代码的链路最终到了findCandidateAdvisors，我们发现在postProcessBeforeInstantiation方法中对查找到的Advisors做了缓存，所以这里只需要从缓存中取就好了")]),n._v(" "),s("p",[n._v("最后创建代理类，并将Advisors赋予代理类，缓存当前的代理类")]),n._v(" "),s("p",[n._v("**2.匹配:**根据advisors和当前的bean根据切点表达式进行匹配，看是否符合。")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6539.png",alt:"0"}})]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#findAdvisorsThatCanApply")]),n._v(" "),s("p",[n._v("org.springframework.aop.support.AopUtils#findAdvisorsThatCanApply")]),n._v(" "),s("p",[n._v("org.springframework.aop.support.AopUtils#canApply(org.springframework.aop.Advisor, java.lang.Class, boolean)         拿到PointCut")]),n._v(" "),s("p",[n._v("org.springframework.aop.support.AopUtils#canApply(org.springframework.aop.Pointcut, java.lang.Class, boolean)")]),n._v(" "),s("p",[n._v("org.springframework.aop.ClassFilter#matches    粗筛")]),n._v(" "),s("p",[n._v("org.springframework.aop.IntroductionAwareMethodMatcher#matches    精筛")]),n._v(" "),s("p",[n._v("**3.创建代理:**找到了 和当前Bean匹配的advisor说明满足创建动态代理的条件：")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6564.png",alt:"0"}})]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));\nthis.proxyTypes.put(cacheKey, proxy.getClass());\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("​    "),s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/6567.png",alt:"0"}})]),n._v(" "),s("p",[n._v("理解了上面两个重要的方法，我们只需要将他与创建bean的流程联系起来就可以知道代理对象创建的整个流程了，在before和after方法分别放置断点，我们可以看到他的整个调用链路")]),n._v(" "),s("h4",{attrs:{id:"三、代理类的调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、代理类的调用"}},[n._v("#")]),n._v(" 三、代理类的调用")]),n._v(" "),s("p",[n._v("https://www.processon.com/view/link/5f4dd513e0b34d1abc735998")]),n._v(" "),s("p",[n._v("前面的分析可知，spring将找到的增强器Advisors赋予了代理类，那么在执行只要将这些增强器应用到被代理的类上面就可以了，那么spring具体是怎么实现的呢，下面我们以jdk代理为例分析一下源码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        MethodInvocation invocation;\n        Object oldProxy = null;\n        boolean setProxyContext = false;\n                 //获取当前被代理类\n        TargetSource targetSource = this.advised.targetSource;\n        Object target = null;\n                // equals，hashcode等方法不做代理，直接调用\n        try {\n            if (!this.equalsDefined && AopUtils.isEqualsMethod(method)) {\n                // The target does not implement the equals(Object) method itself.\n                return equals(args[0]);\n            }\n            else if (!this.hashCodeDefined && AopUtils.isHashCodeMethod(method)) {\n                // The target does not implement the hashCode() method itself.\n                return hashCode();\n            }\n            else if (method.getDeclaringClass() == DecoratingProxy.class) {\n                // There is only getDecoratedClass() declared -> dispatch to proxy config.\n                return AopProxyUtils.ultimateTargetClass(this.advised);\n            }\n            else if (!this.advised.opaque && method.getDeclaringClass().isInterface() &&\n                    method.getDeclaringClass().isAssignableFrom(Advised.class)) {\n                // Service invocations on ProxyConfig with the proxy config...\n                return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);\n            }\n\n            Object retVal;\n                        // 将代理对象放到线程本地变量中\n            if (this.advised.exposeProxy) {\n                // Make invocation available if necessary.\n                oldProxy = AopContext.setCurrentProxy(proxy);\n                setProxyContext = true;\n            }\n\n            // Get as late as possible to minimize the time we "own" the target,\n            // in case it comes from a pool.\n            target = targetSource.getTarget();\n            Class<?> targetClass = (target != null ? target.getClass() : null);\n\n                        //将增加器装换为方法执行拦截器链\n            List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\n            // Check whether we have any advice. If we don\'t, we can fallback on direct\n            // reflective invocation of the target, and avoid creating a MethodInvocation.\n            if (chain.isEmpty()) {\n                // We can skip creating a MethodInvocation: just invoke the target directly\n                // Note that the final invoker must be an InvokerInterceptor so we know it does\n                // nothing but a reflective operation on the target, and no hot swapping or fancy proxying.\n                Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);\n                retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);\n            }\n            else {\n                //将拦截器链包装为ReflectiveMethodInvocation并执行\n                invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);\n                retVal = invocation.proceed();\n            }\n\n            // Massage return value if necessary.\n            Class<?> returnType = method.getReturnType();\n            if (retVal != null && retVal == target &&\n                    returnType != Object.class && returnType.isInstance(proxy) &&\n                    !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {\n                // Special case: it returned "this" and the return type of the method\n                // is type-compatible. Note that we can\'t help if the target sets\n                // a reference to itself in another returned object.\n                retVal = proxy;\n            }\n            else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {\n                throw new AopInvocationException(\n                        "Null return value from advice does not match primitive return type for: " + method);\n            }\n            return retVal;\n        }\n        finally {\n            if (target != null && !targetSource.isStatic()) {\n                // Must have come from TargetSource.\n                targetSource.releaseTarget(target);\n            }\n            if (setProxyContext) {\n                // Restore old proxy.\n                AopContext.setCurrentProxy(oldProxy);\n            }\n        }\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("通过上面代码可知，将增强器装换为方法拦截器链，最终包装为ReflectiveMethodInvocation执行它的proceed方法，那么我们就来看下具体如果执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Object proceed() throws Throwable {\n        //  当执行到最后一个拦截器的时候才会进入\n        if (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) {\n            return invokeJoinpoint();\n        }\n//获取集合当前需要运行的拦截器\n        Object interceptorOrInterceptionAdvice =\n                this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);\n        if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) {\n            // Evaluate dynamic method matcher here: static part will already have\n            // been evaluated and found to match.\n            InterceptorAndDynamicMethodMatcher dm =\n                    (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;\n            Class<?> targetClass = (this.targetClass != null ? this.targetClass : this.method.getDeclaringClass());\n            if (dm.methodMatcher.matches(this.method, targetClass, this.arguments)) {\n                return dm.interceptor.invoke(this);\n            }\n            else {\n                // Dynamic matching failed.\n                // Skip this interceptor and invoke the next in the chain.\n                return proceed();\n            }\n        }\n        else {\n            // 执行拦截器方法\n            return ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);\n        }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br")])]),s("p",[n._v("这样一看会感觉很蒙，其实追踪一下源码就很好理解了")]),n._v(" "),s("p",[n._v("org.springframework.aop.interceptor.ExposeInvocationInterceptor#invoke")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Object invoke(MethodInvocation mi) throws Throwable {\n        MethodInvocation oldInvocation = invocation.get();\n        invocation.set(mi);\n        try {\n            return mi.proceed();\n        }\n        finally {\n            invocation.set(oldInvocation);\n        }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("org.springframework.aop.aspectj.AspectJAfterThrowingAdvice#invoke")]),n._v(" "),s("p",[n._v("异常拦截器，当方法调用异常会被执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Object invoke(MethodInvocation mi) throws Throwable {\n        try {\n            return mi.proceed();\n        }\n        catch (Throwable ex) {\n            if (shouldInvokeOnThrowing(ex)) {\n                invokeAdviceMethod(getJoinPointMatch(), null, ex);\n            }\n            throw ex;\n        }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor#invoke")]),n._v(" "),s("p",[n._v("返回拦截器，方法执行失败，不会调用")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Object invoke(MethodInvocation mi) throws Throwable {\n        Object retVal = mi.proceed();\n        this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());\n        return retVal;\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("org.springframework.aop.aspectj.AspectJAfterAdvice#invoke")]),n._v(" "),s("p",[n._v("后置拦截器，总是执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Object invoke(MethodInvocation mi) throws Throwable {\n        try {\n            return mi.proceed();\n        }\n        finally {\n            invokeAdviceMethod(getJoinPointMatch(), null, null);\n        }\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor#invoke")]),n._v(" "),s("p",[n._v("前置拦截器")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public Object invoke(MethodInvocation mi) throws Throwable {\n        this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());\n        return mi.proceed();\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("​")]),n._v(" "),s("p",[n._v("这里用了责任链的设计模式，递归调用排序好的拦截器链。")])])}),[],!1,null,null,null);s.default=t.exports}}]);