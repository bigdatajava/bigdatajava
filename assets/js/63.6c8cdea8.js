(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{428:function(e,r,t){"use strict";t.r(r);var v=t(5),_=Object(v.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("这一部分，我们开始深入RocketMQ的源码。源码的解读是个非常困难的过程，每个人的理解程度都会不一样，也不太可能通过讲解把其中的细节全部讲明白。我们今天在解读源码时，采取逐层抽取的模式，希望能够给大家形成一个源码解读的大框架，帮助大家对源码形成自己的理解。")]),e._v(" "),r("p",[e._v("我们分为几条主线来解读源码：")]),e._v(" "),r("h2",{attrs:{id:"一、源码环境搭建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、源码环境搭建"}},[e._v("#")]),e._v(" 一、源码环境搭建")]),e._v(" "),r("h3",{attrs:{id:"_1、源码拉取"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、源码拉取"}},[e._v("#")]),e._v(" 1、源码拉取：")]),e._v(" "),r("p",[e._v("RocketMQ的官方Git仓库地址：https://github.com/apache/rocketmq 可以用git把项目clone下来或者直接下载代码包。")]),e._v(" "),r("p",[e._v("也可以到RocketMQ的官方网站上下载指定版本的源码： http://rocketmq.apache.org/dowloading/releases/")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/ca36df22924e8930a550116b530b7ca5/xmlnote/A0B6725FD53A499CAB1FC0260E87FFCD/41485",alt:"0"}})]),e._v(" "),r("p",[e._v("下载后就可以解压导入到IDEA中进行解读了。我们只要注意下是下载的4.7.1版本就行了。")]),e._v(" "),r("p",[e._v("源码下很多的功能模块，很容易让人迷失方向，我们只关注下几个最为重要的模块：")]),e._v(" "),r("ul",[r("li",[e._v("broker: broker 模块（broke 启动进程）")]),e._v(" "),r("li",[e._v("client ：消息客户端，包含消息生产者、消息消费者相关类")]),e._v(" "),r("li",[e._v("example: RocketMQ 例代码")]),e._v(" "),r("li",[e._v("namesrv：NameServer实现相关类（NameServer启动进程）")]),e._v(" "),r("li",[e._v("store：消息存储实现相关类")])]),e._v(" "),r("p",[e._v("各个模块的功能大都从名字上就能看懂。我们可以在有需要的时候再进去看源码。")]),e._v(" "),r("p",[e._v("但是这些模块有些东西还是要关注的。例如docs文件夹下的文档，以及各个模块下都有非常丰富的junit测试代码，这些都是非常有用的。")]),e._v(" "),r("h3",{attrs:{id:"_2、注解版源码引入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、注解版源码引入"}},[e._v("#")]),e._v(" 2、注解版源码引入")]),e._v(" "),r("p",[e._v("RocketMQ的源码中有个非常让人头疼的事情，就是他的代码注释几乎没有。为了帮助大家解读源码，我给大家准备了一个添加了自己注释的源码版本。 在配套资料当中。大家可以把这个版本导入IDEA来进行解读。")]),e._v(" "),r("p",[e._v("源码中对最为重要的注解设定了一个标记K1，相对不那么重要的注解设定了一个标记K2，而普通的注释就没有添加标记。大家可以在IDEA的TODO标签中配置这两个注解标记。")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/30.png",alt:""}})]),e._v(" "),r("h3",{attrs:{id:"_3、源码调试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、源码调试"}},[e._v("#")]),e._v(" 3、源码调试：")]),e._v(" "),r("p",[e._v("将源码导入IDEA后，需要先对源码进行编译。编译指令 clean install -Dmaven.test.skip=true")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/31.png",alt:""}})]),e._v(" "),r("p",[e._v("编译完成后就可以开始调试代码了。调试时需要按照以下步骤：")]),e._v(" "),r("p",[e._v("调试时，先在项目目录下创建一个conf目录，并从distribution拷贝broker.conf和logback_broker.xml和logback_namesrv.xml")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/100.png",alt:""}})]),e._v(" "),r("p",[e._v("注解版源码中已经复制好了。")]),e._v(" "),r("h4",{attrs:{id:"_3-1-启动nameserver"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-启动nameserver"}},[e._v("#")]),e._v(" 3.1 启动nameServer")]),e._v(" "),r("p",[e._v("展开namesrv模块，运行NamesrvStartup类即可启动NameServer")]),e._v(" "),r("p",[e._v("启动时，会报错，提示需要配置一个ROCKETMQ_HOME环境变量。这个环境变量我们可以在机器上配置，跟配置JAVA_HOME环境变量一样。也可以在IDEA的运行环境中配置。目录指向源码目录即可。")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/32.png",alt:""}})]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/33.png",alt:""}})]),e._v(" "),r("p",[e._v("配置完成后，再次执行，看到以下日志内容，表示NameServer启动成功")]),e._v(" "),r("p",[e._v("The Name Server boot success. serializeType=JSON")]),e._v(" "),r("h4",{attrs:{id:"_3-2-启动broker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-启动broker"}},[e._v("#")]),e._v(" 3.2 启动Broker")]),e._v(" "),r("p",[e._v("启动Broker之前，我们需要先修改之前复制的broker.conf文件")]),e._v(" "),r("p",[e._v("brokerClusterName = DefaultCluster")]),e._v(" "),r("p",[e._v("brokerName = broker-a")]),e._v(" "),r("p",[e._v("brokerId = 0")]),e._v(" "),r("p",[e._v("deleteWhen = 04")]),e._v(" "),r("p",[e._v("fileReservedTime = 48")]),e._v(" "),r("p",[e._v("brokerRole = ASYNC_MASTER")]),e._v(" "),r("p",[e._v("flushDiskType = ASYNC_FLUSH")]),e._v(" "),r("p",[e._v("# 自动创建Topic")]),e._v(" "),r("p",[e._v("autoCreateTopicEnable=true")]),e._v(" "),r("p",[e._v("# nameServ地址")]),e._v(" "),r("p",[e._v("namesrvAddr=127.0.0.1:9876")]),e._v(" "),r("p",[e._v("# 存储路径")]),e._v(" "),r("p",[e._v("storePathRootDir=E:\\RocketMQ\\data\\rocketmq\\dataDir")]),e._v(" "),r("p",[e._v("# commitLog路径")]),e._v(" "),r("p",[e._v("storePathCommitLog=E:\\RocketMQ\\data\\rocketmq\\dataDir\\commitlog")]),e._v(" "),r("p",[e._v("# 消息队列存储路径")]),e._v(" "),r("p",[e._v("storePathConsumeQueue=E:\\RocketMQ\\data\\rocketmq\\dataDir\\consumequeue")]),e._v(" "),r("p",[e._v("# 消息索引存储路径")]),e._v(" "),r("p",[e._v("storePathIndex=E:\\RocketMQ\\data\\rocketmq\\dataDir\\index")]),e._v(" "),r("p",[e._v("# checkpoint文件路径")]),e._v(" "),r("p",[e._v("storeCheckpoint=E:\\RocketMQ\\data\\rocketmq\\dataDir\\checkpoint")]),e._v(" "),r("p",[e._v("# abort文件存储路径")]),e._v(" "),r("p",[e._v("abortFile=E:\\RocketMQ\\data\\rocketmq\\dataDir\\abort")]),e._v(" "),r("p",[e._v("然后Broker的启动类是broker模块下的BrokerStartup。")]),e._v(" "),r("p",[e._v("启动Broker时，同样需要ROCETMQ_HOME环境变量，并且还需要配置一个-c 参数，指向broker.conf配置文件。")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/34.png",alt:""}})]),e._v(" "),r("p",[e._v("然后重新启动，即可启动Broker。")]),e._v(" "),r("h4",{attrs:{id:"_3-3-发送消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-发送消息"}},[e._v("#")]),e._v(" 3.3 发送消息")]),e._v(" "),r("p",[e._v("在源码的example模块下，提供了非常详细的测试代码。例如我们启动example模块下的org.apache.rocketmq.example.quickstart.Producer类即可发送消息。")]),e._v(" "),r("p",[e._v("但是在测试源码中，需要指定NameServer地址。这个NameServer地址有两种指定方式，一种是配置一个NAMESRV_ADDR的环境变量。另一种是在源码中指定。我们可以在源码中加一行代码指定NameServer")]),e._v(" "),r("p",[e._v('producer.setNamesrvAddr("127.0.0.1:9876");')]),e._v(" "),r("p",[e._v("然后就可以发送消息了。")]),e._v(" "),r("h4",{attrs:{id:"_3-4-消费消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-消费消息"}},[e._v("#")]),e._v(" 3.4 消费消息")]),e._v(" "),r("p",[e._v("我们可以使用同一模块下的org.apache.rocketmq.example.quickstart.Consumer类来消费消息。运行时同样需要指定NameServer地址")]),e._v(" "),r("p",[e._v('consumer.setNamesrvAddr("192.168.232.128:9876");')]),e._v(" "),r("p",[e._v("这样整个调试环境就搭建好了。")]),e._v(" "),r("h4",{attrs:{id:"_3-5-如何看源码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-如何看源码"}},[e._v("#")]),e._v(" 3.5 如何看源码")]),e._v(" "),r("p",[e._v("下面我们可以一边调试一边讲解源码了。源码中大部分关键的地方都已经添加了注释，文档中就不做过多记录了。")]),e._v(" "),r("p",[e._v("我们在看源码的时候，要注意，不要一看源码就一行行代码都逐步看，更不要期望一遍就把代码给看明白。这样会陷入到代码的复杂细节中，瞬间打击到放弃。")]),e._v(" "),r("p",[e._v("看源码时，需要用层层深入的方法。每一次阅读源码时，先了解程序执行的流程性代码，略过服务实现的细节性代码，形成大概的概念框架。然后再回头按同样的方法，逐步深入到之前略过的代码。这样才能从源码中看出一点门道来。")]),e._v(" "),r("h2",{attrs:{id:"二、nameserver启动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、nameserver启动"}},[e._v("#")]),e._v(" 二、NameServer启动")]),e._v(" "),r("p",[e._v("NameServer的启动入口为NamesrvStartup类的main方法，我们可以进行逐步调试。这次看源码，我们不要太过陷入其中的细节，我们的目的是先搞清楚NameServer的大体架构。")]),e._v(" "),r("h3",{attrs:{id:"_1、核心问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、核心问题"}},[e._v("#")]),e._v(" 1、核心问题")]),e._v(" "),r("p",[e._v("从之前的介绍中，我们已经了解到，在RocketMQ中，实际进行消息存储、推送等核心功能的是Broker。那NameServer具体做什么用呢？NameServer的核心作用其实就只有两个，一是维护Broker的服务地址并进行及时的更新。二是给Producer和Consumer提供服务获取Broker列表。")]),e._v(" "),r("p",[e._v("整体的流程：")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/35.png",alt:""}})]),e._v(" "),r("h3",{attrs:{id:"_2、源码重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、源码重点"}},[e._v("#")]),e._v(" 2、源码重点")]),e._v(" "),r("p",[e._v("整个NameServer的核心就是一个NamesrvController对象。这个controller对象就跟java Web开发中的Controller功能类似，都是响应客户端请求的。")]),e._v(" "),r("p",[e._v("在创建NamesrvController对象时，有两个关键的配置文件NamesrvConfig这个是NameServer自己运行需要的配置信息，还一个NettyServerConfig包含Netty服务端的配置参数，固定的占用了9876端口。")]),e._v(" "),r("p",[e._v("比较有意思的是这个9876端口并没有提供覆盖的方法")]),e._v(" "),r("p",[e._v("然后在启动服务时，启动了一个RemotingServer。这个就是用来响应请求的。")]),e._v(" "),r("p",[e._v("在关闭服务时，关闭了四个东西remotingServer，响应请求的服务；remotingExecutor Netty服务线程池; scheduledExecutorService 定时任务;fileWatchService 这个是用来跟踪acl配置的(acl的配置文件是实时热加载的)。")]),e._v(" "),r("p",[e._v("所以整个NameServer的结构是这样：")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/36.png",alt:""}})]),e._v(" "),r("h2",{attrs:{id:"三、broker启动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、broker启动"}},[e._v("#")]),e._v(" 三、Broker启动")]),e._v(" "),r("p",[e._v("Broker启动的入口在BrokerStartup这个类，可以从他的main方法开始调试。")]),e._v(" "),r("p",[e._v("启动过程关键点：")]),e._v(" "),r("p",[e._v("重点也是围绕一个BrokerController对象，先创建，然后再启动。")]),e._v(" "),r("p",[e._v("在BrokerStartup.createBrokerController方法中可以看到Broker的几个核心配置：")]),e._v(" "),r("p",[e._v("​\tBrokerConfig")]),e._v(" "),r("p",[e._v("​\tNettyServerConfig  ：Netty服务端占用了10911端口。又是一个神奇的端口。")]),e._v(" "),r("p",[e._v("​\tNettyClientConfig")]),e._v(" "),r("p",[e._v("​\tMessageStoreConfig")]),e._v(" "),r("p",[e._v("然后在BrokerController.start方法可以看到启动了一大堆Broker的核心服务，我们挑一些重要的")]),e._v(" "),r("p",[e._v("this.messageStore.start();启动核心的消息存储组件")]),e._v(" "),r("p",[e._v("this.remotingServer.start();")]),e._v(" "),r("p",[e._v("this.fastRemotingServer.start(); 启动两个Netty服务")]),e._v(" "),r("p",[e._v("this.brokerOuterAPI.start();启动客户端，往外发请求")]),e._v(" "),r("p",[e._v("BrokerController.this.registerBrokerAll： 向NameServer注册心跳。")]),e._v(" "),r("p",[e._v("this.brokerStatsManager.start();")]),e._v(" "),r("p",[e._v("this.brokerFastFailure.start();这也是一些负责具体业务的功能组件")]),e._v(" "),r("p",[e._v("我们现在不需要了解这些核心组件的具体功能，只要有个大概，Broker中有一大堆的功能组件负责具体的业务。")]),e._v(" "),r("p",[e._v("我们需要抽取出Broker的一个整体结构：")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/37.png",alt:""}})]),e._v(" "),r("h2",{attrs:{id:"四、broker注册"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、broker注册"}},[e._v("#")]),e._v(" 四、Broker注册")]),e._v(" "),r("p",[e._v("BrokerController.this.registerBrokerAll方法会发起向NameServer注册心跳。启动时会立即注册，同时也会启动一个线程池，以10秒延迟，默认30秒的间隔 持续向NameServer发送心跳。")]),e._v(" "),r("p",[e._v("BrokerController.this.registerBrokerAll这个方法就是注册心跳的入口。")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/38.png",alt:""}})]),e._v(" "),r("h2",{attrs:{id:"五、producer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五、producer"}},[e._v("#")]),e._v(" 五、Producer")]),e._v(" "),r("p",[e._v("注意Producer有两种。 一个是普通发送者DefaultMQProducer。这个只需要构建一个Netty客户端。")]),e._v(" "),r("p",[e._v("还一个是事务消息发送者： TransactionMQProducer。这个需要构建一个Netty客户端同时也要构建Netty服务端。")]),e._v(" "),r("p",[e._v("对于整个Producer的流程，其实还是挺复杂的，大致分两个步骤， start()方法，准备一大堆信息，send发送消息。我们先抽取下主线。")]),e._v(" "),r("p",[r("strong",[e._v("首先")]),e._v("，关于Borker路由信息的管理： Producer需要拉取Broker列表，然后跟Broker建立连接等等很多核心的流程，其实都是在发送消息时建立的。因为在启动时，还不知道要拉取哪个Topic的Broker列表呢。所以对于这个问题，我们关注的重点，不应该是start方法，而是send方法。")]),e._v(" "),r("p",[e._v("Send方法中，首先需要获得Topic的路由信息。这会从本地缓存中获取，如果本地缓存中没有，就从NameServer中去申请。")]),e._v(" "),r("p",[e._v("路由信息大致的管理流程：")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/39.png",alt:""}})]),e._v(" "),r("p",[r("strong",[e._v("然后")]),e._v(" 获取路由信息后，会选出一个MessageQueue去发送消息。这个选MessageQueue的方法就是一个索引自增然后取模的方式。")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/40.png",alt:""}})]),e._v(" "),r("p",[r("strong",[e._v("然后")]),e._v(" 封装Netty请求发送消息。消息发从到Borker后，会由一个CommitLog类写入到CommitLog文件中。")]),e._v(" "),r("h2",{attrs:{id:"六、消息存储"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六、消息存储"}},[e._v("#")]),e._v(" 六、消息存储")]),e._v(" "),r("p",[e._v("我们接着上面的流程，来关注下Broker是如何把消息进行存储的。")]),e._v(" "),r("p",[e._v("消息存储的入口在：DefaultMessageStore.putMessage")]),e._v(" "),r("p",[e._v("最终存储的文件有哪些？")]),e._v(" "),r("ul",[r("li",[e._v("commitLog：消息存储目录")]),e._v(" "),r("li",[e._v("config：运行期间一些配置信息")]),e._v(" "),r("li",[e._v("consumerqueue：消息消费队列存储目录")]),e._v(" "),r("li",[e._v("index：消息索引文件存储目录")]),e._v(" "),r("li",[e._v("abort：如果存在改文件寿命Broker非正常关闭")]),e._v(" "),r("li",[e._v("checkpoint：文件检查点，存储CommitLog文件最后一次刷盘时间戳、consumerquueue最后一次刷盘时间，index索引文件最后一次刷盘时间戳。")])]),e._v(" "),r("p",[r("strong",[e._v("6.1-commitLog写入")])]),e._v(" "),r("p",[e._v("CommitLog的doAppend方法就是Broker写入消息的实际入口。这个方法最终会把消息追加到MappedFile映射的一块内存里，并没有直接写入磁盘。写入消息的过程是串行的，一次只会允许一个线程写入。")]),e._v(" "),r("p",[r("strong",[e._v("6.2-分发ConsumeQueue和IndexFile")])]),e._v(" "),r("p",[e._v("​\t当CommitLog写入一条消息后，会有一个后台线程reputMessageService每隔1毫秒就会去拉取CommitLog中最新更新的一批消息，然后分别转发到ComsumeQueue和IndexFile里去，这就是他底层的实现逻辑。")]),e._v(" "),r("p",[e._v("​\t并且，如果服务异常宕机，会造成CommitLog和ConsumeQueue、IndexFile文件不一致，有消息写入CommitLog后，没有分发到索引文件，这样消息就丢失了。DefaultMappedStore的load方法提供了恢复索引文件的方法，入口在load方法。")]),e._v(" "),r("p",[r("strong",[e._v("6.3、文件同步刷盘与异步刷盘")])]),e._v(" "),r("p",[e._v("​\t入口：CommitLog.putMessage -> CommitLog.handleDiskFlush")]),e._v(" "),r("p",[e._v("​\t其中主要涉及到是否开启了对外内存。TransientStorePoolEnable。如果开启了堆外内存，会在启动时申请一个跟CommitLog文件大小一致的堆外内存，这部分内存就可以确保不会被交换到虚拟内存中。")]),e._v(" "),r("p",[r("strong",[e._v("6.4、过期文件删除")])]),e._v(" "),r("p",[e._v("​\t入口： DefaultMessageStore.addScheduleTask -> DefaultMessageStore.this.cleanFilesPeriodically()")]),e._v(" "),r("p",[e._v("​\t默认情况下， Broker会启动后台线程，每60秒，检查CommitLog、ConsumeQueue文件。然后对超过72小时的数据进行删除。也就是说，默认情况下， RocketMQ只会保存3天内的数据。这个时间可以通过fileReservedTime来配置。注意他删除时，并不会检查消息是否被消费了。")]),e._v(" "),r("p",[e._v("整个文件存储的核心入口入口在DefaultMessageStore的start方法中。")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/41.png",alt:""}})]),e._v(" "),r("p",[r("strong",[e._v("6.5文件存储部分的总结")]),e._v("：")]),e._v(" "),r("p",[e._v("RocketMQ的存储文件包括消息文件（Commitlog）、消息消费队列文件（ConsumerQueue）、Hash索引文件（IndexFile）、监测点文件（checkPoint）、abort（关闭异常文件）。单个消息存储文件、消息消费队列文件、Hash索引文件长度固定以便使用内存映射机制进行文件的读写操作。RocketMQ组织文件以文件的起始偏移量来命令文件，这样根据偏移量能快速定位到真实的物理文件。RocketMQ基于内存映射文件机制提供了同步刷盘和异步刷盘两种机制，异步刷盘是指在消息存储时先追加到内存映射文件，然后启动专门的刷盘线程定时将内存中的文件数据刷写到磁盘。")]),e._v(" "),r("p",[e._v("CommitLog，消息存储文件，RocketMQ为了保证消息发送的高吞吐量，采用单一文件存储所有主题消息，保证消息存储是完全的顺序写，但这样给文件读取带来了不便，为此RocketMQ为了方便消息消费构建了消息消费队列文件，基于主题与队列进行组织，同时RocketMQ为消息实现了Hash索引，可以为消息设置索引键，根据所以能够快速从CommitLog文件中检索消息。")]),e._v(" "),r("p",[e._v("当消息达到CommitLog后，会通过ReputMessageService线程接近实时地将消息转发给消息消费队列文件与索引文件。为了安全起见，RocketMQ引入abort文件，记录Broker的停机是否是正常关闭还是异常关闭，在重启Broker时为了保证CommitLog文件，消息消费队列文件与Hash索引文件的正确性，分别采用不同策略来恢复文件。")]),e._v(" "),r("p",[e._v("RocketMQ不会永久存储消息文件、消息消费队列文件，而是启动文件过期机制并在磁盘空间不足或者默认凌晨4点删除过期文件，文件保存72小时并且在删除文件时并不会判断该消息文件上的消息是否被消费。")]),e._v(" "),r("h2",{attrs:{id:"七、消费者"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#七、消费者"}},[e._v("#")]),e._v(" 七、消费者")]),e._v(" "),r("p",[e._v("消费者以消费者组的模式开展。消费者组之间有集群模式和广播模式两种消费模式。然后消费模式有推模式和拉模式。推模式是由拉模式封装组成。")]),e._v(" "),r("p",[e._v("集群模式下，消费队列负载均衡的通用原理：一个消费队列同一时间只能被一个消费者消费，而一个消费者可以同时消费多个队列。")]),e._v(" "),r("p",[e._v("消息顺序：RocketMQ只支持一个队列上的局部消息顺序，不保证全局消息顺序。 要实现顺序消息，可以把有序的消息指定为一个queue，或者给Topic只指定一个Queue，这个不推荐。")]),e._v(" "),r("p",[r("strong",[e._v("7.1、启动")])]),e._v(" "),r("p",[e._v("​\tDefaultMQPushConsumer.start方法")]),e._v(" "),r("p",[e._v("​\t启动过程不用太过关注，有个概念就行，然后客户端启动的核心是mQClientFactory 主要是启动了一大堆的服务。")]),e._v(" "),r("p",[e._v("​\t这些服务可以结合具体场景再进行深入。例如pullMessageService主要处理拉取消息服务，rebalanceService主要处理客户端的负载均衡。")]),e._v(" "),r("p",[r("strong",[e._v("7.2、消息拉取：")])]),e._v(" "),r("p",[e._v("​\t拉模式： PullMessageService")]),e._v(" "),r("p",[e._v("PullRequest里有messageQueue和processQueue，其中messageQueue负责拉取消息，拉取到后，将消息存入processQueue，进行处理。 存入后就可以清空messageQueue，继续拉取了。")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/42.png",alt:""}})]),e._v(" "),r("p",[r("strong",[e._v("7.3 长轮询拉取机制")])]),e._v(" "),r("p",[e._v("在Broker的配置中，有一个配置项longPollingEnable可以配置为true开启长轮询模式。我们看下这个是干什么的。")]),e._v(" "),r("p",[e._v("消息长轮询的处理入口在Broker端的PullMessageProcessor.processReuquest方法，这是一个非常长的方法。在403行左右。有这一段。")]),e._v(" "),r("p",[e._v("case ResponseCode.PULL_NOT_FOUND:")]),e._v(" "),r("p",[e._v("​           if (brokerAllowSuspend && hasSuspendFlag) {")]),e._v(" "),r("p",[e._v("​             long pollingTimeMills = suspendTimeoutMillisLong;")]),e._v(" "),r("p",[e._v("​             //消息长轮询")]),e._v(" "),r("p",[e._v("​             if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {")]),e._v(" "),r("p",[e._v("​               pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();")]),e._v(" "),r("p",[e._v("​            }")]),e._v(" "),r("p",[e._v("​             String topic = requestHeader.getTopic();")]),e._v(" "),r("p",[e._v("​             long offset = requestHeader.getQueueOffset();")]),e._v(" "),r("p",[e._v("​             int queueId = requestHeader.getQueueId();")]),e._v(" "),r("p",[e._v("​             PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,")]),e._v(" "),r("p",[e._v("​               this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);")]),e._v(" "),r("p",[e._v("​             this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);")]),e._v(" "),r("p",[e._v("​             response = null;")]),e._v(" "),r("p",[e._v("​             break;")]),e._v(" "),r("p",[e._v("​          }")]),e._v(" "),r("p",[e._v("如果开启了长轮询机制，PullRequestHoldService会每隔5S被环境去尝试检查是否有新的消息到来，并给客户端响应，或者直到超时才给客户端响应。消息的实时性比较差，为了避免这种情况，RocketMQ还有另外一个机制，当消息到达时唤醒挂起的线程再检查一次。")]),e._v(" "),r("p",[e._v("这个机制的入口在DefaultMessageStore的start方法中，会启动一个reputMessageService。然后在commitLog消息分发成功后，会检查如果开启了长轮询，就会唤醒NotifyMessageArrivingListener，进行一起请求线程的检查。")]),e._v(" "),r("p",[e._v("if (dispatchRequest.isSuccess()) {")]),e._v(" "),r("p",[e._v("​                 if (size > 0) {")]),e._v(" "),r("p",[e._v("​                   //分发CommitLog写入消息")]),e._v(" "),r("p",[e._v("​                   DefaultMessageStore.this.doDispatch(dispatchRequest);")]),e._v(" "),r("p",[e._v("​                   //K2 长轮询： 如果有消息到了主节点，并且开启了长轮询。")]),e._v(" "),r("p",[e._v("​                   if (BrokerRole.SLAVE != DefaultMessageStore.this.getMessageStoreConfig().getBrokerRole()")]),e._v(" "),r("p",[e._v("​                     && DefaultMessageStore.this.brokerConfig.isLongPollingEnable()) {")]),e._v(" "),r("p",[e._v("​                     //唤醒NotifyMessageArrivingListener的arriving方法，进行一次请求线程的检查")]),e._v(" "),r("p",[e._v("​                     DefaultMessageStore.this.messageArrivingListener.arriving(dispatchRequest.getTopic(),")]),e._v(" "),r("p",[e._v("​                       dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + 1,")]),e._v(" "),r("p",[e._v("​                       dispatchRequest.getTagsCode(), dispatchRequest.getStoreTimestamp(),")]),e._v(" "),r("p",[e._v("​                       dispatchRequest.getBitMap(), dispatchRequest.getPropertiesMap());")]),e._v(" "),r("p",[e._v("​                  }")]),e._v(" "),r("p",[r("strong",[e._v("7.4 客户端负载均衡策略")])]),e._v(" "),r("p",[e._v("1>在消费者示例的start方法中，启动RebalanceService，这个是客户端进行负载均衡策略的启动服务。他只负责根据负载均衡策略获取当前客户端分配到的MessageQueue示例。")]),e._v(" "),r("p",[e._v("五种负载策略，可以由Consumer的allocateMessageQueueStrategy属性来选择。")]),e._v(" "),r("p",[e._v("最常用的是AllocateMessageQueueAveragely平均分配和AllocateMessageQueueAveragelyByCircle平均轮询分配。")]),e._v(" "),r("p",[e._v("平均分配是把MessageQueue按组内的消费者个数平均分配。")]),e._v(" "),r("p",[e._v("而平均轮询分配就是把MessageQueue按组内的消费者一个一个轮询分配。")]),e._v(" "),r("p",[e._v("例如，六个队列q1,q2,q3,q4,q5,q6，分配给三个消费者c1,c2,c3")]),e._v(" "),r("p",[e._v("平均分配的结果就是:  c1:{q1,q2},c2:{q3,q4},c3{q5,q6}")]),e._v(" "),r("p",[e._v("平均轮询分配的结果就是： c1:{q1,q4},c2:{q2,q5},c3:{q3,q6}")]),e._v(" "),r("p",[e._v("2>消费的过程")]),e._v(" "),r("p",[e._v("消费的过程依然是在DefaultMQPushConsumerImpl的 consumeMessageService中。他有两个子类ConsumeMessageConcurrentlyService和ConsumeMessageOrderlyService")]),e._v(" "),r("p",[e._v("消费过程的入口在DefaultMQPushConsumerImpl的pullMessage中定义的PullCallback中。")]),e._v(" "),r("h2",{attrs:{id:"八、延迟消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#八、延迟消息"}},[e._v("#")]),e._v(" 八、延迟消息")]),e._v(" "),r("p",[e._v("延迟消息的处理入口在scheduleMessageService这个组件中。 他会在broker启动时也一起加载。")]),e._v(" "),r("p",[e._v("整个延迟消息的实现方式是这样的：")]),e._v(" "),r("p",[e._v("​    "),r("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/rocketmq/43.png",alt:""}})]),e._v(" "),r("p",[e._v("消息写入时，会将延迟消息转为写入到SCHEDULE_TOPIC_XXXX这个Topic中。这个系统内置的Topic有18个队列，对应18个延迟级别。")]),e._v(" "),r("p",[e._v("代码见CommitLog.putMessage方法。")]),e._v(" "),r("p",[e._v("然后ScheduleMessageService会每隔1秒钟执行一个executeOnTimeup任务，将消息从延迟队列中写入正常Topic中。 代码见ScheduleMessageService中的DeliverDelayedMessageTimerTask.executeOnTimeup方法。")]),e._v(" "),r("p",[r("strong",[e._v("消费者部分小结：")])]),e._v(" "),r("p",[e._v("RocketMQ消息消费方式分别为集群模式、广播模式。")]),e._v(" "),r("p",[e._v("消息队列负载由RebalanceService线程默认每隔20s进行一次消息队列负载，根据当前消费者组内消费者个数与主题队列数量按照某一种负载算法进行队列分配，分配原则为同一个消费者可以分配多个消息消费队列，同一个消息消费队列同一个时间只会分配给一个消费者。")]),e._v(" "),r("p",[e._v("消息拉取由PullMessageService线程根据RebalanceService线程创建的拉取任务进行拉取，默认每次拉取32条消息，提交给消费者消费线程后继续下一次消息拉取。如果消息消费过慢产生消息堆积会触发消息消费拉取流控。")]),e._v(" "),r("p",[e._v("并发消息消费指消费线程池中的线程可以并发对同一个消息队列的消息进行消费，消费成功后，取出消息队列中最小的消息偏移量作为消息消费进度偏移量存储在于消息消费进度存储文件中，集群模式消息消费进度存储在Broker（消息服务器），广播模式消息消费进度存储在消费者端。")]),e._v(" "),r("p",[e._v("RocketMQ不支持任意精度的定时调度消息，只支持自定义的消息延迟级别，例如1s、2s、5s等，可通过在broker配置文件中设置messageDelayLevel。")]),e._v(" "),r("p",[e._v("顺序消息一般使用集群模式，是指对消息消费者内的线程池中的线程对消息消费队列只能串行消费。并并发消息消费最本质的区别是消息消费时必须成功锁定消息消费队列，在Broker端会存储消息消费队列的锁占用情况。")]),e._v(" "),r("h2",{attrs:{id:"源码解读小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#源码解读小结"}},[e._v("#")]),e._v(" 源码解读小结")]),e._v(" "),r("p",[e._v("关于RocketMQ的源码部分，我们就带大家解读到这里。到目前为止，几个核心的流程我们已经解读完成了，我们按照由大到小，由粗到细的方式对几条主线进行了解读。通过解读源码，我们可以对之前提到的各种高级特性有更深入的理解。对有些有争议的问题，带着问题来源码中找答案是最好的。例如我们经常有人讨论NameServer全部挂了之后，生产者和消费者是否能够用他本地的缓存继续工作一段时间？ 这样的一些问题，看过源码之后是不是有更清晰的了解？")]),e._v(" "),r("p",[e._v("至于其他的代码，大家也可以按照自己的关注点，以业务线的方式来逐步解读。")])])}),[],!1,null,null,null);r.default=_.exports}}]);