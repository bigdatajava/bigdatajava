(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{612:function(a,s,n){"use strict";n.r(s);var t=n(5),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("U2FsdGVkX18/YXFv7OCfCrCcZLC/B2+DMP8aClOKNWlNLgea8jsnaaDmuK0L8hA7\nhr1HpnG3rJn8Bp3RqRcCHIch3ysWV+BVrvZrVfjHcUUwoiQTKg==\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("strong",[a._v("Seata调试环境搭建")])]),a._v(" "),s("p",[s("strong",[a._v("源码拉取")])]),a._v(" "),s("p",[a._v("源码： https://github.com/seata/seata.git")]),a._v(" "),s("p",[a._v("官方Demo:   https://github.com/seata/seata-samples.git")]),a._v(" "),s("p",[s("strong",[a._v("源码编译")])]),a._v(" "),s("p",[a._v("seata编译版本： checkout  tag  v1.4.0")]),a._v(" "),s("p",[a._v("源码编译问题：")]),a._v(" "),s("p",[a._v("seata源码导入到idea中第一次启动server端的时候，编译会报错如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152120735.png",alt:"image-20220623152120735"}})]),a._v(" "),s("p",[a._v("问题原因：缺少protobuf编译的java文件")]),a._v(" "),s("p",[a._v("解决方案：idea安装protobuf support插件，重启idea。")]),a._v(" "),s("p",[a._v("插件下载地址： https://github.com/ksprojects/protobuf-jetbrains-plugin")]),a._v(" "),s("p",[a._v("注意idea版本不能高于插件版本")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152129589.png",alt:"image-20220623152129589"}})]),a._v(" "),s("p",[a._v("通过protobuf:compile编译seata-serializer包")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152138166.png",alt:"image-20220623152138166"}})]),a._v(" "),s("p",[a._v("执行之后就会生成java代码")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152146204.png",alt:"image-20220623152146204"}})]),a._v(" "),s("p",[s("strong",[a._v("配置db存储模式")])]),a._v(" "),s("p",[a._v('修改resources下的file.conf，修改store.mode="db"，修改store.db相关配置')]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152154002.png",alt:"image-20220623152154002"}})]),a._v(" "),s("p",[s("strong",[a._v("启动Seata TC Server服务")])]),a._v(" "),s("p",[a._v("先启动nacos server服务，然后找到server模块下io.seata.server.Server.java，执行main方法启动")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152202236.png",alt:"image-20220623152202236"}})]),a._v(" "),s("p",[s("strong",[a._v("2. 核心接口和类")])]),a._v(" "),s("p",[s("strong",[a._v("ResourceManager")])]),a._v(" "),s("p",[a._v("ResourceManager是seata的重要组件之一，RM负责管理分支数据资源的事务。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152209738.png",alt:"image-20220623152209738"}})]),a._v(" "),s("p",[a._v("AbstractResourceManager实现ResourceManager提供模板方法。DefaultResourceManager适配所有的ResourceManager，所有方法调用都委派给对应负责的ResourceManager处理。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152221110.png",alt:"image-20220623152221110"}})]),a._v(" "),s("p",[s("strong",[a._v("DataSourceManager")])]),a._v(" "),s("p",[a._v("此为AT模式核心管理器，DataSourceManager继承AbstractResourceManager，管理数据库Resouce的注册，提交以及回滚等")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152228554.png",alt:"image-20220623152228554"}})]),a._v(" "),s("p",[s("strong",[a._v("AsyncWorker")])]),a._v(" "),s("p",[a._v("DataSourceManager事务提交委派给AsyncWorker进行提交的，因为都成功了，无需回滚成功的数据，只需要删除生成的操作日志就行，采用异步方式，提高效率。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("AsyncWorker#doBranchCommits\n> UndoLogManagerFactory.getUndoLogManager(dataSourceProxy.getDbType())\n    .batchDeleteUndoLog(xids, branchIds, conn)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("​")]),a._v(" "),s("p",[s("strong",[a._v("UndoLogManager")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152237276.png",alt:"image-20220623152237276"}})]),a._v(" "),s("p",[s("strong",[a._v("TransactionManager")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152243992.png",alt:"image-20220623152243992"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152250044.png",alt:"image-20220623152250044"}})]),a._v(" "),s("p",[s("strong",[a._v("DefaultTransactionManager")])]),a._v(" "),s("p",[a._v("TransactionManagerHolder为创建单例TransactionManager的工厂，可以使用EnhancedServiceLoader的spi机制加载用户自定义的类，默认为DefaultTransactionManager。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152259846.png",alt:"image-20220623152259846"}})]),a._v(" "),s("p",[s("strong",[a._v("GlobalTransaction")])]),a._v(" "),s("p",[a._v("GlobalTransaction接口提供给用户开启事务，提交，回滚，获取状态等方法。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152308018.png",alt:"image-20220623152308018"}})]),a._v(" "),s("p",[s("strong",[a._v("DefaultGlobalTransaction")])]),a._v(" "),s("p",[a._v("DefaultGlobalTransaction是GlobalTransaction接口的默认实现，它持有TransactionManager对象，默认开启事务超时时间为60秒，默认名称为default，因为调用者的业务方法可能多重嵌套创建多个GlobalTransaction对象开启事务方法，因此GlobalTransaction有GlobalTransactionRole角色属性，只有Launcher角色的才有开启、提交、回滚事务的权利。")]),a._v(" "),s("p",[s("strong",[a._v("GlobalTransactionContext")])]),a._v(" "),s("p",[a._v("GlobalTransactionContext为操作GlobalTransaction的工具类，提供创建新的GlobalTransaction，获取当前线程有的GlobalTransaction等方法。")]),a._v(" "),s("p",[s("strong",[a._v("GlobalTransactionScanner")])]),a._v(" "),s("p",[a._v("GlobalTransactionScanner继承AbstractAutoProxyCreator类，即实现了SmartInstantiationAwareBeanPostProcessor接口，会在spring容器启动初始化bean的时候，对bean进行代理操作。wrapIfNecessary为继承父类代理bean的核心方法，如果用户配置了service.disableGlobalTransaction为false属性则注解不生效直接返回，否则对GlobalTransactional或GlobalLock的方法进行拦截代理。")]),a._v(" "),s("p",[s("strong",[a._v("GlobalTransactionalInterceptor")])]),a._v(" "),s("p",[a._v("GlobalTransactionalInterceptor实现aop的MethodInterceptor接口，对有@GlobalTransactional或GlobalLock注解的方法进行代理。")]),a._v(" "),s("p",[s("strong",[a._v("TransactionalTemplate")])]),a._v(" "),s("p",[a._v("TransactionalTemplate模板类提供了一个开启事务，执行业务，成功提交和失败回滚的模板方法execute(TransactionalExecutor business)。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152318804.png",alt:"image-20220623152318804"}})]),a._v(" "),s("p",[s("strong",[a._v("Resource")])]),a._v(" "),s("p",[a._v("Resource能被ResourceManager管理并且能够关联GlobalTransaction。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152326595.png",alt:"image-20220623152326595"}})]),a._v(" "),s("p",[s("strong",[a._v("DataSourceProxy")])]),a._v(" "),s("p",[a._v("DataSourceProxy实现Resource接口，BranchType为AT自动模式。它继承AbstractDataSourceProxy代理类，所有的DataSource相关的方法调用传入的targetDataSource代理类的方法，除了创建connection方法为创建ConnectionProxy代理类。对象初始化时获取连接的jdbcUrl作为resourceId,并注册至DefaultResourceManager进行管理。同时还提供获取原始连接不被代理的getPlainConnection方法。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152333968.png",alt:"image-20220623152333968"}})]),a._v(" "),s("p",[s("strong",[a._v("ConnectionProxy")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('private void doCommit() throws SQLException {\n    if (context.inGlobalTransaction()) {\n        processGlobalTransactionCommit();\n    } else if (context.isGlobalLockRequire()) {\n        processLocalCommitWithGlobalLocks();\n    } else {\n        targetConnection.commit();\n    }\n}\nprivate void processGlobalTransactionCommit() throws SQLException {\n    try {\n        register();\n    } catch (TransactionException e) {\n        recognizeLockKeyConflictException(e, context.buildLockKeys());\n    }\n    try {\n        UndoLogManagerFactory.getUndoLogManager(this.getDbType()).flushUndoLogs(this);\n        targetConnection.commit();\n    } catch (Throwable ex) {\n        LOGGER.error("process connectionProxy commit error: {}", ex.getMessage(), ex);\n        report(false);\n        throw new SQLException(ex);\n    }\n    if (IS_REPORT_SUCCESS_ENABLE) {\n        report(true);\n    }\n    context.reset();\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br")])]),s("p",[s("strong",[a._v("ExecuteTemplate")])]),a._v(" "),s("p",[a._v("ExecuteTemplate为具体statement的execute，executeQuery和executeUpdate执行提供模板方法")]),a._v(" "),s("p",[s("strong",[a._v("Executor")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152348187.png",alt:"image-20220623152348187"}})]),a._v(" "),s("p",[s("strong",[a._v("SQLRecognizer")])]),a._v(" "),s("p",[a._v("SQLRecognizer识别sql类型，获取表名，表别名以及原生sql")]),a._v(" "),s("p",[s("strong",[a._v("UndoExecutorFactory")])]),a._v(" "),s("p",[a._v("UndoExecutorFactory根据sqlType生成对应的AbstractUndoExecutor。")]),a._v(" "),s("p",[a._v("UndoExecutor为生成执行undoSql的核心。如果全局事务回滚，它会根据beforeImage和afterImage以及sql类型生成对应的反向sql执行回滚数据，并添加脏数据校验机制，使回滚数据更加可靠。")]),a._v(" "),s("p",[s("strong",[a._v("DefaultCoordinator")])]),a._v(" "),s("p",[a._v("DefaultCoordinator即为TC，全局事务默认的事务协调器。它继承AbstractTCInboundHandler接口，为TC接收RM和TM的request请求数据，是进行相应处理的处理器。实现TransactionMessageHandler接口，去处理收到的RPC信息。实现ResourceManagerInbound接口，发送至RM的branchCommit，branchRollback请求。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152400340.png",alt:"image-20220623152400340"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152412406.png",alt:"image-20220623152412406"}})]),a._v(" "),s("p",[s("strong",[a._v("Core")])]),a._v(" "),s("p",[a._v("Core接口为seata处理全球事务协调器TC的核心处理器，它继承ResourceManagerOutbound接口，接受来自RM的rpc网络请求（branchRegister，branchReport，lockQuery）。同时继承TransactionManager接口，接受来自TM的rpc网络请求（begin，commit,rollback,getStatus），另外提供提供3个接口方法。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152506429.png",alt:"image-20220623152506429"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152518202.png",alt:"image-20220623152518202"}})]),a._v(" "),s("p",[s("strong",[a._v("ATCore")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152526707.png",alt:"image-20220623152526707"}})]),a._v(" "),s("p",[s("strong",[a._v("GlobalSession")])]),a._v(" "),s("p",[a._v("GlobalSession是seata协调器DefaultCoordinator管理维护的重要部件，当用户开启全局分布式事务，TM调用begin方法请求至TC，TC则创建GlobalSession实例对象，返回唯一的xid。它实现SessionLifecycle接口，提供begin，changeStatus，changeBranchStatus，addBranch，removeBranch等操作session和branchSession的方法。")]),a._v(" "),s("p",[s("strong",[a._v("BranchSession")])]),a._v(" "),s("p",[a._v("BranchSession为分支session，管理分支数据，受globalSession统一调度管理，它的lock和unlock方法由lockManger实现。")]),a._v(" "),s("p",[s("strong",[a._v("LockManager")])]),a._v(" "),s("p",[a._v("DefaultLockManager是LockManager的默认实现，它获取branchSession的lockKey，转换成List，委派Locker进行处理。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152538997.png",alt:"image-20220623152538997"}})]),a._v(" "),s("p",[s("strong",[a._v("Locker")])]),a._v(" "),s("p",[a._v("Locker接口提供根据行数据获取锁，释放锁，是否锁住和清除所有锁的方法。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/springboot/image-20220623152551161.png",alt:"image-20220623152551161"}})]),a._v(" "),s("h2",{attrs:{id:"_3-源码分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-源码分析"}},[a._v("#")]),a._v(" 3.源码分析")]),a._v(" "),s("p",[a._v("https://www.processon.com/view/link/6007f5c00791294a0e9b611a")]),a._v(" "),s("p",[a._v("https://www.processon.com/view/link/5f743063e0b34d0711f001d2")])])}),[],!1,null,null,null);s.default=e.exports}}]);