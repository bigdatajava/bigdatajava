(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{696:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"生成一个字节码文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成一个字节码文件"}},[t._v("#")]),t._v(" 生成一个字节码文件")]),t._v(" "),a("p",[t._v("首先我们编写一个简单的Java文件\n"),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/4ed2410da95ec1f38e88b72825bbd33a.jpg",alt:""}}),t._v("\n在文件夹中找到这个文件，可以看到只有一个.java 文件\n"),a("code",[t._v("Test.java")]),t._v("\n在命令行使用Javac命令，生成.class文件")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("javac Test.java\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("使用Javap -c命令，生成字节码文件")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("javap -c Test.class\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/7466483225d11ec406ca33dbc7f3c51b.jpg",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("下面通过JVM指令手册从Java底层对字节码进行分析")]),t._v(" "),a("h2",{attrs:{id:"字节码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节码分析"}},[t._v("#")]),t._v(" 字节码分析")]),t._v(" "),a("h3",{attrs:{id:"一、computer方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、computer方法"}},[t._v("#")]),t._v(" 一、computer方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/efe1435bfa684619ff03430011835b4f.jpg",alt:"在这里插入图片描述"}})]),t._v(" "),a("h4",{attrs:{id:"代码-int-a-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-int-a-1"}},[t._v("#")]),t._v(" 代码 int a=1")]),t._v(" "),a("p",[t._v("iconst_1:将int型常量①压入操作数栈\nistore_2:将int类型的值存入局部变量①\n结合"),a("strong",[t._v("JVM虚拟机内存结构图")]),t._v(" "),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/4ef3df9d782d991ff5ff3f049fe30e8a.jpg",alt:"在这里插入图片描述"}}),t._v("\n首先，给常量a在操作数栈中分配一个内存空间，即"),a("strong",[t._v("iconst_1")]),t._v("对应"),a("strong",[t._v("int a")]),t._v("\n然后，把常量a的值变成1，并存进局部变量表，即"),a("strong",[t._v("istore_2")]),t._v("对应"),a("strong",[t._v("a=1")])]),t._v(" "),a("h4",{attrs:{id:"代码-int-b-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-int-b-2"}},[t._v("#")]),t._v(" 代码 int b=2")]),t._v(" "),a("p",[t._v("iconst_2:将int型常量②压入操作数栈\nistore_2:将int类型的值存入局部变量②\n同理，很容易理解")]),t._v(" "),a("h4",{attrs:{id:"代码-return-a-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-return-a-b"}},[t._v("#")]),t._v(" 代码 return a+b")]),t._v(" "),a("p",[t._v("iload_1：从局部变量①中转载int类型值 即"),a("strong",[t._v("a的值1")]),t._v("\niload_2：从局部变量②中装载int类型值 即"),a("strong",[t._v("b的值2")]),t._v("\n即把变量a的值1给装载出来，放在操作数栈\n把变量b的值2给装载出来，放在操作数栈\n"),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/cd207f4d4598e2b88f98e66e90d11a02.png",alt:"在这里插入图片描述"}}),t._v("\niadd:执行int类型的加法\n即从操作数栈中依次弹出栈顶元素相加，最终生成的结果压回操作数栈\t"),a("strong",[t._v("a+b")])]),t._v(" "),a("p",[t._v("最后 ireturn:从当前方法返回int\n从操作数栈中弹出3\n即对应 "),a("strong",[t._v("return 3")])]),t._v(" "),a("h3",{attrs:{id:"二、main方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、main方法"}},[t._v("#")]),t._v(" 二、main方法")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/4323386d8ccae80c5acda944f56c71bc.jpg",alt:"在这里插入图片描述"}})]),t._v(" "),a("h4",{attrs:{id:"代码-test-test-new-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码-test-test-new-test"}},[t._v("#")]),t._v(" 代码 Test test = new Test()")]),t._v(" "),a("p",[t._v("new：创建一个对象\n我们对比上面的 int a 可以知道，new出来的test 也是一个局部变量，它被存放在main方法对应的栈帧内存区的局部变量表中，\n但在jvm底层，对象创建之后放在堆中，\n这样我们就可以发现栈和堆之间的一个联系。\n"),a("strong",[t._v("那么，这两个东西真的就是一样的嘛？")]),t._v("\n其实，局部变量表中存放的是堆中对象对应的内存地址，即可以理解为它存放一个指向堆中对象的指针。\n"),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/9a50052b03626cdb58373da49ebd22d2.jpg",alt:"在这里插入图片描述"}}),t._v("\n到这里，我们就可以通过字节码在jvm底层结构理解整个Java代码的执行过程。\n最后还有一个问题")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/8b4aa294e40f08ebcfa7608c4aae70fb.jpg",alt:"在这里插入图片描述"}}),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/d87949908b514ecaa95c42b18e45af3f.jpg",alt:"在这里插入图片描述"}}),t._v("\n在执行main方法时，会跳出去转到computer方法中，在执行完computer方法后，它会再回到main方法中，但是，它回到哪了呢？\n方法出口就记录着返回的位置。\n同样，程序计数器？\n"),a("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/jmm/d3d83be123ff0e7d528bb22381286bd4.jpg",alt:"在这里插入图片描述"}}),t._v("\n它记录着程序执行的位置，即行数。\n设想，在Java代码执行时，经常会有多个线程。学过操作系统的就知道，cpu在运行时，经常会发生线程被抢占，被执行的线程挂起。那么，这个线程被挂起之后，它重新运行时，从哪开始呢？\n程序计数器就解决了这个问题。")])])}),[],!1,null,null,null);a.default=e.exports}}]);