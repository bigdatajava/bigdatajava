(window.webpackJsonp=window.webpackJsonp||[]).push([[280],{648:function(s,n,a){"use strict";a.r(n);var e=a(5),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),n("p",[n("strong",[s._v("说明")])]),s._v(" "),n("p",[s._v("本文介绍Java破坏单例模式的方法。")]),s._v(" "),n("p",[s._v("单例模式（Singleton Pattern）是指确保一个类只有一个实例，并提供一个全局访问点。破坏单例模式的话，就是说可以创建出两个或两个以上的实例。本文通过静态内部类方式进行说明。")]),s._v(" "),n("p",[n("strong",[s._v("破坏单例的方法")])]),s._v(" "),n("p",[s._v("破坏单列模式的方式")]),s._v(" "),n("ol",[n("li",[s._v("反射")]),s._v(" "),n("li",[s._v("序列和反序列化")]),s._v(" "),n("li",[s._v("使用不同的类加载器")])]),s._v(" "),n("p",[s._v("上边1, 2都可以用枚举来解决，具体见："),n("a",{attrs:{href:"https://learn.skyofit.com/archives/279",target:"_blank",rel:"noopener noreferrer"}},[s._v("此文"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("h1",{attrs:{id:"反射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" "),n("strong",[s._v("反射")])]),s._v(" "),n("h2",{attrs:{id:"破坏单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#破坏单例模式"}},[s._v("#")]),s._v(" "),n("strong",[s._v("破坏单例模式")])]),s._v(" "),n("p",[s._v("单例类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package org.example.a;\npublic class Singleton {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("测试类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package org.example.a;\nimport java.lang.reflect.Constructor;\npublic class Demo {\n    public static void main(String[] args) {\n        Class<?> singletonClass = Singleton.class;\n        try {\n            Constructor c = singletonClass.getDeclaredConstructor(null);\n            c.setAccessible(true);\n            Object singleton1 = c.newInstance();\n            Object singleton2 = c.newInstance();\n            System.out.println(singleton1 == singleton2);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("执行结果（创建出了两个不同的实例）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"防止反射破坏单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防止反射破坏单例模式"}},[s._v("#")]),s._v(" "),n("strong",[s._v("防止反射破坏单例模式")])]),s._v(" "),n("p",[s._v("在构造函数里防止反射。")]),s._v(" "),n("p",[s._v("单例类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package org.example.a;\npublic class Singleton {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton() {\n        if (SingletonHolder.INSTANCE != null) {\n            throw new RuntimeException("不允许通过反射创建实例");\n        }\n    }\n    public static Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("测试类（通过反射获得实例）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package org.example.a;\nimport java.lang.reflect.Constructor;\npublic class Demo {\n    public static void main(String[] args) {\n        Class<?> singletonClass = Singleton.class;\n        try {\n            Constructor c = singletonClass.getDeclaredConstructor(null);\n            c.setAccessible(true);\n            Object singleton1 = c.newInstance();\n            System.out.println("singleton1 instance create successfully");\n            Object singleton2 = c.newInstance();\n            System.out.println("singleton2 instance create successfully");\n            System.out.println(singleton1 == singleton2);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("执行结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Caused by: java.lang.RuntimeException: 不允许通过反射创建实例\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("测试类（通过静态方法获得实例）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package org.example.a;\npublic class Demo {\n    public static void main(String[] args) {\n        Singleton singleton = Singleton.getInstance();\n        System.out.println("singleton create successfully");\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("执行结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("singleton create successfully\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"防止反射破坏单例模式的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防止反射破坏单例模式的原理"}},[s._v("#")]),s._v(" "),n("strong",[s._v("防止反射破坏单例模式的原理")])]),s._v(" "),n("p",[s._v("1.用getInstance")]),s._v(" "),n("p",[s._v("调用到new Singleton()时，此时INSTANCE是null，所以不会报错。")]),s._v(" "),n("p",[s._v("2.用反射")]),s._v(" "),n("p",[s._v("调用构造方法时，调用到Singleton.INSTANCE，然后会再new Singleton()赋值给Singleton.INSTANCE，此时，Singleton.INSTANCE不为null。")]),s._v(" "),n("h1",{attrs:{id:"序列化与反序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#序列化与反序列化"}},[s._v("#")]),s._v(" 序列化与反序列化")]),s._v(" "),n("h2",{attrs:{id:"破坏单例模式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#破坏单例模式-2"}},[s._v("#")]),s._v(" "),n("strong",[s._v("破坏单例模式")])]),s._v(" "),n("p",[s._v("单例类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package org.example.a;\nimport java.io.Serializable;\npublic class Singleton implements Serializable {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("测试类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package org.example.a;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\npublic class Demo {\n    public static void main(String[] args) {\n        Singleton s1 = null;\n        Singleton s2 = Singleton.getInstance();\n        FileOutputStream fos = null;\n        try {\n            //序列化到文件中\n            fos = new FileOutputStream("Singleton.obj");\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(s2);\n            oos.flush();\n            oos.close();\n            //从文件中反序列化为对象\n            FileInputStream fis = new FileInputStream("Singleton.obj");\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            s1 = (Singleton) ois.readObject();\n            ois.close();\n            //对比结果\n            System.out.println(s1 == s2);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("执行结果（产生多个实例）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"防止序列化-反序列化破坏单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防止序列化-反序列化破坏单例模式"}},[s._v("#")]),s._v(" "),n("strong",[s._v("防止序列化/反序列化破坏单例模式")])]),s._v(" "),n("p",[s._v("单例类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package org.example.a;\nimport java.io.Serializable;\npublic class Singleton implements Serializable {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n    private Object readResolve() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("测试类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package org.example.a;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\npublic class Demo {\n    public static void main(String[] args) {\n        Singleton s1 = null;\n        Singleton s2 = Singleton.getInstance();\n        FileOutputStream fos = null;\n        try {\n            //序列化到文件中\n            fos = new FileOutputStream("Singleton.obj");\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(s2);\n            oos.flush();\n            oos.close();\n            //从文件中反序列化为对象\n            FileInputStream fis = new FileInputStream("Singleton.obj");\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            s1 = (Singleton) ois.readObject();\n            ois.close();\n            //对比结果\n            System.out.println(s1 == s2);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("执行结果（保护了单例模式）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"防止序列化-反序列化破坏单例模式的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防止序列化-反序列化破坏单例模式的原理"}},[s._v("#")]),s._v(" "),n("strong",[s._v("防止序列化/反序列化破坏单例模式的原理")])]),s._v(" "),n("p",[s._v("追踪序列化源码")]),s._v(" "),n("p",[s._v("java.io.ObjectInputStream#readObject")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('readObject\t\t\t\t//java.io.ObjectInputStream\n    readObject0(false)\t//java.io.ObjectInputStream。case TC_OBJECT: return checkResolve(readOrdinaryObject(unshared));\n\t\treadOrdinaryObject(unshared)  //java.io.ObjectInputStream\n\t\t\tObject obj;\n\t\t\ttry {\n\t\t\t\t//判断是否有无参的构造函数,有的话就调用newInstance()实例化对象\n\t\t\t\tobj = desc.isInstantiable() ? desc.newInstance() : null;\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow (IOException) new InvalidClassException(\n\t\t\t\t\tdesc.forClass().getName(),\n\t\t\t\t\t"unable to create instance").initCause(ex);\n\t\t\t}\n\t\t\t//其他代码\n\t\t\tif (obj != null &&\n\t\t\t\thandles.lookupException(passHandle) == null &&\n\t\t\t\tdesc.hasReadResolveMethod()){\n\t\t\t\tObject rep = desc.invokeReadResolve(obj);\n\t\t\t\t//其他代码\n\t\t\t}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("关键是desc.hasReadResolveMethod()  ，这段代码的意思是查看你的单例类里面有没有readResolve方法，有的话就利用反射的方式执行这个方法，具体是desc.invokeReadResolve(obj)这段代码，返回单例对象。这里其实是实例化了两次，只不过新创建的对象没有被返回而已。如果创建对象的动作发生频率增大，就意味着内存分配开销也就随之增大，这也算是一个缺点吧。")]),s._v(" "),n("h1",{attrs:{id:"不同的类加载器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同的类加载器"}},[s._v("#")]),s._v(" 不同的类加载器")]),s._v(" "),n("h2",{attrs:{id:"不同的类加载器破坏单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同的类加载器破坏单例模式"}},[s._v("#")]),s._v(" "),n("strong",[s._v("不同的类加载器破坏单例模式")])]),s._v(" "),n("p",[s._v("单例类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package org.example.a;\nimport java.io.Serializable;\npublic class Singleton implements Serializable {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton() {\n    }\n    public static Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("测试类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package org.example.a;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Constructor;\npublic class Demo {\n    public static void main(String[] args) throws Throwable{\n        ClassLoader myLoader = new ClassLoader() {\n            @Override\n            public Class<?> loadClass(String name) throws ClassNotFoundException {\n                try {\n                    String fileName = name.substring(name.lastIndexOf(".") + 1) + ".class";\n                    InputStream is = getClass().getResourceAsStream(fileName);\n                    if (is == null) {\n                        return super.loadClass(name);\n                    }\n                    byte[] b = new byte[is.available()];\n                    is.read(b);\n                    return defineClass(name, b, 0, b.length);\n                } catch (IOException e) {\n                    throw new ClassNotFoundException(name);\n                }\n            }\n        };\n        // 由系统应用程序类加载器加载\n        Singleton instance1 = Singleton.getInstance();\n        // 自定义的类加载器加载\n        Class<?> clazz = myLoader.loadClass("org.example.a.Singleton");\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true);\n        Object instance2 = constructor.newInstance();\n        System.out.println(instance2.getClass());\n        System.out.println(instance2 == instance1);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[s._v("运行结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class org.example.a.Singleton\nfalse\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"防止不同的类加载器破坏单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防止不同的类加载器破坏单例模式"}},[s._v("#")]),s._v(" "),n("strong",[s._v("防止不同的类加载器破坏单例模式")])]),s._v(" "),n("p",[s._v("没有本质上解决方法。只能说，通过代码来保证使用的是同一个加载器：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private static Class<?> getClass(String classname) throws ClassNotFoundException {\n    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    if (loader == null) {\n        loader = Singleton.class.getClassLoader();\n    }\n    return (loader.loadClass(classname));\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);