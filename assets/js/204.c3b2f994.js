(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{570:function(a,e,t){"use strict";t.r(e);var v=t(5),s=Object(v.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("U2FsdGVkX183jDBwQ53bCFR7z29obe9q5NfM/QW5eKgL1GP1iccCIpzAwrZ396/+\n9gpICnSGfdP50N3e9yeh3wkFadYy+mC/IOi4vI04PuTjSFdsUgVsgY2kXStvGZzV\naw==\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h2",{attrs:{id:"cpu缓存一致性协议mesi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cpu缓存一致性协议mesi"}},[a._v("#")]),a._v(" CPU缓存一致性协议MESI")]),a._v(" "),e("p",[a._v("CPU高速缓存（Cache Memory）")]),a._v(" "),e("h2",{attrs:{id:"cpu为何要有高速缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cpu为何要有高速缓存"}},[a._v("#")]),a._v(" CPU为何要有高速缓存")]),a._v(" "),e("p",[a._v("CPU在摩尔定律的指导下以每18个月翻一番的速度在发展，然而内存和硬盘的发展速度远远不及CPU。这就造成了高性能能的内存和硬盘价格及其昂贵。然而CPU的高度运算需要高速的数据。为了解决这个问题，CPU厂商在CPU中内置了少量的高速缓存以解决I\\O速度和CPU运算速度之间的不匹配问题。")]),a._v(" "),e("p",[a._v("在CPU访问存储设备时，无论是存取数据抑或存取指令，都趋于聚集在一片连续的区域中，这就被称为局部性原理。")]),a._v(" "),e("blockquote",[e("p",[e("strong",[a._v("时间局部性（Temporal Locality）")]),a._v("：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。")]),a._v(" "),e("p",[a._v("比如循环、递归、方法的反复调用等。")]),a._v(" "),e("p",[e("strong",[a._v("空间局部性（Spatial Locality）")]),a._v("：如果一个存储器的位置被引用，那么将来他附近的位置也会被引用。")]),a._v(" "),e("p",[a._v("比如顺序执行的代码、连续创建的两个对象、数组等。")])]),a._v(" "),e("h3",{attrs:{id:"带有高速缓存的cpu执行计算的流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#带有高速缓存的cpu执行计算的流程"}},[a._v("#")]),a._v(" 带有高速缓存的CPU执行计算的流程")]),a._v(" "),e("ol",[e("li",[a._v("程序以及数据被加载到主内存")]),a._v(" "),e("li",[a._v("指令和数据被加载到CPU的高速缓存")]),a._v(" "),e("li",[a._v("CPU执行指令，把结果写到高速缓存")]),a._v(" "),e("li",[a._v("高速缓存中的数据写回主内存")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/21.png",alt:""}})]),a._v(" "),e("h3",{attrs:{id:"目前流行的多级缓存结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目前流行的多级缓存结构"}},[a._v("#")]),a._v(" 目前流行的多级缓存结构")]),a._v(" "),e("p",[a._v("由于CPU的运算速度超越了1级缓存的数据I\\O能力，CPU厂商又引入了多级的缓存结构。")]),a._v(" "),e("p",[a._v("多级缓存结构")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/22.png",alt:""}})]),a._v(" "),e("h2",{attrs:{id:"多核cpu多级缓存一致性协议mesi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多核cpu多级缓存一致性协议mesi"}},[a._v("#")]),a._v(" 多核CPU多级缓存一致性协议MESI")]),a._v(" "),e("p",[a._v("多核CPU的情况下有多个一级缓存，如何保证缓存内部数据的一致,不让系统数据混乱。这里就引出了一个一致性的协议MESI。")]),a._v(" "),e("h3",{attrs:{id:"mesi协议缓存状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mesi协议缓存状态"}},[a._v("#")]),a._v(" MESI协议缓存状态")]),a._v(" "),e("p",[a._v("MESI 是指4个状态的首字母。每个Cache line有4个状态，可用2个bit表示，它们分别是：")]),a._v(" "),e("p",[e("strong",[a._v("缓存行（Cache line）")]),a._v(":缓存存储数据的单元。")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("状态")]),a._v(" "),e("th",[a._v("描述")]),a._v(" "),e("th",[a._v("监听任务")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("M 修改 (Modified)")]),a._v(" "),e("td",[a._v("该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。")]),a._v(" "),e("td",[a._v("缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。")])]),a._v(" "),e("tr",[e("td",[a._v("E 独享、互斥 (Exclusive)")]),a._v(" "),e("td",[a._v("该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。")]),a._v(" "),e("td",[a._v("缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。")])]),a._v(" "),e("tr",[e("td",[a._v("S 共享 (Shared)")]),a._v(" "),e("td",[a._v("该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。")]),a._v(" "),e("td",[a._v("缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。")])]),a._v(" "),e("tr",[e("td",[a._v("I 无效 (Invalid)")]),a._v(" "),e("td",[a._v("该Cache line无效。")]),a._v(" "),e("td",[a._v("无")])])])]),a._v(" "),e("p",[e("strong",[a._v("注意：")])]),a._v(" "),e("p",[e("strong",[a._v("对于M和E状态而言总是精确的，他们在和该缓存行的真正状态是一致的，而S状态可能是非一致的")]),a._v("。如果一个缓存将处于S状态的缓存行作废了，而另一个缓存实际上可能已经独享了该缓存行，但是该缓存却不会将该缓存行升迁为E状态，这是因为其它缓存不会广播他们作废掉该缓存行的通知，同样由于缓存并没有保存该缓存行的copy的数量，因此（即使有这种通知）也没有办法确定自己是否已经独享了该缓存行。")]),a._v(" "),e("p",[a._v("从上面的意义看来E状态是一种投机性的优化：如果一个CPU想修改一个处于S状态的缓存行，总线事务需要将所有该缓存行的copy变成invalid状态，而修改E状态的缓存不需要使用总线事务。")]),a._v(" "),e("h3",{attrs:{id:"mesi状态转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mesi状态转换"}},[a._v("#")]),a._v(" MESI状态转换")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/23.png",alt:""}})]),a._v(" "),e("p",[a._v("理解该图的前置说明：")]),a._v(" "),e("p",[a._v("1.触发事件")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("触发事件")]),a._v(" "),e("th",[a._v("描述")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("本地读取（Local read）")]),a._v(" "),e("td",[a._v("本地cache读取本地cache数据")])]),a._v(" "),e("tr",[e("td",[a._v("本地写入（Local write）")]),a._v(" "),e("td",[a._v("本地cache写入本地cache数据")])]),a._v(" "),e("tr",[e("td",[a._v("远端读取（Remote read）")]),a._v(" "),e("td",[a._v("其他cache读取本地cache数据")])]),a._v(" "),e("tr",[e("td",[a._v("远端写入（Remote write）")]),a._v(" "),e("td",[a._v("其他cache写入本地cache数据")])])])]),a._v(" "),e("p",[a._v("2.cache分类：")]),a._v(" "),e("p",[a._v("前提：所有的cache共同缓存了主内存中的某一条数据。")]),a._v(" "),e("p",[a._v("本地cache:指当前cpu的cache。")]),a._v(" "),e("p",[a._v("触发cache:触发读写事件的cache。")]),a._v(" "),e("p",[a._v("其他cache:指既除了以上两种之外的cache。")]),a._v(" "),e("p",[a._v("注意：本地的事件触发 本地cache和触发cache为相同。")]),a._v(" "),e("p",[a._v("上图的切换解释：")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("状态")]),a._v(" "),e("th",[a._v("触发本地读取")]),a._v(" "),e("th",[a._v("触发本地写入")]),a._v(" "),e("th",[a._v("触发远端读取")]),a._v(" "),e("th",[a._v("触发远端写入")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[a._v("M状态（修改）")])]),a._v(" "),e("td",[a._v("本地cache:M 触发cache:M其他cache:I")]),a._v(" "),e("td",[a._v("本地cache:M 触发cache:M其他cache:I")]),a._v(" "),e("td",[a._v("本地cache:M→E→S触发cache:I→S其他cache:I→S同步主内存后修改为E独享,同步触发、其他cache后本地、触发、其他cache修改为S共享")]),a._v(" "),e("td",[a._v("本地cache:M→E→S→I触发cache:I→S→E→M其他cache:I→S→I同步和读取一样,同步完成后触发cache改为M，本地、其他cache改为I")])]),a._v(" "),e("tr",[e("td",[e("strong",[a._v("E状态（独享）")])]),a._v(" "),e("td",[a._v("本地cache:E触发cache:E其他cache:I")]),a._v(" "),e("td",[a._v("本地cache:E→M触发cache:E→M其他cache:I本地cache变更为M,其他cache状态应当是I（无效）")]),a._v(" "),e("td",[a._v("本地cache:E→S触发cache:I→S其他cache:I→S当其他cache要读取该数据时，其他、触发、本地cache都被设置为S(共享)")]),a._v(" "),e("td",[a._v("本地cache:E→S→I触发cache:I→S→E→M其他cache:I→S→I当触发cache修改本地cache独享数据时时，将本地、触发、其他cache修改为S共享.然后触发cache修改为独享，其他、本地cache修改为I（无效），触发cache再修改为M")])]),a._v(" "),e("tr",[e("td",[e("strong",[a._v("S状态(共享)")])]),a._v(" "),e("td",[a._v("本地cache:S触发cache:S其他cache:S")]),a._v(" "),e("td",[a._v("本地cache:S→E→M触发cache:S→E→M其他cache:S→I 当本地cache修改时，将本地cache修改为E,其他cache修改为I,然后再将本地cache为M状态")]),a._v(" "),e("td",[a._v("本地cache:S触发cache:S其他cache:S")]),a._v(" "),e("td",[a._v("本地cache:S→I触发cache：S→E→M其他cache:S→I当触发cache要修改本地共享数据时，触发cache修改为E（独享）,本地、其他cache修改为I（无效）,触发cache再次修改为M(修改)")])]),a._v(" "),e("tr",[e("td",[e("strong",[a._v("I状态（无效）")])]),a._v(" "),e("td",[a._v("本地cache:I→S或者I→E触发cache:I→S或者I →E其他cache:E、M、I→S、I本地、触发cache将从I无效修改为S共享或者E独享，其他cache将从E、M、I 变为S或者I")]),a._v(" "),e("td",[a._v("本地cache:I→S→E→M触发cache:I→S→E→M其他cache:M、E、S→S→I")]),a._v(" "),e("td",[a._v("既然是本cache是I，其他cache操作与它无关")]),a._v(" "),e("td",[a._v("既然是本cache是I，其他cache操作与它无关")])])])]),a._v(" "),e("p",[a._v("下图示意了，当一个cache line的调整的状态的时候，另外一个cache line 需要调整的状态。")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th"),a._v(" "),e("th",[a._v("M")]),a._v(" "),e("th",[a._v("E")]),a._v(" "),e("th",[a._v("S")]),a._v(" "),e("th",[e("strong",[a._v("I")])])])]),a._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[a._v("M")])]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("√")])]),a._v(" "),e("tr",[e("td",[e("strong",[a._v("E")])]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("√")])]),a._v(" "),e("tr",[e("td",[e("strong",[a._v("S")])]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("×")]),a._v(" "),e("td",[a._v("√")]),a._v(" "),e("td",[a._v("√")])]),a._v(" "),e("tr",[e("td",[e("strong",[a._v("I")])]),a._v(" "),e("td",[a._v("√")]),a._v(" "),e("td",[a._v("√")]),a._v(" "),e("td",[a._v("√")]),a._v(" "),e("td",[a._v("√")])])])]),a._v(" "),e("p",[a._v("举个栗子来说：")]),a._v(" "),e("p",[a._v("假设cache 1 中有一个变量x = 0的cache line 处于S状态(共享)。")]),a._v(" "),e("p",[a._v("那么其他拥有x变量的cache 2、cache 3等x的cache line调整为S状态（共享）或者调整为 I 状态（无效）。")]),a._v(" "),e("h3",{attrs:{id:"多核缓存协同操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多核缓存协同操作"}},[a._v("#")]),a._v(" 多核缓存协同操作")]),a._v(" "),e("p",[a._v("假设有三个CPU A、B、C，对应三个缓存分别是cache a、b、 c。在主内存中定义了x的引用值为0。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/24.png",alt:""}})]),a._v(" "),e("h3",{attrs:{id:"单核读取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单核读取"}},[a._v("#")]),a._v(" 单核读取")]),a._v(" "),e("p",[a._v("那么执行流程是：")]),a._v(" "),e("p",[a._v("CPU A发出了一条指令，从主内存中读取x。")]),a._v(" "),e("p",[a._v("从主内存通过bus读取到缓存中（远端读取Remote read）,这是该Cache line修改为E状态（独享）.")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/25.png",alt:""}})]),a._v(" "),e("h3",{attrs:{id:"双核读取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双核读取"}},[a._v("#")]),a._v(" 双核读取")]),a._v(" "),e("p",[a._v("那么执行流程是：")]),a._v(" "),e("p",[a._v("CPU A发出了一条指令，从主内存中读取x。")]),a._v(" "),e("p",[a._v("CPU A从主内存通过bus读取到 cache a中并将该cache line 设置为E状态。")]),a._v(" "),e("p",[a._v("CPU B发出了一条指令，从主内存中读取x。")]),a._v(" "),e("p",[a._v("CPU B试图从主内存中读取x时，CPU A检测到了地址冲突。这时CPU A对相关数据做出响应。此时x 存储于cache a和cache b中，x在chche a和cache b中都被设置为S状态(共享)。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/26.png",alt:""}})]),a._v(" "),e("h3",{attrs:{id:"修改数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改数据"}},[a._v("#")]),a._v(" 修改数据")]),a._v(" "),e("p",[a._v("那么执行流程是：")]),a._v(" "),e("p",[a._v("CPU A 计算完成后发指令需要修改x.")]),a._v(" "),e("p",[a._v("CPU A 将x设置为M状态（修改）并通知缓存了x的CPU B, CPU B将本地cache b中的x设置为I状态(无效)")]),a._v(" "),e("p",[a._v("CPU A 对x进行赋值。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/27.png",alt:""}})]),a._v(" "),e("h3",{attrs:{id:"同步数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步数据"}},[a._v("#")]),a._v(" 同步数据")]),a._v(" "),e("p",[a._v("那么执行流程是：")]),a._v(" "),e("p",[a._v("CPU B 发出了要读取x的指令。")]),a._v(" "),e("p",[a._v("CPU B 通知CPU A,CPU A将修改后的数据同步到主内存时cache a 修改为E（独享）")]),a._v(" "),e("p",[a._v("CPU A同步CPU B的x,将cache a和同步后cache b中的x设置为S状态（共享）。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/mysql2/28.png",alt:""}})]),a._v(" "),e("h2",{attrs:{id:"缓存行伪共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存行伪共享"}},[a._v("#")]),a._v(" 缓存行伪共享")]),a._v(" "),e("h3",{attrs:{id:"什么是伪共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是伪共享"}},[a._v("#")]),a._v(" 什么是伪共享？")]),a._v(" "),e("p",[a._v("CPU缓存系统中是以缓存行（cache line）为单位存储的。目前主流的CPU Cache 的 Cache Line 大小都是64Bytes。"),e("strong",[a._v("在多线程情况下，如果需要修改“共享同一个缓存行的变量”，就会无意中影响彼此的性能，这就是伪共享（False Sharing）")]),a._v("。")]),a._v(" "),e("p",[a._v("举个例子: 现在有2个long 型变量 a 、b，如果有t1在访问a，t2在访问b，而a与b刚好在同一个cache line中，此时t1先修改a，将导致b被刷新！")]),a._v(" "),e("h3",{attrs:{id:"怎么解决伪共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么解决伪共享"}},[a._v("#")]),a._v(" 怎么解决伪共享？")]),a._v(" "),e("p",[a._v("Java8中新增了一个注解：@sun.misc.Contended。加上这个注解的类会自动补齐缓存行，需要注意的是此注解默认是无效的，需要在jvm启动时设置 -XX:-RestrictContended 才会生效。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("@sun.misc.Contended\npublic final static class TulingVolatileLong {\n    public volatile long value = 0L;\n    //public long p1, p2, p3, p4, p5, p6;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h2",{attrs:{id:"mesi优化和他们引入的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mesi优化和他们引入的问题"}},[a._v("#")]),a._v(" MESI优化和他们引入的问题")]),a._v(" "),e("hr"),a._v(" "),e("p",[a._v("缓存的一致性消息传递是要时间的，这就使其切换时会产生延迟。当一个缓存被切换状态时其他缓存收到消息完成各自的切换并且发出回应消息这么一长串的时间中CPU都会等待所有缓存响应完成。可能出现的阻塞都会导致各种各样的性能问题和稳定性问题。")]),a._v(" "),e("h3",{attrs:{id:"cpu切换状态阻塞解决-存储缓存-store-bufferes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cpu切换状态阻塞解决-存储缓存-store-bufferes"}},[a._v("#")]),a._v(" CPU切换状态阻塞解决-存储缓存（Store Bufferes）")]),a._v(" "),e("p",[a._v("比如你需要修改本地缓存中的一条信息，那么你必须将I（无效）状态通知到其他拥有该缓存数据的CPU缓存中，并且等待确认。等待确认的过程会阻塞处理器，这会降低处理器的性能。应为这个等待远远比一个指令的执行时间长的多。")]),a._v(" "),e("p",[e("strong",[a._v("Store Bufferes")])]),a._v(" "),e("p",[a._v("为了避免这种CPU运算能力的浪费，Store Bufferes被引入使用。处理器把它想要写入到主存的值写到缓存，然后继续去处理其他事情。当所有失效确认（Invalidate Acknowledge）都接收到时，数据才会最终被提交。")]),a._v(" "),e("p",[a._v("这么做有两个风险")]),a._v(" "),e("p",[e("strong",[a._v("Store Bufferes的风险")])]),a._v(" "),e("p",[a._v("第一、就是处理器会尝试从存储缓存（Store buffer）中读取值，但它还没有进行提交。这个的解决方案称为Store Forwarding，它使得加载的时候，如果存储缓存中存在，则进行返回。")]),a._v(" "),e("p",[a._v("第二、保存什么时候会完成，这个并没有任何保证。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("value = 3；\nvoid exeToCPUA(){\n  value = 10;\n  isFinsh = true;\n}\nvoid exeToCPUB(){\n  if(isFinsh){\n    //value一定等于10？！\n    assert value == 10;\n  }\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("试想一下开始执行时，CPU A保存着finished在E(独享)状态，而value并没有保存在它的缓存中。（例如，Invalid）。在这种情况下，value会比finished更迟地抛弃存储缓存。完全有可能CPU B读取finished的值为true，而value的值不等于10。")]),a._v(" "),e("p",[e("strong",[a._v("即isFinsh的赋值在value赋值之前。")])]),a._v(" "),e("p",[a._v("这种在可识别的行为中发生的变化称为重排序（reordings）。注意，这不意味着你的指令的位置被恶意（或者好意）地更改。")]),a._v(" "),e("p",[a._v("它只是意味着其他的CPU会读到跟程序中写入的顺序不一样的结果。")]),a._v(" "),e("p",[a._v("顺便提一下NIO的设计和Store Bufferes的设计是非常相像的。")]),a._v(" "),e("h3",{attrs:{id:"硬件内存模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#硬件内存模型"}},[a._v("#")]),a._v(" 硬件内存模型")]),a._v(" "),e("p",[a._v("执行失效也不是一个简单的操作，它需要处理器去处理。另外，存储缓存（Store Buffers）并不是无穷大的，所以处理器有时需要等待失效确认的返回。这两个操作都会使得性能大幅降低。为了应付这种情况，引入了失效队列。它们的约定如下：")]),a._v(" "),e("ul",[e("li",[a._v("对于所有的收到的Invalidate请求，Invalidate Acknowlege消息必须立刻发送")]),a._v(" "),e("li",[a._v("Invalidate并不真正执行，而是被放在一个特殊的队列中，在方便的时候才会去执行。")]),a._v(" "),e("li",[a._v("处理器不会发送任何消息给所处理的缓存条目，直到它处理Invalidate。")])]),a._v(" "),e("p",[a._v("即便是这样处理器已然不知道什么时候优化是允许的，而什么时候并不允许。")]),a._v(" "),e("p",[a._v("干脆处理器将这个任务丢给了写代码的人。这就是内存屏障（Memory Barriers）。")]),a._v(" "),e("blockquote",[e("p",[a._v("写屏障 Store Memory Barrier(a.k.a. ST, SMB, smp_wmb)是一条告诉处理器在执行这之后的指令之前，应用所有已经在存储缓存（store buffer）中的保存的指令。")]),a._v(" "),e("p",[a._v("读屏障Load Memory Barrier (a.k.a. LD, RMB, smp_rmb)是一条告诉处理器在执行任何的加载前，先应用所有已经在失效队列中的失效操作的指令。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("void executedOnCpu0() {\n    value = 10;\n    //在更新数据之前必须将所有存储缓存（store buffer）中的指令执行完毕。\n    storeMemoryBarrier();\n    finished = true;\n}\nvoid executedOnCpu1() {\n    while(!finished);\n    //在读取之前将所有失效队列中关于该数据的指令执行完毕。\n    loadMemoryBarrier();\n    assert value == 10;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("h2",{attrs:{id:"附录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[a._v("#")]),a._v(" 附录")]),a._v(" "),e("h3",{attrs:{id:"mesi协议状态切换过程分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mesi协议状态切换过程分析"}},[a._v("#")]),a._v(" MESI协议状态切换过程分析")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://404500.oss-cn-beijing.aliyuncs.com/picture/spring/MESI%E5%8D%8F%E8%AE%AE%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.jpg",alt:"MESI协议状态切换过程分析"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);