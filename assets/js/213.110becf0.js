(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{556:function(n,s,a){"use strict";a.r(s);var t=a(1),i=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("U2FsdGVkX1/8RucGziFd1pKEtaOVTJaHcjdPej9llVbgyLPtclzaD3KbaNbnHZVZ\npqzM0JlGAxUBsBfiTfKMOq/BRr81UJ4nRqtFbhaGiRok7A==\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[s("strong",[n._v("任务性质类型")])]),n._v(" "),s("p",[s("strong",[n._v("CPU密集型（CPU-bound）")])]),n._v(" "),s("p",[n._v("CPU密集型也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是CPU Loading 100%，CPU要读/写I/O(硬盘/内存)，I/O在很短的时间就可以完成，而CPU还有许多运算要处理，CPU Loading很高。")]),n._v(" "),s("p",[n._v("在多重程序系统中，大部份时间用来做计算、逻辑判断等CPU动作的程序称之CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于CPU bound的程序。")]),n._v(" "),s("p",[n._v("CPU bound的程序一般而言CPU占用率相当高。这可能是因为任务本身不太需要访问I/O设备，也可能是因为程序是多线程实现因此屏蔽掉了等待I/O的时间。")]),n._v(" "),s("p",[n._v("线程数一般设置为：")]),n._v(" "),s("p",[n._v("线程数 = CPU核数+1 (现代CPU支持超线程)")]),n._v(" "),s("p",[s("strong",[n._v("IO密集型（I/O bound）")])]),n._v(" "),s("p",[n._v("IO密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，大部分的状况是CPU在等I/O (硬盘/内存) 的读/写操作，此时CPU Loading并不高。")]),n._v(" "),s("p",[n._v("I/O bound的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而pipeline做得不是很好，没有充分利用处理器能力。")]),n._v(" "),s("p",[n._v("线程数一般设置为：")]),n._v(" "),s("p",[n._v("线程数 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目")]),n._v(" "),s("p",[s("strong",[n._v("CPU密集型 vs IO密集型")])]),n._v(" "),s("p",[n._v("我们可以把任务分为计算密集型和IO密集型。")]),n._v(" "),s("p",[n._v("计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。")]),n._v(" "),s("p",[n._v("计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。")]),n._v(" "),s("p",[n._v("第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。")]),n._v(" "),s("p",[n._v("IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。")]),n._v(" "),s("p",[s("strong",[n._v("一、什么是 Fork/Join 框架？")])]),n._v(" "),s("p",[n._v("Fork/Join 框架是 Java7 提供了的一个用于并行执行任务的框架， 是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。")]),n._v(" "),s("p",[n._v("Fork 就是把一个大任务切分为若干子任务并行的执行，Join 就是合并这些子任务的执行结果，最后得到这个大任务的结果。比如计算1+2+.....＋10000，可以分割成 10 个子任务，每个子任务分别对 1000 个数进行求和，最终汇总这 10 个子任务的结果。如下图所示：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/80.png",alt:""}})]),n._v(" "),s("p",[n._v("Fork/Jion特性：")]),n._v(" "),s("ol",[s("li",[n._v("ForkJoinPool 不是为了替代 ExecutorService，而是它的补充，在某些应用场景下性能比 ExecutorService 更好。（见 Java Tip: When to use ForkJoinPool vs ExecutorService ）")]),n._v(" "),s("li",[n._v("ForkJoinPool 主要用于实现“分而治之”的算法，特别是分治之后递归调用的函数，例如 quick sort 等。")]),n._v(" "),s("li",[n._v("ForkJoinPool 最适合的是计算密集型的任务，如果存在 I/O，线程间同步，sleep() 等会造成线程长时间阻塞的情况时，最好配合使用 ManagedBlocker。")])]),n._v(" "),s("p",[s("strong",[n._v("二、工作窃取算法")])]),n._v(" "),s("p",[n._v("工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。")]),n._v(" "),s("p",[n._v("我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应，比如A线程负责处理A队列里的任务。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。")]),n._v(" "),s("p",[n._v("工作窃取算法的优点是充分利用线程进行并行计算，并减少了线程间的竞争，其缺点是在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/81.png",alt:""}})]),n._v(" "),s("ol",[s("li",[n._v("ForkJoinPool 的每个工作线程都维护着一个工作队列（WorkQueue），这是一个双端队列（Deque），里面存放的对象是任务（ForkJoinTask）。")]),n._v(" "),s("li",[n._v("每个工作线程在运行中产生新的任务（通常是因为调用了 fork()）时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是 LIFO 方式，也就是说每次从队尾取出任务来执行。")]),n._v(" "),s("li",[n._v("每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。")]),n._v(" "),s("li",[n._v("在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。")]),n._v(" "),s("li",[n._v("在既没有自己的任务，也没有可以窃取的任务时，进入休眠。")])]),n._v(" "),s("p",[s("strong",[n._v("三、fork/join的使用")])]),n._v(" "),s("p",[n._v("ForkJoinTask：我们要使用 ForkJoin 框架，必须首先创建一个 ForkJoin 任务。它提供在任务中执行 fork() 和 join() 操作的机制，通常情况下我们不需要直接继承 ForkJoinTask 类，而只需要继承它的子类，Fork/Join 框架提供了以下两个子类：")]),n._v(" "),s("p",[n._v("RecursiveAction：用于没有返回结果的任务。(比如写数据到磁盘，然后就退出了。 一个RecursiveAction可以把自己的工作分割成更小的几块， 这样它们可以由独立的线程或者CPU执行。 我们可以通过继承来实现一个RecursiveAction)")]),n._v(" "),s("p",[n._v("RecursiveTask ：用于有返回结果的任务。(可以将自己的工作分割为若干更小任务，并将这些子任务的执行合并到一个集体结果。 可以有几个水平的分割和合并)")]),n._v(" "),s("p",[n._v("CountedCompleter： 在任务完成执行后会触发执行一个自定义的钩子函数")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/82.png",alt:""}})]),n._v(" "),s("p",[n._v("ForkJoinPool ：ForkJoinTask 需要通过 ForkJoinPool 来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。")]),n._v(" "),s("p",[n._v("使用场景示例：")]),n._v(" "),s("p",[n._v("定义fork/join任务，如下示例，随机生成2000w条数据在数组当中，然后求和")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * RecursiveTask 并行计算，同步有返回值\n * ForkJoin框架处理的任务基本都能使用递归处理，比如求斐波那契数列等，但递归算法的缺陷是：\n *    一只会只用单线程处理，\n *    二是递归次数过多时会导致堆栈溢出；\n * ForkJoin解决了这两个问题，使用多线程并发处理，充分利用计算资源来提高效率，同时避免堆栈溢出发生。\n * 当然像求斐波那契数列这种小问题直接使用线性算法搞定可能更简单，实际应用中完全没必要使用ForkJoin框架，\n * 所以ForkJoin是核弹，是用来对付大家伙的，比如超大数组排序。\n * 最佳应用场景：多核、多内存、可以分割计算再合并的计算密集型任务\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class LongSum extends RecursiveTask<Long> {\n//任务拆分的最小阀值\n    static final int SEQUENTIAL_THRESHOLD = 1000;\n    static final long NPS = (1000L * 1000 * 1000);\n    static final boolean extraWork = true; // change to add more than just a sum\n    int low;\n    int high;\n    int[] array;\n    LongSum(int[] arr, int lo, int hi) {\n        array = arr;\n        low = lo;\n        high = hi;\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * fork()方法：将任务放入队列并安排异步执行，一个任务应该只调用一次fork()函数，除非已经执行完毕并重新初始化。\n * tryUnfork()方法：尝试把任务从队列中拿出单独处理，但不一定成功。\n * join()方法：等待计算完成并返回计算结果。\n * isCompletedAbnormally()方法：用于判断任务计算是否发生异常。\n */\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("protected Long compute() {\n //任务被拆分到足够小时，则开始求和\n        if (high - low <= SEQUENTIAL_THRESHOLD) {\n            long sum = 0;\n            for (int i = low; i < high; ++i) {\n                sum += array[i];\n            }\n            return sum;\n        } else {//如果任务任然过大，则继续拆分任务，本质就是递归拆分\n            int mid = low + (high - low) / 2;\n            LongSum left = new LongSum(array, low, mid);\n            LongSum right = new LongSum(array, mid, high);\n            left.fork();\n  right.fork();\n  long rightAns = right.join();\n  long leftAns = left.join();\n            return leftAns + rightAns;\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("p",[n._v("#执行fork/join任务")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class LongSumMain {\n   //获取逻辑处理器数量\n   static final int NCPU = Runtime.getRuntime().availableProcessors();\n   /** for time conversion */\n   static final long NPS = (1000L * 1000 * 1000);\n\n   static long calcSum;\n\n   static final boolean reportSteals = true;\n\n   public static void main(String[] args) throws Exception {\n      int[] array = Utils.buildRandomIntArray(20000000);\n      System.out.println("cpu-num:"+NCPU);\n      //单线程下计算数组数据总和\n      calcSum = seqSum(array);\n      System.out.println("seq sum=" + calcSum);\n\n      //采用fork/join方式将数组求和任务进行拆分执行，最后合并结果\n      LongSum ls = new LongSum(array, 0, array.length);\n      ForkJoinPool fjp  = new ForkJoinPool(4); //使用的线程数\n      ForkJoinTask<Long> result = fjp.submit(ls);\n      System.out.println("forkjoin sum=" + result.get());\n\n      fjp.shutdown();\n\n   }\n   static long seqSum(int[] array) {\n      long sum = 0;\n      for (int i = 0; i < array.length; ++i)\n         sum += array[i];\n      return sum;\n   }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])]),s("p",[s("strong",[n._v("四、fork/join框架原理")])]),n._v(" "),s("p",[s("strong",[n._v("常量介绍")])]),n._v(" "),s("p",[n._v("ForkJoinPool 与 内部类 WorkQueue 共享的一些常量:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// Constants shared across ForkJoinPool and WorkQueue\n\n// 限定参数\nstatic final int SMASK = 0xffff;        //  低位掩码，也是最大索引位\nstatic final int MAX_CAP = 0x7fff;        //  工作线程最大容量\nstatic final int EVENMASK = 0xfffe;        //  偶数低位掩码\nstatic final int SQMASK = 0x007e;        //  workQueues 数组最多64个槽位\n\n// ctl 子域和 WorkQueue.scanState 的掩码和标志位\nstatic final int SCANNING = 1;             // 标记是否正在运行任务\nstatic final int INACTIVE = 1 << 31;       // 失活状态  负数\nstatic final int SS_SEQ = 1 << 16;       // 版本戳，防止ABA问题\n\n// ForkJoinPool.config 和 WorkQueue.config 的配置信息标记\nstatic final int MODE_MASK = 0xffff << 16;  // 模式掩码\nstatic final int LIFO_QUEUE = 0; //LIFO队列\nstatic final int FIFO_QUEUE = 1 << 16;//FIFO队列\nstatic final int SHARED_QUEUE = 1 << 31;       // 共享模式队列，负数\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("p",[s("strong",[n._v("ForkJoinPool 中的相关常量和实例字段:")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//  低位和高位掩码\nprivate static final long SP_MASK = 0xffffffffL;\nprivate static final long UC_MASK = ~SP_MASK;\n\n// 活跃线程数\nprivate static final int AC_SHIFT = 48;\nprivate static final long AC_UNIT = 0x0001L << AC_SHIFT; //活跃线程数增量\nprivate static final long AC_MASK = 0xffffL << AC_SHIFT; //活跃线程数掩码\n\n// 工作线程数\nprivate static final int TC_SHIFT = 32;\nprivate static final long TC_UNIT = 0x0001L << TC_SHIFT; //工作线程数增量\nprivate static final long TC_MASK = 0xffffL << TC_SHIFT; //掩码\nprivate static final long ADD_WORKER = 0x0001L << (TC_SHIFT + 15);  // 创建工作线程标志\n\n// 池状态\nprivate static final int RSLOCK = 1;\nprivate static final int RSIGNAL = 1 << 1;\nprivate static final int STARTED = 1 << 2;\nprivate static final int STOP = 1 << 29;\nprivate static final int TERMINATED = 1 << 30;\nprivate static final int SHUTDOWN = 1 << 31;\n\n// 实例字段\nvolatile long ctl;                   // 主控制参数\nvolatile int runState;               // 运行状态锁\nfinal int config;                    // 并行度|模式\nint indexSeed;                       // 用于生成工作线程索引\nvolatile WorkQueue[] workQueues;     // 主对象注册信息，workQueue\nfinal ForkJoinWorkerThreadFactory factory;// 线程工厂\nfinal UncaughtExceptionHandler ueh;  // 每个工作线程的异常信息\nfinal String workerNamePrefix;       // 用于创建工作线程的名称\nvolatile AtomicLong stealCounter;    // 偷取任务总数，也可作为同步监视器\n\n/** 静态初始化字段 */\n//线程工厂\npublic static final ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;\n//启动或杀死线程的方法调用者的权限\nprivate static final RuntimePermission modifyThreadPermission;\n// 公共静态pool\nstatic final ForkJoinPool common;\n//并行度，对应内部common池\nstatic final int commonParallelism;\n//备用线程数，在tryCompensate中使用\nprivate static int commonMaxSpares;\n//创建workerNamePrefix(工作线程名称前缀)时的序号\nprivate static int poolNumberSequence;\n//线程阻塞等待新的任务的超时值(以纳秒为单位)，默认2秒\nprivate static final long IDLE_TIMEOUT = 2000L * 1000L * 1000L; // 2sec\n//空闲超时时间，防止timer未命中\nprivate static final long TIMEOUT_SLOP = 20L * 1000L * 1000L;  // 20ms\n//默认备用线程数\nprivate static final int DEFAULT_COMMON_MAX_SPARES = 256;\n//阻塞前自旋的次数，用在在awaitRunStateLock和awaitWork中\nprivate static final int SPINS  = 0;\n//indexSeed的增量\nprivate static final int SEED_INCREMENT = 0x9e3779b9;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br")])]),s("p",[s("strong",[n._v("ForkJoinPool 的内部状态都是通过一个64位的 long 型 变量ctl来存储，它由四个16位的子域组成:")])]),n._v(" "),s("ul",[s("li",[n._v("AC: 正在运行工作线程数减去目标并行度，高16位")]),n._v(" "),s("li",[n._v("TC: 总工作线程数减去目标并行度，中高16位")]),n._v(" "),s("li",[n._v("SS: 栈顶等待线程的版本计数和状态，中低16位")]),n._v(" "),s("li",[n._v("ID: 栈顶 WorkQueue 在池中的索引(poolIndex)，低16位")])]),n._v(" "),s("p",[n._v("ForkJoinPool.WorkQueue 中的相关属性:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//初始队列容量，2的幂\nstatic final int INITIAL_QUEUE_CAPACITY = 1 << 13;\n//最大队列容量\nstatic final int MAXIMUM_QUEUE_CAPACITY = 1 << 26; // 64M\n\n// 实例字段\nvolatile int scanState;    // Woker状态, <0: inactive; odd:scanning\nint stackPred;             // 记录前一个栈顶的ctl\nint nsteals;               // 偷取任务数\nint hint;                  // 记录偷取者索引，初始为随机索引\nint config;                // 池索引和模式\nvolatile int qlock;        // 1: locked, < 0: terminate; else 0\nvolatile int base;         //下一个poll操作的索引(栈底/队列头)\nint top;                   //  下一个push操作的索引(栈顶/队列尾)\nForkJoinTask<?>[] array;   // 任务数组\nfinal ForkJoinPool pool;   // the containing pool (may be null)\nfinal ForkJoinWorkerThread owner; // 当前工作队列的工作线程，共享模式下为null\nvolatile Thread parker;    // 调用park阻塞期间为owner，其他情况为null\nvolatile ForkJoinTask<?> currentJoin;  // 记录被join过来的任务\nvolatile ForkJoinTask<?> currentSteal; // 记录从其他工作队列偷取过来的任务\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("p",[s("strong",[n._v("1、异常处理")])]),n._v(" "),s("p",[n._v("ForkJoinTask 在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以 ForkJoinTask 提供了 isCompletedAbnormally() 方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过 ForkJoinTask 的 getException 方法获取异常。示例如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("if(task.isCompletedAbnormally()){\n   System.out.println(task.getException());\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("getException 方法返回 Throwable 对象，如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回 null。")]),n._v(" "),s("p",[n._v("**2、**"),s("strong",[n._v("ForkJoinPool构造函数")])]),n._v(" "),s("p",[n._v("其完整构造方法如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private ForkJoinPool(int parallelism,\n                     ForkJoinWorkerThreadFactory factory,\n                     UncaughtExceptionHandler handler,\n                     int mode,\n                     String workerNamePrefix) {\n    this.workerNamePrefix = workerNamePrefix;\n    this.factory = factory;\n    this.ueh = handler;\n    this.config = (parallelism & SMASK) | mode;\n    long np = (long)(-parallelism); // offset ctl counts\n    this.ctl = ((np << AC_SHIFT) & AC_MASK) | ((np << TC_SHIFT) & TC_MASK);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("重要参数解释")]),n._v(" "),s("p",[n._v("①parallelism：并行度（ the parallelism level），默认情况下跟我们机器的cpu个数保持一致，使用 Runtime.getRuntime().availableProcessors()可以得到我们机器运行时可用的CPU个数。")]),n._v(" "),s("p",[n._v("②factory：创建新线程的工厂（ the factory for creating new threads）。默认情况下使用ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory。")]),n._v(" "),s("p",[n._v("③handler：线程异常情况下的处理器（Thread.UncaughtExceptionHandler handler），该处理器在线程执行任务时由于某些无法预料到的错误而导致任务线程中断时进行一些处理，默认情况为null。")]),n._v(" "),s("p",[n._v("④asyncMode：这个参数要注意，在ForkJoinPool中，每一个工作线程都有一个独立的任务队列，"),s("strong",[n._v("asyncMode表示工作线程内的任务队列是采用何种方式进行调度，可以是先进先出FIFO，也可以是后进先出LIFO。如果为true，则线程池中的工作线程则使用先进先出方式进行任务调度，默认情况下是false。")])]),n._v(" "),s("p",[s("strong",[n._v("3、ForkJoinTask fork 方法")])]),n._v(" "),s("p",[n._v("fork() 做的工作只有一件事，既是"),s("strong",[n._v("把任务推入当前工作线程的工作队列里")]),n._v("。可以参看以下的源代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public final ForkJoinTask<V> fork() {\n    Thread t;\n    if ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread)\n        ((ForkJoinWorkerThread)t).workQueue.push(this);\n    else\n        ForkJoinPool.common.externalPush(this);\n    return this;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[s("strong",[n._v("4、ForkJoinTask join 方法")])]),n._v(" "),s("p",[n._v("join() 的工作则复杂得多，也是 join() 可以使得线程免于被阻塞的原因——不像同名的 Thread.join()。")]),n._v(" "),s("ol",[s("li",[n._v("检查调用 join() 的线程是否是 ForkJoinThread 线程。如果不是（例如 main 线程），则阻塞当前线程，等待任务完成。如果是，则不阻塞。")]),n._v(" "),s("li",[n._v("查看任务的完成状态，如果已经完成，直接返回结果。")]),n._v(" "),s("li",[n._v("如果任务尚未完成，但处于自己的工作队列内，则完成它。")]),n._v(" "),s("li",[n._v("如果任务已经被其他的工作线程偷走，则窃取这个小偷的工作队列内的任务（以 "),s("em",[n._v("FIFO")]),n._v(" 方式），执行，以期帮助它早日完成欲 join 的任务。")]),n._v(" "),s("li",[n._v("如果偷走任务的小偷也已经把自己的任务全部做完，正在等待需要 join 的任务时，则找到小偷的小偷，帮助它完成它的任务。")]),n._v(" "),s("li",[n._v("递归地执行第5步。")])]),n._v(" "),s("p",[n._v("将上述流程画成序列图的话就是这个样子：")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/83.png",alt:""}})]),n._v(" "),s("p",[s("strong",[n._v("5、ForkJoinPool.submit 方法")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public <T> ForkJoinTask<T> submit(ForkJoinTask<T> task) {\n    if (task == null)\n        throw new NullPointerException();\n//提交到工作队列\n    externalPush(task);\n    return task;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("ForkJoinPool 自身拥有工作队列，这些工作队列的作用是用来接收由外部线程（非 ForkJoinThread 线程）提交过来的任务，而这些工作队列被称为 "),s("em",[n._v("submitting queue")]),n._v(" 。")]),n._v(" "),s("p",[n._v("submit() 和 fork() 其实没有本质区别，只是提交对象变成了 submitting queue 而已（还有一些同步，初始化的操作）。submitting queue 和其他 work queue 一样，是工作线程”窃取“的对象，因此当其中的任务被一个工作线程成功窃取时，就意味着提交的任务真正开始进入执行阶段。")]),n._v(" "),s("p",[s("strong",[n._v("6、Fork/Join框架执行流程")])]),n._v(" "),s("p",[n._v("ForkJoinPool 中的任务执行分两种:")]),n._v(" "),s("ul",[s("li",[n._v("直接通过 FJP 提交的外部任务(external/submissions task)，存放在 workQueues 的偶数槽位；")]),n._v(" "),s("li",[n._v("通过内部 fork 分割的子任务(Worker task)，存放在 workQueues 的奇数槽位。")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/nylg/picture/raw/master/lock/84.png",alt:""}})])])}),[],!1,null,null,null);s.default=i.exports}}]);